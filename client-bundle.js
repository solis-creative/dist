/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 169);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(24);

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var emptyFunction = __webpack_require__(14);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _enhancer = __webpack_require__(96);

var _enhancer2 = _interopRequireDefault(_enhancer);

var _plugins = __webpack_require__(101);

var _plugins2 = _interopRequireDefault(_plugins);

var _style = __webpack_require__(240);

var _style2 = _interopRequireDefault(_style);

var _styleRoot = __webpack_require__(238);

var _styleRoot2 = _interopRequireDefault(_styleRoot);

var _getState = __webpack_require__(98);

var _getState2 = _interopRequireDefault(_getState);

var _keyframes = __webpack_require__(241);

var _keyframes2 = _interopRequireDefault(_keyframes);

var _resolveStyles = __webpack_require__(102);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function Radium(ComposedComponent) {
  return (0, _enhancer2.default)(ComposedComponent);
}

Radium.Plugins = _plugins2.default;
Radium.Style = _style2.default;
Radium.StyleRoot = _styleRoot2.default;
Radium.getState = _getState2.default;
Radium.keyframes = _keyframes2.default;

if (process.env.NODE_ENV !== 'production') {
  Radium.TestMode = {
    clearState: _resolveStyles.__clearStateForTests,
    disable: _resolveStyles.__setTestMode.bind(null, false),
    enable: _resolveStyles.__setTestMode.bind(null, true)
  };
}

exports.default = Radium;
module.exports = exports['default'];
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(4);

var DOMProperty = __webpack_require__(18);
var ReactDOMComponentFlags = __webpack_require__(106);

var invariant = __webpack_require__(2);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var Flags = ReactDOMComponentFlags;

var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

/**
 * Check if a given node should be cached.
 */
function shouldPrecacheNode(node, nodeID) {
  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
}

/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;
  }
  return component;
}

/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
function precacheNode(inst, node) {
  var hostInst = getRenderedHostOrTextFromComponent(inst);
  hostInst._hostNode = node;
  node[internalInstanceKey] = hostInst;
}

function uncacheNode(inst) {
  var node = inst._hostNode;
  if (node) {
    delete node[internalInstanceKey];
    inst._hostNode = null;
  }
}

/**
 * Populate `_hostNode` on each child of `inst`, assuming that the children
 * match up with the DOM (element) children of `node`.
 *
 * We cache entire levels at once to avoid an n^2 problem where we access the
 * children of a node sequentially and have to walk from the start to our target
 * node every time.
 *
 * Since we update `_renderedChildren` and the actual DOM at (slightly)
 * different times, we could race here and see a newer `_renderedChildren` than
 * the DOM nodes we see. To avoid this, ReactMultiChild calls
 * `prepareToManageChildren` before we change `_renderedChildren`, at which
 * time the container's child nodes are always cached (until it unmounts).
 */
function precacheChildNodes(inst, node) {
  if (inst._flags & Flags.hasCachedChildNodes) {
    return;
  }
  var children = inst._renderedChildren;
  var childNode = node.firstChild;
  outer: for (var name in children) {
    if (!children.hasOwnProperty(name)) {
      continue;
    }
    var childInst = children[name];
    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
    if (childID === 0) {
      // We're currently unmounting this child in ReactMultiChild; skip it.
      continue;
    }
    // We assume the child nodes are in the same order as the child instances.
    for (; childNode !== null; childNode = childNode.nextSibling) {
      if (shouldPrecacheNode(childNode, childID)) {
        precacheNode(childInst, childNode);
        continue outer;
      }
    }
    // We reached the end of the DOM children without finding an ID match.
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
  }
  inst._flags |= Flags.hasCachedChildNodes;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest;
  var inst;
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
    if (parents.length) {
      precacheChildNodes(inst, node);
    }
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode(node) {
  var inst = getClosestInstanceFromNode(node);
  if (inst != null && inst._hostNode === node) {
    return inst;
  } else {
    return null;
  }
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance(inst) {
  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  if (inst._hostNode) {
    return inst._hostNode;
  }

  // Walk up the tree until we find an ancestor whose DOM node we have cached.
  var parents = [];
  while (!inst._hostNode) {
    parents.push(inst);
    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
    inst = inst._hostParent;
  }

  // Now parents contains each ancestor that does *not* have a cached native
  // node, and `inst` is the deepest ancestor that does.
  for (; parents.length; inst = parents.pop()) {
    precacheChildNodes(inst, inst._hostNode);
  }

  return inst._hostNode;
}

var ReactDOMComponentTree = {
  getClosestInstanceFromNode: getClosestInstanceFromNode,
  getInstanceFromNode: getInstanceFromNode,
  getNodeFromInstance: getNodeFromInstance,
  precacheChildNodes: precacheChildNodes,
  precacheNode: precacheNode,
  uncacheNode: uncacheNode
};

module.exports = ReactDOMComponentTree;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var ReactIs = __webpack_require__(130);

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(94)(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__(235)();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2016-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



// Trust the developer to only use ReactInstrumentation with a __DEV__ check

var debugTool = null;

if (process.env.NODE_ENV !== 'production') {
  var ReactDebugTool = __webpack_require__(280);
  debugTool = ReactDebugTool;
}

module.exports = { debugTool: debugTool };
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2016-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(29);

var ReactCurrentOwner = __webpack_require__(15);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty
  // Strip regex characters so we can use it for regex
  ).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&'
  // Remove hasOwnProperty from the template to make it generic
  ).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function setItem(id, item) {
    itemMap.set(id, item);
  };
  getItem = function getItem(id) {
    return itemMap.get(id);
  };
  removeItem = function removeItem(id) {
    itemMap['delete'](id);
  };
  getItemIDs = function getItemIDs() {
    return Array.from(itemMap.keys());
  };

  addRoot = function addRoot(id) {
    rootIDSet.add(id);
  };
  removeRoot = function removeRoot(id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function getRootIDs() {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function getKeyFromID(id) {
    return '.' + id;
  };
  var getIDFromKey = function getIDFromKey(key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function setItem(id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function getItem(id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function removeItem(id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function getItemIDs() {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function addRoot(id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function removeRoot(id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function getRootIDs() {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function _getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function onSetChildren(id, nextChildIDs) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || _typeof(nextChild.element) !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function onBeforeMountComponent(id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function onMountComponent(id) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function onUpdateComponent(id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function onUnmountComponent(id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function purgeUnmountedComponents() {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function isMounted(id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function getCurrentStackAddendum(topElement) {
    var info = '';
    if (topElement) {
      var name = _getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function getStackAddendumByID(id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function getChildIDs(id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function getDisplayName(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return _getDisplayName(element);
  },
  getElement: function getElement(id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function getOwnerID(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function getParentID(id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function getSource(id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function getText(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function getUpdateCount(id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },

  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs,

  pushNonStandardWarningStack: function pushNonStandardWarningStack(isCreatingElement, currentSource) {
    if (typeof console.reactStack !== 'function') {
      return;
    }

    var stack = [];
    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    try {
      if (isCreatingElement) {
        stack.push({
          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
          fileName: currentSource ? currentSource.fileName : null,
          lineNumber: currentSource ? currentSource.lineNumber : null
        });
      }

      while (id) {
        var element = ReactComponentTreeHook.getElement(id);
        var parentID = ReactComponentTreeHook.getParentID(id);
        var ownerID = ReactComponentTreeHook.getOwnerID(id);
        var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;
        var source = element && element._source;
        stack.push({
          name: ownerName,
          fileName: source ? source.fileName : null,
          lineNumber: source ? source.lineNumber : null
        });
        id = parentID;
      }
    } catch (err) {
      // Internal state is messed up.
      // Stop building the stack (it's just a nice to have).
    }

    console.reactStack(stack);
  },
  popNonStandardWarningStack: function popNonStandardWarningStack() {
    if (typeof console.reactStackEnd !== 'function') {
      return;
    }
    console.reactStackEnd();
  }
};

module.exports = ReactComponentTreeHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var bind = __webpack_require__(86);
var isBuffer = __webpack_require__(232);

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return typeof FormData !== 'undefined' && val instanceof FormData;
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }
  return typeof window !== 'undefined' && typeof document !== 'undefined';
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' && !isArray(obj)) {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge() /* obj1, obj2, obj3, ... */{
  var result = {};
  function assignValue(val, key) {
    if (_typeof(result[key]) === 'object' && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(4),
    _assign = __webpack_require__(6);

var CallbackQueue = __webpack_require__(104);
var PooledClass = __webpack_require__(22);
var ReactFeatureFlags = __webpack_require__(112);
var ReactReconciler = __webpack_require__(23);
var Transaction = __webpack_require__(42);

var invariant = __webpack_require__(2);

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
}

var NESTED_UPDATES = {
  initialize: function initialize() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function close() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function initialize() {
    this.callbackQueue.reset();
  },
  close: function close() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */true);
}

_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
  getTransactionWrappers: function getTransactionWrappers() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function destructor() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function perform(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  // Any updates enqueued while reconciling must be performed after this entire
  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
  // C, B could update twice in a single batch if C's render enqueues an update
  // to B (since B would have already updated, we should skip it, and the only
  // way we can know to do so is by checking the batch counter).
  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;
      // Duck type TopLevelWrapper. This is probably always true.
      if (component._currentElement.type.isReactTopLevelWrapper) {
        namedComponent = component._renderedComponent;
      }
      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);
    }

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

    if (markerName) {
      console.timeEnd(markerName);
    }

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function flushBatchedUpdates() {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  invariant(batchingStrategy.isBatchingUpdates, "ReactUpdates.asap: Can't enqueue an asap callback in a context where" + 'updates are not being batched.');
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function injectReconcileTransaction(ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function injectBatchingStrategy(_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */

var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

module.exports = ReactCurrentOwner;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (prefixedValue, value, keepUnprefixed) {
  return keepUnprefixed ? [prefixedValue, value] : prefixedValue;
};

module.exports = exports["default"];

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _assign = __webpack_require__(6);

var PooledClass = __webpack_require__(22);

var emptyFunction = __webpack_require__(14);
var warning = __webpack_require__(3);

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function timeStamp(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if (process.env.NODE_ENV !== 'production') {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    if (process.env.NODE_ENV !== 'production') {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function preventDefault() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
      // eslint-disable-next-line valid-typeof
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function stopPropagation() {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
      // eslint-disable-next-line valid-typeof
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function persist() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function destructor() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (process.env.NODE_ENV !== 'production') {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      } else {
        this[propName] = null;
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    if (process.env.NODE_ENV !== 'production') {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }
});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function E() {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

/** Proxying after everything set on SyntheticEvent
  * to resolve Proxy issue on some WebKit browsers
  * in which some Event properties are set to undefined (GH#10010)
  */
if (process.env.NODE_ENV !== 'production') {
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function construct(target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function apply(constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function set(target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

/**
  * Helper to nullify syntheticEvent instance properties when destructing
  *
  * @param {object} SyntheticEvent
  * @param {String} propName
  * @return {object} defineProperty object
  */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    process.env.NODE_ENV !== 'production' ? warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function injectDOMPropertyConfig(domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {
  ID_ATTRIBUTE_NAME: 'data-reactid',
  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   *
   * autofocus is predefined, because adding it to the property whitelist
   * causes unintended side effects.
   *
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function isCustomAttribute(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var __DEV__ = process.env.NODE_ENV !== 'production';

var warning = function warning() {};

if (__DEV__) {
  var printWarning = function printWarning(format, args) {
    var len = arguments.length;
    args = new Array(len > 1 ? len - 1 : 0);
    for (var key = 1; key < len; key++) {
      args[key - 1] = arguments[key];
    }
    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      printWarning.apply(null, [format].concat(args));
    }
  };
}

module.exports = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImageSplitPhone = exports.TechSpecs_gr = exports.TechSpecs_fr = exports.TechSpecs = exports.InTheBox_gr = exports.InTheBox_fr = exports.InTheBox = exports.YouTube = exports.Input = exports.DetailsInput = exports.DeviceLookup = exports.People = exports.Person = exports.Features = exports.ImageSplit = exports.Section = exports.Text = exports.Title = exports.HeroVideo = exports.Footer = exports.NavLight = exports.Nav = exports.Layout = exports.BuyButton = exports.App = undefined;

var _App = __webpack_require__(75);

var _App2 = _interopRequireDefault(_App);

var _Layout = __webpack_require__(79);

var _Layout2 = _interopRequireDefault(_Layout);

var _Nav = __webpack_require__(152);

var _Nav2 = _interopRequireDefault(_Nav);

var _NavLight = __webpack_require__(153);

var _NavLight2 = _interopRequireDefault(_NavLight);

var _Footer = __webpack_require__(145);

var _Footer2 = _interopRequireDefault(_Footer);

var _HeroVideo = __webpack_require__(146);

var _HeroVideo2 = _interopRequireDefault(_HeroVideo);

var _Title = __webpack_require__(30);

var _Title2 = _interopRequireDefault(_Title);

var _Text = __webpack_require__(46);

var _Text2 = _interopRequireDefault(_Text);

var _Section = __webpack_require__(155);

var _Section2 = _interopRequireDefault(_Section);

var _ImageSplit = __webpack_require__(147);

var _ImageSplit2 = _interopRequireDefault(_ImageSplit);

var _Features = __webpack_require__(144);

var _Features2 = _interopRequireDefault(_Features);

var _Person = __webpack_require__(80);

var _Person2 = _interopRequireDefault(_Person);

var _People = __webpack_require__(154);

var _People2 = _interopRequireDefault(_People);

var _DeviceLookup = __webpack_require__(143);

var _DeviceLookup2 = _interopRequireDefault(_DeviceLookup);

var _DetailsInput = __webpack_require__(77);

var _DetailsInput2 = _interopRequireDefault(_DetailsInput);

var _BuyButton = __webpack_require__(37);

var _BuyButton2 = _interopRequireDefault(_BuyButton);

var _Input = __webpack_require__(78);

var _Input2 = _interopRequireDefault(_Input);

var _YouTube = __webpack_require__(81);

var _YouTube2 = _interopRequireDefault(_YouTube);

var _InTheBox = __webpack_require__(149);

var _InTheBox2 = _interopRequireDefault(_InTheBox);

var _InTheBox_fr = __webpack_require__(150);

var _InTheBox_fr2 = _interopRequireDefault(_InTheBox_fr);

var _InTheBox_gr = __webpack_require__(151);

var _InTheBox_gr2 = _interopRequireDefault(_InTheBox_gr);

var _TechSpecs = __webpack_require__(156);

var _TechSpecs2 = _interopRequireDefault(_TechSpecs);

var _TechSpecs_fr = __webpack_require__(157);

var _TechSpecs_fr2 = _interopRequireDefault(_TechSpecs_fr);

var _TechSpecs_gr = __webpack_require__(158);

var _TechSpecs_gr2 = _interopRequireDefault(_TechSpecs_gr);

var _ImageSplitPhone = __webpack_require__(148);

var _ImageSplitPhone2 = _interopRequireDefault(_ImageSplitPhone);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.App = _App2.default;
exports.BuyButton = _BuyButton2.default;
exports.Layout = _Layout2.default;
exports.Nav = _Nav2.default;
exports.NavLight = _NavLight2.default;
exports.Footer = _Footer2.default;
exports.HeroVideo = _HeroVideo2.default;
exports.Title = _Title2.default;
exports.Text = _Text2.default;
exports.Section = _Section2.default;
exports.ImageSplit = _ImageSplit2.default;
exports.Features = _Features2.default;
exports.Person = _Person2.default;
exports.People = _People2.default;
exports.DeviceLookup = _DeviceLookup2.default;
exports.DetailsInput = _DetailsInput2.default;
exports.Input = _Input2.default;
exports.YouTube = _YouTube2.default;
exports.InTheBox = _InTheBox2.default;
exports.InTheBox_fr = _InTheBox_fr2.default;
exports.InTheBox_gr = _InTheBox_gr2.default;
exports.TechSpecs = _TechSpecs2.default;
exports.TechSpecs_fr = _TechSpecs_fr2.default;
exports.TechSpecs_gr = _TechSpecs_gr2.default;
exports.ImageSplitPhone = _ImageSplitPhone2.default;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function invariant(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function standardReleaser(instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ReactRef = __webpack_require__(291);
var ReactInstrumentation = __webpack_require__(10);

var warning = __webpack_require__(3);

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {
  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} the containing host component instance
   * @param {?object} info about the host container
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function mountComponent(internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) // 0 in production and for roots
  {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }
    }
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
      }
    }
    return markup;
  },

  /**
   * Returns a value that can be passed to
   * ReactComponentEnvironment.replaceNodeWithMarkup.
   */
  getHostNode: function getHostNode(internalInstance) {
    return internalInstance.getHostNode();
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function unmountComponent(internalInstance, safely) {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
      }
    }
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function receiveComponent(internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
      }
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, transaction, updateBatchNumber) {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      // The component's enqueued batch number should always be the current
      // batch or the following one.
      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
      return;
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }
    }
    internalInstance.performUpdateIfNecessary(transaction);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  }
};

module.exports = ReactReconciler;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _assign = __webpack_require__(6);

var ReactBaseClasses = __webpack_require__(136);
var ReactChildren = __webpack_require__(343);
var ReactDOMFactories = __webpack_require__(344);
var ReactElement = __webpack_require__(25);
var ReactPropTypes = __webpack_require__(346);
var ReactVersion = __webpack_require__(348);

var createReactClass = __webpack_require__(350);
var onlyChild = __webpack_require__(352);

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  var lowPriorityWarning = __webpack_require__(74);
  var canDefineProperty = __webpack_require__(45);
  var ReactElementValidator = __webpack_require__(138);
  var didWarnPropTypesDeprecated = false;
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;
var createMixin = function createMixin(mixin) {
  return mixin;
};

if (process.env.NODE_ENV !== 'production') {
  var warnedForSpread = false;
  var warnedForCreateMixin = false;
  __spread = function __spread() {
    lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');
    warnedForSpread = true;
    return _assign.apply(null, arguments);
  };

  createMixin = function createMixin(mixin) {
    lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');
    warnedForCreateMixin = true;
    return mixin;
  };
}

var React = {
  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactBaseClasses.Component,
  PureComponent: ReactBaseClasses.PureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: createReactClass,
  createFactory: createFactory,
  createMixin: createMixin,

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

if (process.env.NODE_ENV !== 'production') {
  var warnedForCreateClass = false;
  if (canDefineProperty) {
    Object.defineProperty(React, 'PropTypes', {
      get: function get() {
        lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');
        didWarnPropTypesDeprecated = true;
        return ReactPropTypes;
      }
    });

    Object.defineProperty(React, 'createClass', {
      get: function get() {
        lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + " Use a plain JavaScript class instead. If you're not yet " + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');
        warnedForCreateClass = true;
        return createReactClass;
      }
    });
  }

  // React.DOM factories are deprecated. Wrap these methods so that
  // invocations of the React.DOM namespace and alert users to switch
  // to the `react-dom-factories` package.
  React.DOM = {};
  var warnedForFactories = false;
  Object.keys(ReactDOMFactories).forEach(function (factory) {
    React.DOM[factory] = function () {
      if (!warnedForFactories) {
        lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);
        warnedForFactories = true;
      }
      return ReactDOMFactories[factory].apply(ReactDOMFactories, arguments);
    };
  });
}

module.exports = React;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _assign = __webpack_require__(6);

var ReactCurrentOwner = __webpack_require__(15);

var warning = __webpack_require__(3);
var canDefineProperty = __webpack_require__(45);
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = __webpack_require__(137);

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function warnAboutAccessingKey() {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function warnAboutAccessingRef() {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (process.env.NODE_ENV !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withRouter = exports.matchPath = exports.generatePath = exports.Switch = exports.StaticRouter = exports.Router = exports.Route = exports.Redirect = exports.Prompt = exports.NavLink = exports.MemoryRouter = exports.Link = exports.HashRouter = exports.BrowserRouter = undefined;

var _BrowserRouter2 = __webpack_require__(322);

var _BrowserRouter3 = _interopRequireDefault(_BrowserRouter2);

var _HashRouter2 = __webpack_require__(323);

var _HashRouter3 = _interopRequireDefault(_HashRouter2);

var _Link2 = __webpack_require__(131);

var _Link3 = _interopRequireDefault(_Link2);

var _MemoryRouter2 = __webpack_require__(324);

var _MemoryRouter3 = _interopRequireDefault(_MemoryRouter2);

var _NavLink2 = __webpack_require__(325);

var _NavLink3 = _interopRequireDefault(_NavLink2);

var _Prompt2 = __webpack_require__(326);

var _Prompt3 = _interopRequireDefault(_Prompt2);

var _Redirect2 = __webpack_require__(327);

var _Redirect3 = _interopRequireDefault(_Redirect2);

var _Route2 = __webpack_require__(132);

var _Route3 = _interopRequireDefault(_Route2);

var _Router2 = __webpack_require__(71);

var _Router3 = _interopRequireDefault(_Router2);

var _StaticRouter2 = __webpack_require__(328);

var _StaticRouter3 = _interopRequireDefault(_StaticRouter2);

var _Switch2 = __webpack_require__(329);

var _Switch3 = _interopRequireDefault(_Switch2);

var _generatePath2 = __webpack_require__(330);

var _generatePath3 = _interopRequireDefault(_generatePath2);

var _matchPath2 = __webpack_require__(331);

var _matchPath3 = _interopRequireDefault(_matchPath2);

var _withRouter2 = __webpack_require__(332);

var _withRouter3 = _interopRequireDefault(_withRouter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.BrowserRouter = _BrowserRouter3.default;
exports.HashRouter = _HashRouter3.default;
exports.Link = _Link3.default;
exports.MemoryRouter = _MemoryRouter3.default;
exports.NavLink = _NavLink3.default;
exports.Prompt = _Prompt3.default;
exports.Redirect = _Redirect3.default;
exports.Route = _Route3.default;
exports.Router = _Router3.default;
exports.StaticRouter = _StaticRouter3.default;
exports.Switch = _Switch3.default;
exports.generatePath = _generatePath3.default;
exports.matchPath = _matchPath3.default;
exports.withRouter = _withRouter3.default;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPath = exports.parsePath = exports.locationsAreEqual = exports.createLocation = exports.createMemoryHistory = exports.createHashHistory = exports.createBrowserHistory = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends2 = __webpack_require__(170);

var _extends3 = _interopRequireDefault(_extends2);

var _resolvePathname = __webpack_require__(354);

var _resolvePathname2 = _interopRequireDefault(_resolvePathname);

var _valueEqual = __webpack_require__(358);

var _valueEqual2 = _interopRequireDefault(_valueEqual);

var _tinyWarning = __webpack_require__(357);

var _tinyWarning2 = _interopRequireDefault(_tinyWarning);

var _tinyInvariant = __webpack_require__(356);

var _tinyInvariant2 = _interopRequireDefault(_tinyInvariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function addLeadingSlash(path) {
  return path.charAt(0) === '/' ? path : '/' + path;
}
function stripLeadingSlash(path) {
  return path.charAt(0) === '/' ? path.substr(1) : path;
}
function hasBasename(path, prefix) {
  return new RegExp('^' + prefix + '(\\/|\\?|#|$)', 'i').test(path);
}
function stripBasename(path, prefix) {
  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
}
function stripTrailingSlash(path) {
  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
}
function parsePath(path) {
  var pathname = path || '/';
  var search = '';
  var hash = '';
  var hashIndex = pathname.indexOf('#');

  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');

  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }

  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
}
function createPath(location) {
  var pathname = location.pathname,
      search = location.search,
      hash = location.hash;
  var path = pathname || '/';
  if (search && search !== '?') path += search.charAt(0) === '?' ? search : "?" + search;
  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : "#" + hash;
  return path;
}

function createLocation(path, state, key, currentLocation) {
  var location;

  if (typeof path === 'string') {
    // Two-arg form: push(path, state)
    location = parsePath(path);
    location.state = state;
  } else {
    // One-arg form: push(location)
    location = (0, _extends3.default)({}, path);
    if (location.pathname === undefined) location.pathname = '';

    if (location.search) {
      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
    } else {
      location.search = '';
    }

    if (location.hash) {
      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
    } else {
      location.hash = '';
    }

    if (state !== undefined && location.state === undefined) location.state = state;
  }

  try {
    location.pathname = decodeURI(location.pathname);
  } catch (e) {
    if (e instanceof URIError) {
      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
    } else {
      throw e;
    }
  }

  if (key) location.key = key;

  if (currentLocation) {
    // Resolve incomplete/relative pathname relative to current location.
    if (!location.pathname) {
      location.pathname = currentLocation.pathname;
    } else if (location.pathname.charAt(0) !== '/') {
      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);
    }
  } else {
    // When there is no prior location and pathname is empty, set it to /
    if (!location.pathname) {
      location.pathname = '/';
    }
  }

  return location;
}
function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
}

function createTransitionManager() {
  var prompt = null;

  function setPrompt(nextPrompt) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(prompt == null, 'A history supports only one prompt at a time') : void 0;
    prompt = nextPrompt;
    return function () {
      if (prompt === nextPrompt) prompt = null;
    };
  }

  function confirmTransitionTo(location, action, getUserConfirmation, callback) {
    // TODO: If another transition starts while we're still confirming
    // the previous one, we may end up in a weird state. Figure out the
    // best way to handle this.
    if (prompt != null) {
      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

      if (typeof result === 'string') {
        if (typeof getUserConfirmation === 'function') {
          getUserConfirmation(result, callback);
        } else {
          process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message') : void 0;
          callback(true);
        }
      } else {
        // Return false from a transition hook to cancel the transition.
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  }

  var listeners = [];

  function appendListener(fn) {
    var isActive = true;

    function listener() {
      if (isActive) fn.apply(void 0, arguments);
    }

    listeners.push(listener);
    return function () {
      isActive = false;
      listeners = listeners.filter(function (item) {
        return item !== listener;
      });
    };
  }

  function notifyListeners() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    listeners.forEach(function (listener) {
      return listener.apply(void 0, args);
    });
  }

  return {
    setPrompt: setPrompt,
    confirmTransitionTo: confirmTransitionTo,
    appendListener: appendListener,
    notifyListeners: notifyListeners
  };
}

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
function getConfirmation(message, callback) {
  callback(window.confirm(message)); // eslint-disable-line no-alert
}
/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */

function supportsHistory() {
  var ua = window.navigator.userAgent;
  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
  return window.history && 'pushState' in window.history;
}
/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */

function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf('Trident') === -1;
}
/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */

function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf('Firefox') === -1;
}
/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */

function isExtraneousPopstateEvent(event) {
  event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
}

var PopStateEvent = 'popstate';
var HashChangeEvent = 'hashchange';

function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    // IE 11 sometimes throws when accessing window.history.state
    // See https://github.com/ReactTraining/history/pull/289
    return {};
  }
}
/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */

function createBrowserHistory(props) {
  if (props === void 0) {
    props = {};
  }

  !canUseDOM ? process.env.NODE_ENV !== "production" ? (0, _tinyInvariant2.default)(false, 'Browser history needs a DOM') : (0, _tinyInvariant2.default)(false) : void 0;
  var globalHistory = window.history;
  var canUseHistory = supportsHistory();
  var needsHashChangeListener = !supportsPopStateOnHashChange();
  var _props = props,
      _props$forceRefresh = _props.forceRefresh,
      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,
      _props$getUserConfirm = _props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
      _props$keyLength = _props.keyLength,
      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';

  function getDOMLocation(historyState) {
    var _ref = historyState || {},
        key = _ref.key,
        state = _ref.state;

    var _window$location = window.location,
        pathname = _window$location.pathname,
        search = _window$location.search,
        hash = _window$location.hash;
    var path = pathname + search + hash;
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') : void 0;
    if (basename) path = stripBasename(path, basename);
    return createLocation(path, state, key);
  }

  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }

  var transitionManager = createTransitionManager();

  function setState(nextState) {
    (0, _extends3.default)(history, nextState);

    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  function handlePopState(event) {
    // Ignore extraneous popstate events in WebKit.
    if (isExtraneousPopstateEvent(event)) return;
    handlePop(getDOMLocation(event.state));
  }

  function handleHashChange() {
    handlePop(getDOMLocation(getHistoryState()));
  }

  var forceNextPop = false;

  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }

  function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of keys we've seen in sessionStorage.
    // Instead, we just default to 0 for keys we don't know.

    var toIndex = allKeys.indexOf(toLocation.key);
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allKeys.indexOf(fromLocation.key);
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  }

  var initialLocation = getDOMLocation(getHistoryState());
  var allKeys = [initialLocation.key]; // Public interface

  function createHref(location) {
    return basename + createPath(location);
  }

  function push(path, state) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;
    var action = 'PUSH';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.pushState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.href = href;
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
          nextKeys.push(location.key);
          allKeys = nextKeys;
          setState({
            action: action,
            location: location
          });
        }
      } else {
        process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history') : void 0;
        window.location.href = href;
      }
    });
  }

  function replace(path, state) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;
    var action = 'REPLACE';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.replaceState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.replace(href);
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          if (prevIndex !== -1) allKeys[prevIndex] = location.key;
          setState({
            action: action,
            location: location
          });
        }
      } else {
        process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history') : void 0;
        window.location.replace(href);
      }
    });
  }

  function go(n) {
    globalHistory.go(n);
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  var listenerCount = 0;

  function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);
    }
  }

  var isBlocked = false;

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  }

  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  }

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
}

var HashChangeEvent$1 = 'hashchange';
var HashPathCoders = {
  hashbang: {
    encodePath: function encodePath(path) {
      return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
    },
    decodePath: function decodePath(path) {
      return path.charAt(0) === '!' ? path.substr(1) : path;
    }
  },
  noslash: {
    encodePath: stripLeadingSlash,
    decodePath: addLeadingSlash
  },
  slash: {
    encodePath: addLeadingSlash,
    decodePath: addLeadingSlash
  }
};

function getHashPath() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var hashIndex = href.indexOf('#');
  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
}

function pushHashPath(path) {
  window.location.hash = path;
}

function replaceHashPath(path) {
  var hashIndex = window.location.href.indexOf('#');
  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
}

function createHashHistory(props) {
  if (props === void 0) {
    props = {};
  }

  !canUseDOM ? process.env.NODE_ENV !== "production" ? (0, _tinyInvariant2.default)(false, 'Hash history needs a DOM') : (0, _tinyInvariant2.default)(false) : void 0;
  var globalHistory = window.history;
  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
  var _props = props,
      _props$getUserConfirm = _props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
      _props$hashType = _props.hashType,
      hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
  var _HashPathCoders$hashT = HashPathCoders[hashType],
      encodePath = _HashPathCoders$hashT.encodePath,
      decodePath = _HashPathCoders$hashT.decodePath;

  function getDOMLocation() {
    var path = decodePath(getHashPath());
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') : void 0;
    if (basename) path = stripBasename(path, basename);
    return createLocation(path);
  }

  var transitionManager = createTransitionManager();

  function setState(nextState) {
    (0, _extends3.default)(history, nextState);

    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  var forceNextPop = false;
  var ignorePath = null;

  function handleHashChange() {
    var path = getHashPath();
    var encodedPath = encodePath(path);

    if (path !== encodedPath) {
      // Ensure we always have a properly-encoded hash.
      replaceHashPath(encodedPath);
    } else {
      var location = getDOMLocation();
      var prevLocation = history.location;
      if (!forceNextPop && locationsAreEqual(prevLocation, location)) return; // A hashchange doesn't always == location change.

      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.

      ignorePath = null;
      handlePop(location);
    }
  }

  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }

  function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of paths we've seen in sessionStorage.
    // Instead, we just default to 0 for paths we don't know.

    var toIndex = allPaths.lastIndexOf(createPath(toLocation));
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  } // Ensure the hash is encoded properly before doing anything else.


  var path = getHashPath();
  var encodedPath = encodePath(path);
  if (path !== encodedPath) replaceHashPath(encodedPath);
  var initialLocation = getDOMLocation();
  var allPaths = [createPath(initialLocation)]; // Public interface

  function createHref(location) {
    return '#' + encodePath(basename + createPath(location));
  }

  function push(path, state) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(state === undefined, 'Hash history cannot push state; it is ignored') : void 0;
    var action = 'PUSH';
    var location = createLocation(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = createPath(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a PUSH, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        pushHashPath(encodedPath);
        var prevIndex = allPaths.lastIndexOf(createPath(history.location));
        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
        nextPaths.push(path);
        allPaths = nextPaths;
        setState({
          action: action,
          location: location
        });
      } else {
        process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') : void 0;
        setState();
      }
    });
  }

  function replace(path, state) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored') : void 0;
    var action = 'REPLACE';
    var location = createLocation(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = createPath(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        replaceHashPath(encodedPath);
      }

      var prevIndex = allPaths.indexOf(createPath(history.location));
      if (prevIndex !== -1) allPaths[prevIndex] = path;
      setState({
        action: action,
        location: location
      });
    });
  }

  function go(n) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : void 0;
    globalHistory.go(n);
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  var listenerCount = 0;

  function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(HashChangeEvent$1, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(HashChangeEvent$1, handleHashChange);
    }
  }

  var isBlocked = false;

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  }

  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  }

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
}

function clamp(n, lowerBound, upperBound) {
  return Math.min(Math.max(n, lowerBound), upperBound);
}
/**
 * Creates a history object that stores locations in memory.
 */

function createMemoryHistory(props) {
  if (props === void 0) {
    props = {};
  }

  var _props = props,
      getUserConfirmation = _props.getUserConfirmation,
      _props$initialEntries = _props.initialEntries,
      initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,
      _props$initialIndex = _props.initialIndex,
      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,
      _props$keyLength = _props.keyLength,
      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var transitionManager = createTransitionManager();

  function setState(nextState) {
    (0, _extends3.default)(history, nextState);

    history.length = history.entries.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }

  var index = clamp(initialIndex, 0, initialEntries.length - 1);
  var entries = initialEntries.map(function (entry) {
    return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());
  }); // Public interface

  var createHref = createPath;

  function push(path, state) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;
    var action = 'PUSH';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var prevIndex = history.index;
      var nextIndex = prevIndex + 1;
      var nextEntries = history.entries.slice(0);

      if (nextEntries.length > nextIndex) {
        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
      } else {
        nextEntries.push(location);
      }

      setState({
        action: action,
        location: location,
        index: nextIndex,
        entries: nextEntries
      });
    });
  }

  function replace(path, state) {
    process.env.NODE_ENV !== "production" ? (0, _tinyWarning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : void 0;
    var action = 'REPLACE';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      history.entries[history.index] = location;
      setState({
        action: action,
        location: location
      });
    });
  }

  function go(n) {
    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
    var action = 'POP';
    var location = history.entries[nextIndex];
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (ok) {
        setState({
          action: action,
          location: location,
          index: nextIndex
        });
      } else {
        // Mimic the behavior of DOM histories by
        // causing a render after a cancelled POP.
        setState();
      }
    });
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  function canGo(n) {
    var nextIndex = history.index + n;
    return nextIndex >= 0 && nextIndex < history.entries.length;
  }

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    return transitionManager.setPrompt(prompt);
  }

  function listen(listener) {
    return transitionManager.appendListener(listener);
  }

  var history = {
    length: entries.length,
    action: 'POP',
    location: entries[index],
    index: index,
    entries: entries,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    canGo: canGo,
    block: block,
    listen: listen
  };
  return history;
}

exports.createBrowserHistory = createBrowserHistory;
exports.createHashHistory = createHashHistory;
exports.createMemoryHistory = createMemoryHistory;
exports.createLocation = createLocation;
exports.locationsAreEqual = locationsAreEqual;
exports.parsePath = parsePath;
exports.createPath = createPath;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var DOMNamespaces = __webpack_require__(56);
var setInnerHTML = __webpack_require__(44);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(63);
var setTextContent = __webpack_require__(128);

var ELEMENT_NODE_TYPE = 1;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * In IE (8-11) and Edge, appending nodes with no children is dramatically
 * faster than appending a full subtree, so we essentially queue up the
 * .appendChild calls here and apply them so each node is added to its parent
 * before any children are added.
 *
 * In other browsers, doing so is slower or neutral compared to the other order
 * (in Firefox, twice as slow) so we only do this inversion in IE.
 *
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
 */
var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

function insertTreeChildren(tree) {
  if (!enableLazy) {
    return;
  }
  var node = tree.node;
  var children = tree.children;
  if (children.length) {
    for (var i = 0; i < children.length; i++) {
      insertTreeBefore(node, children[i], null);
    }
  } else if (tree.html != null) {
    setInnerHTML(node, tree.html);
  } else if (tree.text != null) {
    setTextContent(node, tree.text);
  }
}

var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
  // DocumentFragments aren't actually part of the DOM after insertion so
  // appending children won't update the DOM. We need to ensure the fragment
  // is properly populated first, breaking out of our lazy approach for just
  // this level. Also, some <object> plugins (like Flash Player) will read
  // <param> nodes immediately upon insertion into the DOM, so <object>
  // must also be populated prior to insertion into the DOM.
  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
    insertTreeChildren(tree);
    parentNode.insertBefore(tree.node, referenceNode);
  } else {
    parentNode.insertBefore(tree.node, referenceNode);
    insertTreeChildren(tree);
  }
});

function replaceChildWithTree(oldNode, newTree) {
  oldNode.parentNode.replaceChild(newTree.node, oldNode);
  insertTreeChildren(newTree);
}

function queueChild(parentTree, childTree) {
  if (enableLazy) {
    parentTree.children.push(childTree);
  } else {
    parentTree.node.appendChild(childTree.node);
  }
}

function queueHTML(tree, html) {
  if (enableLazy) {
    tree.html = html;
  } else {
    setInnerHTML(tree.node, html);
  }
}

function queueText(tree, text) {
  if (enableLazy) {
    tree.text = text;
  } else {
    setTextContent(tree.node, text);
  }
}

function toString() {
  return this.node.nodeName;
}

function DOMLazyTree(node) {
  return {
    node: node,
    children: [],
    html: null,
    text: null,
    toString: toString
  };
}

DOMLazyTree.insertTreeBefore = insertTreeBefore;
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
DOMLazyTree.queueChild = queueChild;
DOMLazyTree.queueHTML = queueHTML;
DOMLazyTree.queueText = queueText;

module.exports = DOMLazyTree;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Title = function (_React$Component) {
  _inherits(Title, _React$Component);

  function Title() {
    _classCallCheck(this, Title);

    return _possibleConstructorReturn(this, (Title.__proto__ || Object.getPrototypeOf(Title)).apply(this, arguments));
  }

  _createClass(Title, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'h1',
        _extends({}, this.props, { style: styles.title }),
        this.props.children
      );
    }
  }]);

  return Title;
}(_react2.default.Component);

var styles = {
  title: {
    fontSize: '21px',
    // textTransform: 'uppercase',
    marginTop: '45px'
  }
};

exports.default = Title;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(4);

var EventPluginRegistry = __webpack_require__(39);
var EventPluginUtils = __webpack_require__(57);
var ReactErrorUtils = __webpack_require__(61);

var accumulateInto = __webpack_require__(122);
var forEachAccumulated = __webpack_require__(123);
var invariant = __webpack_require__(2);

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
  return executeDispatchesAndRelease(e, false);
};

var getDictionaryKey = function getDictionaryKey(inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {
  /**
   * Methods for injecting dependencies.
   */
  injection: {
    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
  },

  /**
   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {function} listener The callback to store.
   */
  putListener: function putListener(inst, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) : _prodInvariant('94', registrationName, typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) : void 0;

    var key = getDictionaryKey(inst);
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[key] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);
    }
  },

  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function getListener(inst, registrationName) {
    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
    // live here; needs to be moved to a better place soon
    var bankForRegistrationName = listenerBank[registrationName];
    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
      return null;
    }
    var key = getDictionaryKey(inst);
    return bankForRegistrationName && bankForRegistrationName[key];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function deleteListener(inst, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      var key = getDictionaryKey(inst);
      delete bankForRegistrationName[key];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {object} inst The instance, which is the source of events.
   */
  deleteAllListeners: function deleteAllListeners(inst) {
    var key = getDictionaryKey(inst);
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;
      }

      if (!listenerBank[registrationName][key]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      delete listenerBank[registrationName][key];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function enqueueEvents(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function processEventQueue(simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function __purge() {
    listenerBank = {};
  },

  __getListenerBank: function __getListenerBank() {
    return listenerBank;
  }
};

module.exports = EventPluginHub;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var EventPluginHub = __webpack_require__(32);
var EventPluginUtils = __webpack_require__(57);

var accumulateInto = __webpack_require__(122);
var forEachAccumulated = __webpack_require__(123);
var warning = __webpack_require__(3);

var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

var ReactInstanceMap = {
  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function remove(key) {
    key._reactInternalInstance = undefined;
  },

  get: function get(key) {
    return key._reactInternalInstance;
  },

  has: function has(key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function set(key, value) {
    key._reactInternalInstance = value;
  }
};

module.exports = ReactInstanceMap;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var SyntheticEvent = __webpack_require__(17);

var getEventTarget = __webpack_require__(66);

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function view(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function detail(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _warning = __webpack_require__(3);

var _warning2 = _interopRequireDefault(_warning);

var _utils = __webpack_require__(339);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var Scrollchor = function (_React$Component) {
  _inherits(Scrollchor, _React$Component);

  function Scrollchor(props) {
    _classCallCheck(this, Scrollchor);

    var _this = _possibleConstructorReturn(this, (Scrollchor.__proto__ || Object.getPrototypeOf(Scrollchor)).call(this, props));

    _this.handleClick = function (event) {
      _this._beforeAnimate(event);
      event.preventDefault();
      animateScroll(_this._to, _this._animate);
      _this._afterAnimate(event);
    };

    _this._to = props.to && props.to.replace(/^#/, '') || '';

    var _ref = props.animate || {},
        _ref$offset = _ref.offset,
        offset = _ref$offset === undefined ? 0 : _ref$offset,
        _ref$duration = _ref.duration,
        duration = _ref$duration === undefined ? 400 : _ref$duration,
        _ref$easing = _ref.easing,
        easing = _ref$easing === undefined ? easeOutQuad : _ref$easing;

    _this._animate = { offset: offset, duration: duration, easing: easing };
    _this._beforeAnimate = props.beforeAnimate || function () {};
    _this._afterAnimate = props.afterAnimate || function () {};
    return _this;
  }

  _createClass(Scrollchor, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          to = _props.to,
          animate = _props.animate,
          beforeAnimate = _props.beforeAnimate,
          afterAnimate = _props.afterAnimate,
          props = _objectWithoutProperties(_props, ['to', 'animate', 'beforeAnimate', 'afterAnimate']); // eslint-disable-line no-unused-vars


      return _react2.default.createElement('a', _extends({}, props, { href: '#' + this._to, onClick: this.handleClick }));
    }
  }]);

  return Scrollchor;
}(_react2.default.Component);

Scrollchor.propTypes = {
  to: _propTypes2.default.string.isRequired,
  animate: _propTypes2.default.shape({
    offset: _propTypes2.default.number,
    duration: _propTypes2.default.number,
    easing: _propTypes2.default.func
  }),
  beforeAnimate: _propTypes2.default.func,
  afterAnimate: _propTypes2.default.func
};
exports.default = Scrollchor;

function animateScroll(id, animate) {
  var element = id ? document.getElementById(id) : document.body;
  (0, _warning2.default)(element, 'Cannot find element: #' + id);
  scrollTo(element, animate);
}

function scrollTo(element, _ref2) {
  var offset = _ref2.offset,
      duration = _ref2.duration,
      easing = _ref2.easing;

  var start = (0, _utils.getScrollTop)();
  var to = (0, _utils.getOffsetTop)(element) + offset;
  var change = to - start;
  var increment = 20;

  function animate(elapsedTime) {
    var elapsed = elapsedTime + increment;
    var position = easing(null, elapsed, start, change, duration);
    (0, _utils.setScrollTop)(position);
    if (elapsed < duration) {
      setTimeout(function () {
        animate(elapsed);
      }, increment);
    }
  }

  animate(0);
}

// Default easing function
// jQuery easing 'swing'
function easeOutQuad(x, t, b, c, d) {
  return -c * (t /= d) * (t - 2) + b;
}

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _link;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _reactScrollchor = __webpack_require__(36);

var _reactScrollchor2 = _interopRequireDefault(_reactScrollchor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BuyButton = function (_React$Component) {
  _inherits(BuyButton, _React$Component);

  function BuyButton() {
    _classCallCheck(this, BuyButton);

    return _possibleConstructorReturn(this, (BuyButton.__proto__ || Object.getPrototypeOf(BuyButton)).apply(this, arguments));
  }

  _createClass(BuyButton, [{
    key: 'render',
    value: function render() {
      var link = this.props.link;

      return link ? _react2.default.createElement(
        'a',
        { style: styles.link, href: link },
        _react2.default.createElement(
          'div',
          { style: styles.box },
          'Buy Now'
        )
      ) : _react2.default.createElement(
        _reactScrollchor2.default,
        { style: styles.link, to: '#notify' },
        _react2.default.createElement(
          'div',
          { style: styles.box },
          'Sign Up'
        )
      );
    }
  }]);

  return BuyButton;
}(_react2.default.Component);

var styles = {
  box: {
    backgroundColor: 'white',
    borderRadius: '5px',
    textAlign: 'center',
    width: '120px',
    margin: 'auto',
    height: '34px',
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center'
  },
  link: (_link = {
    color: 'black',
    textDecoration: 'none',
    fontSize: '12px',
    textTransform: 'uppercase'
  }, _defineProperty(_link, 'fontSize', 14), _defineProperty(_link, 'fontWeight', 600), _defineProperty(_link, 'letterSpacing', '1.75px'), _link)
};

exports.default = BuyButton;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

// returns a style object with a single concated prefixed value string

exports.default = function (property, value) {
  var replacer = arguments.length <= 2 || arguments[2] === undefined ? function (prefix, value) {
    return prefix + value;
  } : arguments[2];
  return _defineProperty({}, property, ['-webkit-', '-moz-', ''].map(function (prefix) {
    return replacer(prefix, value);
  }));
};

module.exports = exports['default'];

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  if (process.env.NODE_ENV !== 'production') {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {
  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in __DEV__.
   * @type {Object}
   */
  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
  // Trust the developer to only use possibleRegistrationNames in __DEV__

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
    // Clone the ordering so it cannot be dynamically mutated.
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function getPluginModuleForEvent(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    if (dispatchConfig.phasedRegistrationNames !== undefined) {
      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
      // that it is not undefined.
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      for (var phase in phasedRegistrationNames) {
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
        if (pluginModule) {
          return pluginModule;
        }
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function _resetEventPlugins() {
    eventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];
        }
      }
    }
  }
};

module.exports = EventPluginRegistry;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _assign = __webpack_require__(6);

var EventPluginRegistry = __webpack_require__(39);
var ReactEventEmitterMixin = __webpack_require__(282);
var ViewportMetrics = __webpack_require__(121);

var getVendorPrefixedEventName = __webpack_require__(316);
var isEventSupported = __webpack_require__(68);

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var hasEventPageXY;
var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function injectReactEventListener(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function setEnabled(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function isEnabled() {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function listenTo(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === 'topWheel') {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === 'topScroll') {
          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening.topBlur = true;
          isListening.topFocus = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function trapBubbledEvent(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function trapCapturedEvent(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Protect against document.createEvent() returning null
   * Some popup blocker extensions appear to do this:
   * https://github.com/facebook/react/issues/6887
   */
  supportsEventPageXY: function supportsEventPageXY() {
    if (!document.createEvent) {
      return false;
    }
    var ev = document.createEvent('MouseEvent');
    return ev != null && 'pageX' in ev;
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
   * pageX/pageY isn't supported (legacy browsers).
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function ensureScrollValueMonitoring() {
    if (hasEventPageXY === undefined) {
      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
    }
    if (!hasEventPageXY && !isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  }
});

module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var SyntheticUIEvent = __webpack_require__(35);
var ViewportMetrics = __webpack_require__(121);

var getEventModifierState = __webpack_require__(65);

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function button(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function relatedTarget(event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function pageX(event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function pageY(event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

var OBSERVED_ERROR = {};

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var TransactionImpl = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function reinitializeTransaction() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function isInTransaction() {
    return !!this._isInTransaction;
  },

  /* eslint-disable space-before-function-paren */

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function perform(method, scope, a, b, c, d, e, f) {
    /* eslint-enable space-before-function-paren */
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function initializeAll(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function closeAll(startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

module.exports = TransactionImpl;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * Based on the escape-html library, which is used under the MIT License below:
 *
 * Copyright (c) 2012-2013 TJ Holowaychuk
 * Copyright (c) 2015 Andreas Lubbe
 * Copyright (c) 2015 Tiancheng "Timothy" Gu
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */



// code copied and modified from escape-html
/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escape = '&quot;';
        break;
      case 38:
        // &
        escape = '&amp;';
        break;
      case 39:
        // '
        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
        break;
      case 60:
        // <
        escape = '&lt;';
        break;
      case 62:
        // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// end code copied and modified from escape-html

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  if (typeof text === 'boolean' || typeof text === 'number') {
    // this shortcircuit helps perf for types that we know will never have
    // special characters, especially given that this function is used often
    // for numeric dom ids.
    return '' + text;
  }
  return escapeHtml(text);
}

module.exports = escapeTextContentForBrowser;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ExecutionEnvironment = __webpack_require__(9);
var DOMNamespaces = __webpack_require__(56);

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

var createMicrosoftUnsafeLocalFunction = __webpack_require__(63);

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node
  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function setInnerHTML(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xfeff) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
  testElement = null;
}

module.exports = setInnerHTML;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function get() {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Text = function (_React$Component) {
  _inherits(Text, _React$Component);

  function Text() {
    _classCallCheck(this, Text);

    return _possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));
  }

  _createClass(Text, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'p',
        { style: [styles.text, this.props.style] },
        this.props.children
      );
    }
  }]);

  return Text;
}(_react2.default.Component);

var styles = {
  text: {
    fontSize: '16px',
    maxWidth: '760px',
    margin: 'auto',
    padding: '20px'
  }
};

exports.default = (0, _radium2.default)(Text);

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(12);
var normalizeHeaderName = __webpack_require__(185);

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(82);
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = __webpack_require__(82);
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) {/* Ignore */}
    }
    return data;
  }],

  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
// helper to capitalize strings

exports.default = function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
};

module.exports = exports["default"];

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (value) {
  if (Array.isArray(value)) value = value.join(',');

  return value.match(/-webkit-|-moz-|-ms-/) !== null;
};

module.exports = exports['default'];

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cssRuleSetToString;

var _appendPxIfNeeded = __webpack_require__(95);

var _appendPxIfNeeded2 = _interopRequireDefault(_appendPxIfNeeded);

var _camelCasePropsToDashCase = __webpack_require__(237);

var _camelCasePropsToDashCase2 = _interopRequireDefault(_camelCasePropsToDashCase);

var _mapObject = __webpack_require__(100);

var _mapObject2 = _interopRequireDefault(_mapObject);

var _prefixer = __webpack_require__(53);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function createMarkupForStyles(style) {
  return Object.keys(style).map(function (property) {
    return property + ': ' + style[property] + ';';
  }).join('\n');
}

function cssRuleSetToString(selector, rules, userAgent) {
  if (!rules) {
    return '';
  }

  var rulesWithPx = (0, _mapObject2.default)(rules, function (value, key) {
    return (0, _appendPxIfNeeded2.default)(key, value);
  });
  var prefixedRules = (0, _prefixer.getPrefixedStyle)(rulesWithPx, userAgent);
  var cssPrefixedRules = (0, _camelCasePropsToDashCase2.default)(prefixedRules);
  var serializedRules = createMarkupForStyles(cssPrefixedRules);

  return selector + '{' + serializedRules + '}';
}
module.exports = exports['default'];

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
}; /**
    * Based on https://github.com/jsstyles/css-vendor, but without having to
    * convert between different cases all the time.
    *
    * 
    */

exports.getPrefixedKeyframes = getPrefixedKeyframes;
exports.getPrefixedStyle = getPrefixedStyle;

var _inlineStylePrefixer = __webpack_require__(206);

var _inlineStylePrefixer2 = _interopRequireDefault(_inlineStylePrefixer);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function transformValues(style) {
  return Object.keys(style).reduce(function (newStyle, key) {
    var value = style[key];
    if (Array.isArray(value)) {
      value = value.join(';' + key + ':');
    } else if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.toString === 'function') {
      value = value.toString();
    }

    newStyle[key] = value;
    return newStyle;
  }, {});
}

var _hasWarnedAboutUserAgent = false;
var _lastUserAgent = void 0;
var _cachedPrefixer = void 0;

function getPrefixer(userAgent) {
  var actualUserAgent = userAgent || global && global.navigator && global.navigator.userAgent;

  if (process.env.NODE_ENV !== 'production') {
    if (!actualUserAgent && !_hasWarnedAboutUserAgent) {
      /* eslint-disable no-console */
      console.warn('Radium: userAgent should be supplied for server-side rendering. See ' + 'https://github.com/FormidableLabs/radium/tree/master/docs/api#radium ' + 'for more information.');
      /* eslint-enable no-console */
      _hasWarnedAboutUserAgent = true;
    }
  }

  if (!_cachedPrefixer || actualUserAgent !== _lastUserAgent) {
    if (actualUserAgent === 'all') {
      _cachedPrefixer = {
        prefix: _inlineStylePrefixer2.default.prefixAll,
        prefixedKeyframes: 'keyframes'
      };
    } else {
      _cachedPrefixer = new _inlineStylePrefixer2.default({ userAgent: actualUserAgent });
    }
    _lastUserAgent = actualUserAgent;
  }
  return _cachedPrefixer;
}

function getPrefixedKeyframes(userAgent) {
  return getPrefixer(userAgent).prefixedKeyframes;
}

// Returns a new style object with vendor prefixes added to property names
// and values.
function getPrefixedStyle(style, userAgent) {
  var styleWithFallbacks = transformValues(style);
  var prefixer = getPrefixer(userAgent);
  var prefixedStyle = prefixer.prefix(styleWithFallbacks);
  return prefixedStyle;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(359), __webpack_require__(0)))

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var StyleKeeper = function () {
  function StyleKeeper(userAgent) {
    _classCallCheck(this, StyleKeeper);

    this._userAgent = userAgent;
    this._listeners = [];
    this._cssSet = {};
  }

  StyleKeeper.prototype.subscribe = function subscribe(listener) {
    var _this = this;

    if (this._listeners.indexOf(listener) === -1) {
      this._listeners.push(listener);
    }

    return {
      // Must be fat arrow to capture `this`
      remove: function remove() {
        var listenerIndex = _this._listeners.indexOf(listener);
        if (listenerIndex > -1) {
          _this._listeners.splice(listenerIndex, 1);
        }
      }
    };
  };

  StyleKeeper.prototype.addCSS = function addCSS(css) {
    var _this2 = this;

    if (!this._cssSet[css]) {
      this._cssSet[css] = true;
      this._emitChange();
    }

    return {
      // Must be fat arrow to capture `this`
      remove: function remove() {
        delete _this2._cssSet[css];
        _this2._emitChange();
      }
    };
  };

  StyleKeeper.prototype.getCSS = function getCSS() {
    return Object.keys(this._cssSet).join('\n');
  };

  StyleKeeper.prototype._emitChange = function _emitChange() {
    this._listeners.forEach(function (listener) {
      return listener();
    });
  };

  return StyleKeeper;
}();

exports.default = StyleKeeper;
module.exports = exports['default'];

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var DOMLazyTree = __webpack_require__(28);
var Danger = __webpack_require__(257);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactInstrumentation = __webpack_require__(10);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(63);
var setInnerHTML = __webpack_require__(44);
var setTextContent = __webpack_require__(128);

function getNodeAfter(parentNode, node) {
  // Special case for text components, which return [open, close] comments
  // from getHostNode.
  if (Array.isArray(node)) {
    node = node[1];
  }
  return node ? node.nextSibling : parentNode.firstChild;
}

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
  // We rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
  // we are careful to use `null`.)
  parentNode.insertBefore(childNode, referenceNode);
});

function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
}

function moveChild(parentNode, childNode, referenceNode) {
  if (Array.isArray(childNode)) {
    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
  } else {
    insertChildAt(parentNode, childNode, referenceNode);
  }
}

function removeChild(parentNode, childNode) {
  if (Array.isArray(childNode)) {
    var closingComment = childNode[1];
    childNode = childNode[0];
    removeDelimitedText(parentNode, childNode, closingComment);
    parentNode.removeChild(closingComment);
  }
  parentNode.removeChild(childNode);
}

function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
  var node = openingComment;
  while (true) {
    var nextNode = node.nextSibling;
    insertChildAt(parentNode, node, referenceNode);
    if (node === closingComment) {
      break;
    }
    node = nextNode;
  }
}

function removeDelimitedText(parentNode, startNode, closingComment) {
  while (true) {
    var node = startNode.nextSibling;
    if (node === closingComment) {
      // The closing comment is removed by ReactMultiChild.
      break;
    } else {
      parentNode.removeChild(node);
    }
  }
}

function replaceDelimitedText(openingComment, closingComment, stringText) {
  var parentNode = openingComment.parentNode;
  var nodeAfterComment = openingComment.nextSibling;
  if (nodeAfterComment === closingComment) {
    // There are no text nodes between the opening and closing comments; insert
    // a new one if stringText isn't empty.
    if (stringText) {
      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
    }
  } else {
    if (stringText) {
      // Set the text content of the first node after the opening comment, and
      // remove all following nodes up until the closing comment.
      setTextContent(nodeAfterComment, stringText);
      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
    } else {
      removeDelimitedText(parentNode, openingComment, closingComment);
    }
  }

  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onHostOperation({
      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
      type: 'replace text',
      payload: stringText
    });
  }
}

var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
if (process.env.NODE_ENV !== 'production') {
  dangerouslyReplaceNodeWithMarkup = function dangerouslyReplaceNodeWithMarkup(oldChild, markup, prevInstance) {
    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
    if (prevInstance._debugID !== 0) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: prevInstance._debugID,
        type: 'replace with',
        payload: markup.toString()
      });
    } else {
      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
      if (nextInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: nextInstance._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {
  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

  replaceDelimitedText: replaceDelimitedText,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  processUpdates: function processUpdates(parentNode, updates) {
    if (process.env.NODE_ENV !== 'production') {
      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
    }

    for (var k = 0; k < updates.length; k++) {
      var update = updates[k];
      switch (update.type) {
        case 'INSERT_MARKUP':
          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'insert child',
              payload: {
                toIndex: update.toIndex,
                content: update.content.toString()
              }
            });
          }
          break;
        case 'MOVE_EXISTING':
          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'move child',
              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
            });
          }
          break;
        case 'SET_MARKUP':
          setInnerHTML(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace children',
              payload: update.content.toString()
            });
          }
          break;
        case 'TEXT_CONTENT':
          setTextContent(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace text',
              payload: update.content.toString()
            });
          }
          break;
        case 'REMOVE_NODE':
          removeChild(parentNode, update.fromNode);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'remove child',
              payload: { fromIndex: update.fromIndex }
            });
          }
          break;
      }
    }
  }
};

module.exports = DOMChildrenOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var DOMNamespaces = {
  html: 'http://www.w3.org/1999/xhtml',
  mathml: 'http://www.w3.org/1998/Math/MathML',
  svg: 'http://www.w3.org/2000/svg'
};

module.exports = DOMNamespaces;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(4);

var ReactErrorUtils = __webpack_require__(61);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

/**
 * Injected dependencies:
 */

/**
 * - `ComponentTree`: [required] Module that can convert between React instances
 *   and actual node references.
 */
var ComponentTree;
var TreeTraversal;
var injection = {
  injectComponentTree: function injectComponentTree(Injected) {
    ComponentTree = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
    }
  },
  injectTreeTraversal: function injectTreeTraversal(Injected) {
    TreeTraversal = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
    }
  }
};

function isEndish(topLevelType) {
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
}

function isMoveish(topLevelType) {
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
}
function isStartish(topLevelType) {
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function validateEventDispatches(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getInstanceFromNode: function getInstanceFromNode(node) {
    return ComponentTree.getInstanceFromNode(node);
  },
  getNodeFromInstance: function getNodeFromInstance(node) {
    return ComponentTree.getNodeFromInstance(node);
  },
  isAncestor: function isAncestor(a, b) {
    return TreeTraversal.isAncestor(a, b);
  },
  getLowestCommonAncestor: function getLowestCommonAncestor(a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);
  },
  getParentInstance: function getParentInstance(inst) {
    return TreeTraversal.getParentInstance(inst);
  },
  traverseTwoPhase: function traverseTwoPhase(target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);
  },
  traverseEnterLeave: function traverseEnterLeave(from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
  },

  injection: injection
};

module.exports = EventPluginUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(4);

var ReactPropTypesSecret = __webpack_require__(118);
var propTypesFactory = __webpack_require__(93);

var React = __webpack_require__(24);
var PropTypes = propTypesFactory(React.isValidElement);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

var hasReadOnlyValue = {
  button: true,
  checkbox: true,
  image: true,
  hidden: true,
  radio: true,
  reset: true,
  submit: true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
}

var propTypes = {
  value: function value(props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function checked(props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: PropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function checkPropTypes(tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function getValue(inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function getChecked(inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function executeOnChange(inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

var injected = false;

var ReactComponentEnvironment = {
  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkup: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function injectEnvironment(environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }
};

module.exports = ReactComponentEnvironment;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a) {
  try {
    func(a);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function rethrowCaughtError() {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
      var boundFunc = function boundFunc() {
        func(a);
      };
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(4);

var ReactCurrentOwner = __webpack_require__(15);
var ReactInstanceMap = __webpack_require__(34);
var ReactInstrumentation = __webpack_require__(10);
var ReactUpdates = __webpack_require__(13);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
  var type = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);
  if (type !== 'object') {
    return type;
  }
  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';
  }
  return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var ctor = publicInstance.constructor;
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + "within `render` or another component's constructor). Render methods " + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function isMounted(publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @param {string} callerName Name of the calling function in the public API.
   * @internal
   */
  enqueueCallback: function enqueueCallback(publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function enqueueCallbackInternal(internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    // Future-proof 15.5
    if (callback !== undefined && callback !== null) {
      ReactUpdateQueue.validateCallback(callback, 'replaceState');
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
    }

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onSetState();
      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
    }

    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function enqueueElementInternal(internalInstance, nextElement, nextContext) {
    internalInstance._pendingElement = nextElement;
    // TODO: introduce _pendingContext instead of setting it directly.
    internalInstance._context = nextContext;
    enqueueUpdate(internalInstance);
  },

  validateCallback: function validateCallback(callback, callerName) {
    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
  }
};

module.exports = ReactUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* globals MSApp */



/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

var createMicrosoftUnsafeLocalFunction = function createMicrosoftUnsafeLocalFunction(func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

module.exports = createMicrosoftUnsafeLocalFunction;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(4),
    _assign = __webpack_require__(6);

var ReactCompositeComponent = __webpack_require__(264);
var ReactEmptyComponent = __webpack_require__(111);
var ReactHostComponent = __webpack_require__(113);

var getNextDebugID = __webpack_require__(351);
var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function ReactCompositeComponentWrapper(element) {
  this.construct(element);
};

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {boolean} shouldHaveDebugID
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, shouldHaveDebugID) {
  var instance;

  if (node === null || node === false) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);
  } else if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object') {
    var element = node;
    var type = element.type;
    if (typeof type !== 'function' && typeof type !== 'string') {
      var info = '';
      if (process.env.NODE_ENV !== 'production') {
        if (type === undefined || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }
      }
      info += getDeclarationErrorAddendum(element._owner);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type === 'undefined' ? 'undefined' : _typeof(type), info) : _prodInvariant('130', type == null ? type : typeof type === 'undefined' ? 'undefined' : _typeof(type), info) : void 0;
    }

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);

      // We renamed this. Allow the old name for compat. :(
      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;
      }
    } else {
      instance = new ReactCompositeComponentWrapper(element);
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);
  } else {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node === 'undefined' ? 'undefined' : _typeof(node)) : _prodInvariant('131', typeof node === 'undefined' ? 'undefined' : _typeof(node)) : void 0;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
  }

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
  _instantiateReactComponent: instantiateReactComponent
});

module.exports = instantiateReactComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ExecutionEnvironment = __webpack_require__(9);

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement === 'undefined' ? 'undefined' : _typeof(prevElement);
  var nextType = typeof nextElement === 'undefined' ? 'undefined' : _typeof(nextElement);
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
}

module.exports = shouldUpdateReactComponent;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _assign = __webpack_require__(6);

var emptyFunction = __webpack_require__(14);
var warning = __webpack_require__(3);

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function updatedAncestorInfo(oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function isTagValidWithParent(tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function findInvalidAncestorForTag(tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function findOwnerStack(instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    do {
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function validateDOMNesting(childTag, childText, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      var tagDisplayName = childTag;
      var whitespaceInfo = '';
      if (childTag === '#text') {
        if (/\S/.test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
      }
    }
  };

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Router = __webpack_require__(72);

var _Router2 = _interopRequireDefault(_Router);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _Router2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _warning = __webpack_require__(19);

var _warning2 = _interopRequireDefault(_warning);

var _invariant = __webpack_require__(21);

var _invariant2 = _interopRequireDefault(_invariant);

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * The public API for putting history on context.
 */

var Router = function (_React$Component) {
  _inherits(Router, _React$Component);

  function Router() {
    var _temp, _this, _ret;

    _classCallCheck(this, Router);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      match: _this.computeMatch(_this.props.history.location.pathname)
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Router.prototype.getChildContext = function getChildContext() {
    return {
      router: _extends({}, this.context.router, {
        history: this.props.history,
        route: {
          location: this.props.history.location,
          match: this.state.match
        }
      })
    };
  };

  Router.prototype.computeMatch = function computeMatch(pathname) {
    return {
      path: "/",
      url: "/",
      params: {},
      isExact: pathname === "/"
    };
  };

  Router.prototype.componentWillMount = function componentWillMount() {
    var _this2 = this;

    var _props = this.props,
        children = _props.children,
        history = _props.history;

    (0, _invariant2.default)(children == null || _react2.default.Children.count(children) === 1, "A <Router> may have only one child element");

    // Do this here so we can setState when a <Redirect> changes the
    // location in componentWillMount. This happens e.g. when doing
    // server rendering using a <StaticRouter>.
    this.unlisten = history.listen(function () {
      _this2.setState({
        match: _this2.computeMatch(history.location.pathname)
      });
    });
  };

  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    (0, _warning2.default)(this.props.history === nextProps.history, "You cannot change <Router history>");
  };

  Router.prototype.componentWillUnmount = function componentWillUnmount() {
    this.unlisten();
  };

  Router.prototype.render = function render() {
    var children = this.props.children;

    return children ? _react2.default.Children.only(children) : null;
  };

  return Router;
}(_react2.default.Component);

Router.propTypes = {
  history: _propTypes2.default.object.isRequired,
  children: _propTypes2.default.node
};
Router.contextTypes = {
  router: _propTypes2.default.object
};
Router.childContextTypes = {
  router: _propTypes2.default.object.isRequired
};

exports.default = Router;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _pathToRegexp = __webpack_require__(135);

var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var patternCache = {};
var cacheLimit = 10000;
var cacheCount = 0;

var compilePath = function compilePath(pattern, options) {
  var cacheKey = "" + options.end + options.strict + options.sensitive;
  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});

  if (cache[pattern]) return cache[pattern];

  var keys = [];
  var re = (0, _pathToRegexp2.default)(pattern, keys, options);
  var compiledPattern = { re: re, keys: keys };

  if (cacheCount < cacheLimit) {
    cache[pattern] = compiledPattern;
    cacheCount++;
  }

  return compiledPattern;
};

/**
 * Public API for matching a URL pathname to a path pattern.
 */
var matchPath = function matchPath(pathname) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var parent = arguments[2];

  if (typeof options === "string") options = { path: options };

  var _options = options,
      path = _options.path,
      _options$exact = _options.exact,
      exact = _options$exact === undefined ? false : _options$exact,
      _options$strict = _options.strict,
      strict = _options$strict === undefined ? false : _options$strict,
      _options$sensitive = _options.sensitive,
      sensitive = _options$sensitive === undefined ? false : _options$sensitive;

  if (path == null) return parent;

  var _compilePath = compilePath(path, { end: exact, strict: strict, sensitive: sensitive }),
      re = _compilePath.re,
      keys = _compilePath.keys;

  var match = re.exec(pathname);

  if (!match) return null;

  var url = match[0],
      values = match.slice(1);

  var isExact = pathname === url;

  if (exact && !isExact) return null;

  return {
    path: path, // the path pattern used to match
    url: path === "/" && url === "" ? "/" : url, // the matched portion of the URL
    isExact: isExact, // whether or not we matched exactly
    params: keys.reduce(function (memo, key, index) {
      memo[key.name] = values[index];
      return memo;
    }, {})
  };
};

exports.default = matchPath;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function lowPriorityWarning() {};

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function lowPriorityWarning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = lowPriorityWarning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _Layout = __webpack_require__(79);

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = __webpack_require__(168);

var _routes2 = _interopRequireDefault(_routes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var App = function (_React$Component) {
  _inherits(App, _React$Component);

  function App() {
    _classCallCheck(this, App);

    return _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).apply(this, arguments));
  }

  _createClass(App, [{
    key: 'render',
    value: function render() {
      var StyleRoot = _radium2.default.StyleRoot;

      return _react2.default.createElement(
        StyleRoot,
        null,
        _react2.default.createElement(
          _Layout2.default,
          null,
          (0, _routes2.default)(this.props.config)
        )
      );
    }
  }]);

  return App;
}(_react2.default.Component);

exports.default = (0, _radium2.default)(App);

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(171);

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _axios = __webpack_require__(76);

var _axios2 = _interopRequireDefault(_axios);

var _reactRouterDom = __webpack_require__(26);

var _Text = __webpack_require__(46);

var _Text2 = _interopRequireDefault(_Text);

var _Input = __webpack_require__(78);

var _Input2 = _interopRequireDefault(_Input);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DetailsInput = function (_React$Component) {
  _inherits(DetailsInput, _React$Component);

  function DetailsInput(props) {
    _classCallCheck(this, DetailsInput);

    var _this = _possibleConstructorReturn(this, (DetailsInput.__proto__ || Object.getPrototypeOf(DetailsInput)).call(this, props));

    _this.state = {
      first: '',
      last: '',
      email: '',
      mode: 'init',
      message: '',
      device: ''
    };
    return _this;
  }

  _createClass(DetailsInput, [{
    key: 'firstChange',
    value: function firstChange(event) {
      this.setState({ first: event.target.value });
    }
  }, {
    key: 'lastChange',
    value: function lastChange(event) {
      this.setState({ last: event.target.value });
    }
  }, {
    key: 'emailChange',
    value: function emailChange(event) {
      this.setState({ email: event.target.value });
    }
  }, {
    key: 'deviceChange',
    value: function deviceChange(event) {
      this.setState({ device: event.target.value });
    }
  }, {
    key: 'handleSubmit',
    value: function handleSubmit(event) {
      var _this2 = this;

      event.preventDefault();

      if (this.props.signup) {
        var _state = this.state,
            first = _state.first,
            last = _state.last,
            email = _state.email;


        _axios2.default.post('api/subscribe', {
          "First Name": first,
          "Last Name": last,
          "Email": email
        }).then(function (res) {
          var status = res.data.status;
          console.log(res.data);
          if (status === "succeeded") {
            _this2.setState({ mode: 'success', message: 'Thanks for signing up! We\'ll be in touch soon!' });
          } else {
            var message = void 0;

            if (!!res.data.err && !!res.data.err.code) {
              switch (res.data.err.code) {
                case 214:
                  message = "You're already on our list!";
                  break;
                case -100:
                  message = "You didn't enter a valid email address";
                  break;
                default:
                  message = 'Something went wrong - error code ' + res.data.err.code;
              }
            } else {
              message = "An unknown error occurred";
            }
            _this2.setState({
              mode: 'error',
              message: message
            });
          }
        });
      } else {
        var _state2 = this.state,
            _first = _state2.first,
            _last = _state2.last,
            _email = _state2.email,
            device = _state2.device;


        _axios2.default.post('https://formspree.io/support@arroe.co', {
          "First Name": _first,
          "Last Name": _last,
          "Email": _email,
          "Device": device,
          "_replyto": _email
        }).then(function (res) {
          _this2.setState({ mode: 'success', message: 'Thanks for your message, we\'ll respond soon' });
        }).catch(function (err) {
          _this2.setState({ mode: 'error', message: 'Something went wrong submitting your form' });
        });
      }
    }
  }, {
    key: 'renderInit',
    value: function renderInit() {
      var _props = this.props,
          devices = _props.devices,
          signup = _props.signup;

      return _react2.default.createElement(
        'form',
        { style: styles.container },
        _react2.default.createElement(
          'div',
          { style: styles.nameHolder },
          _react2.default.createElement(_Input2.default, { name: 'First Name', placeholder: 'First Name', style: [styles.name, styles.input], value: this.state.first, onChange: this.firstChange.bind(this) }),
          _react2.default.createElement(_Input2.default, { name: 'Last Name', placeholder: 'Last Name', style: [styles.name, styles.input], value: this.state.last, onChange: this.lastChange.bind(this) })
        ),
        _react2.default.createElement(_Input2.default, { name: 'Email', placeholder: 'Email Address', style: [styles.email, styles.input], value: this.state.email, onChange: this.emailChange.bind(this) }),
        signup ? _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'a',
            { style: styles.link, href: '#', onClick: this.handleSubmit.bind(this) },
            _react2.default.createElement(
              'div',
              { style: styles.box },
              'Sign Up'
            )
          ),
          _react2.default.createElement(
            'p',
            { style: styles.small },
            'By signing up you agree to our ',
            _react2.default.createElement(
              _reactRouterDom.Link,
              { to: '/privacy' },
              'Privacy Policy.'
            )
          )
        ) : _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(_Input2.default, { name: 'user-device', style: [styles.email, styles.input], placeholder: 'Enter your device information', value: this.state.device, onChange: this.deviceChange.bind(this) }),
          _react2.default.createElement(
            'a',
            { style: styles.link, href: '#', onClick: this.handleSubmit.bind(this) },
            _react2.default.createElement(
              'div',
              { style: [styles.box, styles.light] },
              'Send'
            )
          )
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      switch (this.state.mode) {
        case 'init':
          return this.renderInit();
          break;
        case 'error':
          return _react2.default.createElement(
            'div',
            { style: styles.container },
            _react2.default.createElement(
              'p',
              null,
              this.state.message
            ),
            _react2.default.createElement(
              'a',
              { href: '#', onClick: function onClick(e) {
                  e.preventDefault();_this3.setState({ mode: 'init' });
                } },
              ' Try again '
            )
          );
        case 'success':
          return _react2.default.createElement(
            'div',
            { style: styles.container },
            _react2.default.createElement('img', { src: 'img/tick-icon.svg', style: styles.success }),
            _react2.default.createElement(
              'h3',
              null,
              this.state.message
            )
          );
      }
    }
  }]);

  return DetailsInput;
}(_react2.default.Component);

var styles = {
  container: {
    maxWidth: '500px',
    margin: '0px auto',
    minHeight: '150px',
    padding: '0px'
  },
  name: {
    width: '49%'
  },
  input: {
    '@media (max-width: 600px)': {
      width: '100%'
    }
  },
  tick: {
    height: '15px',
    marginRight: '10px'
  },
  email: {
    width: '100%'
  },
  success: {
    width: '60px'
  },
  nameHolder: {
    display: 'flex',
    justifyContent: 'space-between',
    '@media (max-width: 600px)': {
      flexDirection: 'column'
    }
  },
  small: {
    fontSize: '12px'
  },
  box: {
    backgroundColor: '#1e1e1e',
    borderRadius: '5px',
    textAlign: 'center',
    width: '120px',
    margin: 'auto',
    color: 'white',
    textTransform: 'uppercase'
  },
  light: {
    color: '#1e1e1e',
    backgroundColor: '#ffffff'
  },
  link: {
    textDecoration: 'none'
  }
};

exports.default = (0, _radium2.default)(DetailsInput);

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Input = function (_React$Component) {
  _inherits(Input, _React$Component);

  function Input() {
    _classCallCheck(this, Input);

    return _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).apply(this, arguments));
  }

  _createClass(Input, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          value = _props.value,
          onChange = _props.onChange,
          placeholder = _props.placeholder,
          name = _props.name,
          style = _props.style;

      return _react2.default.createElement(
        'div',
        { style: [styles.inputHolder, style] },
        _react2.default.createElement('input', { key: name, value: value, onChange: onChange, style: styles.input, placeholder: placeholder })
      );
    }
  }]);

  return Input;
}(_react2.default.Component);

var styles = {
  inputHolder: {
    padding: '0',
    margin: '0 0 10px 0',
    border: '1px solid #cccccc',
    width: '49%',
    borderRadius: '3px',
    overflow: 'hidden',
    backgroundColor: '#fff',
    '@media (max-width: 600px)': {
      width: '100%',
      marginBottom: '10px'
    },
    boxSizing: 'border-box'
  },
  input: {
    padding: '5px 8px',
    width: '130%',
    height: '38px',
    border: 'none',
    boxShadow: 'none',
    backgroundColor: 'transparent',
    backgroundImage: 'none',
    appearence: 'none',
    ':focus': {
      outline: 'none'
    },
    fontSize: '14px'
  }
};

exports.default = (0, _radium2.default)(Input);

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Layout = function (_React$Component) {
  _inherits(Layout, _React$Component);

  function Layout() {
    _classCallCheck(this, Layout);

    return _possibleConstructorReturn(this, (Layout.__proto__ || Object.getPrototypeOf(Layout)).apply(this, arguments));
  }

  _createClass(Layout, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        this.props.children
      );
    }
  }]);

  return Layout;
}(_react2.default.Component);

exports.default = Layout;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Person = function (_React$Component) {
  _inherits(Person, _React$Component);

  function Person() {
    _classCallCheck(this, Person);

    return _possibleConstructorReturn(this, (Person.__proto__ || Object.getPrototypeOf(Person)).apply(this, arguments));
  }

  _createClass(Person, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { style: styles.container },
        _react2.default.createElement('div', { style: [styles.picture, { backgroundImage: 'url(' + this.props.picture + ')' }] }),
        _react2.default.createElement(
          'p',
          { style: styles.name },
          this.props.name
        ),
        _react2.default.createElement(
          'p',
          { style: styles.title },
          this.props.title
        )
      );
    }
  }]);

  return Person;
}(_react2.default.Component);

var styles = {
  container: {
    width: '160px',
    textAlign: 'center',
    display: 'inline-block',
    margin: '10px',
    height: '220px',
    verticalAlign: 'middle'
  },
  picture: {
    height: '160px',
    width: '160px',
    backgroundSize: 'cover',
    borderRadius: '50%',
    backgroundPosition: 'center',
    marginBottom: '10px'
  },
  name: {
    fontSize: '16px',
    fontWeight: 'bold',
    margin: '0px'
  },
  title: {
    fontSize: '14px',
    margin: '0px',
    display: 'block'
  }
};

exports.default = (0, _radium2.default)(Person);

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Youtube = function (_React$Component) {
  _inherits(Youtube, _React$Component);

  function Youtube() {
    _classCallCheck(this, Youtube);

    return _possibleConstructorReturn(this, (Youtube.__proto__ || Object.getPrototypeOf(Youtube)).apply(this, arguments));
  }

  _createClass(Youtube, [{
    key: 'render',
    value: function render() {
      var videoSrc = "https://www.youtube.com/embed/" + this.props.videoId + "?autoplay=" + this.props.autoplay + "&rel=" + this.props.rel + "&modestbranding=" + this.props.modest + "&controls=" + this.props.controls + "&showinfo=" + this.props.showinfo;
      return _react2.default.createElement(
        'div',
        { style: [styles.container, this.props.style] },
        _react2.default.createElement('iframe', { className: 'player', type: 'text/html', width: '100%', height: '100%', src: videoSrc, frameBorder: '0' })
      );
    }
  }]);

  return Youtube;
}(_react2.default.Component);

var styles = {
  container: {
    width: '100%',
    height: '100%'
  }
};

exports.default = (0, _radium2.default)(Youtube);

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(12);
var settle = __webpack_require__(177);
var buildURL = __webpack_require__(180);
var parseHeaders = __webpack_require__(186);
var isURLSameOrigin = __webpack_require__(184);
var createError = __webpack_require__(85);
var btoa = typeof window !== 'undefined' && window.btoa && window.btoa.bind(window) || __webpack_require__(179);

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();
    var loadEvent = 'onreadystatechange';
    var xDomain = false;

    // For IE 8/9 CORS support
    // Only supports POST and GET calls and doesn't returns the response headers.
    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
    if (process.env.NODE_ENV !== 'test' && typeof window !== 'undefined' && window.XDomainRequest && !('withCredentials' in request) && !isURLSameOrigin(config.url)) {
      request = new window.XDomainRequest();
      loadEvent = 'onload';
      xDomain = true;
      request.onprogress = function handleProgress() {};
      request.ontimeout = function handleTimeout() {};
    }

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request[loadEvent] = function handleLoad() {
      if (!request || request.readyState !== 4 && !xDomain) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)
        status: request.status === 1223 ? 204 : request.status,
        statusText: request.status === 1223 ? 'No Content' : request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(182);

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(176);

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var emptyFunction = __webpack_require__(14);

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */

function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/* eslint-disable no-var, prefer-template */
var uppercasePattern = /[A-Z]/g;
var msPattern = /^ms-/;
var cache = {};

function toHyphenLower(match) {
  return '-' + match.toLowerCase();
}

function hyphenateStyleName(name) {
  if (cache.hasOwnProperty(name)) {
    return cache[name];
  }

  var hName = name.replace(uppercasePattern, toHyphenLower);
  return cache[name] = msPattern.test(hName) ? '-' + hName : hName;
}

exports.default = hyphenateStyleName;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = { "Webkit": { "transform": true, "transformOrigin": true, "transformOriginX": true, "transformOriginY": true, "backfaceVisibility": true, "perspective": true, "perspectiveOrigin": true, "transformStyle": true, "transformOriginZ": true, "animation": true, "animationDelay": true, "animationDirection": true, "animationFillMode": true, "animationDuration": true, "animationIterationCount": true, "animationName": true, "animationPlayState": true, "animationTimingFunction": true, "appearance": true, "userSelect": true, "fontKerning": true, "textEmphasisPosition": true, "textEmphasis": true, "textEmphasisStyle": true, "textEmphasisColor": true, "boxDecorationBreak": true, "clipPath": true, "maskImage": true, "maskMode": true, "maskRepeat": true, "maskPosition": true, "maskClip": true, "maskOrigin": true, "maskSize": true, "maskComposite": true, "mask": true, "maskBorderSource": true, "maskBorderMode": true, "maskBorderSlice": true, "maskBorderWidth": true, "maskBorderOutset": true, "maskBorderRepeat": true, "maskBorder": true, "maskType": true, "textDecorationStyle": true, "textDecorationSkip": true, "textDecorationLine": true, "textDecorationColor": true, "filter": true, "fontFeatureSettings": true, "breakAfter": true, "breakBefore": true, "breakInside": true, "columnCount": true, "columnFill": true, "columnGap": true, "columnRule": true, "columnRuleColor": true, "columnRuleStyle": true, "columnRuleWidth": true, "columns": true, "columnSpan": true, "columnWidth": true, "flex": true, "flexBasis": true, "flexDirection": true, "flexGrow": true, "flexFlow": true, "flexShrink": true, "flexWrap": true, "alignContent": true, "alignItems": true, "alignSelf": true, "justifyContent": true, "order": true, "transition": true, "transitionDelay": true, "transitionDuration": true, "transitionProperty": true, "transitionTimingFunction": true, "backdropFilter": true, "scrollSnapType": true, "scrollSnapPointsX": true, "scrollSnapPointsY": true, "scrollSnapDestination": true, "scrollSnapCoordinate": true, "shapeImageThreshold": true, "shapeImageMargin": true, "shapeImageOutside": true, "hyphens": true, "flowInto": true, "flowFrom": true, "regionFragment": true, "textSizeAdjust": true }, "Moz": { "appearance": true, "userSelect": true, "boxSizing": true, "textAlignLast": true, "textDecorationStyle": true, "textDecorationSkip": true, "textDecorationLine": true, "textDecorationColor": true, "tabSize": true, "hyphens": true, "fontFeatureSettings": true, "breakAfter": true, "breakBefore": true, "breakInside": true, "columnCount": true, "columnFill": true, "columnGap": true, "columnRule": true, "columnRuleColor": true, "columnRuleStyle": true, "columnRuleWidth": true, "columns": true, "columnSpan": true, "columnWidth": true }, "ms": { "flex": true, "flexBasis": false, "flexDirection": true, "flexGrow": false, "flexFlow": true, "flexShrink": false, "flexWrap": true, "alignContent": false, "alignItems": false, "alignSelf": false, "justifyContent": false, "order": false, "transform": true, "transformOrigin": true, "transformOriginX": true, "transformOriginY": true, "userSelect": true, "wrapFlow": true, "wrapThrough": true, "wrapMargin": true, "scrollSnapType": true, "scrollSnapPointsX": true, "scrollSnapPointsY": true, "scrollSnapDestination": true, "scrollSnapCoordinate": true, "touchAction": true, "hyphens": true, "flowInto": true, "flowFrom": true, "breakBefore": true, "breakAfter": true, "breakInside": true, "regionFragment": true, "gridTemplateColumns": true, "gridTemplateRows": true, "gridTemplateAreas": true, "gridTemplate": true, "gridAutoColumns": true, "gridAutoRows": true, "gridAutoFlow": true, "grid": true, "gridRowStart": true, "gridColumnStart": true, "gridRowEnd": true, "gridRow": true, "gridColumn": true, "gridColumnEnd": true, "gridColumnGap": true, "gridRowGap": true, "gridArea": true, "gridGap": true, "textSizeAdjust": true } };
module.exports = exports["default"];

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sortPrefixedStyle;

var _isPrefixedProperty = __webpack_require__(230);

var _isPrefixedProperty2 = _interopRequireDefault(_isPrefixedProperty);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function sortPrefixedStyle(style) {
  return Object.keys(style).sort(function (left, right) {
    if ((0, _isPrefixedProperty2.default)(left) && !(0, _isPrefixedProperty2.default)(right)) {
      return -1;
    } else if (!(0, _isPrefixedProperty2.default)(left) && (0, _isPrefixedProperty2.default)(right)) {
      return 1;
    }
    return 0;
  }).reduce(function (sortedStyle, prop) {
    sortedStyle[prop] = style[prop];
    return sortedStyle;
  }, {});
}
module.exports = exports['default'];

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



// React 15.5 references this module, and assumes PropTypes are still callable in production.
// Therefore we re-export development-only version with all the PropTypes checks here.
// However if one is migrating to the `prop-types` npm library, they will go through the
// `index.js` entry point, and it will branch depending on the environment.

var factory = __webpack_require__(94);
module.exports = function (isValidElement) {
  // It is still allowed in 15.5.
  var throwOnDirectAccess = false;
  return factory(isValidElement, throwOnDirectAccess);
};

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var ReactIs = __webpack_require__(130);
var assign = __webpack_require__(6);

var ReactPropTypesSecret = __webpack_require__(51);
var checkPropTypes = __webpack_require__(234);

var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function printWarning() {};

if (process.env.NODE_ENV !== 'production') {
  printWarning = function printWarning(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function (isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (!manualPropTypeCallCache[cacheKey] &&
          // Avoid spamming the console because they are often not actionable except for lib authors
          manualPropTypeWarningCount < 3) {
            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (process.env.NODE_ENV !== 'production') {
        if (arguments.length > 1) {
          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue)) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = appendPxIfNeeded;

// Copied from https://github.com/facebook/react/blob/
// 102cd291899f9942a76c40a0e78920a6fe544dc1/
// src/renderers/dom/shared/CSSProperty.js
var isUnitlessNumber = {
  animationIterationCount: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridColumn: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  stopOpacity: true,
  strokeDashoffset: true,
  strokeOpacity: true,
  strokeWidth: true
};

function appendPxIfNeeded(propertyName, value) {
  var needsPxSuffix = !isUnitlessNumber[propertyName] && typeof value === 'number' && value !== 0;
  return needsPxSuffix ? value + 'px' : value;
}
module.exports = exports['default'];

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

exports.default = enhanceWithRadium;

var _react = __webpack_require__(1);

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleKeeper = __webpack_require__(54);

var _styleKeeper2 = _interopRequireDefault(_styleKeeper);

var _resolveStyles = __webpack_require__(102);

var _resolveStyles2 = _interopRequireDefault(_resolveStyles);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var KEYS_TO_IGNORE_WHEN_COPYING_PROPERTIES = ['arguments', 'callee', 'caller', 'length', 'name', 'prototype', 'type'];

function copyProperties(source, target) {
  Object.getOwnPropertyNames(source).forEach(function (key) {
    if (KEYS_TO_IGNORE_WHEN_COPYING_PROPERTIES.indexOf(key) < 0 && !target.hasOwnProperty(key)) {
      var descriptor = Object.getOwnPropertyDescriptor(source, key);
      Object.defineProperty(target, key, descriptor);
    }
  });
}

function isStateless(component) {
  return !component.render && !(component.prototype && component.prototype.render);
}

// Check if value is a real ES class in Native / Node code.
// See: https://stackoverflow.com/a/30760236
function isNativeClass(component) {
  return typeof component === 'function' && /^\s*class\s+/.test(component.toString());
}

// Manually apply babel-ish class inheritance.
function inherits(subClass, superClass) {
  if (typeof superClass !== 'function' && superClass !== null) {
    throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });

  if (superClass) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(subClass, superClass);
    } else {
      subClass.__proto__ = superClass; // eslint-disable-line no-proto
    }
  }
}

function enhanceWithRadium(configOrComposedComponent) {
  var _class, _temp;

  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (typeof configOrComposedComponent !== 'function') {
    var newConfig = _extends({}, config, configOrComposedComponent);
    return function (configOrComponent) {
      return enhanceWithRadium(configOrComponent, newConfig);
    };
  }

  var component = configOrComposedComponent;
  var ComposedComponent = component;

  // Handle Native ES classes.
  if (isNativeClass(ComposedComponent)) {
    // Manually approximate babel's class transpilation, but _with_ a real `new` call.
    ComposedComponent = function (OrigComponent) {
      function NewComponent() {
        // Ordinarily, babel would produce something like:
        //
        // ```
        // return _possibleConstructorReturn(this, OrigComponent.apply(this, arguments));
        // ```
        //
        // Instead, we just call `new` directly without the `_possibleConstructorReturn` wrapper.
        var source = new (Function.prototype.bind.apply(OrigComponent, [null].concat(Array.prototype.slice.call(arguments))))();

        // Then we manually update context with properties.
        copyProperties(source, this);

        return this;
      }

      inherits(NewComponent, OrigComponent);

      return NewComponent;
    }(ComposedComponent);
  }

  // Handle stateless components
  if (isStateless(ComposedComponent)) {
    ComposedComponent = function (_Component) {
      _inherits(ComposedComponent, _Component);

      function ComposedComponent() {
        _classCallCheck(this, ComposedComponent);

        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
      }

      ComposedComponent.prototype.render = function render() {
        return component(this.props, this.context);
      };

      return ComposedComponent;
    }(_react.Component);

    ComposedComponent.displayName = component.displayName || component.name;
  }

  var RadiumEnhancer = (_temp = _class = function (_ComposedComponent) {
    _inherits(RadiumEnhancer, _ComposedComponent);

    function RadiumEnhancer() {
      _classCallCheck(this, RadiumEnhancer);

      var _this2 = _possibleConstructorReturn(this, _ComposedComponent.apply(this, arguments));

      _this2.state = _this2.state || {};
      _this2.state._radiumStyleState = {};
      _this2._radiumIsMounted = true;
      return _this2;
    }

    RadiumEnhancer.prototype.componentWillUnmount = function componentWillUnmount() {
      if (_ComposedComponent.prototype.componentWillUnmount) {
        _ComposedComponent.prototype.componentWillUnmount.call(this);
      }

      this._radiumIsMounted = false;

      if (this._radiumMouseUpListener) {
        this._radiumMouseUpListener.remove();
      }

      if (this._radiumMediaQueryListenersByQuery) {
        Object.keys(this._radiumMediaQueryListenersByQuery).forEach(function (query) {
          this._radiumMediaQueryListenersByQuery[query].remove();
        }, this);
      }
    };

    RadiumEnhancer.prototype.getChildContext = function getChildContext() {
      var superChildContext = _ComposedComponent.prototype.getChildContext ? _ComposedComponent.prototype.getChildContext.call(this) : {};

      if (!this.props.radiumConfig) {
        return superChildContext;
      }

      var newContext = _extends({}, superChildContext);

      if (this.props.radiumConfig) {
        newContext._radiumConfig = this.props.radiumConfig;
      }

      return newContext;
    };

    RadiumEnhancer.prototype.render = function render() {
      var renderedElement = _ComposedComponent.prototype.render.call(this);
      var currentConfig = this.props.radiumConfig || this.context._radiumConfig || config;

      if (config && currentConfig !== config) {
        currentConfig = _extends({}, config, currentConfig);
      }

      return (0, _resolveStyles2.default)(this, renderedElement, currentConfig);
    };

    return RadiumEnhancer;
  }(ComposedComponent), _class._isRadiumEnhanced = true, _temp);

  // Class inheritance uses Object.create and because of __proto__ issues
  // with IE <10 any static properties of the superclass aren't inherited and
  // so need to be manually populated.
  // See http://babeljs.io/docs/advanced/caveats/#classes-10-and-below-

  copyProperties(component, RadiumEnhancer);

  if (process.env.NODE_ENV !== 'production') {
    // This also fixes React Hot Loader by exposing the original components top
    // level prototype methods on the Radium enhanced prototype as discussed in
    // https://github.com/FormidableLabs/radium/issues/219.
    copyProperties(ComposedComponent.prototype, RadiumEnhancer.prototype);
  }

  if (RadiumEnhancer.propTypes && RadiumEnhancer.propTypes.style) {
    RadiumEnhancer.propTypes = _extends({}, RadiumEnhancer.propTypes, {
      style: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object])
    });
  }

  RadiumEnhancer.displayName = component.displayName || component.name || 'Component';

  RadiumEnhancer.contextTypes = _extends({}, RadiumEnhancer.contextTypes, {
    _radiumConfig: _propTypes2.default.object,
    _radiumStyleKeeper: _propTypes2.default.instanceOf(_styleKeeper2.default)
  });

  RadiumEnhancer.childContextTypes = _extends({}, RadiumEnhancer.childContextTypes, {
    _radiumConfig: _propTypes2.default.object,
    _radiumStyleKeeper: _propTypes2.default.instanceOf(_styleKeeper2.default)
  });

  return RadiumEnhancer;
}
module.exports = exports['default'];
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var getStateKey = function getStateKey(elementKey) {
  return elementKey === null || elementKey === undefined ? 'main' : elementKey.toString();
};

exports.default = getStateKey;
module.exports = exports['default'];

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getStateKey = __webpack_require__(97);

var _getStateKey2 = _interopRequireDefault(_getStateKey);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var getState = function getState(state, elementKey, value) {
  var key = (0, _getStateKey2.default)(elementKey);

  return !!state && !!state._radiumStyleState && !!state._radiumStyleState[key] && state._radiumStyleState[key][value];
};

exports.default = getState;
module.exports = exports['default'];

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hash;

// a simple djb2 hash based on hash-string:
// https://github.com/MatthewBarker/hash-string/blob/master/source/hash-string.js
// returns a hex-encoded hash
function hash(text) {
  if (!text) {
    return '';
  }

  var hashValue = 5381;
  var index = text.length - 1;

  while (index) {
    hashValue = hashValue * 33 ^ text.charCodeAt(index);
    index -= 1;
  }

  return (hashValue >>> 0).toString(16);
}
module.exports = exports['default'];

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mapObject;
function mapObject(object, mapper) {
  return Object.keys(object).reduce(function (result, key) {
    result[key] = mapper(object[key], key);
    return result;
  }, {});
}
module.exports = exports["default"];

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _checkPropsPlugin = __webpack_require__(243);

var _checkPropsPlugin2 = _interopRequireDefault(_checkPropsPlugin);

var _keyframesPlugin = __webpack_require__(244);

var _keyframesPlugin2 = _interopRequireDefault(_keyframesPlugin);

var _mergeStyleArrayPlugin = __webpack_require__(245);

var _mergeStyleArrayPlugin2 = _interopRequireDefault(_mergeStyleArrayPlugin);

var _prefixPlugin = __webpack_require__(247);

var _prefixPlugin2 = _interopRequireDefault(_prefixPlugin);

var _removeNestedStylesPlugin = __webpack_require__(248);

var _removeNestedStylesPlugin2 = _interopRequireDefault(_removeNestedStylesPlugin);

var _resolveInteractionStylesPlugin = __webpack_require__(249);

var _resolveInteractionStylesPlugin2 = _interopRequireDefault(_resolveInteractionStylesPlugin);

var _resolveMediaQueriesPlugin = __webpack_require__(250);

var _resolveMediaQueriesPlugin2 = _interopRequireDefault(_resolveMediaQueriesPlugin);

var _visitedPlugin = __webpack_require__(251);

var _visitedPlugin2 = _interopRequireDefault(_visitedPlugin);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = {
  checkProps: _checkPropsPlugin2.default,
  keyframes: _keyframesPlugin2.default,
  mergeStyleArray: _mergeStyleArrayPlugin2.default,
  prefix: _prefixPlugin2.default,
  removeNestedStyles: _removeNestedStylesPlugin2.default,
  resolveInteractionStyles: _resolveInteractionStylesPlugin2.default,
  resolveMediaQueries: _resolveMediaQueriesPlugin2.default,
  visited: _visitedPlugin2.default
};
/* eslint-disable block-scoped-const */

module.exports = exports['default'];

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var _appendImportantToEachValue = __webpack_require__(236);

var _appendImportantToEachValue2 = _interopRequireDefault(_appendImportantToEachValue);

var _cssRuleSetToString = __webpack_require__(52);

var _cssRuleSetToString2 = _interopRequireDefault(_cssRuleSetToString);

var _getState = __webpack_require__(98);

var _getState2 = _interopRequireDefault(_getState);

var _getStateKey = __webpack_require__(97);

var _getStateKey2 = _interopRequireDefault(_getStateKey);

var _hash = __webpack_require__(99);

var _hash2 = _interopRequireDefault(_hash);

var _mergeStyles = __webpack_require__(242);

var _plugins = __webpack_require__(101);

var _plugins2 = _interopRequireDefault(_plugins);

var _exenv = __webpack_require__(190);

var _exenv2 = _interopRequireDefault(_exenv);

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var DEFAULT_CONFIG = {
  plugins: [_plugins2.default.mergeStyleArray, _plugins2.default.checkProps, _plugins2.default.resolveMediaQueries, _plugins2.default.resolveInteractionStyles, _plugins2.default.keyframes, _plugins2.default.visited, _plugins2.default.removeNestedStyles, _plugins2.default.prefix, _plugins2.default.checkProps]
};

// Gross
var globalState = {};

// Declare early for recursive helpers.
var resolveStyles = null;

var _shouldResolveStyles = function _shouldResolveStyles(component) {
  return component.type && !component.type._isRadiumEnhanced;
};

var _resolveChildren = function _resolveChildren(_ref) {
  var children = _ref.children,
      component = _ref.component,
      config = _ref.config,
      existingKeyMap = _ref.existingKeyMap;

  if (!children) {
    return children;
  }

  var childrenType = typeof children === 'undefined' ? 'undefined' : _typeof(children);

  if (childrenType === 'string' || childrenType === 'number') {
    // Don't do anything with a single primitive child
    return children;
  }

  if (childrenType === 'function') {
    // Wrap the function, resolving styles on the result
    return function () {
      var result = children.apply(this, arguments);
      if (_react2.default.isValidElement(result)) {
        return resolveStyles(component, result, config, existingKeyMap, true);
      }
      return result;
    };
  }

  if (_react2.default.Children.count(children) === 1 && children.type) {
    // If a React Element is an only child, don't wrap it in an array for
    // React.Children.map() for React.Children.only() compatibility.
    var onlyChild = _react2.default.Children.only(children);
    return resolveStyles(component, onlyChild, config, existingKeyMap, true);
  }

  return _react2.default.Children.map(children, function (child) {
    if (_react2.default.isValidElement(child)) {
      return resolveStyles(component, child, config, existingKeyMap, true);
    }

    return child;
  });
};

// Recurse over props, just like children
var _resolveProps = function _resolveProps(_ref2) {
  var component = _ref2.component,
      config = _ref2.config,
      existingKeyMap = _ref2.existingKeyMap,
      props = _ref2.props;

  var newProps = props;

  Object.keys(props).forEach(function (prop) {
    // We already recurse over children above
    if (prop === 'children') {
      return;
    }

    var propValue = props[prop];
    if (_react2.default.isValidElement(propValue)) {
      newProps = _extends({}, newProps);
      newProps[prop] = resolveStyles(component, propValue, config, existingKeyMap, true);
    }
  });

  return newProps;
};

var _buildGetKey = function _buildGetKey(_ref3) {
  var componentName = _ref3.componentName,
      existingKeyMap = _ref3.existingKeyMap,
      renderedElement = _ref3.renderedElement;

  // We need a unique key to correlate state changes due to user interaction
  // with the rendered element, so we know to apply the proper interactive
  // styles.
  var originalKey = typeof renderedElement.ref === 'string' ? renderedElement.ref : renderedElement.key;
  var key = (0, _getStateKey2.default)(originalKey);

  var alreadyGotKey = false;
  var getKey = function getKey() {
    if (alreadyGotKey) {
      return key;
    }

    alreadyGotKey = true;

    if (existingKeyMap[key]) {
      var elementName = void 0;
      if (typeof renderedElement.type === 'string') {
        elementName = renderedElement.type;
      } else if (renderedElement.type.constructor) {
        elementName = renderedElement.type.constructor.displayName || renderedElement.type.constructor.name;
      }

      throw new Error('Radium requires each element with interactive styles to have a unique ' + 'key, set using either the ref or key prop. ' + (originalKey ? 'Key "' + originalKey + '" is a duplicate.' : 'Multiple elements have no key specified.') + ' ' + 'Component: "' + componentName + '". ' + (elementName ? 'Element: "' + elementName + '".' : ''));
    }

    existingKeyMap[key] = true;

    return key;
  };

  return getKey;
};

var _setStyleState = function _setStyleState(component, key, stateKey, value) {
  if (!component._radiumIsMounted) {
    return;
  }

  var existing = component._lastRadiumState || component.state && component.state._radiumStyleState || {};

  var state = { _radiumStyleState: _extends({}, existing) };
  state._radiumStyleState[key] = _extends({}, state._radiumStyleState[key]);
  state._radiumStyleState[key][stateKey] = value;

  component._lastRadiumState = state._radiumStyleState;
  component.setState(state);
};

var _runPlugins = function _runPlugins(_ref4) {
  var component = _ref4.component,
      config = _ref4.config,
      existingKeyMap = _ref4.existingKeyMap,
      props = _ref4.props,
      renderedElement = _ref4.renderedElement;

  // Don't run plugins if renderedElement is not a simple ReactDOMElement or has
  // no style.
  if (!_react2.default.isValidElement(renderedElement) || typeof renderedElement.type !== 'string' || !props.style) {
    return props;
  }

  var newProps = props;

  var plugins = config.plugins || DEFAULT_CONFIG.plugins;

  var componentName = component.constructor.displayName || component.constructor.name;
  var getKey = _buildGetKey({
    renderedElement: renderedElement,
    existingKeyMap: existingKeyMap,
    componentName: componentName
  });
  var getComponentField = function getComponentField(key) {
    return component[key];
  };
  var getGlobalState = function getGlobalState(key) {
    return globalState[key];
  };
  var componentGetState = function componentGetState(stateKey, elementKey) {
    return (0, _getState2.default)(component.state, elementKey || getKey(), stateKey);
  };
  var setState = function setState(stateKey, value, elementKey) {
    return _setStyleState(component, elementKey || getKey(), stateKey, value);
  };

  var addCSS = function addCSS(css) {
    var styleKeeper = component._radiumStyleKeeper || component.context._radiumStyleKeeper;
    if (!styleKeeper) {
      if (__isTestModeEnabled) {
        return {
          remove: function remove() {}
        };
      }

      throw new Error('To use plugins requiring `addCSS` (e.g. keyframes, media queries), ' + 'please wrap your application in the StyleRoot component. Component ' + 'name: `' + componentName + '`.');
    }

    return styleKeeper.addCSS(css);
  };

  var newStyle = props.style;

  plugins.forEach(function (plugin) {
    var result = plugin({
      ExecutionEnvironment: _exenv2.default,
      addCSS: addCSS,
      appendImportantToEachValue: _appendImportantToEachValue2.default,
      componentName: componentName,
      config: config,
      cssRuleSetToString: _cssRuleSetToString2.default,
      getComponentField: getComponentField,
      getGlobalState: getGlobalState,
      getState: componentGetState,
      hash: _hash2.default,
      mergeStyles: _mergeStyles.mergeStyles,
      props: newProps,
      setState: setState,
      isNestedStyle: _mergeStyles.isNestedStyle,
      style: newStyle
    }) || {};

    newStyle = result.style || newStyle;

    newProps = result.props && Object.keys(result.props).length ? _extends({}, newProps, result.props) : newProps;

    var newComponentFields = result.componentFields || {};
    Object.keys(newComponentFields).forEach(function (fieldName) {
      component[fieldName] = newComponentFields[fieldName];
    });

    var newGlobalState = result.globalState || {};
    Object.keys(newGlobalState).forEach(function (key) {
      globalState[key] = newGlobalState[key];
    });
  });

  if (newStyle !== props.style) {
    newProps = _extends({}, newProps, { style: newStyle });
  }

  return newProps;
};

// Wrapper around React.cloneElement. To avoid processing the same element
// twice, whenever we clone an element add a special prop to make sure we don't
// process this element again.
var _cloneElement = function _cloneElement(renderedElement, newProps, newChildren) {
  // Only add flag if this is a normal DOM element
  if (typeof renderedElement.type === 'string') {
    newProps = _extends({}, newProps, { 'data-radium': true });
  }

  return _react2.default.cloneElement(renderedElement, newProps, newChildren);
};

//
// The nucleus of Radium. resolveStyles is called on the rendered elements
// before they are returned in render. It iterates over the elements and
// children, rewriting props to add event handlers required to capture user
// interactions (e.g. mouse over). It also replaces the style prop because it
// adds in the various interaction styles (e.g. :hover).
//
resolveStyles = function resolveStyles(component, // ReactComponent, flow+eslint complaining
renderedElement) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_CONFIG;
  var existingKeyMap = arguments[3];
  var shouldCheckBeforeResolve = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  // ReactElement
  existingKeyMap = existingKeyMap || {};
  if (!renderedElement ||
  // Bail if we've already processed this element. This ensures that only the
  // owner of an element processes that element, since the owner's render
  // function will be called first (which will always be the case, since you
  // can't know what else to render until you render the parent component).
  renderedElement.props && renderedElement.props['data-radium'] ||
  // Bail if this element is a radium enhanced element, because if it is,
  // then it will take care of resolving its own styles.
  shouldCheckBeforeResolve && !_shouldResolveStyles(renderedElement)) {
    return renderedElement;
  }

  var newChildren = _resolveChildren({
    children: renderedElement.props.children,
    component: component,
    config: config,
    existingKeyMap: existingKeyMap
  });

  var newProps = _resolveProps({
    component: component,
    config: config,
    existingKeyMap: existingKeyMap,
    props: renderedElement.props
  });

  newProps = _runPlugins({
    component: component,
    config: config,
    existingKeyMap: existingKeyMap,
    props: newProps,
    renderedElement: renderedElement
  });

  // If nothing changed, don't bother cloning the element. Might be a bit
  // wasteful, as we add the sentinal to stop double-processing when we clone.
  // Assume benign double-processing is better than unneeded cloning.
  if (newChildren === renderedElement.props.children && newProps === renderedElement.props) {
    return renderedElement;
  }

  return _cloneElement(renderedElement, newProps !== renderedElement.props ? newProps : {}, newChildren);
};

// Only for use by tests
var __isTestModeEnabled = false;
if (process.env.NODE_ENV !== 'production') {
  resolveStyles.__clearStateForTests = function () {
    globalState = {};
  };
  resolveStyles.__setTestMode = function (isEnabled) {
    __isTestModeEnabled = isEnabled;
  };
}

exports.default = resolveStyles;
module.exports = exports['default'];
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * CSS properties which accept numbers but are not in units of "px".
 */

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var PooledClass = __webpack_require__(22);

var invariant = __webpack_require__(2);

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */

var CallbackQueue = function () {
  function CallbackQueue(arg) {
    _classCallCheck(this, CallbackQueue);

    this._callbacks = null;
    this._contexts = null;
    this._arg = arg;
  }

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */

  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
    this._callbacks = this._callbacks || [];
    this._callbacks.push(callback);
    this._contexts = this._contexts || [];
    this._contexts.push(context);
  };

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */

  CallbackQueue.prototype.notifyAll = function notifyAll() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    var arg = this._arg;
    if (callbacks && contexts) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i], arg);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  };

  CallbackQueue.prototype.checkpoint = function checkpoint() {
    return this._callbacks ? this._callbacks.length : 0;
  };

  CallbackQueue.prototype.rollback = function rollback(len) {
    if (this._callbacks && this._contexts) {
      this._callbacks.length = len;
      this._contexts.length = len;
    }
  };

  /**
   * Resets the internal queue.
   *
   * @internal
   */

  CallbackQueue.prototype.reset = function reset() {
    this._callbacks = null;
    this._contexts = null;
  };

  /**
   * `PooledClass` looks for this.
   */

  CallbackQueue.prototype.destructor = function destructor() {
    this.reset();
  };

  return CallbackQueue;
}();

module.exports = PooledClass.addPoolingTo(CallbackQueue);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var DOMProperty = __webpack_require__(18);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactInstrumentation = __webpack_require__(10);

var quoteAttributeValueForBrowser = __webpack_require__(317);
var warning = __webpack_require__(3);

var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {
  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function createMarkupForID(id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function setAttributeForID(node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  createMarkupForRoot: function createMarkupForRoot() {
    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
  },

  setAttributeForRoot: function setAttributeForRoot(node) {
    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function createMarkupForProperty(name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function createMarkupForCustomAttribute(name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function setValueForProperty(node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
        return;
      } else if (propertyInfo.mustUseProperty) {
        // Contrary to `setAttribute`, object properties are properly
        // `toString`ed by IE8/9.
        node[propertyInfo.propertyName] = value;
      } else {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  setValueForAttribute: function setValueForAttribute(node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  /**
   * Deletes an attributes from a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForAttribute: function deleteValueForAttribute(node, name) {
    node.removeAttribute(name);
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function deleteValueForProperty(node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseProperty) {
        var propName = propertyInfo.propertyName;
        if (propertyInfo.hasBooleanValue) {
          node[propName] = false;
        } else {
          node[propName] = '';
        }
      } else {
        node.removeAttribute(propertyInfo.attributeName);
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    }

    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  }
};

module.exports = DOMPropertyOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ReactDOMComponentFlags = {
  hasCachedChildNodes: 1 << 0
};

module.exports = ReactDOMComponentFlags;

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var validateDOMNesting = __webpack_require__(70);

var DOC_NODE_TYPE = 9;

function ReactDOMContainerInfo(topLevelWrapper, node) {
  var info = {
    _topLevelWrapper: topLevelWrapper,
    _idCounter: 1,
    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
    _node: node,
    _tag: node ? node.nodeName.toLowerCase() : null,
    _namespaceURI: node ? node.namespaceURI : null
  };
  if (process.env.NODE_ENV !== 'production') {
    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
  }
  return info;
}

module.exports = ReactDOMContainerInfo;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _assign = __webpack_require__(6);

var LinkedValueUtils = __webpack_require__(59);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactUpdates = __webpack_require__(13);

var warning = __webpack_require__(3);

var didWarnValueLink = false;
var didWarnValueDefaultValue = false;

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  if (props.valueLink !== undefined && !didWarnValueLink) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
    didWarnValueLink = true;
  }

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    } else if (!props.multiple && isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  getHostProps: function getHostProps(inst, props) {
    return _assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function mountWrapper(inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
      didWarnValueDefaultValue = true;
    }
  },

  getSelectValueContext: function getSelectValueContext(inst) {
    // ReactDOMOption looks at this initial value so the initial generated
    // markup has correct `selected` attributes
    return inst._wrapperState.initialValue;
  },

  postUpdateWrapper: function postUpdateWrapper(inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // this value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  if (this._rootNodeID) {
    this._wrapperState.pendingUpdate = true;
  }
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _assign = __webpack_require__(6);

var ReactUpdates = __webpack_require__(13);
var Transaction = __webpack_require__(42);

var emptyFunction = __webpack_require__(14);

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function close() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
  getTransactionWrappers: function getTransactionWrappers() {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function batchedUpdates(callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      return callback(a, b, c, d, e);
    } else {
      return transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ARIADOMPropertyConfig = __webpack_require__(252);
var BeforeInputEventPlugin = __webpack_require__(254);
var ChangeEventPlugin = __webpack_require__(256);
var DefaultEventPluginOrder = __webpack_require__(258);
var EnterLeaveEventPlugin = __webpack_require__(259);
var HTMLDOMPropertyConfig = __webpack_require__(261);
var ReactComponentBrowserEnvironment = __webpack_require__(263);
var ReactDOMComponent = __webpack_require__(266);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactDOMEmptyComponent = __webpack_require__(267);
var ReactDOMTreeTraversal = __webpack_require__(278);
var ReactDOMTextComponent = __webpack_require__(276);
var ReactDefaultBatchingStrategy = __webpack_require__(109);
var ReactEventListener = __webpack_require__(283);
var ReactInjection = __webpack_require__(285);
var ReactReconcileTransaction = __webpack_require__(290);
var SVGDOMPropertyConfig = __webpack_require__(295);
var SelectEventPlugin = __webpack_require__(296);
var SimpleEventPlugin = __webpack_require__(297);

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
    return new ReactDOMEmptyComponent(instantiate);
  });

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
}

module.exports = {
  inject: inject
};

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var emptyComponentFactory;

var ReactEmptyComponentInjection = {
  injectEmptyComponentFactory: function injectEmptyComponentFactory(factory) {
    emptyComponentFactory = factory;
  }
};

var ReactEmptyComponent = {
  create: function create(instantiate) {
    return emptyComponentFactory(instantiate);
  }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var ReactFeatureFlags = {
  // When true, call console.time() before and .timeEnd() after each top-level
  // render (both initial renders and updates). Useful when looking at prod-mode
  // timeline profiles in Chrome, for example.
  logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

var genericComponentClass = null;
var textComponentClass = null;

var ReactHostComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function injectGenericComponentClass(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function injectTextComponentClass(componentClass) {
    textComponentClass = componentClass;
  }
};

/**
 * Get a host internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
  return new genericComponentClass(element);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactHostComponent = {
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactHostComponentInjection
};

module.exports = ReactHostComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ReactDOMSelection = __webpack_require__(274);

var containsNode = __webpack_require__(193);
var focusNode = __webpack_require__(88);
var getActiveElement = __webpack_require__(89);

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {
  hasSelectionCapabilities: function hasSelectionCapabilities(elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function getSelectionInformation() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function restoreSelection(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function getSelection(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function setSelection(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (end === undefined) {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var adler32 = __webpack_require__(308);

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function addChecksumToMarkup(markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags, comments and self-closing tags)
    if (COMMENT_START.test(markup)) {
      return markup;
    } else {
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
    }
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function canReuseMarkup(markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(4);

var DOMLazyTree = __webpack_require__(28);
var DOMProperty = __webpack_require__(18);
var React = __webpack_require__(24);
var ReactBrowserEventEmitter = __webpack_require__(40);
var ReactCurrentOwner = __webpack_require__(15);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactDOMContainerInfo = __webpack_require__(107);
var ReactDOMFeatureFlags = __webpack_require__(268);
var ReactFeatureFlags = __webpack_require__(112);
var ReactInstanceMap = __webpack_require__(34);
var ReactInstrumentation = __webpack_require__(10);
var ReactMarkupChecksum = __webpack_require__(115);
var ReactReconciler = __webpack_require__(23);
var ReactUpdateQueue = __webpack_require__(62);
var ReactUpdates = __webpack_require__(13);

var emptyObject = __webpack_require__(31);
var instantiateReactComponent = __webpack_require__(67);
var invariant = __webpack_require__(2);
var setInnerHTML = __webpack_require__(44);
var shouldUpdateReactComponent = __webpack_require__(69);
var warning = __webpack_require__(3);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var instancesByReactRootID = {};

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
  var markerName;
  if (ReactFeatureFlags.logTopLevelRenders) {
    var wrappedElement = wrapperInstance._currentElement.props.child;
    var type = wrappedElement.type;
    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
    console.time(markerName);
  }

  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
  );

  if (markerName) {
    console.timeEnd(markerName);
  }

  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */
  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container, safely) {
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onBeginFlush();
  }
  ReactReconciler.unmountComponent(instance, safely);
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onEndFlush();
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(container) {
  var rootEl = getReactRootElementInContainer(container);
  if (rootEl) {
    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
    return !!(inst && inst._hostParent);
  }
}

/**
 * True if the supplied DOM node is a React DOM element and
 * it has been rendered by another copy of React.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM has been rendered by another copy of React
 * @internal
 */
function nodeIsRenderedByOtherInstance(container) {
  var rootEl = getReactRootElementInContainer(container);
  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
}

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
}

/**
 * True if the supplied DOM node is a valid React node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid React DOM node.
 * @internal
 */
function isReactNode(node) {
  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
}

function getHostRootInstanceInContainer(container) {
  var rootEl = getReactRootElementInContainer(container);
  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
}

function getTopLevelWrapperInContainer(container) {
  var root = getHostRootInstanceInContainer(container);
  return root ? root._hostContainerInfo._topLevelWrapper : null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var topLevelRootCounter = 1;
var TopLevelWrapper = function TopLevelWrapper() {
  this.rootID = topLevelRootCounter++;
};
TopLevelWrapper.prototype.isReactComponent = {};
if (process.env.NODE_ENV !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  return this.props.child;
};
TopLevelWrapper.isReactTopLevelWrapper = true;

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  TopLevelWrapper: TopLevelWrapper,

  /**
   * Used by devtools. The keys are not important.
   */
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function scrollMonitor(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function _updateRootComponent(prevComponent, nextElement, nextContext, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    return prevComponent;
  },

  /**
   * Render a new component into the DOM. Hooked by hooks!
   *
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function _renderNewRootComponent(nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
    var componentInstance = instantiateReactComponent(nextElement, false);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

    var wrapperID = componentInstance._instance.rootID;
    instancesByReactRootID[wrapperID] = componentInstance;

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function renderSubtreeIntoContainer(parentComponent, nextElement, container, callback) {
    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function _renderSubtreeIntoContainer(parentComponent, nextElement, container, callback) {
    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

    var nextWrappedElement = React.createElement(TopLevelWrapper, {
      child: nextElement
    });

    var nextContext;
    if (parentComponent) {
      var parentInst = ReactInstanceMap.get(parentComponent);
      nextContext = parentInst._processChildContext(parentInst._context);
    } else {
      nextContext = emptyObject;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props.child;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function render(nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function unmountComponentAtNode(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);
    if (!prevComponent) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
    delete instancesByReactRootID[prevComponent._instance.rootID];
    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
    return true;
  },

  _mountImageIntoNode: function _mountImageIntoNode(markup, container, instance, shouldReuseMarkup, transaction) {
    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        ReactDOMComponentTree.precacheNode(instance, rootElement);
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (process.env.NODE_ENV !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      DOMLazyTree.insertTreeBefore(container, markup, null);
    } else {
      setInnerHTML(container, markup);
      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
    }

    if (process.env.NODE_ENV !== 'production') {
      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
      if (hostNode._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: hostNode._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  }
};

module.exports = ReactMount;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

var React = __webpack_require__(24);

var invariant = __webpack_require__(2);

var ReactNodeTypes = {
  HOST: 0,
  COMPOSITE: 1,
  EMPTY: 2,

  getType: function getType(node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;
    } else if (React.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;
      } else {
        return ReactNodeTypes.HOST;
      }
    }
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
  }
};

module.exports = ReactNodeTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _assign = __webpack_require__(6);

var PooledClass = __webpack_require__(22);
var Transaction = __webpack_require__(42);
var ReactInstrumentation = __webpack_require__(10);
var ReactServerUpdateQueue = __webpack_require__(294);

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

var noopCallbackQueue = {
  enqueue: function enqueue() {}
};

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.useCreateElement = false;
  this.updateQueue = new ReactServerUpdateQueue(this);
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function getTransactionWrappers() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function getReactMountReady() {
    return noopCallbackQueue;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function getUpdateQueue() {
    return this.updateQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function destructor() {},

  checkpoint: function checkpoint() {},

  rollback: function rollback() {}
};

_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



module.exports = '15.6.2';

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ViewportMetrics = {
  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function refreshScrollValues(scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }
};

module.exports = ViewportMetrics;

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */

function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

module.exports = forEachAccumulated;

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ReactNodeTypes = __webpack_require__(117);

function getHostComponentFromComposite(inst) {
  var type;

  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
    inst = inst._renderedComponent;
  }

  if (type === ReactNodeTypes.HOST) {
    return inst._renderedComponent;
  } else if (type === ReactNodeTypes.EMPTY) {
    return null;
  }
}

module.exports = getHostComponentFromComposite;

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ExecutionEnvironment = __webpack_require__(9);

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ReactDOMComponentTree = __webpack_require__(7);

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(inst) {
  return inst._wrapperState.valueTracker;
}

function attachTracker(inst, tracker) {
  inst._wrapperState.valueTracker = tracker;
}

function detachTracker(inst) {
  inst._wrapperState.valueTracker = null;
}

function getValueFromNode(node) {
  var value;
  if (node) {
    value = isCheckable(node) ? '' + node.checked : node.value;
  }
  return value;
}

var inputValueTracking = {
  // exposed for testing
  _getTrackerFromNode: function _getTrackerFromNode(node) {
    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));
  },

  track: function track(inst) {
    if (getTracker(inst)) {
      return;
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var valueField = isCheckable(node) ? 'checked' : 'value';
    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

    var currentValue = '' + node[valueField];

    // if someone has already defined a value or Safari, then bail
    // and don't track value will cause over reporting of changes,
    // but it's better then a hard failure
    // (needed for certain tests that spyOn input values and Safari)
    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
      return;
    }

    Object.defineProperty(node, valueField, {
      enumerable: descriptor.enumerable,
      configurable: true,
      get: function get() {
        return descriptor.get.call(this);
      },
      set: function set(value) {
        currentValue = '' + value;
        descriptor.set.call(this, value);
      }
    });

    attachTracker(inst, {
      getValue: function getValue() {
        return currentValue;
      },
      setValue: function setValue(value) {
        currentValue = '' + value;
      },
      stopTracking: function stopTracking() {
        detachTracker(inst);
        delete node[valueField];
      }
    });
  },

  updateValueIfChanged: function updateValueIfChanged(inst) {
    if (!inst) {
      return false;
    }
    var tracker = getTracker(inst);

    if (!tracker) {
      inputValueTracking.track(inst);
      return true;
    }

    var lastValue = tracker.getValue();
    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));

    if (nextValue !== lastValue) {
      tracker.setValue(nextValue);
      return true;
    }

    return false;
  },
  stopTracking: function stopTracking(inst) {
    var tracker = getTracker(inst);
    if (tracker) {
      tracker.stopTracking();
    }
  }
};

module.exports = inputValueTracking;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

module.exports = isTextInputElement;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ExecutionEnvironment = __webpack_require__(9);
var escapeTextContentForBrowser = __webpack_require__(43);
var setInnerHTML = __webpack_require__(44);

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function setTextContent(node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function setTextContent(node, text) {
      if (node.nodeType === 3) {
        node.nodeValue = text;
        return;
      }
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(4);

var ReactCurrentOwner = __webpack_require__(15);
var REACT_ELEMENT_TYPE = __webpack_require__(281);

var getIteratorFn = __webpack_require__(314);
var invariant = __webpack_require__(2);
var KeyEscapeUtils = __webpack_require__(58);
var warning = __webpack_require__(3);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && (typeof component === 'undefined' ? 'undefined' : _typeof(component)) === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children === 'undefined' ? 'undefined' : _typeof(children);

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(321);
} else {
  module.exports = __webpack_require__(320);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _invariant = __webpack_require__(21);

var _invariant2 = _interopRequireDefault(_invariant);

var _history = __webpack_require__(27);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var isModifiedEvent = function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
};

/**
 * The public API for rendering a history-aware <a>.
 */

var Link = function (_React$Component) {
  _inherits(Link, _React$Component);

  function Link() {
    var _temp, _this, _ret;

    _classCallCheck(this, Link);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
      if (_this.props.onClick) _this.props.onClick(event);

      if (!event.defaultPrevented && // onClick prevented default
      event.button === 0 && // ignore everything but left clicks
      !_this.props.target && // let browser handle "target=_blank" etc.
      !isModifiedEvent(event) // ignore clicks with modifier keys
      ) {
          event.preventDefault();

          var history = _this.context.router.history;
          var _this$props = _this.props,
              replace = _this$props.replace,
              to = _this$props.to;

          if (replace) {
            history.replace(to);
          } else {
            history.push(to);
          }
        }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Link.prototype.render = function render() {
    var _props = this.props,
        replace = _props.replace,
        to = _props.to,
        innerRef = _props.innerRef,
        props = _objectWithoutProperties(_props, ["replace", "to", "innerRef"]); // eslint-disable-line no-unused-vars

    (0, _invariant2.default)(this.context.router, "You should not use <Link> outside a <Router>");

    (0, _invariant2.default)(to !== undefined, 'You must specify the "to" property');

    var history = this.context.router.history;

    var location = typeof to === "string" ? (0, _history.createLocation)(to, null, null, history.location) : to;

    var href = history.createHref(location);
    return _react2.default.createElement("a", _extends({}, props, { onClick: this.handleClick, href: href, ref: innerRef }));
  };

  return Link;
}(_react2.default.Component);

Link.propTypes = {
  onClick: _propTypes2.default.func,
  target: _propTypes2.default.string,
  replace: _propTypes2.default.bool,
  to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired,
  innerRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func])
};
Link.defaultProps = {
  replace: false
};
Link.contextTypes = {
  router: _propTypes2.default.shape({
    history: _propTypes2.default.shape({
      push: _propTypes2.default.func.isRequired,
      replace: _propTypes2.default.func.isRequired,
      createHref: _propTypes2.default.func.isRequired
    }).isRequired
  }).isRequired
};

exports.default = Link;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Route = __webpack_require__(133);

var _Route2 = _interopRequireDefault(_Route);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _Route2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _warning = __webpack_require__(19);

var _warning2 = _interopRequireDefault(_warning);

var _invariant = __webpack_require__(21);

var _invariant2 = _interopRequireDefault(_invariant);

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _matchPath = __webpack_require__(73);

var _matchPath2 = _interopRequireDefault(_matchPath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var isEmptyChildren = function isEmptyChildren(children) {
  return _react2.default.Children.count(children) === 0;
};

/**
 * The public API for matching a single path and rendering.
 */

var Route = function (_React$Component) {
  _inherits(Route, _React$Component);

  function Route() {
    var _temp, _this, _ret;

    _classCallCheck(this, Route);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      match: _this.computeMatch(_this.props, _this.context.router)
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Route.prototype.getChildContext = function getChildContext() {
    return {
      router: _extends({}, this.context.router, {
        route: {
          location: this.props.location || this.context.router.route.location,
          match: this.state.match
        }
      })
    };
  };

  Route.prototype.computeMatch = function computeMatch(_ref, router) {
    var computedMatch = _ref.computedMatch,
        location = _ref.location,
        path = _ref.path,
        strict = _ref.strict,
        exact = _ref.exact,
        sensitive = _ref.sensitive;

    if (computedMatch) return computedMatch; // <Switch> already computed the match for us

    (0, _invariant2.default)(router, "You should not use <Route> or withRouter() outside a <Router>");

    var route = router.route;

    var pathname = (location || route.location).pathname;

    return (0, _matchPath2.default)(pathname, { path: path, strict: strict, exact: exact, sensitive: sensitive }, route.match);
  };

  Route.prototype.componentWillMount = function componentWillMount() {
    (0, _warning2.default)(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");

    (0, _warning2.default)(!(this.props.component && this.props.children && !isEmptyChildren(this.props.children)), "You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored");

    (0, _warning2.default)(!(this.props.render && this.props.children && !isEmptyChildren(this.props.children)), "You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored");
  };

  Route.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
    (0, _warning2.default)(!(nextProps.location && !this.props.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

    (0, _warning2.default)(!(!nextProps.location && this.props.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');

    this.setState({
      match: this.computeMatch(nextProps, nextContext.router)
    });
  };

  Route.prototype.render = function render() {
    var match = this.state.match;
    var _props = this.props,
        children = _props.children,
        component = _props.component,
        render = _props.render;
    var _context$router = this.context.router,
        history = _context$router.history,
        route = _context$router.route,
        staticContext = _context$router.staticContext;

    var location = this.props.location || route.location;
    var props = { match: match, location: location, history: history, staticContext: staticContext };

    if (component) return match ? _react2.default.createElement(component, props) : null;

    if (render) return match ? render(props) : null;

    if (typeof children === "function") return children(props);

    if (children && !isEmptyChildren(children)) return _react2.default.Children.only(children);

    return null;
  };

  return Route;
}(_react2.default.Component);

Route.propTypes = {
  computedMatch: _propTypes2.default.object, // private, from <Switch>
  path: _propTypes2.default.string,
  exact: _propTypes2.default.bool,
  strict: _propTypes2.default.bool,
  sensitive: _propTypes2.default.bool,
  component: _propTypes2.default.func,
  render: _propTypes2.default.func,
  children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]),
  location: _propTypes2.default.object
};
Route.contextTypes = {
  router: _propTypes2.default.shape({
    history: _propTypes2.default.object.isRequired,
    route: _propTypes2.default.object.isRequired,
    staticContext: _propTypes2.default.object
  })
};
Route.childContextTypes = {
  router: _propTypes2.default.object.isRequired
};

exports.default = Route;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _pathToRegexp = __webpack_require__(135);

var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var patternCache = {};
var cacheLimit = 10000;
var cacheCount = 0;

var compileGenerator = function compileGenerator(pattern) {
  var cacheKey = pattern;
  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});

  if (cache[pattern]) return cache[pattern];

  var compiledGenerator = _pathToRegexp2.default.compile(pattern);

  if (cacheCount < cacheLimit) {
    cache[pattern] = compiledGenerator;
    cacheCount++;
  }

  return compiledGenerator;
};

/**
 * Public API for generating a URL pathname from a pattern and parameters.
 */
var generatePath = function generatePath() {
  var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "/";
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (pattern === "/") {
    return pattern;
  }
  var generator = compileGenerator(pattern);
  return generator(params, { pretty: true });
};

exports.default = generatePath;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var isarray = __webpack_require__(233);

/**
 * Expose `pathToRegexp`.
 */
module.exports = pathToRegexp;
module.exports.parse = parse;
module.exports.compile = compile;
module.exports.tokensToFunction = tokensToFunction;
module.exports.tokensToRegExp = tokensToRegExp;

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
// Match escaped characters that would otherwise appear in future matches.
// This allows the user to escape special characters that won't transform.
'(\\\\.)',
// Match Express-style parameters and un-named parameters with a prefix
// and optional suffixes. Matches appear as:
//
// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
'([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse(str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length;

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1];
      continue;
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7];

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
    });
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index);
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path);
  }

  return tokens;
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile(str, options) {
  return tokensToFunction(parse(str, options));
}

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty(str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk(str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction(tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length);

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (_typeof(tokens[i]) === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;

        continue;
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue;
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined');
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
        }

        if (value.length === 0) {
          if (token.optional) {
            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty');
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue;
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
      }

      path += token.prefix + segment;
    }

    return path;
  };
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup(group) {
  return group.replace(/([=!:$\/()])/g, '\\$1');
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys(re, keys) {
  re.keys = keys;
  return re;
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags(options) {
  return options.sensitive ? '' : 'i';
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp(path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys);
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp(path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

  return attachKeys(regexp, keys);
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp(path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options);
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp(tokens, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */keys || options;
    keys = [];
  }

  options = options || {};

  var strict = options.strict;
  var end = options.end !== false;
  var route = '';

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';

      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys);
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp(path, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */keys || options;
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path, /** @type {!Array} */keys);
  }

  if (isarray(path)) {
    return arrayToRegexp( /** @type {!Array} */path, /** @type {!Array} */keys, options);
  }

  return stringToRegexp( /** @type {string} */path, /** @type {!Array} */keys, options);
}

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(29),
    _assign = __webpack_require__(6);

var ReactNoopUpdateQueue = __webpack_require__(139);

var canDefineProperty = __webpack_require__(45);
var emptyObject = __webpack_require__(31);
var invariant = __webpack_require__(2);
var lowPriorityWarning = __webpack_require__(74);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !((typeof partialState === 'undefined' ? 'undefined' : _typeof(partialState)) === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function get() {
          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = {
  Component: ReactComponent,
  PureComponent: ReactPureComponent
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var ReactCurrentOwner = __webpack_require__(15);
var ReactComponentTreeHook = __webpack_require__(11);
var ReactElement = __webpack_require__(25);

var checkReactTypeSpec = __webpack_require__(349);

var canDefineProperty = __webpack_require__(45);
var getIteratorFn = __webpack_require__(140);
var warning = __webpack_require__(3);
var lowPriorityWarning = __webpack_require__(74);

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {
  createElement: function createElement(type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        info += ReactComponentTreeHook.getCurrentStackAddendum();

        var currentSource = props !== null && props !== undefined && props.__source !== undefined ? props.__source : null;
        ReactComponentTreeHook.pushNonStandardWarningStack(true, currentSource);
        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type === 'undefined' ? 'undefined' : _typeof(type), info) : void 0;
        ReactComponentTreeHook.popNonStandardWarningStack();
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function createFactory(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function get() {
            lowPriorityWarning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function cloneElement(element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }
};

module.exports = ReactElementValidator;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var warning = __webpack_require__(3);

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function isMounted(publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function enqueueCallback(publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 141 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(265);

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _DetailsInput = __webpack_require__(77);

var _DetailsInput2 = _interopRequireDefault(_DetailsInput);

var _Text = __webpack_require__(46);

var _Text2 = _interopRequireDefault(_Text);

var _BuyButton = __webpack_require__(37);

var _BuyButton2 = _interopRequireDefault(_BuyButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DeviceLookup = function (_React$Component) {
  _inherits(DeviceLookup, _React$Component);

  function DeviceLookup(props) {
    _classCallCheck(this, DeviceLookup);

    var _this = _possibleConstructorReturn(this, (DeviceLookup.__proto__ || Object.getPrototypeOf(DeviceLookup)).call(this, props));

    _this.state = {
      brand: '',
      device: '',
      model: ''
    };
    return _this;
  }

  _createClass(DeviceLookup, [{
    key: 'brandChange',
    value: function brandChange(event) {
      this.setState({ brand: event.target.value, device: '' });
    }
  }, {
    key: 'deviceChange',
    value: function deviceChange(event) {
      this.setState({ device: event.target.value, model: '' });
    }
  }, {
    key: 'modelChange',
    value: function modelChange(event) {
      this.setState({ model: event.target.value });
    }
  }, {
    key: 'renderContact',
    value: function renderContact() {
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          _Text2.default,
          null,
          'We\u2019d like to find out more about your device so you can get the product that fits best, please get in touch!'
        ),
        _react2.default.createElement(_DetailsInput2.default, { brand: this.state.brand, device: this.state.device })
      );
    }
  }, {
    key: 'renderCompatible',
    value: function renderCompatible() {
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'p',
          null,
          _react2.default.createElement('img', { src: 'img/tick-icon.svg', style: styles.tick }),
          'Yes! The connectors are included in the box'
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var devices = this.props.devices;
      var _state = this.state,
          brand = _state.brand,
          device = _state.device,
          model = _state.model;

      // console.log(device)

      return _react2.default.createElement(
        'div',
        { style: styles.container },
        _react2.default.createElement(
          'div',
          { style: styles.selects },
          _react2.default.createElement(
            'div',
            { style: styles.selectHolder },
            _react2.default.createElement(
              'select',
              { style: [styles.select, brand === '' ? styles.inactive : ''], value: brand, onChange: this.brandChange.bind(this), key: 'brand' },
              _react2.default.createElement(
                'option',
                { disabled: true, value: '' },
                'Select Brand'
              ),
              devices ? Object.keys(devices).map(function (brand) {
                return _react2.default.createElement(
                  'option',
                  { key: brand, value: brand },
                  brand
                );
              }) : null
            )
          ),
          _react2.default.createElement(
            'div',
            { style: styles.selectHolder },
            _react2.default.createElement(
              'select',
              { style: [styles.select, device === '' ? styles.inactive : ''], value: device, onChange: this.deviceChange.bind(this), key: 'device' },
              _react2.default.createElement(
                'option',
                { disabled: true, value: '' },
                'Select Range'
              ),
              !!devices && devices[brand] ? devices[brand].map(function (device) {
                return _react2.default.createElement(
                  'option',
                  { key: device.id, value: device.name },
                  device.name
                );
              }) : null
            )
          ),
          _react2.default.createElement(
            'div',
            { style: styles.selectHolder },
            _react2.default.createElement(
              'select',
              { style: [styles.select, model === '' ? styles.inactive : ''], value: model, onChange: this.modelChange.bind(this), key: 'model' },
              _react2.default.createElement(
                'option',
                { disabled: true, value: '' },
                'Select Model'
              ),
              !!devices && devices[brand] ? devices[brand].map(function (model) {
                return model.name == device ? model.models.map(function (types) {
                  return _react2.default.createElement(
                    'option',
                    { key: types, value: types },
                    types
                  );
                }) : null
                // <option key={model.id} value={model.models}>{model.models}</option>
                ;
              }) : null
            )
          )
        ),
        brand === 'Other' || device === 'Other' || model == 'Other' ? this.renderContact() : device !== '' && model !== '' ? this.renderCompatible() : null
      );
    }
  }]);

  return DeviceLookup;
}(_react2.default.Component);

var styles = {
  container: {
    maxWidth: '500px',
    margin: 'auto',
    padding: '0px 20px'
  },
  selects: {
    display: 'flex',
    justifyContent: 'space-between',
    width: '100%',
    '@media (max-width: 600px)': {
      flexDirection: 'column'
    }
  },
  tick: {
    height: '15px',
    marginRight: '10px'
  },
  buy: {
    color: 'white'
  },
  selectHolder: {
    padding: '10px 0px 0px 0px',
    margin: '0',
    border: '1px solid #ccc',
    width: '49%',
    height: '38px',
    borderRadius: '3px',
    overflow: 'hidden',
    backgroundColor: '#fff',
    '@media (max-width: 600px)': {
      width: '100%',
      marginBottom: '10px'
    },
    backgroundImage: 'url(img/down-arrow.svg?)',
    backgroundRepeat: 'no-repeat',
    backgroundPosition: '98% 50%',
    backgroundSize: '10px'
  },
  select: {
    padding: '5px 8px',
    width: '130%',
    border: 'none',
    boxShadow: 'none',
    backgroundColor: 'transparent',
    backgroundImage: 'none',
    appearence: 'none',
    ':focus': {
      outline: 'none'
    },
    fontSize: '14px'
  },
  inactive: {
    color: '#cccccc'
  }
};

exports.default = (0, _radium2.default)(DeviceLookup);

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _styles;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _reactSvg = __webpack_require__(340);

var _reactSvg2 = _interopRequireDefault(_reactSvg);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Features = function (_React$Component) {
  _inherits(Features, _React$Component);

  function Features(props) {
    _classCallCheck(this, Features);

    var _this = _possibleConstructorReturn(this, (Features.__proto__ || Object.getPrototypeOf(Features)).call(this, props));

    _this.state = {
      selected: ''
    };
    return _this;
  }

  _createClass(Features, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var sections = this.props.sections;
      var selected = this.state.selected;

      return _react2.default.createElement(
        'div',
        { style: styles.container },
        _react2.default.createElement(
          'div',
          { style: styles.buttons },
          !!sections ? Object.keys(sections).map(function (name) {
            return _react2.default.createElement(
              'div',
              {
                key: name,
                style: [styles.button, name === selected ? styles.selected : null],
                onClick: function onClick() {
                  return _this2.setState({ selected: name });
                } },
              _react2.default.createElement(_reactSvg2.default, {
                path: sections[name].icon + '.svg', style: selected === name ? styles.invert : styles.img }),
              _react2.default.createElement(
                'p',
                { style: styles.name },
                name
              ),
              sections[name].text.map(function (line, k) {
                return _react2.default.createElement(
                  'p',
                  { key: k, style: styles.text },
                  line
                );
              })
            );
          }) : null
        ),
        _react2.default.createElement(
          'div',
          { style: styles.details },
          !!selected ? sections[selected].text.map(function (line, k) {
            return _react2.default.createElement(
              'p',
              { key: k },
              line
            );
          }) : 'Click an icon above to learn more'
        )
      );
    }
  }]);

  return Features;
}(_react2.default.Component);

var styles = (_styles = {
  container: {
    maxWidth: '760px',
    margin: 'auto'
  },
  text: {
    fontSize: '16px',
    maxWidth: '500px',
    margin: 'auto'
  },
  buttons: {
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'space-between',
    '@media (max-width: 600px)': {
      display: 'block'
    }
  },
  button: {
    display: 'flex',
    flexDirection: 'column',
    textAlign: 'center',
    cursor: 'pointer',
    '@media (max-width: 600px)': {
      cursor: 'auto'
    },
    ":hover": {
      '@media (min-width: 601px)': {
        borderBottom: '4px solid black',
        marginBottom: '-4px'
      }
    }
  },
  selected: {
    '@media (min-width: 601px)': {
      borderBottom: '4px solid black',
      marginBottom: '-4px'
    }
  },
  img: {
    border: '3px solid #1e1e1e',
    borderRadius: '50%',
    boxSizing: 'border-box',
    margin: '20px 20px 0px 20px'
  },
  name: {
    fontSize: '16px',
    textTransform: 'uppercase',
    marginTop: '12px',
    marginBottom: '0px',
    fontWeight: 600,
    letterSpecing: '0.4px',
    padding: '0% 20%'
  }
}, _defineProperty(_styles, 'text', {
  fontSize: '14px',
  display: 'none',
  '@media (max-width: 600px)': {
    display: 'block'
  },
  margin: '0px',
  padding: '15px'
}), _defineProperty(_styles, 'details', {
  '@media (max-width: 600px)': {
    display: 'none'
  },
  fontSize: '16px',
  padding: '20px 0px',
  minHeight: '40px'
}), _defineProperty(_styles, 'invert', {
  filter: 'invert(100%)',
  boxSizing: 'border-box',
  margin: '20px 20px 0px 20px'
}), _styles);

exports.default = (0, _radium2.default)(Features);

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _reactScrollchor = __webpack_require__(36);

var _reactScrollchor2 = _interopRequireDefault(_reactScrollchor);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _reactRouterDom = __webpack_require__(26);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Footer = function (_React$Component) {
  _inherits(Footer, _React$Component);

  function Footer() {
    _classCallCheck(this, Footer);

    return _possibleConstructorReturn(this, (Footer.__proto__ || Object.getPrototypeOf(Footer)).apply(this, arguments));
  }

  _createClass(Footer, [{
    key: 'render',
    value: function render() {
      var links = this.props.links;


      return _react2.default.createElement(
        'div',
        { style: styles.container },
        _react2.default.createElement(
          'div',
          { style: styles.links },
          !!links ? Object.keys(links).map(function (network) {
            return _react2.default.createElement(
              'a',
              { key: network, href: links[network], style: styles.social },
              _react2.default.createElement('img', { src: "/img/" + network + ".svg", style: styles.icon })
            );
          }) : null
        ),
        _react2.default.createElement(
          'p',
          { style: styles.smallText },
          '\xA9 ',
          new Date().getYear() + 1900,
          ' Arroe Limited. All rights reserved'
        ),
        _react2.default.createElement(
          _reactRouterDom.Link,
          { style: styles.smallText, to: '/privacy' },
          'Privacy Policy'
        )
      );
    }
  }]);

  return Footer;
}(_react2.default.Component);

var styles = {
  container: {
    backgroundColor: '#1e1e1e',
    width: '100%',
    textAlign: 'center',
    padding: 50,
    boxSizing: 'border-box'
  },
  social: {
    height: '20px',
    width: '20px',
    margin: '0px 5px',
    display: 'inline-block'
  },
  icon: {
    height: '100%'
  },
  smallText: {
    margin: 4,
    fontSize: 14,
    color: 'white',
    display: 'block'
  }
};

exports.default = (0, _radium2.default)(Footer);

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _reactScrollchor = __webpack_require__(36);

var _reactScrollchor2 = _interopRequireDefault(_reactScrollchor);

var _YouTube = __webpack_require__(81);

var _YouTube2 = _interopRequireDefault(_YouTube);

var _Title = __webpack_require__(30);

var _Title2 = _interopRequireDefault(_Title);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HeroVideo = function (_React$Component) {
  _inherits(HeroVideo, _React$Component);

  function HeroVideo(props) {
    _classCallCheck(this, HeroVideo);

    var _this = _possibleConstructorReturn(this, (HeroVideo.__proto__ || Object.getPrototypeOf(HeroVideo)).call(this, props));

    _this.state = {
      show: false
    };
    return _this;
  }

  _createClass(HeroVideo, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var preview = this.props.preview;
      var show = this.state.show;


      return _react2.default.createElement(
        'div',
        { style: [styles.container, { backgroundImage: 'url(' + preview + ')' }] },
        !show ? _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement('div', { style: styles.gradient }),
          _react2.default.createElement('img', { src: 'img/play-button.svg', style: styles.button, onClick: function onClick() {
              return _this2.setState({ show: true });
            } })
        ) : _react2.default.createElement(_YouTube2.default, {
          videoId: this.props.videoId,
          autoplay: '1',
          rel: '0',
          modest: '1',
          controls: '0',
          showinfo: '0'
        })
      );
    }
  }]);

  return HeroVideo;
}(_react2.default.Component);

var styles = {
  container: {
    height: '100vh',
    width: '100%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'column',
    position: 'relative',
    zIndex: 0,
    backgroundPosition: 'center',
    backgroundSize: 'cover',
    paddingTop: '80px',
    boxSizing: 'border-box'
  },
  gradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundImage: 'linear-gradient(to bottom, rgba(30, 30, 30, 0), #1e1e1e)',
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'flex-end',
    textAlign: 'center',
    alignItems: 'center'
  },
  button: {
    position: 'relative',
    width: '100px',
    cursor: 'pointer'
  },
  scrolldown: {
    width: '30px',
    marginBottom: '20px'
  },
  quote: {
    color: 'white'
  },
  qLogo: {}
};

exports.default = (0, _radium2.default)(HeroVideo);

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ImageSplit = function (_React$Component) {
  _inherits(ImageSplit, _React$Component);

  function ImageSplit() {
    _classCallCheck(this, ImageSplit);

    return _possibleConstructorReturn(this, (ImageSplit.__proto__ || Object.getPrototypeOf(ImageSplit)).apply(this, arguments));
  }

  _createClass(ImageSplit, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          direction = _props.direction,
          src = _props.src;


      direction = direction === 'right' ? 'right' : 'left';

      return _react2.default.createElement(
        'div',
        { style: styles.container },
        _react2.default.createElement(
          'div',
          { style: [styles.panel, direction === 'left' ? styles.left : styles.right] },
          _react2.default.createElement('img', { src: src, style: styles.img })
        ),
        _react2.default.createElement(
          'div',
          { style: [styles.panel, direction === 'left' ? styles.right : styles.left] },
          _react2.default.createElement(
            'div',
            { style: styles.textBox },
            _react2.default.createElement(
              'p',
              { style: styles.title },
              this.props.title
            ),
            _react2.default.createElement(
              'p',
              { style: styles.content },
              this.props.text
            )
          )
        )
      );
    }
  }]);

  return ImageSplit;
}(_react2.default.Component);

var styles = {
  container: {
    width: '100%',
    display: 'flex',
    '@media (max-width: 600px)': {
      display: 'block'
    }
  },
  left: {
    order: 1,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-end'
  },
  right: {
    order: 2,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-start'
  },
  panel: {
    width: '50%',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%'
    }
  },
  img: {
    alignSelf: 'center',
    height: '100%',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%',
      height: 'auto'
    }
  },
  textBox: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    textAlign: 'left',
    width: '100%',
    boxSizing: 'border-box',
    padding: '40px 20%',
    '@media (max-width: 600px)': {
      padding: '40px 20px'
    }
  },
  title: {
    fontSize: '20px',
    // textTransform: 'uppercase',
    margin: '0px',
    fontWeight: 'bold'
  },
  content: {
    fontSize: '14px'
  }
};

exports.default = (0, _radium2.default)(ImageSplit);

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ImageSplitPhone = function (_React$Component) {
  _inherits(ImageSplitPhone, _React$Component);

  function ImageSplitPhone() {
    _classCallCheck(this, ImageSplitPhone);

    return _possibleConstructorReturn(this, (ImageSplitPhone.__proto__ || Object.getPrototypeOf(ImageSplitPhone)).apply(this, arguments));
  }

  _createClass(ImageSplitPhone, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          direction = _props.direction,
          src = _props.src;


      direction = direction === 'right' ? 'right' : 'left';

      return _react2.default.createElement(
        'div',
        { style: styles.container },
        _react2.default.createElement(
          'div',
          { style: [styles.panel, direction === 'left' ? styles.left : styles.right] },
          _react2.default.createElement('img', { src: src, style: styles.img })
        ),
        _react2.default.createElement(
          'div',
          { style: [styles.panel, direction === 'left' ? styles.right : styles.left] },
          _react2.default.createElement(
            'div',
            { style: styles.textBox },
            _react2.default.createElement(
              'p',
              { style: styles.title },
              this.props.title
            ),
            _react2.default.createElement(
              'p',
              { style: styles.content },
              this.props.text
            )
          )
        )
      );
    }
  }]);

  return ImageSplitPhone;
}(_react2.default.Component);

var styles = {
  container: {
    width: '100%',
    display: 'flex',
    '@media (max-width: 600px)': {
      display: 'block'
    }
  },
  left: {
    order: 1,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-end'
  },
  right: {
    order: 2,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-start'
  },
  panel: {
    width: '50%',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%'
    }
  },
  img: {
    alignSelf: 'center',
    height: '520px',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%',
      height: 'auto'
    }
  },
  textBox: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    textAlign: 'left',
    width: '100%',
    boxSizing: 'border-box',
    padding: '40px 20%',
    '@media (max-width: 600px)': {
      padding: '40px 20px'
    }
  },
  title: {
    fontSize: '20px',
    // textTransform: 'uppercase',
    margin: '0px',
    fontWeight: 'bold'
  },
  content: {
    fontSize: '14px'
  }
};

exports.default = (0, _radium2.default)(ImageSplitPhone);

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InTheBox = function (_React$Component) {
  _inherits(InTheBox, _React$Component);

  function InTheBox() {
    _classCallCheck(this, InTheBox);

    return _possibleConstructorReturn(this, (InTheBox.__proto__ || Object.getPrototypeOf(InTheBox)).apply(this, arguments));
  }

  _createClass(InTheBox, [{
    key: 'render',
    value: function render() {
      var src = this.props.src;

      return _react2.default.createElement(
        'div',
        { style: styles.container },
        _react2.default.createElement(
          'div',
          { style: styles.panel },
          _react2.default.createElement('img', { src: src, style: styles.img })
        ),
        _react2.default.createElement(
          'div',
          { style: styles.panel },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBox },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'LAER with 20,000mAh (74Wh) battery cartridge'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'USB-C Power Delivery 3.0 60W charger and 2 m cable'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Laptop cable (select your laptop brand at checkout) and 2m extension cable'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Set of international adaptor plugs: Type A (US), Type C (Europe), Type G (UK), Type I (Australia)'
              )
            )
          )
        )
      );
    }
  }]);

  return InTheBox;
}(_react2.default.Component);

var styles = {
  container: {
    width: '100%',
    display: 'flex',
    '@media (max-width: 600px)': {
      display: 'block'
    }
  },
  left: {
    order: 1,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-end'
  },
  right: {
    order: 2,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-start'
  },
  panel: {
    width: '100%',
    margin: 'auto',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%'
    }
  },
  img: {
    alignSelf: 'center',
    justifyContent: 'center',
    height: '100%',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%',
      height: 'auto'
    }
  },
  textBox: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    textAlign: 'left',
    width: '100%',
    boxSizing: 'border-box',
    padding: '40px 20%',
    '@media (max-width: 600px)': {
      paddingLeft: '20%',
      paddingRight: '20%'
    }
  },
  title: {
    fontSize: '20px',
    // textTransform: 'uppercase',
    margin: '0px',
    fontWeight: 'bold'
  },
  content: {
    fontSize: '14px'
  }
};

exports.default = (0, _radium2.default)(InTheBox);

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InTheBox_fr = function (_React$Component) {
  _inherits(InTheBox_fr, _React$Component);

  function InTheBox_fr() {
    _classCallCheck(this, InTheBox_fr);

    return _possibleConstructorReturn(this, (InTheBox_fr.__proto__ || Object.getPrototypeOf(InTheBox_fr)).apply(this, arguments));
  }

  _createClass(InTheBox_fr, [{
    key: 'render',
    value: function render() {
      var src = this.props.src;

      return _react2.default.createElement(
        'div',
        { style: styles.container },
        _react2.default.createElement(
          'div',
          { style: styles.panel },
          _react2.default.createElement('img', { src: src, style: styles.img })
        ),
        _react2.default.createElement(
          'div',
          { style: styles.panel },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBox },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'LAER avec batterie de 20,000 mAh (74 Wh)'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Chargeur USB-C PD 3.0 60 W et cable USBC PD 3.0 de 2 m'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Jeu de c\xE2bles et connecteurs (USB-C PD, Apple MagSafe 2, Microsoft Surface, 8 adaptateurs PC, et cable d\u2019extension de 2 m)'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Jeu de prise internationales : USA, Europe, Royaume-uni, Australie'
              )
            )
          )
        )
      );
    }
  }]);

  return InTheBox_fr;
}(_react2.default.Component);

var styles = {
  container: {
    width: '100%',
    display: 'flex',
    '@media (max-width: 600px)': {
      display: 'block'
    }
  },
  left: {
    order: 1,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-end'
  },
  right: {
    order: 2,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-start'
  },
  panel: {
    width: '100%',
    margin: 'auto',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%'
    }
  },
  img: {
    alignSelf: 'center',
    justifyContent: 'center',
    height: '100%',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%',
      height: 'auto'
    }
  },
  textBox: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    textAlign: 'left',
    width: '100%',
    boxSizing: 'border-box',
    padding: '40px 20%',
    '@media (max-width: 600px)': {
      paddingLeft: '20%',
      paddingRight: '20%'
    }
  },
  title: {
    fontSize: '20px',
    // textTransform: 'uppercase',
    margin: '0px',
    fontWeight: 'bold'
  },
  content: {
    fontSize: '14px'
  }
};

exports.default = (0, _radium2.default)(InTheBox_fr);

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InTheBox_gr = function (_React$Component) {
  _inherits(InTheBox_gr, _React$Component);

  function InTheBox_gr() {
    _classCallCheck(this, InTheBox_gr);

    return _possibleConstructorReturn(this, (InTheBox_gr.__proto__ || Object.getPrototypeOf(InTheBox_gr)).apply(this, arguments));
  }

  _createClass(InTheBox_gr, [{
    key: 'render',
    value: function render() {
      var src = this.props.src;

      return _react2.default.createElement(
        'div',
        { style: styles.container },
        _react2.default.createElement(
          'div',
          { style: styles.panel },
          _react2.default.createElement('img', { src: src, style: styles.img })
        ),
        _react2.default.createElement(
          'div',
          { style: styles.panel },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBox },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'LAER mit einer 20,000mAh (74Wh) Batteriekarte'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'USB-C PD 3.0 60W Ladeger\xE4t und 2m USBC PD 3.0 Ladekabel'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Laptop-Adapter (USB-C PD, Apple MagSafe 2, Microsoft Surface, 8 Laptop-Adapter PC) und 2m Verl\xE4ngerungskabele'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Internationales Adapterstecker-Set: Typ A (US), Typ C (Europa), Typ G (UK), Typ I (Australien)'
              )
            )
          )
        )
      );
    }
  }]);

  return InTheBox_gr;
}(_react2.default.Component);

var styles = {
  container: {
    width: '100%',
    display: 'flex',
    '@media (max-width: 600px)': {
      display: 'block'
    }
  },
  left: {
    order: 1,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-end'
  },
  right: {
    order: 2,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-start'
  },
  panel: {
    width: '100%',
    margin: 'auto',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%'
    }
  },
  img: {
    alignSelf: 'center',
    justifyContent: 'center',
    height: '100%',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%',
      height: 'auto'
    }
  },
  textBox: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    textAlign: 'left',
    width: '100%',
    boxSizing: 'border-box',
    padding: '40px 20%',
    '@media (max-width: 600px)': {
      paddingLeft: '20%',
      paddingRight: '20%'
    }
  },
  title: {
    fontSize: '20px',
    // textTransform: 'uppercase',
    margin: '0px',
    fontWeight: 'bold'
  },
  content: {
    fontSize: '14px'
  }
};

exports.default = (0, _radium2.default)(InTheBox_gr);

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _reactScrollchor = __webpack_require__(36);

var _reactScrollchor2 = _interopRequireDefault(_reactScrollchor);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _reactRouterDom = __webpack_require__(26);

var _BuyButton = __webpack_require__(37);

var _BuyButton2 = _interopRequireDefault(_BuyButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Nav = function (_React$Component) {
  _inherits(Nav, _React$Component);

  function Nav() {
    _classCallCheck(this, Nav);

    return _possibleConstructorReturn(this, (Nav.__proto__ || Object.getPrototypeOf(Nav)).apply(this, arguments));
  }

  _createClass(Nav, [{
    key: 'render',
    value: function render() {
      var links = this.props.links;

      return _react2.default.createElement(
        'div',
        { style: [styles.container, { position: 'fixed' }] },
        _react2.default.createElement(
          'div',
          { style: styles.inner },
          _react2.default.createElement(
            _reactScrollchor2.default,
            { style: styles.logoContainer, to: '#' },
            _react2.default.createElement('img', { style: styles.logo, src: 'img/arroe-logo.svg' })
          ),
          _react2.default.createElement(
            'div',
            { style: styles.linkContainer },
            !!links ? Object.keys(links).map(function (name) {
              return _react2.default.createElement(
                _reactRouterDom.Link,
                { key: name, to: links[name], style: styles.link },
                name
              );
            }) : null
          ),
          _react2.default.createElement(
            'div',
            { style: styles.orderBtnContainer },
            _react2.default.createElement(_BuyButton2.default, { link: this.props.buyLink })
          )
        )
      );
    }
  }]);

  return Nav;
}(_react2.default.Component);

var styles = {
  container: {
    backgroundColor: '#1e1e1e',
    height: '80px',
    width: '100%',
    zIndex: 1000,
    position: 'fixed'
  },
  inner: {
    display: 'flex',
    height: '100%',
    flexDirection: 'row',
    justifyContent: 'center',
    margin: 'auto',
    maxWidth: '1000px',
    padding: '0px 20px'
  },
  logoContainer: {
    width: '111px',
    flexGrow: 0,
    display: 'flex',
    justifyContent: 'center'
  },
  linkContainer: {
    flexGrow: 1,
    display: 'flex',
    justifyContent: 'center'

  },
  orderBtnContainer: {
    color: 'White',
    width: '120px',
    flexGrow: 0,
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    '@media (max-width: 600px)': {
      display: 'none'
    },
    fontSize: 16,
    textAlign: 'right'
  },
  logo: {
    width: '100%'
  },
  link: {
    color: 'white',
    textTransform: 'uppercase',
    display: 'flex',
    textAlign: 'center',
    flexDirection: 'column',
    justifyContent: 'center',
    margin: '0px 10px',
    textDecoration: 'none',
    fontSize: 14,
    fontWeight: 600,
    letterSpacing: '1.75px'
  },
  buy: {
    color: 'white'
  }
};

exports.default = (0, _radium2.default)(Nav);

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _langHolder;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _reactScrollchor = __webpack_require__(36);

var _reactScrollchor2 = _interopRequireDefault(_reactScrollchor);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _reactRouterDom = __webpack_require__(26);

var _BuyButton = __webpack_require__(37);

var _BuyButton2 = _interopRequireDefault(_BuyButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NavLight = function (_React$Component) {
  _inherits(NavLight, _React$Component);

  function NavLight() {
    _classCallCheck(this, NavLight);

    return _possibleConstructorReturn(this, (NavLight.__proto__ || Object.getPrototypeOf(NavLight)).apply(this, arguments));
  }

  _createClass(NavLight, [{
    key: 'render',
    value: function render() {
      var links = this.props.links;

      return _react2.default.createElement(
        'div',
        { style: [styles.container, { position: 'fixed' }] },
        _react2.default.createElement(
          'div',
          { style: styles.inner },
          _react2.default.createElement(
            _reactScrollchor2.default,
            { style: styles.logoContainer, to: '#' },
            _react2.default.createElement('img', { style: styles.logo, src: 'img/arroe-logo-dark.svg' })
          ),
          _react2.default.createElement(
            'div',
            { style: styles.langHolder },
            _react2.default.createElement(
              _reactRouterDom.Link,
              { to: '/purchase' },
              _react2.default.createElement('img', { style: styles.flags, src: 'img/eng.png' })
            ),
            _react2.default.createElement(
              _reactRouterDom.Link,
              { to: '/purchase_fr' },
              _react2.default.createElement('img', { style: styles.flags, src: 'img/fr.png' })
            ),
            _react2.default.createElement(
              _reactRouterDom.Link,
              { to: '/purchase_gr' },
              _react2.default.createElement('img', { style: styles.flags, src: 'img/ger.png' })
            )
          )
        )
      );
    }
  }]);

  return NavLight;
}(_react2.default.Component);

var styles = {
  container: {
    backgroundColor: 'white',
    color: 'black',
    height: '80px',
    width: '100%',
    zIndex: 1000,
    position: 'fixed'
  },
  inner: {
    display: 'flex',
    height: '100%',
    flexDirection: 'row',
    justifyContent: 'center',
    margin: 'auto',
    maxWidth: '1000px',
    padding: '0px 20px'
  },
  logoContainer: {
    width: '111px',
    flexGrow: 0,
    display: 'flex',
    justifyContent: 'center'
  },
  linkContainer: {
    flexGrow: 1,
    display: 'flex',
    justifyContent: 'center'

  },
  orderBtnContainer: {
    color: 'White',
    width: '120px',
    flexGrow: 0,
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    '@media (max-width: 600px)': {
      display: 'none'
    },
    fontSize: 16,
    textAlign: 'right'
  },
  logo: {
    width: '100%',
    fill: 'black'
  },
  link: {
    color: 'black',
    textTransform: 'uppercase',
    display: 'flex',
    textAlign: 'center',
    flexDirection: 'column',
    justifyContent: 'center',
    margin: '0px 10px',
    textDecoration: 'none',
    fontSize: 14,
    fontWeight: 600,
    letterSpacing: '1.75px'
  },
  buy: {
    color: 'white'
  },
  langHolder: (_langHolder = {
    display: 'flex',
    height: '100%',
    flexDirection: 'row',
    justifyContent: 'center',
    margin: 'auto',
    maxWidth: '1000px',
    padding: '0px 20px',
    position: 'absolute',
    right: '5%'
  }, _defineProperty(_langHolder, 'justifyContent', 'center'), _defineProperty(_langHolder, '@media (max-width: 600px)', {
    position: 'right',
    right: '10px',
    padding: '5px'
  }), _langHolder),
  flags: {
    display: 'flex',
    borderRadius: '180',
    width: '30px',
    height: '30px',
    padding: '5px',
    margin: 'auto',
    marginTop: '20px',
    verticalAlign: 'baseline',
    '@media (max-width: 600px)': {
      width: '20px',
      height: '20px'
    }
  }
};

exports.default = (0, _radium2.default)(NavLight);

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _Person = __webpack_require__(80);

var _Person2 = _interopRequireDefault(_Person);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var People = function (_React$Component) {
  _inherits(People, _React$Component);

  function People() {
    _classCallCheck(this, People);

    return _possibleConstructorReturn(this, (People.__proto__ || Object.getPrototypeOf(People)).apply(this, arguments));
  }

  _createClass(People, [{
    key: 'render',
    value: function render() {
      var people = this.props.people;

      return _react2.default.createElement(
        'div',
        { style: styles.container },
        !!people ? Object.keys(people).map(function (name) {
          return _react2.default.createElement(_Person2.default, { name: name, key: name, title: people[name].title, picture: people[name].picture });
        }) : null
      );
    }
  }]);

  return People;
}(_react2.default.Component);

var styles = {
  container: {
    maxWidth: '100%',
    width: '760px',
    margin: '0px auto 50px',
    display: 'flex',
    justifyContent: 'space-between',
    '@media (max-width: 600px)': {
      display: 'block'
    }
  }
};

exports.default = (0, _radium2.default)(People);

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Section = function (_React$Component) {
  _inherits(Section, _React$Component);

  function Section() {
    _classCallCheck(this, Section);

    return _possibleConstructorReturn(this, (Section.__proto__ || Object.getPrototypeOf(Section)).apply(this, arguments));
  }

  _createClass(Section, [{
    key: 'render',
    value: function render() {
      var scrollName = this.props.scrollName;

      return _react2.default.createElement(
        'div',
        { style: [styles.container, this.props.style] },
        _react2.default.createElement('div', { id: scrollName, style: styles.scrollTarget }),
        this.props.children
      );
    }
  }]);

  return Section;
}(_react2.default.Component);

var styles = {
  container: {
    textAlign: 'center',
    overflow: 'hidden',
    paddingBottom: '55px'
  },
  text: {
    fontSize: '16px',
    margin: 'auto'
  },
  scrollTarget: {
    marginTop: '-55px',
    paddingTop: '55px'
  }
};

exports.default = (0, _radium2.default)(Section);

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _Title = __webpack_require__(30);

var _Title2 = _interopRequireDefault(_Title);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TechSpecs = function (_React$Component) {
  _inherits(TechSpecs, _React$Component);

  function TechSpecs() {
    _classCallCheck(this, TechSpecs);

    return _possibleConstructorReturn(this, (TechSpecs.__proto__ || Object.getPrototypeOf(TechSpecs)).apply(this, arguments));
  }

  _createClass(TechSpecs, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { style: styles.container },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxLeft },
              _react2.default.createElement(
                _Title2.default,
                null,
                ' LAER '
              ),
              _react2.default.createElement(
                'p',
                { style: styles.title },
                'Size and Weight'
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { style: styles.right },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxWTitle },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Width: 285mm'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Depth: 200 mm'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Height: 13mm (max)'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Weight: 815g with 20,000mAh battery 657g with 10,000mAh battery (10,000mAh battery not included, requires additional purchase)'
              )
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { style: styles.container },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxLeft },
              _react2.default.createElement(
                'p',
                { style: styles.title },
                'Ports'
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { style: styles.right },
            _react2.default.createElement(
              'div',
              { style: styles.textBox },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '1x DC output (supporting 12-20V output)'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '1x USB-C in/out port with PD 3.0 (supporting 5,9,12,15, 20V output)'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '1x USB-C out port with PD 3.0 (supporting 5,9,12,15, 20V output)'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '1x USB-A output (supports fast charging, 5-18W)'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '1x Qi Wireless charging port (5V, 1A, 5W)'
              )
            )
          )
        ),
        _react2.default.createElement('div', { style: styles.lineBreak }),
        _react2.default.createElement(
          'div',
          { style: styles.container },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxLeft },
              _react2.default.createElement(
                _Title2.default,
                null,
                ' Battery and Power '
              ),
              _react2.default.createElement(
                'p',
                { style: styles.title },
                '20,000mAh 74wh Cartridge'
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { style: styles.right },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxWTitle },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Contains Battery Cells 4x 3.7v 5,000mAh cells in series'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Weight: 561g max'
              )
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { style: styles.container },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxLeft },
              _react2.default.createElement(
                'p',
                { style: styles.title },
                '10,000mAh 37wh Battery Cartridge (not included in this box, requires additional purchase)'
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { style: styles.right },
            _react2.default.createElement(
              'div',
              { style: styles.textBox },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Contains Battery Cells, 4x 3.7v 2,500mAh cells in series'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Weight: 336g max'
              )
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { style: styles.container },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxLeft },
              _react2.default.createElement(
                'p',
                { style: styles.title },
                'USB-C Charger'
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { style: styles.right },
            _react2.default.createElement(
              'div',
              { style: styles.textBox },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '60w (minimum output) USB-C Power Delivery charger with swappable wall plugs for US, Europe, UK, and Australia and supporting 2m USB-C cable'
              )
            )
          )
        )
      );
    }
  }]);

  return TechSpecs;
}(_react2.default.Component);

var styles = {
  container: {
    width: '100%',
    display: 'flex',
    '@media (max-width: 600px)': {
      width: '100%',
      display: 'block'
    }
  },
  left: {
    order: 1,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-end',
    width: '50%',
    '@media (max-width: 600px)': {
      // display: 'block',
      width: '100%'
    }
  },
  right: {
    order: 2,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-start',
    width: '50%',
    '@media (max-width: 600px)': {
      // display: 'block',
      width: '100%'
    }
  },
  panel: {
    width: '100%',
    margin: 'auto',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%'
    }
  },
  img: {
    alignSelf: 'center',
    justifyContent: 'center',
    height: '100%',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%',
      height: 'auto'
    }
  },
  textBox: {
    display: 'flex',
    flexDirection: 'column',
    // justifyContent: 'center',
    textAlign: 'left',
    width: '100%',
    boxSizing: 'border-box',
    paddingLeft: '20%',
    paddingRight: '20%',
    paddingTop: '0px'

  },
  textBoxLeft: {
    display: 'flex',
    flexDirection: 'column',
    // justifyContent: 'center',
    textAlign: 'left',
    width: '100%',
    boxSizing: 'border-box',
    paddingLeft: '20%',
    paddingRight: '20%'

  },
  textBoxWTitle: {
    display: 'flex',
    flexDirection: 'column',
    // justifyContent: 'center',
    textAlign: 'left',
    width: '100%',
    boxSizing: 'border-box',
    paddingLeft: '20%',
    paddingRight: '20%',
    paddingTop: '75px',
    '@media (max-width: 600px)': {
      paddingTop: '0px'
    }
  },
  title: {
    fontSize: '16px',
    // textTransform: 'uppercase',
    margin: '0px',
    fontWeight: 'bold'
  },
  content: {
    fontSize: '14px'
  },
  lineBreak: {
    margin: 'auto',
    marginTop: '5%',
    marginBottom: '5%',
    width: '80%',
    height: '1px',
    backgroundColor: '#DCDCDC'
  }
};

exports.default = (0, _radium2.default)(TechSpecs);

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _Title = __webpack_require__(30);

var _Title2 = _interopRequireDefault(_Title);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TechSpecs_fr = function (_React$Component) {
  _inherits(TechSpecs_fr, _React$Component);

  function TechSpecs_fr() {
    _classCallCheck(this, TechSpecs_fr);

    return _possibleConstructorReturn(this, (TechSpecs_fr.__proto__ || Object.getPrototypeOf(TechSpecs_fr)).apply(this, arguments));
  }

  _createClass(TechSpecs_fr, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { style: styles.container },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxLeft },
              _react2.default.createElement(
                _Title2.default,
                null,
                ' LAER '
              ),
              _react2.default.createElement(
                'p',
                { style: styles.title },
                'Taille et poids'
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { style: styles.right },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxWTitle },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Width: 285mm'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Depth: 200 mm'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Height: 13mm (max)'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Poids: 874g avec la cartouche de 20 000mAh, 649g avec la cartouche de 10 000mAh (cartouche de 10 000mAh non fournis dans cette bo\xEEte, achat s\xE9par\xE9)'
              )
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { style: styles.container },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxLeft },
              _react2.default.createElement(
                'p',
                { style: styles.title },
                'Prises'
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { style: styles.right },
            _react2.default.createElement(
              'div',
              { style: styles.textBox },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '1x sortie DC (12-20 V)'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '1x entr\xE9e / sortie USB-C PD 3.0 (5,9,12,15, 20V en sortie)'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '1x sortie USB-C PD 3.0 ( 5,9,12,15, 20V en sortie)'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '1x sortie USB-A (charge rapide, 5-18W)'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '1x Qi recharge sans contact (5V, 1.5A, 7.5W)'
              )
            )
          )
        ),
        _react2.default.createElement('div', { style: styles.lineBreak }),
        _react2.default.createElement(
          'div',
          { style: styles.container },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxLeft },
              _react2.default.createElement(
                _Title2.default,
                null,
                ' Batterie et puissance '
              ),
              _react2.default.createElement(
                'p',
                { style: styles.title },
                'Cartouche 20,000mAh 74wh'
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { style: styles.right },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxWTitle },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'La cartouche de 20 000mAh, 74Wh contient 4x 3.7v 5000mAh cellules en s\xE9rie'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Poids: 561 max'
              )
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { style: styles.container },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxLeft },
              _react2.default.createElement(
                'p',
                { style: styles.title },
                'Cartouche 10,000mAh 37wh (cartouche non fournis dans cette bo\xEEte, achat s\xE9par\xE9)'
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { style: styles.right },
            _react2.default.createElement(
              'div',
              { style: styles.textBox },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'La cartouche de 10 000mAh, 37Wh contient  4x 3.7v 2500mAh cellules en s\xE9rie.'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Poids: 336g max'
              )
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { style: styles.container },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxLeft },
              _react2.default.createElement(
                'p',
                { style: styles.title },
                'Chargeur USB-C'
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { style: styles.right },
            _react2.default.createElement(
              'div',
              { style: styles.textBox },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '60w (puissance max) Power Delivery 3.0 avec prises interchangeables pour les USA, l\u2019Europe, le Royaume-Uni, et l\u2019Australie. Cable de 2 m\xE8tres USB-C Power Delivery 3.0.'
              )
            )
          )
        )
      );
    }
  }]);

  return TechSpecs_fr;
}(_react2.default.Component);

var styles = {
  container: {
    width: '100%',
    display: 'flex',
    '@media (max-width: 600px)': {
      width: '100%',
      display: 'block'
    }
  },
  left: {
    order: 1,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-end',
    width: '50%',
    '@media (max-width: 600px)': {
      // display: 'block',
      width: '100%'
    }
  },
  right: {
    order: 2,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-start',
    width: '50%',
    '@media (max-width: 600px)': {
      // display: 'block',
      width: '100%'
    }
  },
  panel: {
    width: '100%',
    margin: 'auto',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%'
    }
  },
  img: {
    alignSelf: 'center',
    justifyContent: 'center',
    height: '100%',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%',
      height: 'auto'
    }
  },
  textBox: {
    display: 'flex',
    flexDirection: 'column',
    // justifyContent: 'center',
    textAlign: 'left',
    width: '100%',
    boxSizing: 'border-box',
    paddingLeft: '20%',
    paddingRight: '20%',
    paddingTop: '0px'

  },
  textBoxLeft: {
    display: 'flex',
    flexDirection: 'column',
    // justifyContent: 'center',
    textAlign: 'left',
    width: '100%',
    boxSizing: 'border-box',
    paddingLeft: '20%',
    paddingRight: '20%'

  },
  textBoxWTitle: {
    display: 'flex',
    flexDirection: 'column',
    // justifyContent: 'center',
    textAlign: 'left',
    width: '100%',
    boxSizing: 'border-box',
    paddingLeft: '20%',
    paddingRight: '20%',
    paddingTop: '75px',
    '@media (max-width: 600px)': {
      paddingTop: '0px'
    }
  },
  title: {
    fontSize: '16px',
    // textTransform: 'uppercase',
    margin: '0px',
    fontWeight: 'bold'
  },
  content: {
    fontSize: '14px'
  },
  lineBreak: {
    margin: 'auto',
    marginTop: '5%',
    marginBottom: '5%',
    width: '80%',
    height: '1px',
    backgroundColor: '#DCDCDC'
  }
};

exports.default = (0, _radium2.default)(TechSpecs_fr);

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _Title = __webpack_require__(30);

var _Title2 = _interopRequireDefault(_Title);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TechSpecs_gr = function (_React$Component) {
  _inherits(TechSpecs_gr, _React$Component);

  function TechSpecs_gr() {
    _classCallCheck(this, TechSpecs_gr);

    return _possibleConstructorReturn(this, (TechSpecs_gr.__proto__ || Object.getPrototypeOf(TechSpecs_gr)).apply(this, arguments));
  }

  _createClass(TechSpecs_gr, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { style: styles.container },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxLeft },
              _react2.default.createElement(
                _Title2.default,
                null,
                ' LAER '
              ),
              _react2.default.createElement(
                'p',
                { style: styles.title },
                'Ma\xDFe und Gewicht'
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { style: styles.right },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxWTitle },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Width: 285mm'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Depth: 200 mm'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Height: 13mm (max)'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Gewicht: 874g mit 20,000mAh Akku, 649g mit 10,000mAh Akku (10,000mAh Akku ist in dieser Box nicht enthalten, kann zus\xE4tzlich erworben werden)'
              )
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { style: styles.container },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxLeft },
              _react2.default.createElement(
                'p',
                { style: styles.title },
                'Anschl\xFCsse'
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { style: styles.right },
            _react2.default.createElement(
              'div',
              { style: styles.textBox },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '1x DC Ausgang (unterst\xFCtzt 12-20V Leistung)'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '1x USB-C Ein-/Ausgangsanschluss mit PD 3.0 (unterst\xFCtzt 5,9,12,15, 20V Leistung)'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '1x USB-C Ausgangsanschluss mit PD 3.0 (unterst\xFCtzt 5,9,12,15, 20V Leistung)'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '1x USB-A Ausgangsanschluss (unterst\xFCtzt Schnelladefunktion, 5-18W)'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '1x Qi kabelloses Laden (5V, 1.5A, 7.5W)'
              )
            )
          )
        ),
        _react2.default.createElement('div', { style: styles.lineBreak }),
        _react2.default.createElement(
          'div',
          { style: styles.container },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxLeft },
              _react2.default.createElement(
                _Title2.default,
                null,
                ' Battery and Power '
              ),
              _react2.default.createElement(
                'p',
                { style: styles.title },
                '20,000mAh 74wh Batteriekarte'
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { style: styles.right },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxWTitle },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Enth\xE4lt Batteriezellen, 4x 3.7v 5,000mAh Zellen in einer Serie'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Gewicht max. 561g '
              )
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { style: styles.container },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxLeft },
              _react2.default.createElement(
                'p',
                { style: styles.title },
                '10,000mAh 37wh Batteriekarte (ist in dieser Verpackung nicht enthalten, kann zus\xE4tzlich erworben werden)'
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { style: styles.right },
            _react2.default.createElement(
              'div',
              { style: styles.textBox },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Enth\xE4lt Batteriezellen, 4x 3.7v 2,500mAh Zellen in einer Serie'
              ),
              _react2.default.createElement(
                'p',
                { style: styles.content },
                'Gewicht max. 336g'
              )
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { style: styles.container },
          _react2.default.createElement(
            'div',
            { style: styles.left },
            _react2.default.createElement(
              'div',
              { style: styles.textBoxLeft },
              _react2.default.createElement(
                'p',
                { style: styles.title },
                'USB-C Ladeger\xE4t'
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { style: styles.right },
            _react2.default.createElement(
              'div',
              { style: styles.textBox },
              _react2.default.createElement(
                'p',
                { style: styles.content },
                '60w (max. Ausgangsleistung) USB-C Power Delivery 3.0 Ladeger\xE4t mit austauschbaren Stecker f\xFCr Steckdosen in US, Europa, UK, Australien und 2m USB-C PD 3.0 Ladekabel'
              )
            )
          )
        )
      );
    }
  }]);

  return TechSpecs_gr;
}(_react2.default.Component);

var styles = {
  container: {
    width: '100%',
    display: 'flex',
    '@media (max-width: 600px)': {
      width: '100%',
      display: 'block'
    }
  },
  left: {
    order: 1,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-end',
    width: '50%',
    '@media (max-width: 600px)': {
      // display: 'block',
      width: '100%'
    }
  },
  right: {
    order: 2,
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'flex-start',
    width: '50%',
    '@media (max-width: 600px)': {
      // display: 'block',
      width: '100%'
    }
  },
  panel: {
    width: '100%',
    margin: 'auto',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%'
    }
  },
  img: {
    alignSelf: 'center',
    justifyContent: 'center',
    height: '100%',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%',
      height: 'auto'
    }
  },
  textBox: {
    display: 'flex',
    flexDirection: 'column',
    // justifyContent: 'center',
    textAlign: 'left',
    width: '100%',
    boxSizing: 'border-box',
    paddingLeft: '20%',
    paddingRight: '20%',
    paddingTop: '0px'

  },
  textBoxLeft: {
    display: 'flex',
    flexDirection: 'column',
    // justifyContent: 'center',
    textAlign: 'left',
    width: '100%',
    boxSizing: 'border-box',
    paddingLeft: '20%',
    paddingRight: '20%'

  },
  textBoxWTitle: {
    display: 'flex',
    flexDirection: 'column',
    // justifyContent: 'center',
    textAlign: 'left',
    width: '100%',
    boxSizing: 'border-box',
    paddingLeft: '20%',
    paddingRight: '20%',
    paddingTop: '75px',
    '@media (max-width: 600px)': {
      paddingTop: '0px'
    }
  },
  title: {
    fontSize: '16px',
    // textTransform: 'uppercase',
    margin: '0px',
    fontWeight: 'bold'
  },
  content: {
    fontSize: '14px'
  },
  lineBreak: {
    margin: 'auto',
    marginTop: '5%',
    marginBottom: '5%',
    width: '80%',
    height: '1px',
    backgroundColor: '#DCDCDC'
  }
};

exports.default = (0, _radium2.default)(TechSpecs_gr);

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _components = __webpack_require__(20);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var About = function (_React$Component) {
  _inherits(About, _React$Component);

  function About(props) {
    _classCallCheck(this, About);

    var _this = _possibleConstructorReturn(this, (About.__proto__ || Object.getPrototypeOf(About)).call(this, props));

    _this.state = {
      atTop: true
    };
    return _this;
  }

  _createClass(About, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('scroll', this.handleScroll.bind(this));
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('scroll', this.handleScroll.bind(this));
    }
  }, {
    key: 'handleScroll',
    value: function handleScroll(event) {
      var scrollTop = event.srcElement.body.scrollTop;
      if (scrollTop < 10 != this.state.atTop) {
        /* Only make call to setstate when value is different */
        this.setState({
          atTop: scrollTop < 10
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var atTop = this.state.atTop;
      var config = this.props.config;


      var navLinks = {
        Home: "/",
        Product: "/product",
        about: "/about"
      };

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_components.Nav, { links: navLinks, buyLink: config.links.buy }),
        _react2.default.createElement(
          _components.Section,
          { style: styles.dark, scrollName: navLinks.design },
          Object.keys(config.sections.aboutSplit).map(function (title, k) {
            var dir = k % 2 === 0 ? 'left' : 'right';
            var _config$sections$abou = config.sections.aboutSplit[title],
                text = _config$sections$abou.text,
                src = _config$sections$abou.src;

            return _react2.default.createElement(_components.ImageSplit, { key: k, title: title, direction: dir, text: text, src: src });
          })
        ),
        _react2.default.createElement(
          _components.Section,
          { scrollName: navLinks.about },
          _react2.default.createElement(
            _components.Title,
            null,
            'The Team'
          ),
          _react2.default.createElement(
            _components.Text,
            { style: styles.justify },
            config.sections.about
          ),
          _react2.default.createElement(_components.People, { people: config.people })
        ),
        _react2.default.createElement(
          _components.Section,
          { style: styles.dark, scrollName: navLinks.support },
          _react2.default.createElement(
            _components.Title,
            null,
            'Support'
          ),
          _react2.default.createElement(
            _components.Text,
            null,
            config.sections.support
          ),
          _react2.default.createElement(_components.DetailsInput, null),
          _react2.default.createElement(
            _components.Text,
            { style: styles.padbottom },
            'Want to contact us by email? Email us at ',
            _react2.default.createElement(
              'a',
              { style: styles.link, href: 'mailto:support@arroe.co' },
              'support@arroe.co'
            )
          ),
          _react2.default.createElement('br', null)
        ),
        _react2.default.createElement(
          _components.Section,
          { scrollName: 'notify' },
          _react2.default.createElement(
            _components.Title,
            null,
            'Get Notified'
          ),
          _react2.default.createElement(
            _components.Text,
            null,
            'Enter your name and email below and we\u2019ll let you know when we\u2019re launching'
          ),
          _react2.default.createElement(_components.DetailsInput, { signup: true })
        ),
        _react2.default.createElement(_components.Footer, { links: config.media }),
        _react2.default.createElement(
          'div',
          { style: [styles.buybanner, { display: atTop ? 'none' : 'block' }] },
          _react2.default.createElement(_components.BuyButton, { link: config.links.buy })
        )
      );
    }
  }]);

  return About;
}(_react2.default.Component);

var styles = {
  features: {
    backgroundImage: 'url(img/hero-image-min.jpg)',
    backgroundSize: 'cover',
    backgroundPosition: 'center',
    height: '100vh'
  },
  playbutton: {
    width: '100px'
  },
  dark: {
    backgroundColor: '#1e1e1e',
    color: 'white'
  },
  featuresvideo: {
    width: '760px',
    height: '400px',
    margin: '20px auto 40px',
    maxWidth: '100%'
  },
  buybanner: {
    position: 'fixed',
    bottom: '0',
    width: '100%',
    backgroundColor: '#1e1e1e',
    textAlign: 'center',
    color: 'white',
    '@media (min-width: 601px)': {
      display: 'none'
    },
    padding: '10px',
    boxSizing: 'border-box'
  },
  link: {
    color: 'white'
  },
  justify: {
    textAlign: 'justify'
  },
  container: {
    height: '100vh',
    width: '100%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'column',
    position: 'relative',
    zIndex: 0,
    backgroundImage: 'url(img/Sleeve-min.jpg)',
    backgroundPosition: 'center',
    backgroundSize: 'cover',
    paddingTop: '80px',
    boxSizing: 'border-box'
  },
  wrapper: {
    margin: '0 auto',
    position: 'relative'
  },
  panelLeft: {
    order: 1,
    width: '50vh',
    maxWidth: '50vh',
    backgroundColor: 'black',
    float: 'left',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%'
    }
  },
  panelRight: {
    order: 2,
    width: '50%',
    float: 'right',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%'
    }
  },
  innerPanel: {
    width: '50%',
    float: 'right',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%'
    }
  },
  innerPanelL: {
    width: '50%',
    float: 'left',
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%'
    }
  },
  "spinner": {
    "width": "50px",
    "height": "50px",
    "borderRadius": "50%",
    "border": "4px solid white",
    "margin": "10px",
    "display": "inline-block"
  },
  "spinner2": {
    "float": "left",
    "width": "50px",
    "height": "50px",
    "background": "transparent",
    "borderRadius": "50%",
    "border": "4px solid #1e1e1e",
    "marginLeft": "100px",
    "display": "inline-block",
    '@media (max-width: 600px)': {
      "width": "30px",
      "height": "30px",
      display: 'block'
    }
  },
  "infoHolder": {
    "marginTop": "-13px",
    "textAlign": "left",
    "marginLeft": "20px",
    "marginRight": "20px",
    "float": "left",
    "display": "inline-block",
    '@media (max-width: 600px)': {
      marginTop: '-5px',
      display: 'block'
    }
  },
  "techBox": {
    "width": "100%",
    height: "15vh",
    '@media (max-width: 600px)': {
      display: 'block',
      width: '100%'
    }

  },
  "spinnerText": {
    "position": "relative",
    "top": "-3px"
  },
  "smallText": {
    "marginTop": "-20px",
    "fontSize": "12px"
  }
};

exports.default = (0, _radium2.default)(About);

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _components = __webpack_require__(20);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Home = function (_React$Component) {
  _inherits(Home, _React$Component);

  function Home(props) {
    _classCallCheck(this, Home);

    var _this = _possibleConstructorReturn(this, (Home.__proto__ || Object.getPrototypeOf(Home)).call(this, props));

    _this.state = {
      atTop: true
    };
    return _this;
  }

  _createClass(Home, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('scroll', this.handleScroll.bind(this));
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('scroll', this.handleScroll.bind(this));
    }
  }, {
    key: 'handleScroll',
    value: function handleScroll(event) {
      var scrollTop = event.srcElement.body.scrollTop;
      if (scrollTop < 10 != this.state.atTop) {
        /* Only make call to setstate when value is different */
        this.setState({
          atTop: scrollTop < 10
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var atTop = this.state.atTop;
      var config = this.props.config;


      var navLinks = {
        Home: "/",
        Product: "/product",
        about: "/about"
      };
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_components.Nav, { links: navLinks, buyLink: config.links.buy }),
        _react2.default.createElement(_components.HeroVideo, {
          style: styles.section,
          preview: 'img/13.JPG',
          videoId: config.videos.hero,
          downLink: '#' + navLinks.features
        }),
        _react2.default.createElement(
          _components.Section,
          { style: styles.dark, scrollName: navLinks.design },
          Object.keys(config.sections.design).map(function (title, k) {
            var dir = k % 2 === 0 ? 'left' : 'right';
            var _config$sections$desi = config.sections.design[title],
                text = _config$sections$desi.text,
                src = _config$sections$desi.src;

            return _react2.default.createElement(_components.ImageSplit, { key: k, title: title, direction: dir, text: text, src: src });
          })
        ),
        _react2.default.createElement(
          _components.Section,
          { style: styles.dark, scrollName: navLinks.support },
          _react2.default.createElement(
            _components.Title,
            null,
            'Support'
          ),
          _react2.default.createElement(
            _components.Text,
            null,
            config.sections.support
          ),
          _react2.default.createElement(_components.DetailsInput, null),
          _react2.default.createElement(
            _components.Text,
            { style: styles.padbottom },
            'Want to contact us by email? Email us at ',
            _react2.default.createElement(
              'a',
              { style: styles.link, href: 'mailto:support@arroe.co' },
              'support@arroe.co'
            )
          ),
          _react2.default.createElement('br', null)
        ),
        _react2.default.createElement(
          _components.Section,
          { scrollName: 'notify' },
          _react2.default.createElement(
            _components.Title,
            null,
            'Get Notified'
          ),
          _react2.default.createElement(
            _components.Text,
            null,
            'Enter your name and email below and we\u2019ll let you know when we\u2019re launching'
          ),
          _react2.default.createElement(_components.DetailsInput, { signup: true })
        ),
        _react2.default.createElement(_components.Footer, { links: config.media }),
        _react2.default.createElement(
          'div',
          { style: [styles.buybanner, { display: atTop ? 'none' : 'block' }] },
          _react2.default.createElement(_components.BuyButton, { link: config.links.buy })
        )
      );
    }
  }]);

  return Home;
}(_react2.default.Component);

var styles = {
  features: {
    backgroundImage: 'url(img/hero-image.jpg)',
    backgroundSize: 'cover',
    backgroundPosition: 'center',
    height: '100vh'
  },
  playbutton: {
    width: '100px'
  },
  dark: {
    backgroundColor: '#1e1e1e',
    color: 'white'
  },
  featuresvideo: {
    width: '760px',
    height: '400px',
    margin: '20px auto 40px',
    maxWidth: '100%'
  },
  buybanner: {
    position: 'fixed',
    bottom: '0',
    width: '100%',
    backgroundColor: '#1e1e1e',
    textAlign: 'center',
    color: 'white',
    '@media (min-width: 601px)': {
      display: 'none'
    },
    padding: '10px',
    boxSizing: 'border-box'
  },
  link: {
    color: 'white'
  },
  justify: {
    textAlign: 'justify'
  }
};

exports.default = (0, _radium2.default)(Home);

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NotFound = function (_React$Component) {
  _inherits(NotFound, _React$Component);

  function NotFound() {
    _classCallCheck(this, NotFound);

    return _possibleConstructorReturn(this, (NotFound.__proto__ || Object.getPrototypeOf(NotFound)).apply(this, arguments));
  }

  _createClass(NotFound, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        '404 - Page not found'
      );
    }
  }]);

  return NotFound;
}(_react2.default.Component);

exports.default = NotFound;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _components = __webpack_require__(20);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NotFound = function (_React$Component) {
  _inherits(NotFound, _React$Component);

  function NotFound() {
    _classCallCheck(this, NotFound);

    return _possibleConstructorReturn(this, (NotFound.__proto__ || Object.getPrototypeOf(NotFound)).apply(this, arguments));
  }

  _createClass(NotFound, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (!this.scrolled) {
        window.scrollTo(0, 0);
        this.scrolled = true;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var config = this.props.config;


      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { style: styles.container },
          _react2.default.createElement(
            'h1',
            null,
            'Arroe.co: Privacy Policy'
          ),
          _react2.default.createElement(
            'h2',
            null,
            'WHAT INFORMATION DO WE COLLECT?'
          ),
          'We collect information from you when you register on the site, place an order, enter a contest or sweepstakes, respond to a survey or communication such as e-mail, or participate in another site feature. When ordering or registering, we may ask you for your name, e-mail address, mailing address, phone number, credit card information or other information. You may, however, visit our site anonymously. Like many websites, we use "cookies" to enhance your experience and gather information about visitors and visits to our websites. Please refer to the "Do we use \'cookies\'?" section below for information about cookies and how we use them.',
          _react2.default.createElement(
            'h2',
            null,
            'HOW DO WE USE THIS INFORMATION?'
          ),
          'We may use the information we collect from you when you register, purchase products, enter a contest or promotion, respond to a survey or marketing communication, surf the website, or use certain other site features in the following ways:',
          _react2.default.createElement(
            'ul',
            null,
            _react2.default.createElement(
              'li',
              null,
              'To personalize your site experience and to allow us to deliver the type of content and product offerings in which you are most interested.'
            ),
            _react2.default.createElement(
              'li',
              null,
              'To allow us to respond to your customer service requests and process transactions.'
            ),
            _react2.default.createElement(
              'li',
              null,
              'To administer a contest, promotion, survey or other site feature.'
            )
          ),
          'If you have opted-in to receive our e-mail newsletter, we may send you periodic e-mails. If you would no longer like to receive promotional e-mail from us, please refer to the "How can you opt-out, remove or modify information you have provided to us?" section below. If you have not opted-in to receive e-mail newsletters, you will not receive these e-mails. Visitors who register or participate in other site features such as marketing programs and \'members-only\' content will be given a choice whether they would like to be on our e-mail list and receive e-mail communications from us.',
          _react2.default.createElement(
            'h2',
            null,
            'HOW DO WE PROTECT VISITOR INFORMATION?'
          ),
          'We implement a variety of security measures to maintain the safety of your personal information. Your personal information is contained behind secured networks and is only accessible by a limited number of persons who have special access rights to such systems, and are required to keep the information confidential. When you place orders or access your personal information, we offer the use of a secure server. All sensitive/credit information you supply is transmitted via Secure Socket Layer (SSL) technology and then encrypted into our databases to be only accessed as stated above.',
          _react2.default.createElement(
            'h2',
            null,
            'DO WE USE "COOKIES"?'
          ),
          'Yes. Cookies are small files that a site or its service provider transfers to your computer\'s hard drive through your Web browser (if you allow) that enables the site\'s or service provider\'s systems to recognize your browser and capture and remember certain information. For instance, we use cookies to help us remember and process the items in your shopping cart. They are also used to help us understand your preferences based on previous or current site activity, which enables us to provide you with improved services. We also use cookies to help us compile aggregate data about site traffic and site interaction so that we can offer better site experiences and tools in the future.',
          _react2.default.createElement('br', null),
          'We may contract with third-party service providers to assist us in better understanding our site visitors. These service providers are not permitted to use the information collected on our behalf except to help us conduct and improve our business. You can choose to have your computer warn you each time a cookie is being sent, or you can choose to turn off all cookies. You do this through your browser (like Google Chrome, Safari or Internet Explorer) settings. Each browser is a little different, so look at your browser Help menu to learn the correct way to modify your cookies. If you turn cookies off, you won\'t have access to many features that make your site experience more efficient and some of our services will not function properly.',
          _react2.default.createElement(
            'h2',
            null,
            'DO WE DISCLOSE THE INFORMATION WE COLLECT TO OUTSIDE PARTIES?'
          ),
          'We do not sell, trade, or otherwise transfer to outside parties your personally identifiable information unless we provide you with advance notice, except as described below. The term "outside parties" does not include website hosting partners and other parties who assist us in operating our website, conducting our business, or servicing you, so long as those parties agree to keep this information confidential. We may also release your information when we believe release is appropriate to comply with the law, enforce our site policies, or protect ours or others\' rights, property, or safety. However, non-personally identifiable visitor information may be provided to other parties for marketing, advertising, or other uses.',
          _react2.default.createElement(
            'h2',
            null,
            'THIRD PARTY LINKS'
          ),
          'In an attempt to provide you with increased value, we may include third party links on our site. These linked sites have separate and independent privacy policies. We therefore have no responsibility or liability for the content and activities of these linked sites. Nonetheless, we seek to protect the integrity of our site and welcome any feedback about these linked sites (including if a specific link does not work).',
          _react2.default.createElement(
            'h2',
            null,
            'DETECTING AND PREVENTING FRAUD'
          ),
          'In addition, this site collects, uses, and retains certain information about visitors to detect, prevent, and analyze fraudulent transactions. We may share this information with a third party that provides analysis, monitoring, and reports to assist us in preventing and detecting fraudulent transactions and other activity on the site.',
          _react2.default.createElement('br', null),
          _react2.default.createElement('br', null),
          _react2.default.createElement(
            'a',
            { href: 'mailto:support@arroe.co' },
            'support@arroe.co'
          ),
          _react2.default.createElement(
            'h2',
            null,
            'CHANGES TO OUR POLICY'
          ),
          'If we decide to change our privacy policy, we will post those changes on this page. Policy changes will apply only to information collected after the date of the change.',
          _react2.default.createElement(
            'h2',
            null,
            'QUESTIONS AND FEEDBACK'
          ),
          'We welcome your questions, comments, and concerns about privacy. Please send us any and all feedback pertaining to privacy, or any other issue.',
          _react2.default.createElement(
            'h2',
            null,
            'ONLINE POLICY ONLY'
          ),
          'This online privacy policy applies only to information collected through our website and not to information collected offline.',
          _react2.default.createElement(
            'h2',
            null,
            'YOUR CONSENT'
          ),
          'By using our site, you consent to our privacy policy.',
          _react2.default.createElement(
            'h2',
            null,
            'CONTACT US'
          ),
          'Arroe welcomes your questions or comments regarding the Terms:',
          _react2.default.createElement('br', null),
          _react2.default.createElement('br', null),
          _react2.default.createElement(
            'p',
            { style: styles.notspaced },
            'Arroe Limited.'
          ),
          _react2.default.createElement(
            'p',
            { style: styles.notspaced },
            '11 Grove House'
          ),
          _react2.default.createElement(
            'p',
            { style: styles.notspaced },
            '16 Tudor Grove'
          ),
          _react2.default.createElement(
            'p',
            { style: styles.notspaced },
            'London'
          ),
          _react2.default.createElement(
            'p',
            { style: styles.notspaced },
            'E9 7QP'
          ),
          _react2.default.createElement(
            'p',
            { style: styles.notspaced },
            'UK'
          ),
          _react2.default.createElement('br', null),
          'Email Address:',
          _react2.default.createElement(
            'a',
            { href: 'mailto:support@arroe.co' },
            'support@arroe.co'
          )
        ),
        _react2.default.createElement('br', null),
        _react2.default.createElement('br', null),
        _react2.default.createElement(_components.Footer, { links: config.media })
      );
    }
  }]);

  return NotFound;
}(_react2.default.Component);

var styles = {
  container: {
    marginBottom: '-100px',
    paddingBottom: '-100px',
    maxWidth: '1000px',
    margin: 'auto'
  },
  notspaced: {
    margin: '0px'
  }
};

exports.default = NotFound;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _styles;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _components = __webpack_require__(20);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Product = function (_React$Component) {
    _inherits(Product, _React$Component);

    function Product(props) {
        _classCallCheck(this, Product);

        var _this = _possibleConstructorReturn(this, (Product.__proto__ || Object.getPrototypeOf(Product)).call(this, props));

        _this.state = {
            atTop: true
        };
        _this.jdata = {
            phones: [{
                name: 'iPhone X',
                cap: '7x'
            }, {
                name: 'iPhone 7 Plus',
                cap: '5.5x'
            }, {
                name: 'Samsung S7 Edge',
                cap: '4.4x'
            }],
            phones2: [{
                name: 'Google Pixel',
                cap: '5.7x'
            }, {
                name: 'LG 5',
                cap: '5.7x'
            }, {
                name: 'iPad Pro 12.9',
                cap: '1.5x'
            }],
            laptops: [{
                name: 'MacBook Pro 15"',
                cap: '1.2x'
            }, {
                name: 'MacBook Pro 13"',
                cap: '1.5x'
            }, {
                name: 'MacBook Air 13"',
                cap: '1.5x'
            }],
            laptops2: [{
                name: 'HP EliteBook Folio',
                cap: '1.56x'
            }, {
                name: 'Asus Zenbook 3',
                cap: '1.5x'
            }, {
                name: 'Acer Aspire s13',
                cap: '1.32x'
            }],
            techSpecs: [{
                title: "Dimensions",
                text: "W: 285mm - L: 200mm - H: 13mm",
                textLow: "Weight 321g",
                icon: "img/dim.png"
            }, {
                title: "Output",
                text: "37w min with 37wh battery.",
                textLow: "74w min with 74wh battery.",
                icon: "img/port.png"
            }],
            techSpecsMid: [{
                title: "Ports",
                text: "DC Output, 2x USB-C Power Delivery in/out ports (supporting 5,9,12,15, 20V output 60w max)",
                textLow: "1x USB-A QC 3.0 output (5-20v 18W max), 1x Qi Wireless 3.0 charging port (5V, 1A, 5W max)",
                icon: "img/port.png"
            }, {
                title: "Pass through charging",
                text: "LAER supports pass through charging allowing it to charge the internal battery while charging all connected devices simultaneously",
                icon: "img/port.png"
            }],
            techSpecsRight: [{
                title: "37wh Battery ",
                text: "2x 3.7v 5,000mAh",
                textLow: "Weight 336g",
                icon: "img/battery.png"
            }, {
                title: "74wh Battery ",
                text: "2x 3.7v 10,000mAh.",
                textLow: " Weight 494g",
                icon: "img/battery.png"
            }]
        };

        return _this;
    }

    _createClass(Product, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            window.addEventListener('scroll', this.handleScroll.bind(this));
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            window.removeEventListener('scroll', this.handleScroll.bind(this));
        }
    }, {
        key: 'handleScroll',
        value: function handleScroll(event) {
            var scrollTop = event.srcElement.body.scrollTop;
            if (scrollTop < 10 != this.state.atTop) {
                /* Only make call to setstate when value is different */
                this.setState({
                    atTop: scrollTop < 10
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var atTop = this.state.atTop;
            var config = this.props.config;


            var navLinks = {
                Home: "/",
                Product: "/product",
                about: "/about"
            };

            return _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(_components.Nav, { links: navLinks, buyLink: config.links.buy }),
                _react2.default.createElement('div', { style: styles.container }),
                _react2.default.createElement(
                    _components.Section,
                    null,
                    _react2.default.createElement(
                        _components.Title,
                        null,
                        'Features'
                    ),
                    _react2.default.createElement(
                        'div',
                        { style: styles.featuresvideo },
                        _react2.default.createElement(_components.YouTube, _defineProperty({
                            videoId: config.videos.features,
                            showinfo: '1',
                            controls: '0',
                            modest: '1',
                            rel: '0'
                        }, 'showinfo', '0'))
                    ),
                    _react2.default.createElement(_components.Features, { sections: config.features })
                ),
                _react2.default.createElement(
                    _components.Section,
                    { style: styles.dark, scrollName: navLinks.design },
                    _react2.default.createElement(
                        _components.Title,
                        null,
                        'Charge Capacity'
                    ),
                    _react2.default.createElement(
                        'div',
                        { style: styles.panelRight },
                        _react2.default.createElement(
                            'div',
                            { style: styles.innerPanelC },
                            this.jdata.phones2.map(function (data, idx) {
                                return _react2.default.createElement(
                                    'div',
                                    null,
                                    _react2.default.createElement(
                                        'p',
                                        null,
                                        data.name
                                    ),
                                    _react2.default.createElement(
                                        'div',
                                        { style: styles.spinner },
                                        _react2.default.createElement(
                                            'p',
                                            { style: styles.spinnerText },
                                            data.cap
                                        )
                                    )
                                );
                            })
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: styles.innerPanelC },
                            this.jdata.phones.map(function (data, idx) {
                                return _react2.default.createElement(
                                    'div',
                                    null,
                                    _react2.default.createElement(
                                        'p',
                                        null,
                                        data.name
                                    ),
                                    _react2.default.createElement(
                                        'div',
                                        { style: styles.spinner },
                                        _react2.default.createElement(
                                            'p',
                                            { style: styles.spinnerText },
                                            data.cap
                                        )
                                    )
                                );
                            })
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: styles.innerPanelC },
                            this.jdata.laptops2.map(function (data, idx) {
                                return _react2.default.createElement(
                                    'div',
                                    null,
                                    _react2.default.createElement(
                                        'p',
                                        null,
                                        data.name
                                    ),
                                    _react2.default.createElement(
                                        'div',
                                        { style: styles.spinner },
                                        _react2.default.createElement(
                                            'p',
                                            { style: styles.spinnerText },
                                            data.cap
                                        )
                                    )
                                );
                            })
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: styles.innerPanelC },
                            this.jdata.laptops.map(function (data, idx) {
                                return _react2.default.createElement(
                                    'div',
                                    null,
                                    _react2.default.createElement(
                                        'p',
                                        null,
                                        data.name
                                    ),
                                    _react2.default.createElement(
                                        'div',
                                        { style: styles.spinner },
                                        _react2.default.createElement(
                                            'p',
                                            { style: styles.spinnerText },
                                            data.cap
                                        )
                                    )
                                );
                            })
                        )
                    )
                ),
                _react2.default.createElement(
                    _components.Section,
                    { scrollName: navLinks.about },
                    _react2.default.createElement(
                        _components.Title,
                        null,
                        'Technical Specifications'
                    ),
                    _react2.default.createElement(
                        'div',
                        null,
                        _react2.default.createElement(
                            'div',
                            { style: styles.innerPanelL },
                            _react2.default.createElement(_components.Title, null),
                            this.jdata.techSpecs.map(function (data, idx) {
                                return _react2.default.createElement(
                                    'div',
                                    { style: styles.techBox },
                                    _react2.default.createElement(
                                        'div',
                                        { style: styles.infoHolder },
                                        _react2.default.createElement(
                                            'h4',
                                            { style: styles.txtTitle },
                                            data.title
                                        ),
                                        _react2.default.createElement(
                                            'p',
                                            { style: styles.smallText },
                                            data.text
                                        ),
                                        _react2.default.createElement('br', null),
                                        _react2.default.createElement(
                                            'p',
                                            { style: styles.smallText },
                                            data.textLow
                                        )
                                    )
                                );
                            })
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: styles.innerPanel },
                            _react2.default.createElement(_components.Title, null),
                            this.jdata.techSpecsMid.map(function (data, idx) {
                                return _react2.default.createElement(
                                    'div',
                                    { style: styles.techBox },
                                    _react2.default.createElement(
                                        'div',
                                        { style: styles.infoHolder },
                                        _react2.default.createElement(
                                            'h4',
                                            { style: styles.txtTitle },
                                            data.title
                                        ),
                                        _react2.default.createElement(
                                            'p',
                                            { style: styles.smallText },
                                            data.text
                                        ),
                                        _react2.default.createElement('br', null),
                                        _react2.default.createElement(
                                            'p',
                                            { style: styles.smallText },
                                            data.textLow
                                        )
                                    )
                                );
                            })
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: styles.innerPanelR },
                            _react2.default.createElement(_components.Title, null),
                            this.jdata.techSpecsRight.map(function (data, idx) {
                                return _react2.default.createElement(
                                    'div',
                                    { style: styles.techBox },
                                    _react2.default.createElement(
                                        'div',
                                        { style: styles.infoHolder },
                                        _react2.default.createElement(
                                            'h4',
                                            { style: styles.txtTitle },
                                            data.title
                                        ),
                                        _react2.default.createElement(
                                            'p',
                                            { style: styles.smallText },
                                            data.text
                                        ),
                                        _react2.default.createElement('br', null),
                                        _react2.default.createElement(
                                            'p',
                                            { style: styles.smallText },
                                            data.textLow
                                        )
                                    )
                                );
                            })
                        )
                    )
                ),
                _react2.default.createElement(
                    _components.Section,
                    { style: styles.dark, scrollName: navLinks.design },
                    Object.keys(config.sections.product).map(function (title, k) {
                        var dir = k % 2 === 0 ? 'left' : 'right';
                        var _config$sections$prod = config.sections.product[title],
                            text = _config$sections$prod.text,
                            src = _config$sections$prod.src;

                        return _react2.default.createElement(_components.ImageSplit, { key: k, title: title, direction: dir, text: text, src: src });
                    })
                ),
                _react2.default.createElement(
                    _components.Section,
                    { style: styles.dark, scrollName: navLinks.support },
                    _react2.default.createElement(
                        _components.Title,
                        null,
                        'Support'
                    ),
                    _react2.default.createElement(
                        _components.Text,
                        null,
                        config.sections.support
                    ),
                    _react2.default.createElement(_components.DetailsInput, null),
                    _react2.default.createElement(
                        _components.Text,
                        { style: styles.padbottom },
                        'Want to contact us by email? Email us at ',
                        _react2.default.createElement(
                            'a',
                            { style: styles.link, href: 'mailto:support@arroe.co' },
                            'support@arroe.co'
                        )
                    ),
                    _react2.default.createElement('br', null)
                ),
                _react2.default.createElement(
                    _components.Section,
                    { scrollName: 'notify' },
                    _react2.default.createElement(
                        _components.Title,
                        null,
                        'Get Notified'
                    ),
                    _react2.default.createElement(
                        _components.Text,
                        null,
                        'Enter your name and email below and we\u2019ll let you know when we\u2019re launching'
                    ),
                    _react2.default.createElement(_components.DetailsInput, { signup: true })
                ),
                _react2.default.createElement(_components.Footer, { links: config.media }),
                _react2.default.createElement(
                    'div',
                    { style: [styles.buybanner, { display: atTop ? 'none' : 'block' }] },
                    _react2.default.createElement(_components.BuyButton, { link: config.links.buy })
                )
            );
        }
    }]);

    return Product;
}(_react2.default.Component);

var styles = (_styles = {
    features: {
        backgroundImage: 'url(img/hero-image.jpg)',
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        height: '100vh'
    },
    playbutton: {
        width: '100px'
    },
    dark: {
        backgroundColor: '#1e1e1e',
        color: 'white'
    },
    featuresvideo: {
        width: '760px',
        height: '400px',
        margin: '20px auto 40px',
        maxWidth: '80%'
    }
}, _defineProperty(_styles, 'featuresvideo', {
    width: '760px',
    height: '400px',
    margin: '20px auto 40px',
    maxWidth: '100%'
}), _defineProperty(_styles, 'buybanner', {
    position: 'fixed',
    bottom: '0',
    width: '100%',
    backgroundColor: '#1e1e1e',
    textAlign: 'center',
    color: 'white',
    '@media (min-width: 601px)': {
        display: 'none'
    },
    padding: '10px',
    boxSizing: 'border-box'
}), _defineProperty(_styles, 'link', {
    color: 'white'
}), _defineProperty(_styles, 'justify', {
    textAlign: 'justify'
}), _defineProperty(_styles, 'container', {
    height: '100vh',
    width: '100%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'column',
    position: 'relative',
    zIndex: 0,
    backgroundImage: 'url(img/product-hero.JPG)',
    backgroundPosition: 'center',
    backgroundSize: 'cover',
    paddingTop: '80px',
    boxSizing: 'border-box'
}), _defineProperty(_styles, 'wrapper', {
    margin: '0 auto',
    position: 'relative'
}), _defineProperty(_styles, 'panelLeft', {
    order: 1,
    width: '50vh',
    maxWidth: '50vh',
    backgroundColor: 'black',
    float: 'left',
    '@media (max-width: 600px)': {
        display: 'block',
        width: '100%'
    }
}), _defineProperty(_styles, 'panelRight', {
    order: 2,
    width: '100%',
    float: 'right',
    '@media (max-width: 600px)': {
        display: 'block',
        width: '100%'
    }
}), _defineProperty(_styles, 'innerPanelC', {
    "width": "25%",
    float: 'right',
    '@media (max-width: 600px)': {
        display: 'block',
        width: '100%'
    }
}), _defineProperty(_styles, 'innerPanel', {
    float: 'left',
    width: '33%',
    '@media (max-width: 600px)': {
        display: 'block',
        marginBottom: '-4px',
        width: '100%',
        height: '20%'
    }
}), _defineProperty(_styles, 'innerPanelL', {
    float: 'left',
    width: '33%',
    '@media (max-width: 600px)': {
        display: 'block',
        marginBottom: '-4px',
        width: '100%'
    }
}), _defineProperty(_styles, 'innerPanelR', {
    float: 'right',
    width: '33%',
    '@media (max-width: 600px)': {
        display: 'block',
        marginBottom: '-4px',
        width: '100%'
    }
}), _defineProperty(_styles, "spinner", {
    "width": "50px",
    "height": "50px",
    "borderRadius": "50%",
    "border": "4px solid white",
    "margin": "10px",
    "display": "inline-block"
}), _defineProperty(_styles, "spinner2", {
    "float": "left",
    "width": "50px",
    "height": "50px",
    "background": "transparent",
    "borderRadius": "50%",
    "border": "4px solid #1e1e1e",
    "marginLeft": "100px",
    "display": "inline-block",
    '@media (max-width: 600px)': {
        "width": "30px",
        "height": "30px",
        display: 'block'
    }
}), _defineProperty(_styles, "infoHolder", {
    "textAlign": "center",
    "paddingLeft": "15px",
    "float": "left",
    "display": "inline-block",
    "width": "100%",
    '@media (max-width: 600px)': {
        width: "90%",
        marginTop: '-5px',
        display: 'block'
    }
}), _defineProperty(_styles, "techBox", {
    "width": "100%",
    height: "23vh",
    '@media (max-width: 600px)': {
        display: 'block',
        width: '100%'
    }

}), _defineProperty(_styles, "txtTitle", {
    textTransform: 'uppercase'
}), _defineProperty(_styles, "spinnerText", {
    "position": "relative",
    "top": "-3px"
}), _defineProperty(_styles, "imageHolderInner", {
    "height": "90vh",
    "width": "90%",
    '@media (max-width: 600px)': {
        "height": "50vh",
        "width": "100%"
    }

}), _defineProperty(_styles, "imageInner", {
    "paddingTop": "30%",
    "verticalAlign": "middle",
    "width": "100%",
    "margin": "auto"
}), _defineProperty(_styles, "smallText", {
    "marginTop": "-20px",
    "fontSize": "12px"
}), _styles);

exports.default = (0, _radium2.default)(Product);

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _components = __webpack_require__(20);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Purchase = function (_React$Component) {
  _inherits(Purchase, _React$Component);

  function Purchase(props) {
    _classCallCheck(this, Purchase);

    var _this = _possibleConstructorReturn(this, (Purchase.__proto__ || Object.getPrototypeOf(Purchase)).call(this, props));

    showTech: false;
    isTechActive: false;
    return _this;
  }

  _createClass(Purchase, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('scroll', this.handleScroll.bind(this));
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('scroll', this.handleScroll.bind(this));
    }
  }, {
    key: 'handleScroll',
    value: function handleScroll(event) {
      var scrollTop = event.srcElement.body.scrollTop;
      if (scrollTop < 10 != this.state.atTop) {
        /* Only make call to setstate when value is different */
        this.setState({
          atTop: scrollTop < 10

        });
      }
    }
  }, {
    key: 'renderTechSpecs',
    value: function renderTechSpecs() {
      this.setState({
        showTech: true,
        isTechActive: true
      });
    }
  }, {
    key: 'renderBox',
    value: function renderBox() {
      this.setState({
        showTech: false,
        isTechActive: false
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var atTop = this.state.atTop;
      var config = this.props.config;


      var navLinks = {
        Home: "/",
        Product: "/product",
        about: "/about"
      };

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_components.NavLight, { links: navLinks, buyLink: config.links.buy }),
        _react2.default.createElement(_components.HeroVideo, {
          style: styles.section,
          preview: 'img/21.png',
          videoId: config.videos.unbox,
          downLink: '#' + navLinks.features
        }),
        _react2.default.createElement(
          _components.Section,
          { style: styles.light },
          _react2.default.createElement(
            _components.Title,
            null,
            'Is your laptop connector in the box?'
          ),
          _react2.default.createElement(
            _components.Text,
            null,
            'We supply connectors for most major laptop makes and models.'
          ),
          _react2.default.createElement(
            _components.Text,
            null,
            'Please use the form below to confirm that your laptop connector is in the box. If it isn\u2019t you can order a connector that fits your laptop on our website www.arroe.co            '
          ),
          _react2.default.createElement(_components.DeviceLookup, { devices: config.devices }),
          _react2.default.createElement('br', null)
        ),
        _react2.default.createElement(
          _components.Section,
          { style: styles.light },
          Object.keys(config.sections.purchase).map(function (title, k) {
            var dir = k % 2 === 0 ? 'right' : 'left';
            var _config$sections$purc = config.sections.purchase[title],
                text = _config$sections$purc.text,
                src = _config$sections$purc.src;

            return _react2.default.createElement(_components.ImageSplit, { key: k, title: title, direction: dir, text: text, src: src });
          })
        ),
        _react2.default.createElement(
          _components.Section,
          { style: styles.dark },
          _react2.default.createElement(
            _components.Title,
            null,
            'Never worry about your battery again'
          ),
          Object.keys(config.sections.appSection).map(function (i, k) {
            var _config$sections$appS = config.sections.appSection[i],
                text = _config$sections$appS.text,
                src = _config$sections$appS.src;

            return _react2.default.createElement(_components.ImageSplitPhone, { key: k, direction: 'left', text: text, src: src });
          })
        ),
        _react2.default.createElement(
          _components.Section,
          { style: styles.light },
          Object.keys(config.sections.insidebox).map(function (i, k) {
            var dir = k % 2 === 0 ? 'left' : 'right';
            var _config$sections$insi = config.sections.insidebox[i],
                text = _config$sections$insi.text,
                src = _config$sections$insi.src;

            return _react2.default.createElement(_components.ImageSplit, { key: k, direction: dir, text: text, src: src });
          })
        ),
        _react2.default.createElement(
          _components.Section,
          null,
          _react2.default.createElement(
            'a',
            { style: this.state.isTechActive ? styles.inactive : styles.active, onClick: function onClick() {
                return _this2.renderBox();
              } },
            'In The Box '
          ),
          _react2.default.createElement(
            'a',
            { style: this.state.isTechActive ? styles.active : styles.inactive, onClick: function onClick() {
                return _this2.renderTechSpecs();
              } },
            ' Tech Specs'
          )
        ),
        _react2.default.createElement(
          _components.Section,
          { style: styles.light },
          this.state.showTech ? _react2.default.createElement(_components.TechSpecs, null) : _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(_components.InTheBox, { src: config.techImg.src })
          )
        ),
        _react2.default.createElement(_components.Footer, { links: config.media })
      );
    }
  }]);

  return Purchase;
}(_react2.default.Component);

var styles = {
  features: {
    backgroundImage: 'url(img/hero-image.jpg)',
    backgroundSize: 'cover',
    backgroundPosition: 'center',
    height: '100vh'
  },
  playbutton: {
    width: '100px'
  },
  light: {
    backgroundColor: 'white',
    color: 'black'
  },
  dark: {
    backgroundColor: '#0d121b',
    color: 'white'
  },
  featuresvideo: {
    width: '760px',
    height: '400px',
    margin: '20px auto 40px',
    maxWidth: '100%'
  },
  buybanner: {
    position: 'fixed',
    bottom: '0',
    width: '100%',
    backgroundColor: '#1e1e1e',
    textAlign: 'center',
    color: 'white',
    '@media (min-width: 601px)': {
      display: 'none'
    },
    padding: '10px',
    boxSizing: 'border-box'
  },
  link: {
    color: 'white'
  },
  justify: {
    textAlign: 'justify'
  },
  active: {
    paddingLeft: '20px',
    paddingRight: '20px',
    fontWeight: 'bold',
    textDecorationLine: 'underline'
  },
  inactive: {
    paddingLeft: '20px',
    paddingRight: '20px',
    textDecorationLine: 'none'
  }
};

exports.default = (0, _radium2.default)(Purchase);

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _components = __webpack_require__(20);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Purchase_fr = function (_React$Component) {
  _inherits(Purchase_fr, _React$Component);

  function Purchase_fr(props) {
    _classCallCheck(this, Purchase_fr);

    var _this = _possibleConstructorReturn(this, (Purchase_fr.__proto__ || Object.getPrototypeOf(Purchase_fr)).call(this, props));

    showTech: false;
    isTechActive: false;
    return _this;
  }

  _createClass(Purchase_fr, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('scroll', this.handleScroll.bind(this));
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('scroll', this.handleScroll.bind(this));
    }
  }, {
    key: 'handleScroll',
    value: function handleScroll(event) {
      var scrollTop = event.srcElement.body.scrollTop;
      if (scrollTop < 10 != this.state.atTop) {
        /* Only make call to setstate when value is different */
        this.setState({
          atTop: scrollTop < 10

        });
      }
    }
  }, {
    key: 'renderTechSpecs',
    value: function renderTechSpecs() {
      this.setState({
        showTech: true,
        isTechActive: true
      });
    }
  }, {
    key: 'renderBox',
    value: function renderBox() {
      this.setState({
        showTech: false,
        isTechActive: false
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var atTop = this.state.atTop;
      var config = this.props.config;


      var navLinks = {
        Home: "/",
        Product: "/product",
        about: "/about"
      };

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_components.NavLight, { links: navLinks, buyLink: config.links.buy }),
        _react2.default.createElement(_components.HeroVideo, {
          style: styles.section,
          preview: 'img/21.png',
          videoId: config.videos.unbox,
          downLink: '#' + navLinks.features
        }),
        _react2.default.createElement(
          _components.Section,
          { style: styles.light },
          _react2.default.createElement(
            _components.Title,
            null,
            'V\xE9rifiez si le bon connecteur est fourni'
          ),
          _react2.default.createElement(
            _components.Text,
            null,
            'Les connecteurs pour les marques leader d\u2019ordinateurs portables sont fournis.'
          ),
          _react2.default.createElement(
            _components.Text,
            null,
            'V\xE9rifiez si le connecteur pour votre mod\xE8le d\u2019ordinateur est fourni dans la bo\xEEte. Si ca n\u2019est pas le cas, vous pouvez commander sur notre site web www.arroe.co'
          ),
          _react2.default.createElement(_components.DeviceLookup, { devices: config.devices }),
          _react2.default.createElement('br', null)
        ),
        _react2.default.createElement(
          _components.Section,
          { style: styles.light },
          Object.keys(config.sections.purchase_fr).map(function (title, k) {
            var dir = k % 2 === 0 ? 'right' : 'left';
            var _config$sections$purc = config.sections.purchase_fr[title],
                text = _config$sections$purc.text,
                src = _config$sections$purc.src;

            return _react2.default.createElement(_components.ImageSplit, { key: k, title: title, direction: dir, text: text, src: src });
          })
        ),
        _react2.default.createElement(
          _components.Section,
          { style: styles.dark },
          _react2.default.createElement(
            _components.Title,
            null,
            'Ne vous souciez plus de vos batteries.'
          ),
          Object.keys(config.sections.appSection).map(function (i, k) {
            var _config$sections$appS = config.sections.appSection_fr[i],
                text = _config$sections$appS.text,
                src = _config$sections$appS.src;

            return _react2.default.createElement(_components.ImageSplitPhone, { key: k, direction: 'left', text: text, src: src });
          })
        ),
        _react2.default.createElement(
          _components.Section,
          { style: styles.light },
          Object.keys(config.sections.insidebox_fr).map(function (i, k) {
            var dir = k % 2 === 0 ? 'left' : 'right';
            var _config$sections$insi = config.sections.insidebox_fr[i],
                text = _config$sections$insi.text,
                src = _config$sections$insi.src;

            return _react2.default.createElement(_components.ImageSplit, { key: k, direction: dir, text: text, src: src });
          })
        ),
        _react2.default.createElement(
          _components.Section,
          null,
          _react2.default.createElement(
            'a',
            { style: this.state.isTechActive ? styles.inactive : styles.active, onClick: function onClick() {
                return _this2.renderBox();
              } },
            'Dans La Boite '
          ),
          _react2.default.createElement(
            'a',
            { style: this.state.isTechActive ? styles.active : styles.inactive, onClick: function onClick() {
                return _this2.renderTechSpecs();
              } },
            ' Sp\xE9cifications Techniques '
          )
        ),
        _react2.default.createElement(
          _components.Section,
          { style: styles.light },
          this.state.showTech ? _react2.default.createElement(_components.TechSpecs_fr, null) : _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(_components.InTheBox_fr, { src: config.techImg.src })
          )
        ),
        _react2.default.createElement(_components.Footer, { links: config.media })
      );
    }
  }]);

  return Purchase_fr;
}(_react2.default.Component);

var styles = {
  features: {
    backgroundImage: 'url(img/hero-image.jpg)',
    backgroundSize: 'cover',
    backgroundPosition: 'center',
    height: '100vh'
  },
  playbutton: {
    width: '100px'
  },
  light: {
    backgroundColor: 'white',
    color: 'black'
  },
  dark: {
    backgroundColor: '#0d121b',
    color: 'white'
  },
  featuresvideo: {
    width: '760px',
    height: '400px',
    margin: '20px auto 40px',
    maxWidth: '100%'
  },
  buybanner: {
    position: 'fixed',
    bottom: '0',
    width: '100%',
    backgroundColor: '#1e1e1e',
    textAlign: 'center',
    color: 'white',
    '@media (min-width: 601px)': {
      display: 'none'
    },
    padding: '10px',
    boxSizing: 'border-box'
  },
  link: {
    color: 'white'
  },
  justify: {
    textAlign: 'justify'
  },
  active: {
    paddingLeft: '20px',
    paddingRight: '20px',
    fontWeight: 'bold',
    textDecorationLine: 'underline'
  },
  inactive: {
    paddingLeft: '20px',
    paddingRight: '20px',
    textDecorationLine: 'none'
  }
};

exports.default = (0, _radium2.default)(Purchase_fr);

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _radium = __webpack_require__(5);

var _radium2 = _interopRequireDefault(_radium);

var _components = __webpack_require__(20);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Purchase_gr = function (_React$Component) {
  _inherits(Purchase_gr, _React$Component);

  function Purchase_gr(props) {
    _classCallCheck(this, Purchase_gr);

    var _this = _possibleConstructorReturn(this, (Purchase_gr.__proto__ || Object.getPrototypeOf(Purchase_gr)).call(this, props));

    showTech: false;
    isTechActive: false;
    return _this;
  }

  _createClass(Purchase_gr, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('scroll', this.handleScroll.bind(this));
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('scroll', this.handleScroll.bind(this));
    }
  }, {
    key: 'handleScroll',
    value: function handleScroll(event) {
      var scrollTop = event.srcElement.body.scrollTop;
      if (scrollTop < 10 != this.state.atTop) {
        /* Only make call to setstate when value is different */
        this.setState({
          atTop: scrollTop < 10

        });
      }
    }
  }, {
    key: 'renderTechSpecs',
    value: function renderTechSpecs() {
      this.setState({
        showTech: true,
        isTechActive: true
      });
    }
  }, {
    key: 'renderBox',
    value: function renderBox() {
      this.setState({
        showTech: false,
        isTechActive: false
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var atTop = this.state.atTop;
      var config = this.props.config;


      var navLinks = {
        Home: "/",
        Product: "/product",
        about: "/about"
      };

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_components.NavLight, { links: navLinks, buyLink: config.links.buy }),
        _react2.default.createElement(_components.HeroVideo, {
          style: styles.section,
          preview: 'img/21.png',
          videoId: config.videos.unbox,
          downLink: '#' + navLinks.features
        }),
        _react2.default.createElement(
          _components.Section,
          { style: styles.light },
          _react2.default.createElement(
            _components.Title,
            null,
            'Ist dein Laptop-Adapter in der Verpackung?'
          ),
          _react2.default.createElement(
            _components.Text,
            null,
            'LAER beinhaltet Adapter f\xFCr die meisten Laptop Marken und Modelle.'
          ),
          _react2.default.createElement(
            _components.Text,
            null,
            'Bitte best\xE4tige mit Hilfe des folgenden Formulars, dass dein Laptop-Adapter in der Verpackung enthalten ist. Ist dies nicht der Fall, so kannst du auf unserer Website unter www.arroe.co einen passenden Adapter f\xFCr deinen Laptop bestellen.'
          ),
          _react2.default.createElement(_components.DeviceLookup, { devices: config.devices }),
          _react2.default.createElement('br', null)
        ),
        _react2.default.createElement(
          _components.Section,
          { style: styles.light },
          Object.keys(config.sections.purchase_gr).map(function (title, k) {
            var dir = k % 2 === 0 ? 'right' : 'left';
            var _config$sections$purc = config.sections.purchase_gr[title],
                text = _config$sections$purc.text,
                src = _config$sections$purc.src;

            return _react2.default.createElement(_components.ImageSplit, { key: k, title: title, direction: dir, text: text, src: src });
          })
        ),
        _react2.default.createElement(
          _components.Section,
          { style: styles.dark },
          _react2.default.createElement(
            _components.Title,
            null,
            'Mach dir nie wieder Sorgen um deinen Akku.'
          ),
          Object.keys(config.sections.appSection_gr).map(function (i, k) {
            var _config$sections$appS = config.sections.appSection_gr[i],
                text = _config$sections$appS.text,
                src = _config$sections$appS.src;

            return _react2.default.createElement(_components.ImageSplitPhone, { key: k, direction: 'left', text: text, src: src });
          })
        ),
        _react2.default.createElement(
          _components.Section,
          { style: styles.light },
          Object.keys(config.sections.insidebox_gr).map(function (i, k) {
            var dir = k % 2 === 0 ? 'left' : 'right';
            var _config$sections$insi = config.sections.insidebox_gr[i],
                text = _config$sections$insi.text,
                src = _config$sections$insi.src;

            return _react2.default.createElement(_components.ImageSplit, { key: k, direction: dir, text: text, src: src });
          })
        ),
        _react2.default.createElement(
          _components.Section,
          null,
          _react2.default.createElement(
            'a',
            { style: this.state.isTechActive ? styles.inactive : styles.active, onClick: function onClick() {
                return _this2.renderBox();
              } },
            'In der Verpackung'
          ),
          _react2.default.createElement(
            'a',
            { style: this.state.isTechActive ? styles.active : styles.inactive, onClick: function onClick() {
                return _this2.renderTechSpecs();
              } },
            ' Einzelheiten'
          )
        ),
        _react2.default.createElement(
          _components.Section,
          { style: styles.light },
          this.state.showTech ? _react2.default.createElement(_components.TechSpecs_gr, null) : _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(_components.InTheBox_gr, { src: config.techImg.src })
          )
        ),
        _react2.default.createElement(_components.Footer, { links: config.media })
      );
    }
  }]);

  return Purchase_gr;
}(_react2.default.Component);

var styles = {
  features: {
    backgroundImage: 'url(img/hero-image.jpg)',
    backgroundSize: 'cover',
    backgroundPosition: 'center',
    height: '100vh'
  },
  playbutton: {
    width: '100px'
  },
  light: {
    backgroundColor: 'white',
    color: 'black'
  },
  dark: {
    backgroundColor: '#0d121b',
    color: 'white'
  },
  featuresvideo: {
    width: '760px',
    height: '400px',
    margin: '20px auto 40px',
    maxWidth: '100%'
  },
  buybanner: {
    position: 'fixed',
    bottom: '0',
    width: '100%',
    backgroundColor: '#1e1e1e',
    textAlign: 'center',
    color: 'white',
    '@media (min-width: 601px)': {
      display: 'none'
    },
    padding: '10px',
    boxSizing: 'border-box'
  },
  link: {
    color: 'white'
  },
  justify: {
    textAlign: 'justify'
  },
  active: {
    paddingLeft: '20px',
    paddingRight: '20px',
    fontWeight: 'bold',
    textDecorationLine: 'underline'
  },
  inactive: {
    paddingLeft: '20px',
    paddingRight: '20px',
    textDecorationLine: 'none'
  }
};

exports.default = (0, _radium2.default)(Purchase_gr);

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Purchase_gr = exports.Purchase_fr = exports.Purchase = exports.About = exports.Product = exports.Privacy = exports.NotFound = exports.Home = undefined;

var _Home = __webpack_require__(160);

var _Home2 = _interopRequireDefault(_Home);

var _NotFound = __webpack_require__(161);

var _NotFound2 = _interopRequireDefault(_NotFound);

var _Privacy = __webpack_require__(162);

var _Privacy2 = _interopRequireDefault(_Privacy);

var _Product = __webpack_require__(163);

var _Product2 = _interopRequireDefault(_Product);

var _About = __webpack_require__(159);

var _About2 = _interopRequireDefault(_About);

var _Purchase = __webpack_require__(164);

var _Purchase2 = _interopRequireDefault(_Purchase);

var _Purchase_fr = __webpack_require__(165);

var _Purchase_fr2 = _interopRequireDefault(_Purchase_fr);

var _Purchase_gr = __webpack_require__(166);

var _Purchase_gr2 = _interopRequireDefault(_Purchase_gr);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.Home = _Home2.default;
exports.NotFound = _NotFound2.default;
exports.Privacy = _Privacy2.default;
exports.Product = _Product2.default;
exports.About = _About2.default;
exports.Purchase = _Purchase2.default;
exports.Purchase_fr = _Purchase_fr2.default;
exports.Purchase_gr = _Purchase_gr2.default;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _reactRouterDom = __webpack_require__(26);

var _pages = __webpack_require__(167);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (config) {
  return _react2.default.createElement(
    _reactRouterDom.Switch,
    null,
    _react2.default.createElement(
      _reactRouterDom.Route,
      { exact: true, path: '/' },
      _react2.default.createElement(_pages.Home, { config: config })
    ),
    _react2.default.createElement(
      _reactRouterDom.Route,
      { exact: true, path: '/privacy' },
      _react2.default.createElement(_pages.Privacy, { config: config })
    ),
    _react2.default.createElement(
      _reactRouterDom.Route,
      { exact: true, path: '/product' },
      _react2.default.createElement(_pages.Product, { config: config })
    ),
    _react2.default.createElement(
      _reactRouterDom.Route,
      { exact: true, path: '/about' },
      _react2.default.createElement(_pages.About, { config: config })
    ),
    _react2.default.createElement(
      _reactRouterDom.Route,
      { exact: true, path: '/purchase' },
      _react2.default.createElement(_pages.Purchase, { config: config })
    ),
    _react2.default.createElement(
      _reactRouterDom.Route,
      { exact: true, path: '/purchase_fr' },
      _react2.default.createElement(_pages.Purchase_fr, { config: config })
    ),
    _react2.default.createElement(
      _reactRouterDom.Route,
      { exact: true, path: '/purchase_gr' },
      _react2.default.createElement(_pages.Purchase_gr, { config: config })
    ),
    _react2.default.createElement(
      _reactRouterDom.Route,
      { exact: true, path: '/404' },
      _react2.default.createElement(_pages.NotFound, { config: config })
    ),
    _react2.default.createElement(
      _reactRouterDom.Route,
      null,
      _react2.default.createElement(_reactRouterDom.Redirect, { config: config, to: '/404' })
    )
  );
};

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(142);

var _reactDom2 = _interopRequireDefault(_reactDom);

var _App = __webpack_require__(75);

var _App2 = _interopRequireDefault(_App);

var _reactRouterDom = __webpack_require__(26);

var _axios = __webpack_require__(76);

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.onload = function () {
  _axios2.default.get('/strings-fr.json').then(function (config) {
    var a = _react2.default.createElement(
      _reactRouterDom.BrowserRouter,
      null,
      _react2.default.createElement(_App2.default, { config: config.data })
    );
    _reactDom2.default.render(a, document.getElementById('main'));
  });
};

window.onload = function () {
  _axios2.default.get('/strings-en.json').then(function (config) {
    var r = _react2.default.createElement(
      _reactRouterDom.BrowserRouter,
      null,
      _react2.default.createElement(_App2.default, { config: config.data })
    );
    _reactDom2.default.render(r, document.getElementById('main'));
  });
};

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _extends;
function _extends() {
  exports.default = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(12);
var bind = __webpack_require__(86);
var Axios = __webpack_require__(173);
var defaults = __webpack_require__(47);

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(83);
axios.CancelToken = __webpack_require__(172);
axios.isCancel = __webpack_require__(84);

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(187);

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(83);

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defaults = __webpack_require__(47);
var utils = __webpack_require__(12);
var InterceptorManager = __webpack_require__(174);
var dispatchRequest = __webpack_require__(175);
var isAbsoluteURL = __webpack_require__(183);
var combineURLs = __webpack_require__(181);

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);
  config.method = config.method.toLowerCase();

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(12);

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(12);
var transformData = __webpack_require__(178);
var isCancel = __webpack_require__(84);
var defaults = __webpack_require__(47);

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(config.data, config.headers, config.transformRequest);

  // Flatten headers
  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers || {});

  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(response.data, response.headers, config.transformResponse);

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
      }
    }

    return Promise.reject(reason);
  });
};

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  return error;
};

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(85);

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
  }
};

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(12);

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function E() {
  this.message = 'String contains an invalid character';
}
E.prototype = new Error();
E.prototype.code = 5;
E.prototype.name = 'InvalidCharacterError';

function btoa(input) {
  var str = String(input);
  var output = '';
  for (
  // initialize result and counter
  var block, charCode, idx = 0, map = chars;
  // if the next str index does not exist:
  //   change the mapping table to "="
  //   check if d has no fractional digits
  str.charAt(idx | 0) || (map = '=', idx % 1);
  // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
  output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
    charCode = str.charCodeAt(idx += 3 / 4);
    if (charCode > 0xFF) {
      throw new E();
    }
    block = block << 8 | charCode;
  }
  return output;
}

module.exports = btoa;

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(12);

function encode(val) {
  return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      }

      if (!utils.isArray(val)) {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
};

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(12);

module.exports = utils.isStandardBrowserEnv() ?

// Standard browser envs support document.cookie
function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      var cookie = [];
      cookie.push(name + '=' + encodeURIComponent(value));

      if (utils.isNumber(expires)) {
        cookie.push('expires=' + new Date(expires).toGMTString());
      }

      if (utils.isString(path)) {
        cookie.push('path=' + path);
      }

      if (utils.isString(domain)) {
        cookie.push('domain=' + domain);
      }

      if (secure === true) {
        cookie.push('secure');
      }

      document.cookie = cookie.join('; ');
    },

    read: function read(name) {
      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return match ? decodeURIComponent(match[3]) : null;
    },

    remove: function remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  };
}() :

// Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
}();

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return (/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url)
  );
};

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(12);

module.exports = utils.isStandardBrowserEnv() ?

// Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement('a');
  var originURL;

  /**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */
  function resolveURL(url) {
    var href = url;

    if (msie) {
      // IE needs attribute set twice to normalize properties
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }

    urlParsingNode.setAttribute('href', href);

    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }

  originURL = resolveURL(window.location.href);

  /**
  * Determine if a URL shares the same origin as the current location
  *
  * @param {String} requestURL The URL to test
  * @returns {boolean} True if URL shares the same origin, otherwise false
  */
  return function isURLSameOrigin(requestURL) {
    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() :

// Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return function isURLSameOrigin() {
    return true;
  };
}();

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(12);

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(12);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) {
    return parsed;
  }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
};

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*!
 * Bowser - a browser detector
 * https://github.com/ded/bowser
 * MIT License | (c) Dustin Diaz 2015
 */

!function (root, name, definition) {
  if (typeof module != 'undefined' && module.exports) module.exports = definition();else if (true) __webpack_require__(361)(name, definition);else root[name] = definition();
}(undefined, 'bowser', function () {
  /**
    * See useragents.js for examples of navigator.userAgent
    */

  var t = true;

  function detect(ua) {

    function getFirstMatch(regex) {
      var match = ua.match(regex);
      return match && match.length > 1 && match[1] || '';
    }

    function getSecondMatch(regex) {
      var match = ua.match(regex);
      return match && match.length > 1 && match[2] || '';
    }

    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase(),
        likeAndroid = /like android/i.test(ua),
        android = !likeAndroid && /android/i.test(ua),
        nexusMobile = /nexus\s*[0-6]\s*/i.test(ua),
        nexusTablet = !nexusMobile && /nexus\s*[0-9]+/i.test(ua),
        chromeos = /CrOS/.test(ua),
        silk = /silk/i.test(ua),
        sailfish = /sailfish/i.test(ua),
        tizen = /tizen/i.test(ua),
        webos = /(web|hpw)(o|0)s/i.test(ua),
        windowsphone = /windows phone/i.test(ua),
        samsungBrowser = /SamsungBrowser/i.test(ua),
        windows = !windowsphone && /windows/i.test(ua),
        mac = !iosdevice && !silk && /macintosh/i.test(ua),
        linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua),
        edgeVersion = getSecondMatch(/edg([ea]|ios)\/(\d+(\.\d+)?)/i),
        versionIdentifier = getFirstMatch(/version\/(\d+(\.\d+)?)/i),
        tablet = /tablet/i.test(ua) && !/tablet pc/i.test(ua),
        mobile = !tablet && /[^-]mobi/i.test(ua),
        xbox = /xbox/i.test(ua),
        result;

    if (/opera/i.test(ua)) {
      //  an old Opera
      result = {
        name: 'Opera',
        opera: t,
        version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)
      };
    } else if (/opr\/|opios/i.test(ua)) {
      // a new Opera
      result = {
        name: 'Opera',
        opera: t,
        version: getFirstMatch(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i) || versionIdentifier
      };
    } else if (/SamsungBrowser/i.test(ua)) {
      result = {
        name: 'Samsung Internet for Android',
        samsungBrowser: t,
        version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)
      };
    } else if (/Whale/i.test(ua)) {
      result = {
        name: 'NAVER Whale browser',
        whale: t,
        version: getFirstMatch(/(?:whale)[\s\/](\d+(?:\.\d+)+)/i)
      };
    } else if (/MZBrowser/i.test(ua)) {
      result = {
        name: 'MZ Browser',
        mzbrowser: t,
        version: getFirstMatch(/(?:MZBrowser)[\s\/](\d+(?:\.\d+)+)/i)
      };
    } else if (/coast/i.test(ua)) {
      result = {
        name: 'Opera Coast',
        coast: t,
        version: versionIdentifier || getFirstMatch(/(?:coast)[\s\/](\d+(\.\d+)?)/i)
      };
    } else if (/focus/i.test(ua)) {
      result = {
        name: 'Focus',
        focus: t,
        version: getFirstMatch(/(?:focus)[\s\/](\d+(?:\.\d+)+)/i)
      };
    } else if (/yabrowser/i.test(ua)) {
      result = {
        name: 'Yandex Browser',
        yandexbrowser: t,
        version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)
      };
    } else if (/ucbrowser/i.test(ua)) {
      result = {
        name: 'UC Browser',
        ucbrowser: t,
        version: getFirstMatch(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)
      };
    } else if (/mxios/i.test(ua)) {
      result = {
        name: 'Maxthon',
        maxthon: t,
        version: getFirstMatch(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)
      };
    } else if (/epiphany/i.test(ua)) {
      result = {
        name: 'Epiphany',
        epiphany: t,
        version: getFirstMatch(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)
      };
    } else if (/puffin/i.test(ua)) {
      result = {
        name: 'Puffin',
        puffin: t,
        version: getFirstMatch(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)
      };
    } else if (/sleipnir/i.test(ua)) {
      result = {
        name: 'Sleipnir',
        sleipnir: t,
        version: getFirstMatch(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)
      };
    } else if (/k-meleon/i.test(ua)) {
      result = {
        name: 'K-Meleon',
        kMeleon: t,
        version: getFirstMatch(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)
      };
    } else if (windowsphone) {
      result = {
        name: 'Windows Phone',
        osname: 'Windows Phone',
        windowsphone: t
      };
      if (edgeVersion) {
        result.msedge = t;
        result.version = edgeVersion;
      } else {
        result.msie = t;
        result.version = getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i);
      }
    } else if (/msie|trident/i.test(ua)) {
      result = {
        name: 'Internet Explorer',
        msie: t,
        version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
      };
    } else if (chromeos) {
      result = {
        name: 'Chrome',
        osname: 'Chrome OS',
        chromeos: t,
        chromeBook: t,
        chrome: t,
        version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
      };
    } else if (/edg([ea]|ios)/i.test(ua)) {
      result = {
        name: 'Microsoft Edge',
        msedge: t,
        version: edgeVersion
      };
    } else if (/vivaldi/i.test(ua)) {
      result = {
        name: 'Vivaldi',
        vivaldi: t,
        version: getFirstMatch(/vivaldi\/(\d+(\.\d+)?)/i) || versionIdentifier
      };
    } else if (sailfish) {
      result = {
        name: 'Sailfish',
        osname: 'Sailfish OS',
        sailfish: t,
        version: getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
      };
    } else if (/seamonkey\//i.test(ua)) {
      result = {
        name: 'SeaMonkey',
        seamonkey: t,
        version: getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)
      };
    } else if (/firefox|iceweasel|fxios/i.test(ua)) {
      result = {
        name: 'Firefox',
        firefox: t,
        version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)
      };
      if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
        result.firefoxos = t;
        result.osname = 'Firefox OS';
      }
    } else if (silk) {
      result = {
        name: 'Amazon Silk',
        silk: t,
        version: getFirstMatch(/silk\/(\d+(\.\d+)?)/i)
      };
    } else if (/phantom/i.test(ua)) {
      result = {
        name: 'PhantomJS',
        phantom: t,
        version: getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)
      };
    } else if (/slimerjs/i.test(ua)) {
      result = {
        name: 'SlimerJS',
        slimer: t,
        version: getFirstMatch(/slimerjs\/(\d+(\.\d+)?)/i)
      };
    } else if (/blackberry|\bbb\d+/i.test(ua) || /rim\stablet/i.test(ua)) {
      result = {
        name: 'BlackBerry',
        osname: 'BlackBerry OS',
        blackberry: t,
        version: versionIdentifier || getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
      };
    } else if (webos) {
      result = {
        name: 'WebOS',
        osname: 'WebOS',
        webos: t,
        version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
      };
      /touchpad\//i.test(ua) && (result.touchpad = t);
    } else if (/bada/i.test(ua)) {
      result = {
        name: 'Bada',
        osname: 'Bada',
        bada: t,
        version: getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)
      };
    } else if (tizen) {
      result = {
        name: 'Tizen',
        osname: 'Tizen',
        tizen: t,
        version: getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier
      };
    } else if (/qupzilla/i.test(ua)) {
      result = {
        name: 'QupZilla',
        qupzilla: t,
        version: getFirstMatch(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i) || versionIdentifier
      };
    } else if (/chromium/i.test(ua)) {
      result = {
        name: 'Chromium',
        chromium: t,
        version: getFirstMatch(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i) || versionIdentifier
      };
    } else if (/chrome|crios|crmo/i.test(ua)) {
      result = {
        name: 'Chrome',
        chrome: t,
        version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
      };
    } else if (android) {
      result = {
        name: 'Android',
        version: versionIdentifier
      };
    } else if (/safari|applewebkit/i.test(ua)) {
      result = {
        name: 'Safari',
        safari: t
      };
      if (versionIdentifier) {
        result.version = versionIdentifier;
      }
    } else if (iosdevice) {
      result = {
        name: iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'
        // WTF: version is not part of user agent in web apps
      };if (versionIdentifier) {
        result.version = versionIdentifier;
      }
    } else if (/googlebot/i.test(ua)) {
      result = {
        name: 'Googlebot',
        googlebot: t,
        version: getFirstMatch(/googlebot\/(\d+(\.\d+))/i) || versionIdentifier
      };
    } else {
      result = {
        name: getFirstMatch(/^(.*)\/(.*) /),
        version: getSecondMatch(/^(.*)\/(.*) /)
      };
    }

    // set webkit or gecko flag for browsers based on these engines
    if (!result.msedge && /(apple)?webkit/i.test(ua)) {
      if (/(apple)?webkit\/537\.36/i.test(ua)) {
        result.name = result.name || "Blink";
        result.blink = t;
      } else {
        result.name = result.name || "Webkit";
        result.webkit = t;
      }
      if (!result.version && versionIdentifier) {
        result.version = versionIdentifier;
      }
    } else if (!result.opera && /gecko\//i.test(ua)) {
      result.name = result.name || "Gecko";
      result.gecko = t;
      result.version = result.version || getFirstMatch(/gecko\/(\d+(\.\d+)?)/i);
    }

    // set OS flags for platforms that have multiple browsers
    if (!result.windowsphone && (android || result.silk)) {
      result.android = t;
      result.osname = 'Android';
    } else if (!result.windowsphone && iosdevice) {
      result[iosdevice] = t;
      result.ios = t;
      result.osname = 'iOS';
    } else if (mac) {
      result.mac = t;
      result.osname = 'macOS';
    } else if (xbox) {
      result.xbox = t;
      result.osname = 'Xbox';
    } else if (windows) {
      result.windows = t;
      result.osname = 'Windows';
    } else if (linux) {
      result.linux = t;
      result.osname = 'Linux';
    }

    function getWindowsVersion(s) {
      switch (s) {
        case 'NT':
          return 'NT';
        case 'XP':
          return 'XP';
        case 'NT 5.0':
          return '2000';
        case 'NT 5.1':
          return 'XP';
        case 'NT 5.2':
          return '2003';
        case 'NT 6.0':
          return 'Vista';
        case 'NT 6.1':
          return '7';
        case 'NT 6.2':
          return '8';
        case 'NT 6.3':
          return '8.1';
        case 'NT 10.0':
          return '10';
        default:
          return undefined;
      }
    }

    // OS version extraction
    var osVersion = '';
    if (result.windows) {
      osVersion = getWindowsVersion(getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i));
    } else if (result.windowsphone) {
      osVersion = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
    } else if (result.mac) {
      osVersion = getFirstMatch(/Mac OS X (\d+([_\.\s]\d+)*)/i);
      osVersion = osVersion.replace(/[_\s]/g, '.');
    } else if (iosdevice) {
      osVersion = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
      osVersion = osVersion.replace(/[_\s]/g, '.');
    } else if (android) {
      osVersion = getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
    } else if (result.webos) {
      osVersion = getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
    } else if (result.blackberry) {
      osVersion = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
    } else if (result.bada) {
      osVersion = getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
    } else if (result.tizen) {
      osVersion = getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
    }
    if (osVersion) {
      result.osversion = osVersion;
    }

    // device type extraction
    var osMajorVersion = !result.windows && osVersion.split('.')[0];
    if (tablet || nexusTablet || iosdevice == 'ipad' || android && (osMajorVersion == 3 || osMajorVersion >= 4 && !mobile) || result.silk) {
      result.tablet = t;
    } else if (mobile || iosdevice == 'iphone' || iosdevice == 'ipod' || android || nexusMobile || result.blackberry || result.webos || result.bada) {
      result.mobile = t;
    }

    // Graded Browser Support
    // http://developer.yahoo.com/yui/articles/gbs
    if (result.msedge || result.msie && result.version >= 10 || result.yandexbrowser && result.version >= 15 || result.vivaldi && result.version >= 1.0 || result.chrome && result.version >= 20 || result.samsungBrowser && result.version >= 4 || result.whale && compareVersions([result.version, '1.0']) === 1 || result.mzbrowser && compareVersions([result.version, '6.0']) === 1 || result.focus && compareVersions([result.version, '1.0']) === 1 || result.firefox && result.version >= 20.0 || result.safari && result.version >= 6 || result.opera && result.version >= 10.0 || result.ios && result.osversion && result.osversion.split(".")[0] >= 6 || result.blackberry && result.version >= 10.1 || result.chromium && result.version >= 20) {
      result.a = t;
    } else if (result.msie && result.version < 10 || result.chrome && result.version < 20 || result.firefox && result.version < 20.0 || result.safari && result.version < 6 || result.opera && result.version < 10.0 || result.ios && result.osversion && result.osversion.split(".")[0] < 6 || result.chromium && result.version < 20) {
      result.c = t;
    } else result.x = t;

    return result;
  }

  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '');

  bowser.test = function (browserList) {
    for (var i = 0; i < browserList.length; ++i) {
      var browserItem = browserList[i];
      if (typeof browserItem === 'string') {
        if (browserItem in bowser) {
          return true;
        }
      }
    }
    return false;
  };

  /**
   * Get version precisions count
   *
   * @example
   *   getVersionPrecision("1.10.3") // 3
   *
   * @param  {string} version
   * @return {number}
   */
  function getVersionPrecision(version) {
    return version.split(".").length;
  }

  /**
   * Array::map polyfill
   *
   * @param  {Array} arr
   * @param  {Function} iterator
   * @return {Array}
   */
  function map(arr, iterator) {
    var result = [],
        i;
    if (Array.prototype.map) {
      return Array.prototype.map.call(arr, iterator);
    }
    for (i = 0; i < arr.length; i++) {
      result.push(iterator(arr[i]));
    }
    return result;
  }

  /**
   * Calculate browser version weight
   *
   * @example
   *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1
   *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1
   *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0
   *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1
   *
   * @param  {Array<String>} versions versions to compare
   * @return {Number} comparison result
   */
  function compareVersions(versions) {
    // 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
    var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));
    var chunks = map(versions, function (version) {
      var delta = precision - getVersionPrecision(version);

      // 2) "9" -> "9.0" (for precision = 2)
      version = version + new Array(delta + 1).join(".0");

      // 3) "9.0" -> ["000000000"", "000000009"]
      return map(version.split("."), function (chunk) {
        return new Array(20 - chunk.length).join("0") + chunk;
      }).reverse();
    });

    // iterate in reverse order by reversed chunks array
    while (--precision >= 0) {
      // 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
      if (chunks[0][precision] > chunks[1][precision]) {
        return 1;
      } else if (chunks[0][precision] === chunks[1][precision]) {
        if (precision === 0) {
          // all version chunks are same
          return 0;
        }
      } else {
        return -1;
      }
    }
  }

  /**
   * Check if browser is unsupported
   *
   * @example
   *   bowser.isUnsupportedBrowser({
   *     msie: "10",
   *     firefox: "23",
   *     chrome: "29",
   *     safari: "5.1",
   *     opera: "16",
   *     phantom: "534"
   *   });
   *
   * @param  {Object}  minVersions map of minimal version to browser
   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
   * @param  {String}  [ua] user agent string
   * @return {Boolean}
   */
  function isUnsupportedBrowser(minVersions, strictMode, ua) {
    var _bowser = bowser;

    // make strictMode param optional with ua param usage
    if (typeof strictMode === 'string') {
      ua = strictMode;
      strictMode = void 0;
    }

    if (strictMode === void 0) {
      strictMode = false;
    }
    if (ua) {
      _bowser = detect(ua);
    }

    var version = "" + _bowser.version;
    for (var browser in minVersions) {
      if (minVersions.hasOwnProperty(browser)) {
        if (_bowser[browser]) {
          if (typeof minVersions[browser] !== 'string') {
            throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));
          }

          // browser version and min supported version.
          return compareVersions([version, minVersions[browser]]) < 0;
        }
      }
    }

    return strictMode; // not found
  }

  /**
   * Check if browser is supported
   *
   * @param  {Object} minVersions map of minimal version to browser
   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
   * @param  {String}  [ua] user agent string
   * @return {Boolean}
   */
  function check(minVersions, strictMode, ua) {
    return !isUnsupportedBrowser(minVersions, strictMode, ua);
  }

  bowser.isUnsupportedBrowser = isUnsupportedBrowser;
  bowser.compareVersions = compareVersions;
  bowser.check = check;

  /*
   * Set our detect method to the main bowser object so we can
   * reuse it to test other user agents.
   * This is needed to implement future tests.
   */
  bowser._detect = detect;

  /*
   * Set our detect public method to the main bowser object
   * This is needed to implement bowser in server side
   */
  bowser.detect = detect;
  return bowser;
});

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _assign = __webpack_require__(6);

var emptyObject = __webpack_require__(31);
var _invariant = __webpack_require__(2);

if (process.env.NODE_ENV !== 'production') {
  var warning = __webpack_require__(3);
}

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

var ReactPropTypeLocationNames;
if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
} else {
  ReactPropTypeLocationNames = {};
}

function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
  /**
   * Policies that describe methods in `ReactClassInterface`.
   */

  var injectedMixins = [];

  /**
   * Composite components are higher-level components that compose other composite
   * or host components.
   *
   * To create a new type of `ReactClass`, pass a specification of
   * your new class to `React.createClass`. The only requirement of your class
   * specification is that you implement a `render` method.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return <div>Hello World</div>;
   *     }
   *   });
   *
   * The class specification supports a specific protocol of methods that have
   * special meaning (e.g. `render`). See `ReactClassInterface` for
   * more the comprehensive protocol. Any other properties and methods in the
   * class specification will be available on the prototype.
   *
   * @interface ReactClassInterface
   * @internal
   */
  var ReactClassInterface = {
    /**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */
    mixins: 'DEFINE_MANY',

    /**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */
    statics: 'DEFINE_MANY',

    /**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */
    propTypes: 'DEFINE_MANY',

    /**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */
    contextTypes: 'DEFINE_MANY',

    /**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */
    childContextTypes: 'DEFINE_MANY',

    // ==== Definition methods ====

    /**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */
    getDefaultProps: 'DEFINE_MANY_MERGED',

    /**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
     *     return {
     *       isOn: false,
     *       fooBaz: new BazFoo()
     *     }
     *   }
     *
     * @return {object}
     * @optional
     */
    getInitialState: 'DEFINE_MANY_MERGED',

    /**
     * @return {object}
     * @optional
     */
    getChildContext: 'DEFINE_MANY_MERGED',

    /**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
     *     var name = this.props.name;
     *     return <div>Hello, {name}!</div>;
     *   }
     *
     * @return {ReactComponent}
     * @required
     */
    render: 'DEFINE_ONCE',

    // ==== Delegate methods ====

    /**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */
    componentWillMount: 'DEFINE_MANY',

    /**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidMount: 'DEFINE_MANY',

    /**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
     *     this.setState({
     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
     *     });
     *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */
    componentWillReceiveProps: 'DEFINE_MANY',

    /**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
     *     return !equal(nextProps, this.props) ||
     *       !equal(nextState, this.state) ||
     *       !equal(nextContext, this.context);
     *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */
    shouldComponentUpdate: 'DEFINE_ONCE',

    /**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */
    componentWillUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */
    componentWillUnmount: 'DEFINE_MANY',

    /**
     * Replacement for (deprecated) `componentWillMount`.
     *
     * @optional
     */
    UNSAFE_componentWillMount: 'DEFINE_MANY',

    /**
     * Replacement for (deprecated) `componentWillReceiveProps`.
     *
     * @optional
     */
    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',

    /**
     * Replacement for (deprecated) `componentWillUpdate`.
     *
     * @optional
     */
    UNSAFE_componentWillUpdate: 'DEFINE_MANY',

    // ==== Advanced methods ====

    /**
     * Updates the component's currently mounted DOM representation.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     * @overridable
     */
    updateComponent: 'OVERRIDE_BASE'
  };

  /**
   * Similar to ReactClassInterface but for static methods.
   */
  var ReactClassStaticInterface = {
    /**
     * This method is invoked after a component is instantiated and when it
     * receives new props. Return an object to update state in response to
     * prop changes. Return null to indicate no change to state.
     *
     * If an object is returned, its keys will be merged into the existing state.
     *
     * @return {object || null}
     * @optional
     */
    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
  };

  /**
   * Mapping from class specification keys to special processing functions.
   *
   * Although these are declared like instance properties in the specification
   * when defining classes using `React.createClass`, they are actually static
   * and are accessible on the constructor instead of the prototype. Despite
   * being static, they must be defined outside of the "statics" key under
   * which all other static methods are defined.
   */
  var RESERVED_SPEC_KEYS = {
    displayName: function displayName(Constructor, _displayName) {
      Constructor.displayName = _displayName;
    },
    mixins: function mixins(Constructor, _mixins) {
      if (_mixins) {
        for (var i = 0; i < _mixins.length; i++) {
          mixSpecIntoComponent(Constructor, _mixins[i]);
        }
      }
    },
    childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, _childContextTypes, 'childContext');
      }
      Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
    },
    contextTypes: function contextTypes(Constructor, _contextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, _contextTypes, 'context');
      }
      Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
    },
    /**
     * Special case getDefaultProps which should move into statics but requires
     * automatic merging.
     */
    getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
      } else {
        Constructor.getDefaultProps = _getDefaultProps;
      }
    },
    propTypes: function propTypes(Constructor, _propTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, _propTypes, 'prop');
      }
      Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
    },
    statics: function statics(Constructor, _statics) {
      mixStaticSpecIntoComponent(Constructor, _statics);
    },
    autobind: function autobind() {}
  };

  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        // use a warning instead of an _invariant so components
        // don't show up in prod but only in __DEV__
        if (process.env.NODE_ENV !== 'production') {
          warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName);
        }
      }
    }
  }

  function validateMethodOverride(isAlreadyDefined, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

    // Disallow overriding of base class methods unless explicitly allowed.
    if (ReactClassMixin.hasOwnProperty(name)) {
      _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);
    }

    // Disallow defining methods more than once unless explicitly allowed.
    if (isAlreadyDefined) {
      _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);
    }
  }

  /**
   * Mixin helper which handles policy validation and reserved
   * specification keys when building React classes.
   */
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      if (process.env.NODE_ENV !== 'production') {
        var typeofSpec = typeof spec === 'undefined' ? 'undefined' : _typeof(spec);
        var isMixinValid = typeofSpec === 'object' && spec !== null;

        if (process.env.NODE_ENV !== 'production') {
          warning(isMixinValid, "%s: You're attempting to include a mixin that is either null " + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec);
        }
      }

      return;
    }

    _invariant(typeof spec !== 'function', "ReactClass: You're attempting to " + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');
    _invariant(!isValidElement(spec), "ReactClass: You're attempting to " + 'use a component as a mixin. Instead, just use a regular object.');

    var proto = Constructor.prototype;
    var autoBindPairs = proto.__reactAutoBindPairs;

    // By handling mixins before any other properties, we ensure the same
    // chaining order is applied to methods with DEFINE_MANY policy, whether
    // mixins are listed before or after these methods in the spec.
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }

    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }

      if (name === MIXINS_KEY) {
        // We have already handled mixins in a special case above.
        continue;
      }

      var property = spec[name];
      var isAlreadyDefined = proto.hasOwnProperty(name);
      validateMethodOverride(isAlreadyDefined, name);

      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        // Setup methods on prototype:
        // The following member methods should not be automatically bound:
        // 1. Expected ReactClass methods (in the "interface").
        // 2. Overridden methods (that were mixed in).
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

        if (shouldAutoBind) {
          autoBindPairs.push(name, property);
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];

            // These cases should already be caught by validateMethodOverride.
            _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name);

            // For methods which are defined more than once, call the existing
            // methods before calling the new property, merging if appropriate.
            if (specPolicy === 'DEFINE_MANY_MERGED') {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === 'DEFINE_MANY') {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if (process.env.NODE_ENV !== 'production') {
              // Add verbose displayName to the function, which helps when looking
              // at profiling tools.
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }

  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }

    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }

      var isReserved = name in RESERVED_SPEC_KEYS;
      _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);

      var isAlreadyDefined = name in Constructor;
      if (isAlreadyDefined) {
        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;

        _invariant(specPolicy === 'DEFINE_MANY_MERGED', 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);

        Constructor[name] = createMergedResultFunction(Constructor[name], property);

        return;
      }

      Constructor[name] = property;
    }
  }

  /**
   * Merge two objects, but throw if both contain the same key.
   *
   * @param {object} one The first object, which is mutated.
   * @param {object} two The second object
   * @return {object} one after it has been mutated to contain everything in two.
   */
  function mergeIntoWithNoDuplicateKeys(one, two) {
    _invariant(one && two && (typeof one === 'undefined' ? 'undefined' : _typeof(one)) === 'object' && (typeof two === 'undefined' ? 'undefined' : _typeof(two)) === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');

    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);
        one[key] = two[key];
      }
    }
    return one;
  }

  /**
   * Creates a function that invokes two functions and merges their return values.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }

  /**
   * Creates a function that invokes two functions and ignores their return vales.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }

  /**
   * Binds a method to the component.
   *
   * @param {object} component Component whose method is going to be bound.
   * @param {function} method Method to be bound.
   * @return {function} The bound method.
   */
  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if (process.env.NODE_ENV !== 'production') {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function (newThis) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          if (process.env.NODE_ENV !== 'production') {
            warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName);
          }
        } else if (!args.length) {
          if (process.env.NODE_ENV !== 'production') {
            warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName);
          }
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }

  /**
   * Binds all auto-bound methods in a component.
   *
   * @param {object} component Component whose method is going to be bound.
   */
  function bindAutoBindMethods(component) {
    var pairs = component.__reactAutoBindPairs;
    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];
      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  var IsMountedPreMixin = {
    componentDidMount: function componentDidMount() {
      this.__isMounted = true;
    }
  };

  var IsMountedPostMixin = {
    componentWillUnmount: function componentWillUnmount() {
      this.__isMounted = false;
    }
  };

  /**
   * Add more to the ReactClass base class. These are all legacy features and
   * therefore not already part of the modern ReactComponent.
   */
  var ReactClassMixin = {
    /**
     * TODO: This will be deprecated because state should always keep a consistent
     * type signature and the only use case for this, is to avoid that.
     */
    replaceState: function replaceState(newState, callback) {
      this.updater.enqueueReplaceState(this, newState, callback);
    },

    /**
     * Checks whether or not this composite component is mounted.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function isMounted() {
      if (process.env.NODE_ENV !== 'production') {
        warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component');
        this.__didWarnIsMounted = true;
      }
      return !!this.__isMounted;
    }
  };

  var ReactClassComponent = function ReactClassComponent() {};
  _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  function createClass(spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function (props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory');
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (initialState === undefined && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      _invariant((typeof initialState === 'undefined' ? 'undefined' : _typeof(initialState)) === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
    mixSpecIntoComponent(Constructor, spec);
    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');

    if (process.env.NODE_ENV !== 'production') {
      warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component');
      warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component');
      warning(!Constructor.prototype.UNSAFE_componentWillRecieveProps, '%s has a method called UNSAFE_componentWillRecieveProps(). ' + 'Did you mean UNSAFE_componentWillReceiveProps()?', spec.displayName || 'A component');
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  }

  return createClass;
}

module.exports = factory;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/
/* global define */

(function () {
	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	var ExecutionEnvironment = {

		canUseDOM: canUseDOM,

		canUseWorkers: typeof Worker !== 'undefined',

		canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

		canUseViewport: canUseDOM && !!window.screen

	};

	if ("function" === 'function' && _typeof(__webpack_require__(141)) === 'object' && __webpack_require__(141)) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
			return ExecutionEnvironment;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (typeof module !== 'undefined' && module.exports) {
		module.exports = ExecutionEnvironment;
	} else {
		window.ExecutionEnvironment = ExecutionEnvironment;
	}
})();

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */



var camelize = __webpack_require__(191);

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

var isTextNode = __webpack_require__(201);

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var invariant = __webpack_require__(2);

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
  // in old versions of Safari).
  !(!Array.isArray(obj) && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = __webpack_require__(9);

var createArrayFromMixed = __webpack_require__(194);
var getMarkupWrap = __webpack_require__(196);
var invariant = __webpack_require__(2);

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = Array.from(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = __webpack_require__(9);

var invariant = __webpack_require__(2);

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */



/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

function getUnboundedScrollPosition(scrollable) {
  if (scrollable.Window && scrollable instanceof scrollable.Window) {
    return {
      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */



var hyphenate = __webpack_require__(198);

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var isNode = __webpack_require__(200);

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @typechecks static-only
 */



/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */



var ExecutionEnvironment = __webpack_require__(9);

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var performance = __webpack_require__(203);

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

var REACT_STATICS = {
    childContextTypes: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};

var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components

        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
        }

        var keys = getOwnPropertyNames(sourceComponent);

        if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }

        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }

        return targetComponent;
    }

    return targetComponent;
}

module.exports = hoistNonReactStatics;

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();
// special flexbox specifications


var _prefixAll2 = __webpack_require__(227);

var _prefixAll3 = _interopRequireDefault(_prefixAll2);

var _getBrowserInformation = __webpack_require__(228);

var _getBrowserInformation2 = _interopRequireDefault(_getBrowserInformation);

var _getPrefixedKeyframes = __webpack_require__(229);

var _getPrefixedKeyframes2 = _interopRequireDefault(_getPrefixedKeyframes);

var _capitalizeString = __webpack_require__(49);

var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

var _sortPrefixedStyle = __webpack_require__(92);

var _sortPrefixedStyle2 = _interopRequireDefault(_sortPrefixedStyle);

var _prefixProps = __webpack_require__(217);

var _prefixProps2 = _interopRequireDefault(_prefixProps);

var _position = __webpack_require__(213);

var _position2 = _interopRequireDefault(_position);

var _calc = __webpack_require__(207);

var _calc2 = _interopRequireDefault(_calc);

var _zoomCursor = __webpack_require__(216);

var _zoomCursor2 = _interopRequireDefault(_zoomCursor);

var _grabCursor = __webpack_require__(211);

var _grabCursor2 = _interopRequireDefault(_grabCursor);

var _flex = __webpack_require__(208);

var _flex2 = _interopRequireDefault(_flex);

var _sizing = __webpack_require__(214);

var _sizing2 = _interopRequireDefault(_sizing);

var _gradient = __webpack_require__(212);

var _gradient2 = _interopRequireDefault(_gradient);

var _transition = __webpack_require__(215);

var _transition2 = _interopRequireDefault(_transition);

var _flexboxIE = __webpack_require__(209);

var _flexboxIE2 = _interopRequireDefault(_flexboxIE);

var _flexboxOld = __webpack_require__(210);

var _flexboxOld2 = _interopRequireDefault(_flexboxOld);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var plugins = [_position2.default, _calc2.default, _zoomCursor2.default, _grabCursor2.default, _sizing2.default, _gradient2.default, _transition2.default, _flexboxIE2.default, _flexboxOld2.default,
// this must be run AFTER the flexbox specs
_flex2.default];

var Prefixer = function () {
  /**
   * Instantiante a new prefixer
   * @param {string} userAgent - userAgent to gather prefix information according to caniuse.com
   * @param {string} keepUnprefixed - keeps unprefixed properties and values
   */

  function Prefixer() {
    var _this = this;

    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Prefixer);

    var defaultUserAgent = typeof navigator !== 'undefined' ? navigator.userAgent : undefined;

    this._userAgent = options.userAgent || defaultUserAgent;
    this._keepUnprefixed = options.keepUnprefixed || false;

    this._browserInfo = (0, _getBrowserInformation2.default)(this._userAgent);

    // Checks if the userAgent was resolved correctly
    if (this._browserInfo && this._browserInfo.prefix) {
      // set additional prefix information
      this.cssPrefix = this._browserInfo.prefix.css;
      this.jsPrefix = this._browserInfo.prefix.inline;
      this.prefixedKeyframes = (0, _getPrefixedKeyframes2.default)(this._browserInfo);
    } else {
      this._usePrefixAllFallback = true;
      return false;
    }

    var data = this._browserInfo.browser && _prefixProps2.default[this._browserInfo.browser];
    if (data) {
      this._requiresPrefix = Object.keys(data).filter(function (key) {
        return data[key] >= _this._browserInfo.version;
      }).reduce(function (result, name) {
        result[name] = true;
        return result;
      }, {});
      this._hasPropsRequiringPrefix = Object.keys(this._requiresPrefix).length > 0;
    } else {
      this._usePrefixAllFallback = true;
    }
  }

  /**
   * Returns a prefixed version of the style object
   * @param {Object} styles - Style object that gets prefixed properties added
   * @returns {Object} - Style object with prefixed properties and values
   */

  _createClass(Prefixer, [{
    key: 'prefix',
    value: function prefix(styles) {
      var _this2 = this;

      // use prefixAll as fallback if userAgent can not be resolved
      if (this._usePrefixAllFallback) {
        return (0, _prefixAll3.default)(styles);
      }

      // only add prefixes if needed
      if (!this._hasPropsRequiringPrefix) {
        return styles;
      }

      Object.keys(styles).forEach(function (property) {
        var value = styles[property];
        if (value instanceof Object && !Array.isArray(value)) {
          // recurse through nested style objects
          styles[property] = _this2.prefix(value);
        } else {
          // add prefixes if needed
          if (_this2._requiresPrefix[property]) {
            styles[_this2.jsPrefix + (0, _capitalizeString2.default)(property)] = value;
            if (!_this2._keepUnprefixed) {
              delete styles[property];
            }
          }
        }
      });

      Object.keys(styles).forEach(function (property) {
        [].concat(styles[property]).forEach(function (value) {
          // resolve plugins
          plugins.forEach(function (plugin) {
            // generates a new plugin interface with current data
            assignStyles(styles, plugin({
              property: property,
              value: value,
              styles: styles,
              browserInfo: _this2._browserInfo,
              prefix: {
                js: _this2.jsPrefix,
                css: _this2.cssPrefix,
                keyframes: _this2.prefixedKeyframes
              },
              keepUnprefixed: _this2._keepUnprefixed,
              requiresPrefix: _this2._requiresPrefix
            }), value, _this2._keepUnprefixed);
          });
        });
      });

      return (0, _sortPrefixedStyle2.default)(styles);
    }

    /**
     * Returns a prefixed version of the style object using all vendor prefixes
     * @param {Object} styles - Style object that gets prefixed properties added
     * @returns {Object} - Style object with prefixed properties and values
     */

  }], [{
    key: 'prefixAll',
    value: function prefixAll(styles) {
      return (0, _prefixAll3.default)(styles);
    }
  }]);

  return Prefixer;
}();

exports.default = Prefixer;

function assignStyles(base) {
  var extend = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var value = arguments[2];
  var keepUnprefixed = arguments[3];

  Object.keys(extend).forEach(function (property) {
    var baseValue = base[property];
    if (Array.isArray(baseValue)) {
      [].concat(extend[property]).forEach(function (val) {
        if (base[property].indexOf(val) === -1) {
          base[property].splice(baseValue.indexOf(value), keepUnprefixed ? 0 : 1, val);
        }
      });
    } else {
      base[property] = extend[property];
    }
  });
}
module.exports = exports['default'];

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = calc;

var _getPrefixedValue = __webpack_require__(16);

var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

function calc(_ref) {
  var property = _ref.property;
  var value = _ref.value;
  var _ref$browserInfo = _ref.browserInfo;
  var browser = _ref$browserInfo.browser;
  var version = _ref$browserInfo.version;
  var css = _ref.prefix.css;
  var keepUnprefixed = _ref.keepUnprefixed;

  if (typeof value === 'string' && value.indexOf('calc(') > -1 && (browser === 'firefox' && version < 15 || browser === 'chrome' && version < 25 || browser === 'safari' && version < 6.1 || browser === 'ios_saf' && version < 7)) {
    return _defineProperty({}, property, (0, _getPrefixedValue2.default)(value.replace(/calc\(/g, css + 'calc('), value, keepUnprefixed));
  }
}
module.exports = exports['default'];

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flex;

var _getPrefixedValue = __webpack_require__(16);

var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var values = { flex: true, 'inline-flex': true };

function flex(_ref) {
  var property = _ref.property;
  var value = _ref.value;
  var _ref$browserInfo = _ref.browserInfo;
  var browser = _ref$browserInfo.browser;
  var version = _ref$browserInfo.version;
  var css = _ref.prefix.css;
  var keepUnprefixed = _ref.keepUnprefixed;

  if (property === 'display' && values[value] && (browser === 'chrome' && version < 29 && version > 20 || (browser === 'safari' || browser === 'ios_saf') && version < 9 && version > 6 || browser === 'opera' && (version == 15 || version == 16))) {
    return {
      display: (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed)
    };
  }
}
module.exports = exports['default'];

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flexboxIE;

var _getPrefixedValue = __webpack_require__(16);

var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

var alternativeValues = {
  'space-around': 'distribute',
  'space-between': 'justify',
  'flex-start': 'start',
  'flex-end': 'end',
  flex: 'flexbox',
  'inline-flex': 'inline-flexbox'
};
var alternativeProps = {
  alignContent: 'msFlexLinePack',
  alignSelf: 'msFlexItemAlign',
  alignItems: 'msFlexAlign',
  justifyContent: 'msFlexPack',
  order: 'msFlexOrder',
  flexGrow: 'msFlexPositive',
  flexShrink: 'msFlexNegative',
  flexBasis: 'msPreferredSize'
};

function flexboxIE(_ref) {
  var property = _ref.property;
  var value = _ref.value;
  var styles = _ref.styles;
  var _ref$browserInfo = _ref.browserInfo;
  var browser = _ref$browserInfo.browser;
  var version = _ref$browserInfo.version;
  var css = _ref.prefix.css;
  var keepUnprefixed = _ref.keepUnprefixed;

  if ((alternativeProps[property] || property === 'display' && typeof value === 'string' && value.indexOf('flex') > -1) && (browser === 'ie_mob' || browser === 'ie') && version == 10) {
    if (!keepUnprefixed && !Array.isArray(styles[property])) {
      delete styles[property];
    }
    if (property === 'display' && alternativeValues[value]) {
      return {
        display: (0, _getPrefixedValue2.default)(css + alternativeValues[value], value, keepUnprefixed)
      };
    }
    if (alternativeProps[property]) {
      return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
    }
  }
}
module.exports = exports['default'];

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flexboxOld;

var _getPrefixedValue = __webpack_require__(16);

var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

var alternativeValues = {
  'space-around': 'justify',
  'space-between': 'justify',
  'flex-start': 'start',
  'flex-end': 'end',
  'wrap-reverse': 'multiple',
  wrap: 'multiple',
  flex: 'box',
  'inline-flex': 'inline-box'
};

var alternativeProps = {
  alignItems: 'WebkitBoxAlign',
  justifyContent: 'WebkitBoxPack',
  flexWrap: 'WebkitBoxLines'
};

var otherProps = ['alignContent', 'alignSelf', 'order', 'flexGrow', 'flexShrink', 'flexBasis', 'flexDirection'];
var properties = Object.keys(alternativeProps).concat(otherProps);

function flexboxOld(_ref) {
  var property = _ref.property;
  var value = _ref.value;
  var styles = _ref.styles;
  var _ref$browserInfo = _ref.browserInfo;
  var browser = _ref$browserInfo.browser;
  var version = _ref$browserInfo.version;
  var css = _ref.prefix.css;
  var keepUnprefixed = _ref.keepUnprefixed;

  if ((properties.indexOf(property) > -1 || property === 'display' && typeof value === 'string' && value.indexOf('flex') > -1) && (browser === 'firefox' && version < 22 || browser === 'chrome' && version < 21 || (browser === 'safari' || browser === 'ios_saf') && version <= 6.1 || browser === 'android' && version < 4.4 || browser === 'and_uc')) {
    if (!keepUnprefixed && !Array.isArray(styles[property])) {
      delete styles[property];
    }
    if (property === 'flexDirection' && typeof value === 'string') {
      return {
        WebkitBoxOrient: value.indexOf('column') > -1 ? 'vertical' : 'horizontal',
        WebkitBoxDirection: value.indexOf('reverse') > -1 ? 'reverse' : 'normal'
      };
    }
    if (property === 'display' && alternativeValues[value]) {
      return {
        display: (0, _getPrefixedValue2.default)(css + alternativeValues[value], value, keepUnprefixed)
      };
    }
    if (alternativeProps[property]) {
      return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
    }
  }
}
module.exports = exports['default'];

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = grabCursor;

var _getPrefixedValue = __webpack_require__(16);

var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var values = { grab: true, grabbing: true };

function grabCursor(_ref) {
  var property = _ref.property;
  var value = _ref.value;
  var browser = _ref.browserInfo.browser;
  var css = _ref.prefix.css;
  var keepUnprefixed = _ref.keepUnprefixed;

  // adds prefixes for firefox, chrome, safari, and opera regardless of version until a reliable brwoser support info can be found (see: https://github.com/rofrischmann/inline-style-prefixer/issues/79)
  if (property === 'cursor' && values[value] && (browser === 'firefox' || browser === 'chrome' || browser === 'safari' || browser === 'opera')) {
    return {
      cursor: (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed)
    };
  }
}
module.exports = exports['default'];

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = gradient;

var _getPrefixedValue = __webpack_require__(16);

var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;

function gradient(_ref) {
  var property = _ref.property;
  var value = _ref.value;
  var _ref$browserInfo = _ref.browserInfo;
  var browser = _ref$browserInfo.browser;
  var version = _ref$browserInfo.version;
  var css = _ref.prefix.css;
  var keepUnprefixed = _ref.keepUnprefixed;

  if (typeof value === 'string' && value.match(values) !== null && (browser === 'firefox' && version < 16 || browser === 'chrome' && version < 26 || (browser === 'safari' || browser === 'ios_saf') && version < 7 || (browser === 'opera' || browser === 'op_mini') && version < 12.1 || browser === 'android' && version < 4.4 || browser === 'and_uc')) {
    return _defineProperty({}, property, (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed));
  }
}
module.exports = exports['default'];

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = position;

var _getPrefixedValue = __webpack_require__(16);

var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

function position(_ref) {
  var property = _ref.property;
  var value = _ref.value;
  var browser = _ref.browserInfo.browser;
  var css = _ref.prefix.css;
  var keepUnprefixed = _ref.keepUnprefixed;

  if (property === 'position' && value === 'sticky' && (browser === 'safari' || browser === 'ios_saf')) {
    return _defineProperty({}, property, (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed));
  }
}
module.exports = exports['default'];

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sizing;

var _getPrefixedValue = __webpack_require__(16);

var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

var properties = {
  maxHeight: true,
  maxWidth: true,
  width: true,
  height: true,
  columnWidth: true,
  minWidth: true,
  minHeight: true
};
var values = {
  'min-content': true,
  'max-content': true,
  'fill-available': true,
  'fit-content': true,
  'contain-floats': true
};

function sizing(_ref) {
  var property = _ref.property;
  var value = _ref.value;
  var css = _ref.prefix.css;
  var keepUnprefixed = _ref.keepUnprefixed;

  // This might change in the future
  // Keep an eye on it
  if (properties[property] && values[value]) {
    return _defineProperty({}, property, (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed));
  }
}
module.exports = exports['default'];

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

exports.default = transition;

var _hyphenateStyleName = __webpack_require__(90);

var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);

var _unprefixProperty = __webpack_require__(231);

var _unprefixProperty2 = _interopRequireDefault(_unprefixProperty);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

var properties = { transition: true, transitionProperty: true };

function transition(_ref) {
  var property = _ref.property;
  var value = _ref.value;
  var css = _ref.prefix.css;
  var requiresPrefix = _ref.requiresPrefix;
  var keepUnprefixed = _ref.keepUnprefixed;

  // also check for already prefixed transitions
  var unprefixedProperty = (0, _unprefixProperty2.default)(property);

  if (typeof value === 'string' && properties[unprefixedProperty]) {
    var _ret = function () {
      // TODO: memoize this array
      var requiresPrefixDashCased = Object.keys(requiresPrefix).map(function (prop) {
        return (0, _hyphenateStyleName2.default)(prop);
      });

      // only split multi values, not cubic beziers
      var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);

      requiresPrefixDashCased.forEach(function (prop) {
        multipleValues.forEach(function (val, index) {
          if (val.indexOf(prop) > -1 && prop !== 'order') {
            multipleValues[index] = val.replace(prop, css + prop) + (keepUnprefixed ? ',' + val : '');
          }
        });
      });

      return {
        v: _defineProperty({}, property, multipleValues.join(','))
      };
    }();

    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
  }
}
module.exports = exports['default'];

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = zoomCursor;

var _getPrefixedValue = __webpack_require__(16);

var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var values = { 'zoom-in': true, 'zoom-out': true };

function zoomCursor(_ref) {
  var property = _ref.property;
  var value = _ref.value;
  var _ref$browserInfo = _ref.browserInfo;
  var browser = _ref$browserInfo.browser;
  var version = _ref$browserInfo.version;
  var css = _ref.prefix.css;
  var keepUnprefixed = _ref.keepUnprefixed;

  if (property === 'cursor' && values[value] && (browser === 'firefox' && version < 24 || browser === 'chrome' && version < 37 || browser === 'safari' && version < 9 || browser === 'opera' && version < 24)) {
    return {
      cursor: (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed)
    };
  }
}
module.exports = exports['default'];

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = { "chrome": { "transform": 35, "transformOrigin": 35, "transformOriginX": 35, "transformOriginY": 35, "backfaceVisibility": 35, "perspective": 35, "perspectiveOrigin": 35, "transformStyle": 35, "transformOriginZ": 35, "animation": 42, "animationDelay": 42, "animationDirection": 42, "animationFillMode": 42, "animationDuration": 42, "animationIterationCount": 42, "animationName": 42, "animationPlayState": 42, "animationTimingFunction": 42, "appearance": 55, "userSelect": 55, "fontKerning": 32, "textEmphasisPosition": 55, "textEmphasis": 55, "textEmphasisStyle": 55, "textEmphasisColor": 55, "boxDecorationBreak": 55, "clipPath": 55, "maskImage": 55, "maskMode": 55, "maskRepeat": 55, "maskPosition": 55, "maskClip": 55, "maskOrigin": 55, "maskSize": 55, "maskComposite": 55, "mask": 55, "maskBorderSource": 55, "maskBorderMode": 55, "maskBorderSlice": 55, "maskBorderWidth": 55, "maskBorderOutset": 55, "maskBorderRepeat": 55, "maskBorder": 55, "maskType": 55, "textDecorationStyle": 55, "textDecorationSkip": 55, "textDecorationLine": 55, "textDecorationColor": 55, "filter": 52, "fontFeatureSettings": 47, "breakAfter": 49, "breakBefore": 49, "breakInside": 49, "columnCount": 49, "columnFill": 49, "columnGap": 49, "columnRule": 49, "columnRuleColor": 49, "columnRuleStyle": 49, "columnRuleWidth": 49, "columns": 49, "columnSpan": 49, "columnWidth": 49 }, "safari": { "flex": 8, "flexBasis": 8, "flexDirection": 8, "flexGrow": 8, "flexFlow": 8, "flexShrink": 8, "flexWrap": 8, "alignContent": 8, "alignItems": 8, "alignSelf": 8, "justifyContent": 8, "order": 8, "transition": 6, "transitionDelay": 6, "transitionDuration": 6, "transitionProperty": 6, "transitionTimingFunction": 6, "transform": 8, "transformOrigin": 8, "transformOriginX": 8, "transformOriginY": 8, "backfaceVisibility": 8, "perspective": 8, "perspectiveOrigin": 8, "transformStyle": 8, "transformOriginZ": 8, "animation": 8, "animationDelay": 8, "animationDirection": 8, "animationFillMode": 8, "animationDuration": 8, "animationIterationCount": 8, "animationName": 8, "animationPlayState": 8, "animationTimingFunction": 8, "appearance": 10, "userSelect": 10, "backdropFilter": 10, "fontKerning": 9, "scrollSnapType": 10, "scrollSnapPointsX": 10, "scrollSnapPointsY": 10, "scrollSnapDestination": 10, "scrollSnapCoordinate": 10, "textEmphasisPosition": 7, "textEmphasis": 7, "textEmphasisStyle": 7, "textEmphasisColor": 7, "boxDecorationBreak": 10, "clipPath": 10, "maskImage": 10, "maskMode": 10, "maskRepeat": 10, "maskPosition": 10, "maskClip": 10, "maskOrigin": 10, "maskSize": 10, "maskComposite": 10, "mask": 10, "maskBorderSource": 10, "maskBorderMode": 10, "maskBorderSlice": 10, "maskBorderWidth": 10, "maskBorderOutset": 10, "maskBorderRepeat": 10, "maskBorder": 10, "maskType": 10, "textDecorationStyle": 10, "textDecorationSkip": 10, "textDecorationLine": 10, "textDecorationColor": 10, "shapeImageThreshold": 10, "shapeImageMargin": 10, "shapeImageOutside": 10, "filter": 9, "hyphens": 10, "flowInto": 10, "flowFrom": 10, "breakBefore": 8, "breakAfter": 8, "breakInside": 8, "regionFragment": 10, "columnCount": 8, "columnFill": 8, "columnGap": 8, "columnRule": 8, "columnRuleColor": 8, "columnRuleStyle": 8, "columnRuleWidth": 8, "columns": 8, "columnSpan": 8, "columnWidth": 8 }, "firefox": { "appearance": 51, "userSelect": 51, "boxSizing": 28, "textAlignLast": 48, "textDecorationStyle": 35, "textDecorationSkip": 35, "textDecorationLine": 35, "textDecorationColor": 35, "tabSize": 51, "hyphens": 42, "fontFeatureSettings": 33, "breakAfter": 51, "breakBefore": 51, "breakInside": 51, "columnCount": 51, "columnFill": 51, "columnGap": 51, "columnRule": 51, "columnRuleColor": 51, "columnRuleStyle": 51, "columnRuleWidth": 51, "columns": 51, "columnSpan": 51, "columnWidth": 51 }, "opera": { "flex": 16, "flexBasis": 16, "flexDirection": 16, "flexGrow": 16, "flexFlow": 16, "flexShrink": 16, "flexWrap": 16, "alignContent": 16, "alignItems": 16, "alignSelf": 16, "justifyContent": 16, "order": 16, "transform": 22, "transformOrigin": 22, "transformOriginX": 22, "transformOriginY": 22, "backfaceVisibility": 22, "perspective": 22, "perspectiveOrigin": 22, "transformStyle": 22, "transformOriginZ": 22, "animation": 29, "animationDelay": 29, "animationDirection": 29, "animationFillMode": 29, "animationDuration": 29, "animationIterationCount": 29, "animationName": 29, "animationPlayState": 29, "animationTimingFunction": 29, "appearance": 41, "userSelect": 41, "fontKerning": 19, "textEmphasisPosition": 41, "textEmphasis": 41, "textEmphasisStyle": 41, "textEmphasisColor": 41, "boxDecorationBreak": 41, "clipPath": 41, "maskImage": 41, "maskMode": 41, "maskRepeat": 41, "maskPosition": 41, "maskClip": 41, "maskOrigin": 41, "maskSize": 41, "maskComposite": 41, "mask": 41, "maskBorderSource": 41, "maskBorderMode": 41, "maskBorderSlice": 41, "maskBorderWidth": 41, "maskBorderOutset": 41, "maskBorderRepeat": 41, "maskBorder": 41, "maskType": 41, "textDecorationStyle": 41, "textDecorationSkip": 41, "textDecorationLine": 41, "textDecorationColor": 41, "filter": 39, "fontFeatureSettings": 34, "breakAfter": 36, "breakBefore": 36, "breakInside": 36, "columnCount": 36, "columnFill": 36, "columnGap": 36, "columnRule": 36, "columnRuleColor": 36, "columnRuleStyle": 36, "columnRuleWidth": 36, "columns": 36, "columnSpan": 36, "columnWidth": 36 }, "ie": { "flex": 10, "flexDirection": 10, "flexFlow": 10, "flexWrap": 10, "transform": 9, "transformOrigin": 9, "transformOriginX": 9, "transformOriginY": 9, "userSelect": 11, "wrapFlow": 11, "wrapThrough": 11, "wrapMargin": 11, "scrollSnapType": 11, "scrollSnapPointsX": 11, "scrollSnapPointsY": 11, "scrollSnapDestination": 11, "scrollSnapCoordinate": 11, "touchAction": 10, "hyphens": 11, "flowInto": 11, "flowFrom": 11, "breakBefore": 11, "breakAfter": 11, "breakInside": 11, "regionFragment": 11, "gridTemplateColumns": 11, "gridTemplateRows": 11, "gridTemplateAreas": 11, "gridTemplate": 11, "gridAutoColumns": 11, "gridAutoRows": 11, "gridAutoFlow": 11, "grid": 11, "gridRowStart": 11, "gridColumnStart": 11, "gridRowEnd": 11, "gridRow": 11, "gridColumn": 11, "gridColumnEnd": 11, "gridColumnGap": 11, "gridRowGap": 11, "gridArea": 11, "gridGap": 11, "textSizeAdjust": 11 }, "edge": { "userSelect": 14, "wrapFlow": 14, "wrapThrough": 14, "wrapMargin": 14, "scrollSnapType": 14, "scrollSnapPointsX": 14, "scrollSnapPointsY": 14, "scrollSnapDestination": 14, "scrollSnapCoordinate": 14, "hyphens": 14, "flowInto": 14, "flowFrom": 14, "breakBefore": 14, "breakAfter": 14, "breakInside": 14, "regionFragment": 14, "gridTemplateColumns": 14, "gridTemplateRows": 14, "gridTemplateAreas": 14, "gridTemplate": 14, "gridAutoColumns": 14, "gridAutoRows": 14, "gridAutoFlow": 14, "grid": 14, "gridRowStart": 14, "gridColumnStart": 14, "gridRowEnd": 14, "gridRow": 14, "gridColumn": 14, "gridColumnEnd": 14, "gridColumnGap": 14, "gridRowGap": 14, "gridArea": 14, "gridGap": 14 }, "ios_saf": { "flex": 8.1, "flexBasis": 8.1, "flexDirection": 8.1, "flexGrow": 8.1, "flexFlow": 8.1, "flexShrink": 8.1, "flexWrap": 8.1, "alignContent": 8.1, "alignItems": 8.1, "alignSelf": 8.1, "justifyContent": 8.1, "order": 8.1, "transition": 6, "transitionDelay": 6, "transitionDuration": 6, "transitionProperty": 6, "transitionTimingFunction": 6, "transform": 8.1, "transformOrigin": 8.1, "transformOriginX": 8.1, "transformOriginY": 8.1, "backfaceVisibility": 8.1, "perspective": 8.1, "perspectiveOrigin": 8.1, "transformStyle": 8.1, "transformOriginZ": 8.1, "animation": 8.1, "animationDelay": 8.1, "animationDirection": 8.1, "animationFillMode": 8.1, "animationDuration": 8.1, "animationIterationCount": 8.1, "animationName": 8.1, "animationPlayState": 8.1, "animationTimingFunction": 8.1, "appearance": 9.3, "userSelect": 9.3, "backdropFilter": 9.3, "fontKerning": 9.3, "scrollSnapType": 9.3, "scrollSnapPointsX": 9.3, "scrollSnapPointsY": 9.3, "scrollSnapDestination": 9.3, "scrollSnapCoordinate": 9.3, "boxDecorationBreak": 9.3, "clipPath": 9.3, "maskImage": 9.3, "maskMode": 9.3, "maskRepeat": 9.3, "maskPosition": 9.3, "maskClip": 9.3, "maskOrigin": 9.3, "maskSize": 9.3, "maskComposite": 9.3, "mask": 9.3, "maskBorderSource": 9.3, "maskBorderMode": 9.3, "maskBorderSlice": 9.3, "maskBorderWidth": 9.3, "maskBorderOutset": 9.3, "maskBorderRepeat": 9.3, "maskBorder": 9.3, "maskType": 9.3, "textSizeAdjust": 9.3, "textDecorationStyle": 9.3, "textDecorationSkip": 9.3, "textDecorationLine": 9.3, "textDecorationColor": 9.3, "shapeImageThreshold": 9.3, "shapeImageMargin": 9.3, "shapeImageOutside": 9.3, "filter": 9, "hyphens": 9.3, "flowInto": 9.3, "flowFrom": 9.3, "breakBefore": 8.1, "breakAfter": 8.1, "breakInside": 8.1, "regionFragment": 9.3, "columnCount": 8.1, "columnFill": 8.1, "columnGap": 8.1, "columnRule": 8.1, "columnRuleColor": 8.1, "columnRuleStyle": 8.1, "columnRuleWidth": 8.1, "columns": 8.1, "columnSpan": 8.1, "columnWidth": 8.1 }, "android": { "flex": 4.2, "flexBasis": 4.2, "flexDirection": 4.2, "flexGrow": 4.2, "flexFlow": 4.2, "flexShrink": 4.2, "flexWrap": 4.2, "alignContent": 4.2, "alignItems": 4.2, "alignSelf": 4.2, "justifyContent": 4.2, "order": 4.2, "transition": 4.2, "transitionDelay": 4.2, "transitionDuration": 4.2, "transitionProperty": 4.2, "transitionTimingFunction": 4.2, "transform": 4.4, "transformOrigin": 4.4, "transformOriginX": 4.4, "transformOriginY": 4.4, "backfaceVisibility": 4.4, "perspective": 4.4, "perspectiveOrigin": 4.4, "transformStyle": 4.4, "transformOriginZ": 4.4, "animation": 4.4, "animationDelay": 4.4, "animationDirection": 4.4, "animationFillMode": 4.4, "animationDuration": 4.4, "animationIterationCount": 4.4, "animationName": 4.4, "animationPlayState": 4.4, "animationTimingFunction": 4.4, "appearance": 51, "userSelect": 51, "fontKerning": 4.4, "textEmphasisPosition": 51, "textEmphasis": 51, "textEmphasisStyle": 51, "textEmphasisColor": 51, "boxDecorationBreak": 51, "clipPath": 51, "maskImage": 51, "maskMode": 51, "maskRepeat": 51, "maskPosition": 51, "maskClip": 51, "maskOrigin": 51, "maskSize": 51, "maskComposite": 51, "mask": 51, "maskBorderSource": 51, "maskBorderMode": 51, "maskBorderSlice": 51, "maskBorderWidth": 51, "maskBorderOutset": 51, "maskBorderRepeat": 51, "maskBorder": 51, "maskType": 51, "filter": 51, "fontFeatureSettings": 4.4, "breakAfter": 51, "breakBefore": 51, "breakInside": 51, "columnCount": 51, "columnFill": 51, "columnGap": 51, "columnRule": 51, "columnRuleColor": 51, "columnRuleStyle": 51, "columnRuleWidth": 51, "columns": 51, "columnSpan": 51, "columnWidth": 51 }, "and_chr": { "appearance": 51, "userSelect": 51, "textEmphasisPosition": 51, "textEmphasis": 51, "textEmphasisStyle": 51, "textEmphasisColor": 51, "boxDecorationBreak": 51, "clipPath": 51, "maskImage": 51, "maskMode": 51, "maskRepeat": 51, "maskPosition": 51, "maskClip": 51, "maskOrigin": 51, "maskSize": 51, "maskComposite": 51, "mask": 51, "maskBorderSource": 51, "maskBorderMode": 51, "maskBorderSlice": 51, "maskBorderWidth": 51, "maskBorderOutset": 51, "maskBorderRepeat": 51, "maskBorder": 51, "maskType": 51, "textDecorationStyle": 51, "textDecorationSkip": 51, "textDecorationLine": 51, "textDecorationColor": 51, "filter": 51 }, "and_uc": { "flex": 9.9, "flexBasis": 9.9, "flexDirection": 9.9, "flexGrow": 9.9, "flexFlow": 9.9, "flexShrink": 9.9, "flexWrap": 9.9, "alignContent": 9.9, "alignItems": 9.9, "alignSelf": 9.9, "justifyContent": 9.9, "order": 9.9, "transition": 9.9, "transitionDelay": 9.9, "transitionDuration": 9.9, "transitionProperty": 9.9, "transitionTimingFunction": 9.9, "transform": 9.9, "transformOrigin": 9.9, "transformOriginX": 9.9, "transformOriginY": 9.9, "backfaceVisibility": 9.9, "perspective": 9.9, "perspectiveOrigin": 9.9, "transformStyle": 9.9, "transformOriginZ": 9.9, "animation": 9.9, "animationDelay": 9.9, "animationDirection": 9.9, "animationFillMode": 9.9, "animationDuration": 9.9, "animationIterationCount": 9.9, "animationName": 9.9, "animationPlayState": 9.9, "animationTimingFunction": 9.9, "appearance": 9.9, "userSelect": 9.9, "fontKerning": 9.9, "textEmphasisPosition": 9.9, "textEmphasis": 9.9, "textEmphasisStyle": 9.9, "textEmphasisColor": 9.9, "maskImage": 9.9, "maskMode": 9.9, "maskRepeat": 9.9, "maskPosition": 9.9, "maskClip": 9.9, "maskOrigin": 9.9, "maskSize": 9.9, "maskComposite": 9.9, "mask": 9.9, "maskBorderSource": 9.9, "maskBorderMode": 9.9, "maskBorderSlice": 9.9, "maskBorderWidth": 9.9, "maskBorderOutset": 9.9, "maskBorderRepeat": 9.9, "maskBorder": 9.9, "maskType": 9.9, "textSizeAdjust": 9.9, "filter": 9.9, "hyphens": 9.9, "flowInto": 9.9, "flowFrom": 9.9, "breakBefore": 9.9, "breakAfter": 9.9, "breakInside": 9.9, "regionFragment": 9.9, "fontFeatureSettings": 9.9, "columnCount": 9.9, "columnFill": 9.9, "columnGap": 9.9, "columnRule": 9.9, "columnRuleColor": 9.9, "columnRuleStyle": 9.9, "columnRuleWidth": 9.9, "columns": 9.9, "columnSpan": 9.9, "columnWidth": 9.9 }, "op_mini": {} };
module.exports = exports["default"];

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = calc;

var _joinPrefixedValue = __webpack_require__(38);

var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);

var _isPrefixedValue = __webpack_require__(50);

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function calc(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('calc(') > -1) {
    return (0, _joinPrefixedValue2.default)(property, value, function (prefix, value) {
      return value.replace(/calc\(/g, prefix + 'calc(');
    });
  }
}
module.exports = exports['default'];

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cursor;

var _joinPrefixedValue = __webpack_require__(38);

var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var values = {
  'zoom-in': true,
  'zoom-out': true,
  grab: true,
  grabbing: true
};

function cursor(property, value) {
  if (property === 'cursor' && values[value]) {
    return (0, _joinPrefixedValue2.default)(property, value);
  }
}
module.exports = exports['default'];

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flex;
var values = { flex: true, 'inline-flex': true };

function flex(property, value) {
  if (property === 'display' && values[value]) {
    return {
      display: ['-webkit-box', '-moz-box', '-ms-' + value + 'box', '-webkit-' + value, value]
    };
  }
}
module.exports = exports['default'];

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flexboxIE;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

var alternativeValues = {
  'space-around': 'distribute',
  'space-between': 'justify',
  'flex-start': 'start',
  'flex-end': 'end'
};
var alternativeProps = {
  alignContent: 'msFlexLinePack',
  alignSelf: 'msFlexItemAlign',
  alignItems: 'msFlexAlign',
  justifyContent: 'msFlexPack',
  order: 'msFlexOrder',
  flexGrow: 'msFlexPositive',
  flexShrink: 'msFlexNegative',
  flexBasis: 'msPreferredSize'
};

function flexboxIE(property, value) {
  if (alternativeProps[property]) {
    return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
  }
}
module.exports = exports['default'];

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flexboxOld;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

var alternativeValues = {
  'space-around': 'justify',
  'space-between': 'justify',
  'flex-start': 'start',
  'flex-end': 'end',
  'wrap-reverse': 'multiple',
  wrap: 'multiple'
};

var alternativeProps = {
  alignItems: 'WebkitBoxAlign',
  justifyContent: 'WebkitBoxPack',
  flexWrap: 'WebkitBoxLines'
};

function flexboxOld(property, value) {
  if (property === 'flexDirection' && typeof value === 'string') {
    return {
      WebkitBoxOrient: value.indexOf('column') > -1 ? 'vertical' : 'horizontal',
      WebkitBoxDirection: value.indexOf('reverse') > -1 ? 'reverse' : 'normal'
    };
  }
  if (alternativeProps[property]) {
    return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
  }
}
module.exports = exports['default'];

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = gradient;

var _joinPrefixedValue = __webpack_require__(38);

var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);

var _isPrefixedValue = __webpack_require__(50);

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;

function gradient(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.match(values) !== null) {
    return (0, _joinPrefixedValue2.default)(property, value);
  }
}
module.exports = exports['default'];

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = position;
function position(property, value) {
  if (property === 'position' && value === 'sticky') {
    return { position: ['-webkit-sticky', 'sticky'] };
  }
}
module.exports = exports['default'];

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sizing;

var _joinPrefixedValue = __webpack_require__(38);

var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var properties = {
  maxHeight: true,
  maxWidth: true,
  width: true,
  height: true,
  columnWidth: true,
  minWidth: true,
  minHeight: true
};
var values = {
  'min-content': true,
  'max-content': true,
  'fill-available': true,
  'fit-content': true,
  'contain-floats': true
};

function sizing(property, value) {
  if (properties[property] && values[value]) {
    return (0, _joinPrefixedValue2.default)(property, value);
  }
}
module.exports = exports['default'];

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transition;

var _hyphenateStyleName = __webpack_require__(90);

var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);

var _capitalizeString = __webpack_require__(49);

var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

var _isPrefixedValue = __webpack_require__(50);

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

var _prefixProps = __webpack_require__(91);

var _prefixProps2 = _interopRequireDefault(_prefixProps);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

var properties = {
  transition: true,
  transitionProperty: true,
  WebkitTransition: true,
  WebkitTransitionProperty: true
};

function transition(property, value) {
  // also check for already prefixed transitions
  if (typeof value === 'string' && properties[property]) {
    var _ref2;

    var outputValue = prefixValue(value);
    var webkitOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (value) {
      return value.match(/-moz-|-ms-/) === null;
    }).join(',');

    // if the property is already prefixed
    if (property.indexOf('Webkit') > -1) {
      return _defineProperty({}, property, webkitOutput);
    }

    return _ref2 = {}, _defineProperty(_ref2, 'Webkit' + (0, _capitalizeString2.default)(property), webkitOutput), _defineProperty(_ref2, property, outputValue), _ref2;
  }
}

function prefixValue(value) {
  if ((0, _isPrefixedValue2.default)(value)) {
    return value;
  }

  // only split multi values, not cubic beziers
  var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);

  // iterate each single value and check for transitioned properties
  // that need to be prefixed as well
  multipleValues.forEach(function (val, index) {
    multipleValues[index] = Object.keys(_prefixProps2.default).reduce(function (out, prefix) {
      var dashCasePrefix = '-' + prefix.toLowerCase() + '-';

      Object.keys(_prefixProps2.default[prefix]).forEach(function (prop) {
        var dashCaseProperty = (0, _hyphenateStyleName2.default)(prop);

        if (val.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== 'order') {
          // join all prefixes and create a new value
          out = val.replace(dashCaseProperty, dashCasePrefix + dashCaseProperty) + ',' + out;
        }
      });
      return out;
    }, val);
  });

  return multipleValues.join(',');
}
module.exports = exports['default'];

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = prefixAll;

var _prefixProps = __webpack_require__(91);

var _prefixProps2 = _interopRequireDefault(_prefixProps);

var _capitalizeString = __webpack_require__(49);

var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

var _sortPrefixedStyle = __webpack_require__(92);

var _sortPrefixedStyle2 = _interopRequireDefault(_sortPrefixedStyle);

var _position = __webpack_require__(224);

var _position2 = _interopRequireDefault(_position);

var _calc = __webpack_require__(218);

var _calc2 = _interopRequireDefault(_calc);

var _cursor = __webpack_require__(219);

var _cursor2 = _interopRequireDefault(_cursor);

var _flex = __webpack_require__(220);

var _flex2 = _interopRequireDefault(_flex);

var _sizing = __webpack_require__(225);

var _sizing2 = _interopRequireDefault(_sizing);

var _gradient = __webpack_require__(223);

var _gradient2 = _interopRequireDefault(_gradient);

var _transition = __webpack_require__(226);

var _transition2 = _interopRequireDefault(_transition);

var _flexboxIE = __webpack_require__(221);

var _flexboxIE2 = _interopRequireDefault(_flexboxIE);

var _flexboxOld = __webpack_require__(222);

var _flexboxOld2 = _interopRequireDefault(_flexboxOld);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

// special flexbox specifications


var plugins = [_position2.default, _calc2.default, _cursor2.default, _sizing2.default, _gradient2.default, _transition2.default, _flexboxIE2.default, _flexboxOld2.default, _flex2.default];

/**
 * Returns a prefixed version of the style object using all vendor prefixes
 * @param {Object} styles - Style object that gets prefixed properties added
 * @returns {Object} - Style object with prefixed properties and values
 */
function prefixAll(styles) {
  Object.keys(styles).forEach(function (property) {
    var value = styles[property];
    if (value instanceof Object && !Array.isArray(value)) {
      // recurse through nested style objects
      styles[property] = prefixAll(value);
    } else {
      Object.keys(_prefixProps2.default).forEach(function (prefix) {
        var properties = _prefixProps2.default[prefix];
        // add prefixes if needed
        if (properties[property]) {
          styles[prefix + (0, _capitalizeString2.default)(property)] = value;
        }
      });
    }
  });

  Object.keys(styles).forEach(function (property) {
    [].concat(styles[property]).forEach(function (value, index) {
      // resolve every special plugins
      plugins.forEach(function (plugin) {
        return assignStyles(styles, plugin(property, value));
      });
    });
  });

  return (0, _sortPrefixedStyle2.default)(styles);
}

function assignStyles(base) {
  var extend = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  Object.keys(extend).forEach(function (property) {
    var baseValue = base[property];
    if (Array.isArray(baseValue)) {
      [].concat(extend[property]).forEach(function (value) {
        var valueIndex = baseValue.indexOf(value);
        if (valueIndex > -1) {
          base[property].splice(valueIndex, 1);
        }
        base[property].push(value);
      });
    } else {
      base[property] = extend[property];
    }
  });
}
module.exports = exports['default'];

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bowser = __webpack_require__(188);

var _bowser2 = _interopRequireDefault(_bowser);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var vendorPrefixes = {
  Webkit: ['chrome', 'safari', 'ios', 'android', 'phantom', 'opera', 'webos', 'blackberry', 'bada', 'tizen', 'chromium', 'vivaldi'],
  Moz: ['firefox', 'seamonkey', 'sailfish'],
  ms: ['msie', 'msedge']
};
var browsers = {
  chrome: [['chrome'], ['chromium']],
  safari: [['safari']],
  firefox: [['firefox']],
  edge: [['msedge']],
  opera: [['opera'], ['vivaldi']],
  ios_saf: [['ios', 'mobile'], ['ios', 'tablet']],
  ie: [['msie']],
  op_mini: [['opera', 'mobile'], ['opera', 'tablet']],
  and_uc: [['android', 'mobile'], ['android', 'tablet']],
  android: [['android', 'mobile'], ['android', 'tablet']]
};

var browserByInfo = function browserByInfo(info) {
  if (info.firefox) {
    return 'firefox';
  }
  var name = '';

  Object.keys(browsers).forEach(function (browser) {
    browsers[browser].forEach(function (condition) {
      var match = 0;
      condition.forEach(function (single) {
        if (info[single]) {
          match += 1;
        }
      });
      if (condition.length === match) {
        name = browser;
      }
    });
  });

  return name;
};

/**
 * Uses bowser to get default browser information such as version and name
 * Evaluates bowser info and adds vendorPrefix information
 * @param {string} userAgent - userAgent that gets evaluated
 */

exports.default = function (userAgent) {
  if (!userAgent) {
    return false;
  }
  var info = _bowser2.default._detect(userAgent);

  Object.keys(vendorPrefixes).forEach(function (prefix) {
    vendorPrefixes[prefix].forEach(function (browser) {
      if (info[browser]) {
        info.prefix = {
          inline: prefix,
          css: '-' + prefix.toLowerCase() + '-'
        };
      }
    });
  });

  info.browser = browserByInfo(info);

  // For cordova IOS 8 the version is missing, set truncated osversion to prevent NaN
  info.version = info.version ? parseFloat(info.version) : parseInt(parseFloat(info.osversion), 10);
  info.osversion = parseFloat(info.osversion);

  // iOS forces all browsers to use Safari under the hood
  // as the Safari version seems to match the iOS version
  // we just explicitely use the osversion instead
  // https://github.com/rofrischmann/inline-style-prefixer/issues/72
  if (info.browser === 'ios_saf' && info.version > info.osversion) {
    info.version = info.osversion;
    info.safari = true;
  }

  // seperate native android chrome
  // https://github.com/rofrischmann/inline-style-prefixer/issues/45
  if (info.browser === 'android' && info.chrome && info.version > 37) {
    info.browser = 'and_chr';
  }

  // For android < 4.4 we want to check the osversion
  // not the chrome version, see issue #26
  // https://github.com/rofrischmann/inline-style-prefixer/issues/26
  if (info.browser === 'android' && info.osversion < 5) {
    info.version = info.osversion;
  }

  return info;
};

module.exports = exports['default'];

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (_ref) {
  var browser = _ref.browser;
  var version = _ref.version;
  var prefix = _ref.prefix;

  var prefixedKeyframes = 'keyframes';

  if (browser === 'chrome' && version < 43 || (browser === 'safari' || browser === 'ios_saf') && version < 9 || browser === 'opera' && version < 30 || browser === 'android' && version <= 4.4 || browser === 'and_uc') {
    prefixedKeyframes = prefix.css + prefixedKeyframes;
  }
  return prefixedKeyframes;
};

module.exports = exports['default'];

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (property) {
  return property.match(/^(Webkit|Moz|O|ms)/) !== null;
};

module.exports = exports["default"];

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (property) {
  var unprefixed = property.replace(/^(ms|Webkit|Moz|O)/, '');
  return unprefixed.charAt(0).toLowerCase() + unprefixed.slice(1);
};

module.exports = exports['default'];

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
};

function isBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
}

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var printWarning = function printWarning() {};

if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret = __webpack_require__(51);
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function printWarning(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _typeof(typeSpecs[typeSpecName]) + '`.');
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + (typeof error === 'undefined' ? 'undefined' : _typeof(error)) + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function () {
  if (process.env.NODE_ENV !== 'production') {
    loggedTypeFailures = {};
  }
};

module.exports = checkPropTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = __webpack_require__(51);

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

module.exports = function () {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = appendImportantToEachValue;

var _appendPxIfNeeded = __webpack_require__(95);

var _appendPxIfNeeded2 = _interopRequireDefault(_appendPxIfNeeded);

var _mapObject = __webpack_require__(100);

var _mapObject2 = _interopRequireDefault(_mapObject);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function appendImportantToEachValue(style) {
  return (0, _mapObject2.default)(style, function (result, key) {
    return (0, _appendPxIfNeeded2.default)(key, style[key]) + ' !important';
  });
}
module.exports = exports['default'];

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var _camelCaseRegex = /([a-z])?([A-Z])/g;

var _camelCaseReplacer = function _camelCaseReplacer(match, p1, p2) {
  return (p1 || '') + '-' + p2.toLowerCase();
};

var _camelCaseToDashCase = function _camelCaseToDashCase(s) {
  return s.replace(_camelCaseRegex, _camelCaseReplacer);
};

var camelCasePropsToDashCase = function camelCasePropsToDashCase(prefixedStyle) {
  // Since prefix is expected to work on inline style objects, we must
  // translate the keys to dash case for rendering to CSS.
  return Object.keys(prefixedStyle).reduce(function (result, key) {
    var dashCaseKey = _camelCaseToDashCase(key);

    // Fix IE vendor prefix
    if (/^ms-/.test(dashCaseKey)) {
      dashCaseKey = '-' + dashCaseKey;
    }

    result[dashCaseKey] = prefixedStyle[key];
    return result;
  }, {});
};

exports.default = camelCasePropsToDashCase;
module.exports = exports['default'];

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _enhancer = __webpack_require__(96);

var _enhancer2 = _interopRequireDefault(_enhancer);

var _styleKeeper = __webpack_require__(54);

var _styleKeeper2 = _interopRequireDefault(_styleKeeper);

var _styleSheet = __webpack_require__(239);

var _styleSheet2 = _interopRequireDefault(_styleSheet);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

function _getStyleKeeper(instance) {
  if (!instance._radiumStyleKeeper) {
    var userAgent = instance.props.radiumConfig && instance.props.radiumConfig.userAgent || instance.context._radiumConfig && instance.context._radiumConfig.userAgent;
    instance._radiumStyleKeeper = new _styleKeeper2.default(userAgent);
  }

  return instance._radiumStyleKeeper;
}

var StyleRoot = function (_PureComponent) {
  _inherits(StyleRoot, _PureComponent);

  function StyleRoot() {
    _classCallCheck(this, StyleRoot);

    var _this = _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));

    _getStyleKeeper(_this);
    return _this;
  }

  StyleRoot.prototype.getChildContext = function getChildContext() {
    return { _radiumStyleKeeper: _getStyleKeeper(this) };
  };

  StyleRoot.prototype.render = function render() {
    /* eslint-disable no-unused-vars */
    // Pass down all props except config to the rendered div.
    var _props = this.props,
        radiumConfig = _props.radiumConfig,
        otherProps = _objectWithoutProperties(_props, ['radiumConfig']);
    /* eslint-enable no-unused-vars */

    return _react2.default.createElement('div', otherProps, this.props.children, _react2.default.createElement(_styleSheet2.default, null));
  };

  return StyleRoot;
}(_react.PureComponent);

StyleRoot.contextTypes = {
  _radiumConfig: _propTypes2.default.object,
  _radiumStyleKeeper: _propTypes2.default.instanceOf(_styleKeeper2.default)
};

StyleRoot.childContextTypes = {
  _radiumStyleKeeper: _propTypes2.default.instanceOf(_styleKeeper2.default)
};

StyleRoot = (0, _enhancer2.default)(StyleRoot);

exports.default = StyleRoot;
module.exports = exports['default'];

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _class, _temp;

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleKeeper = __webpack_require__(54);

var _styleKeeper2 = _interopRequireDefault(_styleKeeper);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var StyleSheet = (_temp = _class = function (_PureComponent) {
  _inherits(StyleSheet, _PureComponent);

  function StyleSheet() {
    _classCallCheck(this, StyleSheet);

    var _this = _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));

    _this._onChange = function () {
      setTimeout(function () {
        _this._isMounted && _this.setState(_this._getCSSState());
      }, 0);
    };

    _this.state = _this._getCSSState();
    return _this;
  }

  StyleSheet.prototype.componentDidMount = function componentDidMount() {
    this._isMounted = true;
    this._subscription = this.context._radiumStyleKeeper.subscribe(this._onChange);
    this._onChange();
  };

  StyleSheet.prototype.componentWillUnmount = function componentWillUnmount() {
    this._isMounted = false;
    if (this._subscription) {
      this._subscription.remove();
    }
  };

  StyleSheet.prototype._getCSSState = function _getCSSState() {
    return { css: this.context._radiumStyleKeeper.getCSS() };
  };

  StyleSheet.prototype.render = function render() {
    return _react2.default.createElement('style', { dangerouslySetInnerHTML: { __html: this.state.css } });
  };

  return StyleSheet;
}(_react.PureComponent), _class.contextTypes = {
  _radiumStyleKeeper: _propTypes2.default.instanceOf(_styleKeeper2.default)
}, _temp);
exports.default = StyleSheet;
module.exports = exports['default'];

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var _class, _temp;

var _cssRuleSetToString = __webpack_require__(52);

var _cssRuleSetToString2 = _interopRequireDefault(_cssRuleSetToString);

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var Style = (_temp = _class = function (_PureComponent) {
  _inherits(Style, _PureComponent);

  function Style() {
    _classCallCheck(this, Style);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  Style.prototype._buildStyles = function _buildStyles(styles) {
    var _this2 = this;

    var userAgent = this.props.radiumConfig && this.props.radiumConfig.userAgent || this.context && this.context._radiumConfig && this.context._radiumConfig.userAgent;

    var scopeSelector = this.props.scopeSelector;

    var rootRules = Object.keys(styles).reduce(function (accumulator, selector) {
      if (_typeof(styles[selector]) !== 'object') {
        accumulator[selector] = styles[selector];
      }

      return accumulator;
    }, {});
    var rootStyles = Object.keys(rootRules).length ? (0, _cssRuleSetToString2.default)(scopeSelector || '', rootRules, userAgent) : '';

    return rootStyles + Object.keys(styles).reduce(function (accumulator, selector) {
      var rules = styles[selector];

      if (selector === 'mediaQueries') {
        accumulator += _this2._buildMediaQueryString(rules);
      } else if (_typeof(styles[selector]) === 'object') {
        var completeSelector = scopeSelector ? selector.split(',').map(function (part) {
          return scopeSelector + ' ' + part.trim();
        }).join(',') : selector;

        accumulator += (0, _cssRuleSetToString2.default)(completeSelector, rules, userAgent);
      }

      return accumulator;
    }, '');
  };

  Style.prototype._buildMediaQueryString = function _buildMediaQueryString(stylesByMediaQuery) {
    var _this3 = this;

    var mediaQueryString = '';

    Object.keys(stylesByMediaQuery).forEach(function (query) {
      mediaQueryString += '@media ' + query + '{' + _this3._buildStyles(stylesByMediaQuery[query]) + '}';
    });

    return mediaQueryString;
  };

  Style.prototype.render = function render() {
    if (!this.props.rules) {
      return null;
    }

    var styles = this._buildStyles(this.props.rules);

    return _react2.default.createElement('style', { dangerouslySetInnerHTML: { __html: styles } });
  };

  return Style;
}(_react.PureComponent), _class.propTypes = {
  radiumConfig: _propTypes2.default.object,
  rules: _propTypes2.default.object,
  scopeSelector: _propTypes2.default.string
}, _class.contextTypes = {
  _radiumConfig: _propTypes2.default.object
}, _class.defaultProps = {
  scopeSelector: ''
}, _temp);
exports.default = Style;
module.exports = exports['default'];

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = keyframes;

var _cssRuleSetToString = __webpack_require__(52);

var _cssRuleSetToString2 = _interopRequireDefault(_cssRuleSetToString);

var _hash = __webpack_require__(99);

var _hash2 = _interopRequireDefault(_hash);

var _prefixer = __webpack_require__(53);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function keyframes(keyframeRules, name) {
  return {
    __radiumKeyframes: true,
    __process: function __process(userAgent) {
      var keyframesPrefixed = (0, _prefixer.getPrefixedKeyframes)(userAgent);
      var rules = Object.keys(keyframeRules).map(function (percentage) {
        return (0, _cssRuleSetToString2.default)(percentage, keyframeRules[percentage], userAgent);
      }).join('\n');
      var animationName = (name ? name + '-' : '') + 'radium-animation-' + (0, _hash2.default)(rules);
      var css = '@' + keyframesPrefixed + ' ' + animationName + ' {\n' + rules + '\n}\n';
      return { css: css, animationName: animationName };
    }
  };
}

module.exports = exports['default'];

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

exports.isNestedStyle = isNestedStyle;
exports.mergeStyles = mergeStyles;
function isNestedStyle(value) {
  // Don't merge objects overriding toString, since they should be converted
  // to string values.
  return value && value.constructor === Object && value.toString === Object.prototype.toString;
}

// Merge style objects. Deep merge plain object values.
function mergeStyles(styles) {
  var result = {};

  styles.forEach(function (style) {
    if (!style || (typeof style === 'undefined' ? 'undefined' : _typeof(style)) !== 'object') {
      return;
    }

    if (Array.isArray(style)) {
      style = mergeStyles(style);
    }

    Object.keys(style).forEach(function (key) {
      // Simple case, nothing nested
      if (!isNestedStyle(style[key]) || !isNestedStyle(result[key])) {
        result[key] = style[key];
        return;
      }

      // If nested media, don't merge the nested styles, append a space to the
      // end (benign when converted to CSS). This way we don't end up merging
      // media queries that appear later in the chain with those that appear
      // earlier.
      if (key.indexOf('@media') === 0) {
        var newKey = key;
        // eslint-disable-next-line no-constant-condition
        while (true) {
          newKey += ' ';
          if (!result[newKey]) {
            result[newKey] = style[key];
            return;
          }
        }
      }

      // Merge all other nested styles recursively
      result[key] = mergeStyles([result[key], style[key]]);
    });
  });

  return result;
}

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var _checkProps = function checkProps() {};

if (process.env.NODE_ENV !== 'production') {
  // Warn if you use longhand and shorthand properties in the same style
  // object.
  // https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties

  var shorthandPropertyExpansions = {
    background: ['backgroundAttachment', 'backgroundBlendMode', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPosition', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundRepeatX', 'backgroundRepeatY', 'backgroundSize'],
    border: ['borderBottom', 'borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderColor', 'borderLeft', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRight', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderStyle', 'borderTop', 'borderTopColor', 'borderTopStyle', 'borderTopWidth', 'borderWidth'],
    borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
    borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
    font: ['fontFamily', 'fontKerning', 'fontSize', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantLigatures', 'fontWeight', 'lineHeight'],
    listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
    margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
    padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
    transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction']
  };

  _checkProps = function checkProps(config) {
    var componentName = config.componentName,
        style = config.style;

    if ((typeof style === 'undefined' ? 'undefined' : _typeof(style)) !== 'object' || !style) {
      return;
    }

    var styleKeys = Object.keys(style);
    styleKeys.forEach(function (styleKey) {
      if (Array.isArray(shorthandPropertyExpansions[styleKey]) && shorthandPropertyExpansions[styleKey].some(function (sp) {
        return styleKeys.indexOf(sp) !== -1;
      })) {
        if (process.env.NODE_ENV !== 'production') {
          /* eslint-disable no-console */
          console.warn('Radium: property "' + styleKey + '" in style object', style, ': do not mix longhand and ' + 'shorthand properties in the same style object. Check the render ' + 'method of ' + componentName + '.', 'See https://github.com/FormidableLabs/radium/issues/95 for more ' + 'information.');
          /* eslint-enable no-console */
        }
      }
    });

    styleKeys.forEach(function (k) {
      return _checkProps(_extends({}, config, { style: style[k] }));
    });
    return;
  };
}

exports.default = _checkProps;
module.exports = exports['default'];
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = keyframesPlugin;
function keyframesPlugin(_ref) {
  var addCSS = _ref.addCSS,
      config = _ref.config,
      style = _ref.style;

  var newStyle = Object.keys(style).reduce(function (newStyleInProgress, key) {
    var value = style[key];
    if (key === 'animationName' && value && value.__radiumKeyframes) {
      var keyframesValue = value;

      var _keyframesValue$__pro = keyframesValue.__process(config.userAgent),
          animationName = _keyframesValue$__pro.animationName,
          css = _keyframesValue$__pro.css;

      addCSS(css);
      value = animationName;
    }

    newStyleInProgress[key] = value;
    return newStyleInProgress;
  }, {});
  return { style: newStyle };
}
module.exports = exports['default'];

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

// Convenient syntax for multiple styles: `style={[style1, style2, etc]}`
// Ignores non-objects, so you can do `this.state.isCool && styles.cool`.
var mergeStyleArrayPlugin = function mergeStyleArrayPlugin(_ref) {
  var style = _ref.style,
      mergeStyles = _ref.mergeStyles;

  // eslint-disable-line no-shadow
  var newStyle = Array.isArray(style) ? mergeStyles(style) : style;
  return { style: newStyle };
};

exports.default = mergeStyleArrayPlugin;
module.exports = exports['default'];

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var _callbacks = [];
var _mouseUpListenerIsActive = false;

function _handleMouseUp() {
  _callbacks.forEach(function (callback) {
    callback();
  });
}

var subscribe = function subscribe(callback) {
  if (_callbacks.indexOf(callback) === -1) {
    _callbacks.push(callback);
  }

  if (!_mouseUpListenerIsActive) {
    window.addEventListener('mouseup', _handleMouseUp);
    _mouseUpListenerIsActive = true;
  }

  return {
    remove: function remove() {
      var index = _callbacks.indexOf(callback);
      _callbacks.splice(index, 1);

      if (_callbacks.length === 0 && _mouseUpListenerIsActive) {
        window.removeEventListener('mouseup', _handleMouseUp);
        _mouseUpListenerIsActive = false;
      }
    }
  };
};

exports.default = {
  subscribe: subscribe,
  __triggerForTests: _handleMouseUp
};
module.exports = exports['default'];

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = prefixPlugin;

var _prefixer = __webpack_require__(53);

function prefixPlugin(_ref) {
  var config = _ref.config,
      style = _ref.style;

  var newStyle = (0, _prefixer.getPrefixedStyle)(style, config.userAgent);
  return { style: newStyle };
}
module.exports = exports['default'];

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = removeNestedStyles;
function removeNestedStyles(_ref) {
  var isNestedStyle = _ref.isNestedStyle,
      style = _ref.style;

  // eslint-disable-line no-shadow
  var newStyle = Object.keys(style).reduce(function (newStyleInProgress, key) {
    var value = style[key];
    if (!isNestedStyle(value)) {
      newStyleInProgress[key] = value;
    }
    return newStyleInProgress;
  }, {});

  return {
    style: newStyle
  };
}

module.exports = exports['default'];

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mouseUpListener = __webpack_require__(246);

var _mouseUpListener2 = _interopRequireDefault(_mouseUpListener);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var _isInteractiveStyleField = function _isInteractiveStyleField(styleFieldName) {
  return styleFieldName === ':hover' || styleFieldName === ':active' || styleFieldName === ':focus';
};

var resolveInteractionStyles = function resolveInteractionStyles(config) {
  var ExecutionEnvironment = config.ExecutionEnvironment,
      getComponentField = config.getComponentField,
      getState = config.getState,
      mergeStyles = config.mergeStyles,
      props = config.props,
      setState = config.setState,
      style = config.style;

  var newComponentFields = {};
  var newProps = {};

  // Only add handlers if necessary
  if (style[':hover']) {
    // Always call the existing handler if one is already defined.
    // This code, and the very similar ones below, could be abstracted a bit
    // more, but it hurts readability IMO.
    var existingOnMouseEnter = props.onMouseEnter;
    newProps.onMouseEnter = function (e) {
      existingOnMouseEnter && existingOnMouseEnter(e);
      setState(':hover', true);
    };

    var existingOnMouseLeave = props.onMouseLeave;
    newProps.onMouseLeave = function (e) {
      existingOnMouseLeave && existingOnMouseLeave(e);
      setState(':hover', false);
    };
  }

  if (style[':active']) {
    var existingOnMouseDown = props.onMouseDown;
    newProps.onMouseDown = function (e) {
      existingOnMouseDown && existingOnMouseDown(e);
      newComponentFields._lastMouseDown = Date.now();
      setState(':active', 'viamousedown');
    };

    var existingOnKeyDown = props.onKeyDown;
    newProps.onKeyDown = function (e) {
      existingOnKeyDown && existingOnKeyDown(e);
      if (e.key === ' ' || e.key === 'Enter') {
        setState(':active', 'viakeydown');
      }
    };

    var existingOnKeyUp = props.onKeyUp;
    newProps.onKeyUp = function (e) {
      existingOnKeyUp && existingOnKeyUp(e);
      if (e.key === ' ' || e.key === 'Enter') {
        setState(':active', false);
      }
    };
  }

  if (style[':focus']) {
    var existingOnFocus = props.onFocus;
    newProps.onFocus = function (e) {
      existingOnFocus && existingOnFocus(e);
      setState(':focus', true);
    };

    var existingOnBlur = props.onBlur;
    newProps.onBlur = function (e) {
      existingOnBlur && existingOnBlur(e);
      setState(':focus', false);
    };
  }

  if (style[':active'] && !getComponentField('_radiumMouseUpListener') && ExecutionEnvironment.canUseEventListeners) {
    newComponentFields._radiumMouseUpListener = _mouseUpListener2.default.subscribe(function () {
      Object.keys(getComponentField('state')._radiumStyleState).forEach(function (key) {
        if (getState(':active', key) === 'viamousedown') {
          setState(':active', false, key);
        }
      });
    });
  }

  // Merge the styles in the order they were defined
  var interactionStyles = props.disabled ? [style[':disabled']] : Object.keys(style).filter(function (name) {
    return _isInteractiveStyleField(name) && getState(name);
  }).map(function (name) {
    return style[name];
  });

  var newStyle = mergeStyles([style].concat(interactionStyles));

  // Remove interactive styles
  newStyle = Object.keys(newStyle).reduce(function (styleWithoutInteractions, name) {
    if (!_isInteractiveStyleField(name) && name !== ':disabled') {
      styleWithoutInteractions[name] = newStyle[name];
    }
    return styleWithoutInteractions;
  }, {});

  return {
    componentFields: newComponentFields,
    props: newProps,
    style: newStyle
  };
};

exports.default = resolveInteractionStyles;
module.exports = exports['default'];

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

exports.default = resolveMediaQueries;
var _windowMatchMedia = void 0;
function _getWindowMatchMedia(ExecutionEnvironment) {
  if (_windowMatchMedia === undefined) {
    _windowMatchMedia = !!ExecutionEnvironment.canUseDOM && !!window && !!window.matchMedia && function (mediaQueryString) {
      return window.matchMedia(mediaQueryString);
    } || null;
  }
  return _windowMatchMedia;
}

function _filterObject(obj, predicate) {
  return Object.keys(obj).filter(function (key) {
    return predicate(obj[key], key);
  }).reduce(function (result, key) {
    result[key] = obj[key];
    return result;
  }, {});
}

function _removeMediaQueries(style) {
  return Object.keys(style).reduce(function (styleWithoutMedia, key) {
    if (key.indexOf('@media') !== 0) {
      styleWithoutMedia[key] = style[key];
    }
    return styleWithoutMedia;
  }, {});
}

function _topLevelRulesToCSS(_ref) {
  var addCSS = _ref.addCSS,
      appendImportantToEachValue = _ref.appendImportantToEachValue,
      cssRuleSetToString = _ref.cssRuleSetToString,
      hash = _ref.hash,
      isNestedStyle = _ref.isNestedStyle,
      style = _ref.style,
      userAgent = _ref.userAgent;

  var className = '';
  Object.keys(style).filter(function (name) {
    return name.indexOf('@media') === 0;
  }).map(function (query) {
    var topLevelRules = appendImportantToEachValue(_filterObject(style[query], function (value) {
      return !isNestedStyle(value);
    }));

    if (!Object.keys(topLevelRules).length) {
      return;
    }

    var ruleCSS = cssRuleSetToString('', topLevelRules, userAgent);

    // CSS classes cannot start with a number
    var mediaQueryClassName = 'rmq-' + hash(query + ruleCSS);
    var css = query + '{ .' + mediaQueryClassName + ruleCSS + '}';

    addCSS(css);

    className += (className ? ' ' : '') + mediaQueryClassName;
  });
  return className;
}

function _subscribeToMediaQuery(_ref2) {
  var listener = _ref2.listener,
      listenersByQuery = _ref2.listenersByQuery,
      matchMedia = _ref2.matchMedia,
      mediaQueryListsByQuery = _ref2.mediaQueryListsByQuery,
      query = _ref2.query;

  query = query.replace('@media ', '');

  var mql = mediaQueryListsByQuery[query];
  if (!mql && matchMedia) {
    mediaQueryListsByQuery[query] = mql = matchMedia(query);
  }

  if (!listenersByQuery || !listenersByQuery[query]) {
    mql.addListener(listener);

    listenersByQuery[query] = {
      remove: function remove() {
        mql.removeListener(listener);
      }
    };
  }
  return mql;
}

function resolveMediaQueries(_ref3) {
  var ExecutionEnvironment = _ref3.ExecutionEnvironment,
      addCSS = _ref3.addCSS,
      appendImportantToEachValue = _ref3.appendImportantToEachValue,
      config = _ref3.config,
      cssRuleSetToString = _ref3.cssRuleSetToString,
      getComponentField = _ref3.getComponentField,
      getGlobalState = _ref3.getGlobalState,
      hash = _ref3.hash,
      isNestedStyle = _ref3.isNestedStyle,
      mergeStyles = _ref3.mergeStyles,
      props = _ref3.props,
      setState = _ref3.setState,
      style = _ref3.style;

  // eslint-disable-line no-shadow
  var newStyle = _removeMediaQueries(style);
  var mediaQueryClassNames = _topLevelRulesToCSS({
    addCSS: addCSS,
    appendImportantToEachValue: appendImportantToEachValue,
    cssRuleSetToString: cssRuleSetToString,
    hash: hash,
    isNestedStyle: isNestedStyle,
    style: style,
    userAgent: config.userAgent
  });

  var newProps = mediaQueryClassNames ? {
    className: mediaQueryClassNames + (props.className ? ' ' + props.className : '')
  } : null;

  var matchMedia = config.matchMedia || _getWindowMatchMedia(ExecutionEnvironment);

  if (!matchMedia) {
    return {
      props: newProps,
      style: newStyle
    };
  }

  var listenersByQuery = _extends({}, getComponentField('_radiumMediaQueryListenersByQuery'));
  var mediaQueryListsByQuery = getGlobalState('mediaQueryListsByQuery') || {};

  Object.keys(style).filter(function (name) {
    return name.indexOf('@media') === 0;
  }).map(function (query) {
    var nestedRules = _filterObject(style[query], isNestedStyle);

    if (!Object.keys(nestedRules).length) {
      return;
    }

    var mql = _subscribeToMediaQuery({
      listener: function listener() {
        return setState(query, mql.matches, '_all');
      },
      listenersByQuery: listenersByQuery,
      matchMedia: matchMedia,
      mediaQueryListsByQuery: mediaQueryListsByQuery,
      query: query
    });

    // Apply media query states
    if (mql.matches) {
      newStyle = mergeStyles([newStyle, nestedRules]);
    }
  });

  return {
    componentFields: {
      _radiumMediaQueryListenersByQuery: listenersByQuery
    },
    globalState: { mediaQueryListsByQuery: mediaQueryListsByQuery },
    props: newProps,
    style: newStyle
  };
}
module.exports = exports['default'];

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = visited;
function visited(_ref) {
  var addCSS = _ref.addCSS,
      appendImportantToEachValue = _ref.appendImportantToEachValue,
      config = _ref.config,
      cssRuleSetToString = _ref.cssRuleSetToString,
      hash = _ref.hash,
      props = _ref.props,
      style = _ref.style;

  // eslint-disable-line no-shadow
  var className = props.className;

  var newStyle = Object.keys(style).reduce(function (newStyleInProgress, key) {
    var value = style[key];
    if (key === ':visited') {
      value = appendImportantToEachValue(value);
      var ruleCSS = cssRuleSetToString('', value, config.userAgent);
      var visitedClassName = 'rad-' + hash(ruleCSS);
      var css = '.' + visitedClassName + ':visited' + ruleCSS;

      addCSS(css);
      className = (className ? className + ' ' : '') + visitedClassName;
    } else {
      newStyleInProgress[key] = value;
    }

    return newStyleInProgress;
  }, {});

  return {
    props: className === props.className ? null : { className: className },
    style: newStyle
  };
}

module.exports = exports['default'];

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ARIADOMPropertyConfig = {
  Properties: {
    // Global States and Properties
    'aria-current': 0, // state
    'aria-details': 0,
    'aria-disabled': 0, // state
    'aria-hidden': 0, // state
    'aria-invalid': 0, // state
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    // Widget Attributes
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    // Live Region Attributes
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    // Drag-and-Drop Attributes
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    // Relationship Attributes
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  },
  DOMAttributeNames: {},
  DOMPropertyNames: {}
};

module.exports = ARIADOMPropertyConfig;

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ReactDOMComponentTree = __webpack_require__(7);

var focusNode = __webpack_require__(88);

var AutoFocusUtils = {
  focusDOMComponent: function focusDOMComponent() {
    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
  }
};

module.exports = AutoFocusUtils;

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var EventPropagators = __webpack_require__(33);
var ExecutionEnvironment = __webpack_require__(9);
var FallbackCompositionState = __webpack_require__(260);
var SyntheticCompositionEvent = __webpack_require__(300);
var SyntheticInputEvent = __webpack_require__(303);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (typeof opera === 'undefined' ? 'undefined' : _typeof(opera)) === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if ((typeof detail === 'undefined' ? 'undefined' : _typeof(detail)) === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (currentComposition) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var CSSProperty = __webpack_require__(103);
var ExecutionEnvironment = __webpack_require__(9);
var ReactInstrumentation = __webpack_require__(10);

var camelizeStyleName = __webpack_require__(192);
var dangerousStyleValue = __webpack_require__(310);
var hyphenateStyleName = __webpack_require__(199);
var memoizeStringOnly = __webpack_require__(202);
var warning = __webpack_require__(3);

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;

  var warnHyphenatedStyleName = function warnHyphenatedStyleName(name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
  };

  var warnBadVendoredStyleName = function warnBadVendoredStyleName(name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
  };

  var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value, owner) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, "Style property values shouldn't contain a semicolon.%s " + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
  };

  var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value, owner) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
  };

  var checkRenderMessage = function checkRenderMessage(owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  };

  /**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
  var warnValidStyle = function warnValidStyle(name, value, component) {
    var owner;
    if (component) {
      owner = component._currentElement._owner;
    }
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, owner);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, owner);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, owner);
    }

    if (typeof value === 'number' && isNaN(value)) {
      warnStyleValueIsNaN(name, value, owner);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {
  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */
  createMarkupForStyles: function createMarkupForStyles(styles, component) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        if (!isCustomProperty) {
          warnValidStyle(styleName, styleValue, component);
        }
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, component, isCustomProperty) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   * @param {ReactDOMComponent} component
   */
  setValueForStyles: function setValueForStyles(node, styles, component) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: component._debugID,
        type: 'update styles',
        payload: styles
      });
    }

    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      if (process.env.NODE_ENV !== 'production') {
        if (!isCustomProperty) {
          warnValidStyle(styleName, styles[styleName], component);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName], component, isCustomProperty);
      if (styleName === 'float' || styleName === 'cssFloat') {
        styleName = styleFloatAccessor;
      }
      if (isCustomProperty) {
        style.setProperty(styleName, styleValue);
      } else if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }
};

module.exports = CSSPropertyOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var EventPluginHub = __webpack_require__(32);
var EventPropagators = __webpack_require__(33);
var ExecutionEnvironment = __webpack_require__(9);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactUpdates = __webpack_require__(13);
var SyntheticEvent = __webpack_require__(17);

var inputValueTracking = __webpack_require__(126);
var getEventTarget = __webpack_require__(66);
var isEventSupported = __webpack_require__(68);
var isTextInputElement = __webpack_require__(127);

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, target);
  event.type = 'change';
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementInst = null;
}

function getInstIfValueChanged(targetInst, nativeEvent) {
  var updated = inputValueTracking.updateValueIfChanged(targetInst);
  var simulated = nativeEvent.simulated === true && ChangeEventPlugin._allowSimulatedPassThrough;

  if (updated || simulated) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}

function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.

  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementInst = null;
}

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  if (getInstIfValueChanged(activeElementInst, nativeEvent)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst, nativeEvent);
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topClick') {
    return getInstIfValueChanged(targetInst, nativeEvent);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topInput' || topLevelType === 'topChange') {
    return getInstIfValueChanged(targetInst, nativeEvent);
  }
}

function handleControlledInputBlur(inst, node) {
  // TODO: In IE, inst is occasionally null. Why?
  if (inst == null) {
    return;
  }

  // Fiber and ReactDOM keep wrapper state in separate places
  var state = inst._wrapperState || node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  // If controlled, assign the value attribute to the current value on blur
  var value = '' + node.value;
  if (node.getAttribute('value') !== value) {
    node.setAttribute('value', value);
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {
  eventTypes: eventTypes,

  _allowSimulatedPassThrough: true,
  _isInputEventSupported: isInputEventSupported,

  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      if (doesChangeEventBubble) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst, nativeEvent);
      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === 'topBlur') {
      handleControlledInputBlur(targetInst, targetNode);
    }
  }
};

module.exports = ChangeEventPlugin;

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(4);

var DOMLazyTree = __webpack_require__(28);
var ExecutionEnvironment = __webpack_require__(9);

var createNodesFromMarkup = __webpack_require__(195);
var emptyFunction = __webpack_require__(14);
var invariant = __webpack_require__(2);

var Danger = {
  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function dangerouslyReplaceNodeWithMarkup(oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

    if (typeof markup === 'string') {
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);
    } else {
      DOMLazyTree.replaceChildWithTree(oldChild, markup);
    }
  }
};

module.exports = Danger;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

module.exports = DefaultEventPluginOrder;

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var EventPropagators = __webpack_require__(33);
var ReactDOMComponentTree = __webpack_require__(7);
var SyntheticMouseEvent = __webpack_require__(41);

var eventTypes = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {
  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }
};

module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _assign = __webpack_require__(6);

var PooledClass = __webpack_require__(22);

var getTextContentAccessor = __webpack_require__(125);

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

_assign(FallbackCompositionState.prototype, {
  destructor: function destructor() {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function getText() {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function getData() {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var DOMProperty = __webpack_require__(18);

var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
  Properties: {
    /**
     * Standard Properties
     */
    accept: 0,
    acceptCharset: 0,
    accessKey: 0,
    action: 0,
    allowFullScreen: HAS_BOOLEAN_VALUE,
    allowTransparency: 0,
    alt: 0,
    // specifies target context for links with `preload` type
    as: 0,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: 0,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_BOOLEAN_VALUE,
    cellPadding: 0,
    cellSpacing: 0,
    charSet: 0,
    challenge: 0,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cite: 0,
    classID: 0,
    className: 0,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: 0,
    content: 0,
    contentEditable: 0,
    contextMenu: 0,
    controls: HAS_BOOLEAN_VALUE,
    controlsList: 0,
    coords: 0,
    crossOrigin: 0,
    data: 0, // For `<object />` acts as `src`.
    dateTime: 0,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: 0,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: 0,
    encType: 0,
    form: 0,
    formAction: 0,
    formEncType: 0,
    formMethod: 0,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: 0,
    frameBorder: 0,
    headers: 0,
    height: 0,
    hidden: HAS_BOOLEAN_VALUE,
    high: 0,
    href: 0,
    hrefLang: 0,
    htmlFor: 0,
    httpEquiv: 0,
    icon: 0,
    id: 0,
    inputMode: 0,
    integrity: 0,
    is: 0,
    keyParams: 0,
    keyType: 0,
    kind: 0,
    label: 0,
    lang: 0,
    list: 0,
    loop: HAS_BOOLEAN_VALUE,
    low: 0,
    manifest: 0,
    marginHeight: 0,
    marginWidth: 0,
    max: 0,
    maxLength: 0,
    media: 0,
    mediaGroup: 0,
    method: 0,
    min: 0,
    minLength: 0,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: 0,
    nonce: 0,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: 0,
    pattern: 0,
    placeholder: 0,
    playsInline: HAS_BOOLEAN_VALUE,
    poster: 0,
    preload: 0,
    profile: 0,
    radioGroup: 0,
    readOnly: HAS_BOOLEAN_VALUE,
    referrerPolicy: 0,
    rel: 0,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: 0,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    sandbox: 0,
    scope: 0,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: 0,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: 0,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    sizes: 0,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: 0,
    src: 0,
    srcDoc: 0,
    srcLang: 0,
    srcSet: 0,
    start: HAS_NUMERIC_VALUE,
    step: 0,
    style: 0,
    summary: 0,
    tabIndex: 0,
    target: 0,
    title: 0,
    // Setting .type throws on non-<input> tags
    type: 0,
    useMap: 0,
    value: 0,
    width: 0,
    wmode: 0,
    wrap: 0,

    /**
     * RDFa Properties
     */
    about: 0,
    datatype: 0,
    inlist: 0,
    prefix: 0,
    // property is also supported for OpenGraph in meta tags.
    property: 0,
    resource: 0,
    'typeof': 0,
    vocab: 0,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: 0,
    autoCorrect: 0,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: 0,
    // color is for Safari mask-icon link
    color: 0,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: 0,
    itemScope: HAS_BOOLEAN_VALUE,
    itemType: 0,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: 0,
    itemRef: 0,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: 0,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: 0,
    // IE-only attribute that controls focus behavior
    unselectable: 0
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {},
  DOMMutationMethods: {
    value: function value(node, _value) {
      if (_value == null) {
        return node.removeAttribute('value');
      }

      // Number inputs get special treatment due to some edge cases in
      // Chrome. Let everything else assign the value attribute as normal.
      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
      if (node.type !== 'number' || node.hasAttribute('value') === false) {
        node.setAttribute('value', '' + _value);
      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
        // Don't assign an attribute if validation reports bad
        // input. Chrome will clear the value. Additionally, don't
        // operate on inputs that have focus, otherwise Chrome might
        // strip off trailing decimal places and cause the user's
        // cursor position to jump to the beginning of the input.
        //
        // In ReactDOMInput, we have an onBlur event that will trigger
        // this function again when focus is lost.
        node.setAttribute('value', '' + _value);
      }
    }
  }
};

module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ReactReconciler = __webpack_require__(23);

var instantiateReactComponent = __webpack_require__(67);
var KeyEscapeUtils = __webpack_require__(58);
var shouldUpdateReactComponent = __webpack_require__(69);
var traverseAllChildren = __webpack_require__(129);
var warning = __webpack_require__(3);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(11);
}

function instantiateChild(childInstances, child, name, selfDebugID) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    if (!ReactComponentTreeHook) {
      ReactComponentTreeHook = __webpack_require__(11);
    }
    if (!keyUnique) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
    }
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, true);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function instantiateChildren(nestedChildNodes, transaction, context, selfDebugID) // 0 in production and for roots
  {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};

    if (process.env.NODE_ENV !== 'production') {
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
        return instantiateChild(childInsts, child, name, selfDebugID);
      }, childInstances);
    } else {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    }
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) // 0 in production and for roots
  {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;
        // Creating mount image now ensures refs are resolved in right order
        // (see https://github.com/facebook/react/pull/7101 for explanation).
        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function unmountChildren(renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);
      }
    }
  }
};

module.exports = ReactChildReconciler;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var DOMChildrenOperations = __webpack_require__(55);
var ReactDOMIDOperations = __webpack_require__(269);

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {
  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
};

module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(4),
    _assign = __webpack_require__(6);

var React = __webpack_require__(24);
var ReactComponentEnvironment = __webpack_require__(60);
var ReactCurrentOwner = __webpack_require__(15);
var ReactErrorUtils = __webpack_require__(61);
var ReactInstanceMap = __webpack_require__(34);
var ReactInstrumentation = __webpack_require__(10);
var ReactNodeTypes = __webpack_require__(117);
var ReactReconciler = __webpack_require__(23);

if (process.env.NODE_ENV !== 'production') {
  var checkReactTypeSpec = __webpack_require__(309);
}

var emptyObject = __webpack_require__(31);
var invariant = __webpack_require__(2);
var shallowEqual = __webpack_require__(48);
var shouldUpdateReactComponent = __webpack_require__(69);
var warning = __webpack_require__(3);

var CompositeTypes = {
  ImpureClass: 0,
  PureClass: 1,
  StatelessFunctional: 2
};

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;
};

function warnIfInvalidElement(Component, element) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
  }
}

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
  return !!(Component.prototype && Component.prototype.isPureReactComponent);
}

// Separated into a function to contain deoptimizations caused by try/finally.
function measureLifeCyclePerf(fn, debugID, timerType) {
  if (debugID === 0) {
    // Top-level wrappers (see ReactMount) and empty components (see
    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
    // Both are implementation details that should go away in the future.
    return fn();
  }

  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
  try {
    return fn();
  } finally {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
  }
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponent = {
  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function construct(element) {
    this._currentElement = element;
    this._rootNodeID = 0;
    this._compositeType = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    // See ReactUpdateQueue
    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;

    // ComponentWillUnmount shall only be called once
    this._calledComponentWillUnmount = false;

    if (process.env.NODE_ENV !== 'production') {
      this._warnedAboutRefsInRender = false;
    }
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} hostParent
   * @param {?object} hostContainerInfo
   * @param {?object} context
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
    var _this = this;

    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    var updateQueue = transaction.getUpdateQueue();

    // Initialize the public class
    var doConstruct = shouldConstruct(Component);
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
    var renderedElement;

    // Support functional components
    if (!doConstruct && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
      inst = new StatelessComponent(Component);
      this._compositeType = CompositeTypes.StatelessFunctional;
    } else {
      if (isPureComponent(Component)) {
        this._compositeType = CompositeTypes.PureClass;
      } else {
        this._compositeType = CompositeTypes.ImpureClass;
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
      }

      var propsMutated = inst.props !== publicProps;
      var componentName = Component.displayName || Component.name || 'Component';

      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", componentName, componentName) : void 0;
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = updateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !((typeof initialState === 'undefined' ? 'undefined' : _typeof(initialState)) === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }

    if (inst.componentDidMount) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(function () {
            return inst.componentDidMount();
          }, _this._debugID, 'componentDidMount');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
    }

    return markup;
  },

  _constructComponent: function _constructComponent(doConstruct, publicProps, publicContext, updateQueue) {
    if (process.env.NODE_ENV !== 'production' && !doConstruct) {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    }
  },

  _constructComponentWithoutOwner: function _constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue) {
    var Component = this._currentElement.type;

    if (doConstruct) {
      if (process.env.NODE_ENV !== 'production') {
        return measureLifeCyclePerf(function () {
          return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'ctor');
      } else {
        return new Component(publicProps, publicContext, updateQueue);
      }
    }

    // This can still be an instance in case of factory components
    // but we'll count this as time spent rendering as the more common case.
    if (process.env.NODE_ENV !== 'production') {
      return measureLifeCyclePerf(function () {
        return Component(publicProps, publicContext, updateQueue);
      }, this._debugID, 'render');
    } else {
      return Component(publicProps, publicContext, updateQueue);
    }
  },

  performInitialMountWithErrorHandling: function performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } catch (e) {
      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
      }
      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      // Try again - we've informed the component about the error, so they can render an error message this time.
      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }
    return markup;
  },

  performInitialMount: function performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (inst.componentWillMount) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillMount();
        }, debugID, 'componentWillMount');
      } else {
        inst.componentWillMount();
      }
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    var nodeType = ReactNodeTypes.getType(renderedElement);
    this._renderedNodeType = nodeType;
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
    );
    this._renderedComponent = child;

    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

    if (process.env.NODE_ENV !== 'production') {
      if (debugID !== 0) {
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
      }
    }

    return markup;
  },

  getHostNode: function getHostNode() {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function unmountComponent(safely) {
    if (!this._renderedComponent) {
      return;
    }

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;

      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
      } else {
        if (process.env.NODE_ENV !== 'production') {
          measureLifeCyclePerf(function () {
            return inst.componentWillUnmount();
          }, this._debugID, 'componentWillUnmount');
        } else {
          inst.componentWillUnmount();
        }
      }
    }

    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;
    }

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = 0;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function _maskContext(context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function _processContext(context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function _processChildContext(currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

    if (inst.getChildContext) {
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }

    if (childContext) {
      !(_typeof(Component.childContextTypes) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
      if (process.env.NODE_ENV !== 'production') {
        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
      }
      return _assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Assert that the context types are valid
   *
   * @param {object} typeSpecs Map of context field to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkContextTypes: function _checkContextTypes(typeSpecs, values, location) {
    if (process.env.NODE_ENV !== 'production') {
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
    }
  },

  receiveComponent: function receiveComponent(nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function performUpdateIfNecessary(transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    } else {
      this._updateBatchNumber = null;
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function updateComponent(transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

    var willReceive = false;
    var nextContext;

    // Determine if the context has changed or not
    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;
    } else {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;
    }

    var prevProps = prevParentElement.props;
    var nextProps = nextParentElement.props;

    // Not a simple state update but a props update
    if (prevParentElement !== nextParentElement) {
      willReceive = true;
    }

    // An update here will schedule an update but immediately set
    // _pendingStateQueue which will ensure that any state updates gets
    // immediately reconciled instead of waiting for the next batch.
    if (willReceive && inst.componentWillReceiveProps) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillReceiveProps(nextProps, nextContext);
        }, this._debugID, 'componentWillReceiveProps');
      } else {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate) {
      if (inst.shouldComponentUpdate) {
        if (process.env.NODE_ENV !== 'production') {
          shouldUpdate = measureLifeCyclePerf(function () {
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'shouldComponentUpdate');
        } else {
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        }
      } else {
        if (this._compositeType === CompositeTypes.PureClass) {
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
        }
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
    }

    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function _processPendingState(props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = _assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function _performComponentUpdate(nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var _this2 = this;

    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, 'componentWillUpdate');
      } else {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function _updateRenderedComponent(transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
      );
      this._renderedComponent = child;

      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

      if (process.env.NODE_ENV !== 'production') {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }

      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
    }
  },

  /**
   * Overridden in shallow rendering.
   *
   * @protected
   */
  _replaceNodeWithMarkup: function _replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function _renderValidatedComponentWithoutOwnerOrContext() {
    var inst = this._instance;
    var renderedElement;

    if (process.env.NODE_ENV !== 'production') {
      renderedElement = measureLifeCyclePerf(function () {
        return inst.render();
      }, this._debugID, 'render');
    } else {
      renderedElement = inst.render();
    }

    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (renderedElement === undefined && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedElement = null;
      }
    }

    return renderedElement;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function _renderValidatedComponent() {
    var renderedElement;
    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
      ReactCurrentOwner.current = this;
      try {
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

    return renderedElement;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function attachRef(ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function detachRef(ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function getName() {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function getPublicInstance() {
    var inst = this._instance;
    if (this._compositeType === CompositeTypes.StatelessFunctional) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null
};

module.exports = ReactCompositeComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/



var ReactDOMComponentTree = __webpack_require__(7);
var ReactDefaultInjection = __webpack_require__(110);
var ReactMount = __webpack_require__(116);
var ReactReconciler = __webpack_require__(23);
var ReactUpdates = __webpack_require__(13);
var ReactVersion = __webpack_require__(120);

var findDOMNode = __webpack_require__(311);
var getHostComponentFromComposite = __webpack_require__(124);
var renderSubtreeIntoContainer = __webpack_require__(318);
var warning = __webpack_require__(3);

ReactDefaultInjection.inject();

var ReactDOM = {
  findDOMNode: findDOMNode,
  render: ReactMount.render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
  /* eslint-enable camelcase */
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
      getNodeFromInstance: function getNodeFromInstance(inst) {
        // inst is an internal instance (but could be a composite)
        if (inst._renderedComponent) {
          inst = getHostComponentFromComposite(inst);
        }
        if (inst) {
          return ReactDOMComponentTree.getNodeFromInstance(inst);
        } else {
          return null;
        }
      }
    },
    Mount: ReactMount,
    Reconciler: ReactReconciler
  });
}

if (process.env.NODE_ENV !== 'production') {
  var ExecutionEnvironment = __webpack_require__(9);
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        // Firefox does not have the issue with devtools loaded over file://
        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    var testFunc = function testFn() {};
    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, "It looks like you're using a minified copy of the development build " + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
        break;
      }
    }
  }
}

if (process.env.NODE_ENV !== 'production') {
  var ReactInstrumentation = __webpack_require__(10);
  var ReactDOMUnknownPropertyHook = __webpack_require__(279);
  var ReactDOMNullInputValuePropHook = __webpack_require__(272);
  var ReactDOMInvalidARIAHook = __webpack_require__(271);

  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
}

module.exports = ReactDOM;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* global hasOwnProperty:true */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(4),
    _assign = __webpack_require__(6);

var AutoFocusUtils = __webpack_require__(253);
var CSSPropertyOperations = __webpack_require__(255);
var DOMLazyTree = __webpack_require__(28);
var DOMNamespaces = __webpack_require__(56);
var DOMProperty = __webpack_require__(18);
var DOMPropertyOperations = __webpack_require__(105);
var EventPluginHub = __webpack_require__(32);
var EventPluginRegistry = __webpack_require__(39);
var ReactBrowserEventEmitter = __webpack_require__(40);
var ReactDOMComponentFlags = __webpack_require__(106);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactDOMInput = __webpack_require__(270);
var ReactDOMOption = __webpack_require__(273);
var ReactDOMSelect = __webpack_require__(108);
var ReactDOMTextarea = __webpack_require__(277);
var ReactInstrumentation = __webpack_require__(10);
var ReactMultiChild = __webpack_require__(287);
var ReactServerRenderingTransaction = __webpack_require__(119);

var emptyFunction = __webpack_require__(14);
var escapeTextContentForBrowser = __webpack_require__(43);
var invariant = __webpack_require__(2);
var isEventSupported = __webpack_require__(68);
var shallowEqual = __webpack_require__(48);
var inputValueTracking = __webpack_require__(126);
var validateDOMNesting = __webpack_require__(70);
var warning = __webpack_require__(3);

var Flags = ReactDOMComponentFlags;
var deleteListener = EventPluginHub.deleteListener;
var getNode = ReactDOMComponentTree.getNodeFromInstance;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = EventPluginRegistry.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { string: true, number: true };

var STYLE = 'style';
var HTML = '__html';
var RESERVED_PROPS = {
  children: null,
  dangerouslySetInnerHTML: null,
  suppressContentEditableWarning: null
};

// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
var DOC_FRAGMENT_TYPE = 11;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

function friendlyStringify(obj) {
  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined because undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[component._tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
    !(_typeof(props.dangerouslySetInnerHTML) === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
  }
  !(props.style == null || _typeof(props.style) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
}

function enqueuePutListener(inst, registrationName, listener, transaction) {
  if (transaction instanceof ReactServerRenderingTransaction) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), "This browser doesn't support the `onScroll` event") : void 0;
  }
  var containerInfo = inst._hostContainerInfo;
  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
  listenTo(registrationName, doc);
  transaction.getReactMountReady().enqueue(putListener, {
    inst: inst,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
}

function inputPostMount() {
  var inst = this;
  ReactDOMInput.postMountWrapper(inst);
}

function textareaPostMount() {
  var inst = this;
  ReactDOMTextarea.postMountWrapper(inst);
}

function optionPostMount() {
  var inst = this;
  ReactDOMOption.postMountWrapper(inst);
}

var setAndValidateContentChildDev = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  setAndValidateContentChildDev = function setAndValidateContentChildDev(content) {
    var hasExistingContent = this._contentDebugID != null;
    var debugID = this._debugID;
    // This ID represents the inlined child that has no backing instance:
    var contentDebugID = -debugID;

    if (content == null) {
      if (hasExistingContent) {
        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
      }
      this._contentDebugID = null;
      return;
    }

    validateDOMNesting(null, String(content), this, this._ancestorInfo);
    this._contentDebugID = contentDebugID;
    if (hasExistingContent) {
      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
    } else {
      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
    }
  };
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trackInputValue() {
  inputValueTracking.track(this);
}

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
  var node = getNode(inst);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

  switch (inst._tag) {
    case 'iframe':
    case 'object':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'video':
    case 'audio':
      inst._wrapperState.listeners = [];
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
        }
      }
      break;
    case 'source':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
      break;
    case 'input':
    case 'select':
    case 'textarea':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
      break;
  }
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

var newlineEatingTags = {
  listing: true,
  pre: true,
  textarea: true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
    validatedTagCache[tag] = true;
  }
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

var globalIdCounter = 1;

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(element) {
  var tag = element.type;
  validateDangerousTag(tag);
  this._currentElement = element;
  this._tag = tag.toLowerCase();
  this._namespaceURI = null;
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._hostNode = null;
  this._hostParent = null;
  this._rootNodeID = 0;
  this._domID = 0;
  this._hostContainerInfo = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._flags = 0;
  if (process.env.NODE_ENV !== 'production') {
    this._ancestorInfo = null;
    setAndValidateContentChildDev.call(this, null);
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {
  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?ReactDOMComponent} the parent component instance
   * @param {?object} info about the host container
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
    this._rootNodeID = globalIdCounter++;
    this._domID = hostContainerInfo._idCounter++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, hostParent);
        props = ReactDOMInput.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, hostParent);
        props = ReactDOMOption.getHostProps(this, props);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, hostParent);
        props = ReactDOMSelect.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, hostParent);
        props = ReactDOMTextarea.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
    }

    assertValidProps(this, props);

    // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.
    var namespaceURI;
    var parentTag;
    if (hostParent != null) {
      namespaceURI = hostParent._namespaceURI;
      parentTag = hostParent._tag;
    } else if (hostContainerInfo._tag) {
      namespaceURI = hostContainerInfo._namespaceURI;
      parentTag = hostContainerInfo._tag;
    }
    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
      namespaceURI = DOMNamespaces.html;
    }
    if (namespaceURI === DOMNamespaces.html) {
      if (this._tag === 'svg') {
        namespaceURI = DOMNamespaces.svg;
      } else if (this._tag === 'math') {
        namespaceURI = DOMNamespaces.mathml;
      }
    }
    this._namespaceURI = namespaceURI;

    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo._tag) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(this._tag, null, this, parentInfo);
      }
      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var el;
      if (namespaceURI === DOMNamespaces.html) {
        if (this._tag === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          var type = this._currentElement.type;
          div.innerHTML = '<' + type + '></' + type + '>';
          el = div.removeChild(div.firstChild);
        } else if (props.is) {
          el = ownerDocument.createElement(this._currentElement.type, props.is);
        } else {
          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          el = ownerDocument.createElement(this._currentElement.type);
        }
      } else {
        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
      }
      ReactDOMComponentTree.precacheNode(this, el);
      this._flags |= Flags.hasCachedChildNodes;
      if (!this._hostParent) {
        DOMPropertyOperations.setAttributeForRoot(el);
      }
      this._updateDOMProperties(null, props, transaction);
      var lazyTree = DOMLazyTree(el);
      this._createInitialChildren(transaction, props, context, lazyTree);
      mountImage = lazyTree;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(inputPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'textarea':
        transaction.getReactMountReady().enqueue(textareaPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'select':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'button':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'option':
        transaction.getReactMountReady().enqueue(optionPostMount, this);
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function _createOpenTagMarkupAndPutListeners(transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = _assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    if (!this._hostParent) {
      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
    }
    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
    return ret;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function _createContentMarkup(transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[_typeof(props.children)] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function _createInitialChildren(transaction, props, context, lazyTree) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[_typeof(props.children)] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      // TODO: Validate that text is allowed as a child of this node
      if (contentToUse != null) {
        // Avoid setting textContent when the text is empty. In IE11 setting
        // textContent on a text area will cause the placeholder to not
        // show within the textarea until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        if (contentToUse !== '') {
          if (process.env.NODE_ENV !== 'production') {
            setAndValidateContentChildDev.call(this, contentToUse);
          }
          DOMLazyTree.queueText(lazyTree, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function receiveComponent(nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function updateComponent(transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'input':
        lastProps = ReactDOMInput.getHostProps(this, lastProps);
        nextProps = ReactDOMInput.getHostProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getHostProps(this, lastProps);
        nextProps = ReactDOMOption.getHostProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
        break;
      case 'textarea':
        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
        break;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    switch (this._tag) {
      case 'input':
        // Update the wrapper around inputs *after* updating props. This has to
        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
        // raise warnings and prevent the new value from being assigned.
        ReactDOMInput.updateWrapper(this);

        // We also check that we haven't missed a value update, such as a
        // Radio group shifting the checked value to another named radio input.
        inputValueTracking.updateValueIfChanged(this);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        break;
      case 'select':
        // <select> value update needs to occur after <option> children
        // reconciliation
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
        break;
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function _updateDOMProperties(lastProps, nextProps, transaction) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, lastProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = _assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        var node = getNode(this);
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertently setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function _updateDOMChildren(lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[_typeof(lastProps.children)] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[_typeof(nextProps.children)] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, nextContent);
        }
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    } else if (nextChildren != null) {
      if (process.env.NODE_ENV !== 'production') {
        setAndValidateContentChildDev.call(this, null);
      }

      this.updateChildren(nextChildren, transaction, context);
    }
  },

  getHostNode: function getHostNode() {
    return getNode(this);
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function unmountComponent(safely) {
    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'input':
      case 'textarea':
        inputValueTracking.stopTracking(this);
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
        break;
    }

    this.unmountChildren(safely);
    ReactDOMComponentTree.uncacheNode(this);
    EventPluginHub.deleteAllListeners(this);
    this._rootNodeID = 0;
    this._domID = 0;
    this._wrapperState = null;

    if (process.env.NODE_ENV !== 'production') {
      setAndValidateContentChildDev.call(this, null);
    }
  },

  getPublicInstance: function getPublicInstance() {
    return getNode(this);
  }
};

_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _assign = __webpack_require__(6);

var DOMLazyTree = __webpack_require__(28);
var ReactDOMComponentTree = __webpack_require__(7);

var ReactDOMEmptyComponent = function ReactDOMEmptyComponent(instantiate) {
  // ReactCompositeComponent uses this:
  this._currentElement = null;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;
  this._hostContainerInfo = null;
  this._domID = 0;
};
_assign(ReactDOMEmptyComponent.prototype, {
  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
    var domID = hostContainerInfo._idCounter++;
    this._domID = domID;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var nodeValue = ' react-empty: ' + this._domID + ' ';
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var node = ownerDocument.createComment(nodeValue);
      ReactDOMComponentTree.precacheNode(this, node);
      return DOMLazyTree(node);
    } else {
      if (transaction.renderToStaticMarkup) {
        // Normally we'd insert a comment node, but since this is a situation
        // where React won't take over (static pages), we can simply return
        // nothing.
        return '';
      }
      return '<!--' + nodeValue + '-->';
    }
  },
  receiveComponent: function receiveComponent() {},
  getHostNode: function getHostNode() {
    return ReactDOMComponentTree.getNodeFromInstance(this);
  },
  unmountComponent: function unmountComponent() {
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMEmptyComponent;

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ReactDOMFeatureFlags = {
  useCreateElement: true,
  useFiber: false
};

module.exports = ReactDOMFeatureFlags;

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var DOMChildrenOperations = __webpack_require__(55);
var ReactDOMComponentTree = __webpack_require__(7);

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {
  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function dangerouslyProcessChildrenUpdates(parentInst, updates) {
    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
    DOMChildrenOperations.processUpdates(node, updates);
  }
};

module.exports = ReactDOMIDOperations;

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(4),
    _assign = __webpack_require__(6);

var DOMPropertyOperations = __webpack_require__(105);
var LinkedValueUtils = __webpack_require__(59);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactUpdates = __webpack_require__(13);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

var didWarnValueLink = false;
var didWarnCheckedLink = false;
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getHostProps: function getHostProps(inst, props) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var hostProps = _assign({
      // Make sure we set .type before any other properties (setting .value
      // before .type means .value is lost in IE11 and below)
      type: undefined,
      // Make sure we set .step before .value (setting .value before .step
      // means .value is rounded on mount, based upon step precision)
      step: undefined,
      // Make sure we set .min & .max before .value (to ensure proper order
      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
      min: undefined,
      max: undefined
    }, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function mountWrapper(inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

      var owner = inst._currentElement._owner;

      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnCheckedLink = true;
      }
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnCheckedDefaultChecked = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnValueDefaultValue = true;
      }
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: props.value != null ? props.value : defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      controlled: isControlled(props)
    };
  },

  updateWrapper: function updateWrapper(inst) {
    var props = inst._currentElement.props;

    if (process.env.NODE_ENV !== 'production') {
      var controlled = isControlled(props);
      var owner = inst._currentElement._owner;

      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnUncontrolledToControlled = true;
      }
      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnControlledToUncontrolled = true;
      }
    }

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      if (value === 0 && node.value === '') {
        node.value = '0';
        // Note: IE9 reports a number inputs as 'text', so check props instead.
      } else if (props.type === 'number') {
        // Simulate `input.valueAsNumber`. IE9 does not support it
        var valueAsNumber = parseFloat(node.value, 10) || 0;

        if (
        // eslint-disable-next-line
        value != valueAsNumber ||
        // eslint-disable-next-line
        value == valueAsNumber && node.value != value) {
          // Cast `value` to a string to ensure the value is set correctly. While
          // browsers typically do this as necessary, jsdom doesn't.
          node.value = '' + value;
        }
      } else if (node.value !== '' + value) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        node.value = '' + value;
      }
    } else {
      if (props.value == null && props.defaultValue != null) {
        // In Chrome, assigning defaultValue to certain input types triggers input validation.
        // For number inputs, the display value loses trailing decimal points. For email inputs,
        // Chrome raises "The specified value <x> is not a valid email address".
        //
        // Here we check to see if the defaultValue has actually changed, avoiding these problems
        // when the user is inputting text
        //
        // https://github.com/facebook/react/issues/7253
        if (node.defaultValue !== '' + props.defaultValue) {
          node.defaultValue = '' + props.defaultValue;
        }
      }
      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;
      }
    }
  },

  postMountWrapper: function postMountWrapper(inst) {
    var props = inst._currentElement.props;

    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

    // Detach value from defaultValue. We won't do anything if we're working on
    // submit or reset inputs as those values & defaultValues are linked. They
    // are not resetable nodes so this operation doesn't matter and actually
    // removes browser-default values (eg "Submit Query") when no value is
    // provided.

    switch (props.type) {
      case 'submit':
      case 'reset':
        break;
      case 'color':
      case 'date':
      case 'datetime':
      case 'datetime-local':
      case 'month':
      case 'time':
      case 'week':
        // This fixes the no-show issue on iOS Safari and Android Chrome:
        // https://github.com/facebook/react/issues/7233
        node.value = '';
        node.value = node.defaultValue;
        break;
      default:
        node.value = node.value;
        break;
    }

    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.
    var name = node.name;
    if (name !== '') {
      node.name = '';
    }
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !node.defaultChecked;
    if (name !== '') {
      node.name = name;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var DOMProperty = __webpack_require__(18);
var ReactComponentTreeHook = __webpack_require__(11);

var warning = __webpack_require__(3);

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

function validateProperty(tagName, name, debugID) {
  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
    return true;
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(debugID, element) {
  var invalidProps = [];

  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (invalidProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
}

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }

  warnInvalidARIAProps(debugID, element);
}

var ReactDOMInvalidARIAHook = {
  onBeforeMountComponent: function onBeforeMountComponent(debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  }
};

module.exports = ReactDOMInvalidARIAHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ReactComponentTreeHook = __webpack_require__(11);

var warning = __webpack_require__(3);

var didWarnValueNull = false;

function handleElement(debugID, element) {
  if (element == null) {
    return;
  }
  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
    return;
  }
  if (element.props != null && element.props.value === null && !didWarnValueNull) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

    didWarnValueNull = true;
  }
}

var ReactDOMNullInputValuePropHook = {
  onBeforeMountComponent: function onBeforeMountComponent(debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMNullInputValuePropHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _assign = __webpack_require__(6);

var React = __webpack_require__(24);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactDOMSelect = __webpack_require__(108);

var warning = __webpack_require__(3);
var didWarnInvalidOptionChildren = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    } else if (!didWarnInvalidOptionChildren) {
      didWarnInvalidOptionChildren = true;
      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function mountWrapper(inst, props, hostParent) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
    }

    // Look up whether this option is 'selected'
    var selectValue = null;
    if (hostParent != null) {
      var selectParent = hostParent;

      if (selectParent._tag === 'optgroup') {
        selectParent = selectParent._hostParent;
      }

      if (selectParent != null && selectParent._tag === 'select') {
        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
      }
    }

    // If the value is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      var value;
      if (props.value != null) {
        value = props.value + '';
      } else {
        value = flattenChildren(props.children);
      }
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  postMountWrapper: function postMountWrapper(inst) {
    // value="" should make a value attribute (#6219)
    var props = inst._currentElement.props;
    if (props.value != null) {
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      node.setAttribute('value', props.value);
    }
  },

  getHostProps: function getHostProps(inst, props) {
    var hostProps = _assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      hostProps.selected = inst._wrapperState.selected;
    }

    var content = flattenChildren(props.children);

    if (content) {
      hostProps.children = content;
    }

    return hostProps;
  }
};

module.exports = ReactDOMOption;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ExecutionEnvironment = __webpack_require__(9);

var getNodeForCharacterOffset = __webpack_require__(315);
var getTextContentAccessor = __webpack_require__(125);

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (offsets.end === undefined) {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ReactDefaultInjection = __webpack_require__(110);
var ReactServerRendering = __webpack_require__(293);
var ReactVersion = __webpack_require__(120);

ReactDefaultInjection.inject();

var ReactDOMServer = {
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  version: ReactVersion
};

module.exports = ReactDOMServer;

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(4),
    _assign = __webpack_require__(6);

var DOMChildrenOperations = __webpack_require__(55);
var DOMLazyTree = __webpack_require__(28);
var ReactDOMComponentTree = __webpack_require__(7);

var escapeTextContentForBrowser = __webpack_require__(43);
var invariant = __webpack_require__(2);
var validateDOMNesting = __webpack_require__(70);

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings between comment nodes so that they
 * can undergo the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function ReactDOMTextComponent(text) {
  // TODO: This is really a ReactText (ReactNode), not a ReactElement
  this._currentElement = text;
  this._stringText = '' + text;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;

  // Properties
  this._domID = 0;
  this._mountIndex = 0;
  this._closingComment = null;
  this._commentNodes = null;
};

_assign(ReactDOMTextComponent.prototype, {
  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo != null) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(null, this._stringText, this, parentInfo);
      }
    }

    var domID = hostContainerInfo._idCounter++;
    var openingValue = ' react-text: ' + domID + ' ';
    var closingValue = ' /react-text ';
    this._domID = domID;
    this._hostParent = hostParent;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var openingComment = ownerDocument.createComment(openingValue);
      var closingComment = ownerDocument.createComment(closingValue);
      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
      if (this._stringText) {
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
      }
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
      ReactDOMComponentTree.precacheNode(this, openingComment);
      this._closingComment = closingComment;
      return lazyTree;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this between comment nodes for the reasons stated
        // above, but since this is a situation where React won't take over
        // (static pages), we can simply return the text as it is.
        return escapedText;
      }

      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function receiveComponent(nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var commentNodes = this.getHostNode();
        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
      }
    }
  },

  getHostNode: function getHostNode() {
    var hostNode = this._commentNodes;
    if (hostNode) {
      return hostNode;
    }
    if (!this._closingComment) {
      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
      var node = openingComment.nextSibling;
      while (true) {
        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
          this._closingComment = node;
          break;
        }
        node = node.nextSibling;
      }
    }
    hostNode = [this._hostNode, this._closingComment];
    this._commentNodes = hostNode;
    return hostNode;
  },

  unmountComponent: function unmountComponent() {
    this._closingComment = null;
    this._commentNodes = null;
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMTextComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(4),
    _assign = __webpack_require__(6);

var LinkedValueUtils = __webpack_require__(59);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactUpdates = __webpack_require__(13);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

var didWarnValueLink = false;
var didWarnValDefaultVal = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getHostProps: function getHostProps(inst, props) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
    // The value can be a boolean or object so that's why it's forced to be a string.
    var hostProps = _assign({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: '' + inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function mountWrapper(inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
        didWarnValDefaultVal = true;
      }
    }

    var value = LinkedValueUtils.getValue(props);
    var initialValue = value;

    // Only bother fetching default value if we're going to use it
    if (value == null) {
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
        }
        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
        if (Array.isArray(children)) {
          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
          children = children[0];
        }

        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      initialValue = defaultValue;
    }

    inst._wrapperState = {
      initialValue: '' + initialValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function updateWrapper(inst) {
    var props = inst._currentElement.props;

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
      if (props.defaultValue == null) {
        node.defaultValue = newValue;
      }
    }
    if (props.defaultValue != null) {
      node.defaultValue = props.defaultValue;
    }
  },

  postMountWrapper: function postMountWrapper(inst) {
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var textContent = node.textContent;

    // Only set node.value if textContent is equal to the expected
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
    // will populate textContent as well.
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
    if (textContent === inst._wrapperState.initialValue) {
      node.value = textContent;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;
    }
    instA = instA._hostParent;
    instB = instB._hostParent;
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */
function isAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

  while (instB) {
    if (instB === instA) {
      return true;
    }
    instB = instB._hostParent;
  }
  return false;
}

/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

  return inst._hostParent;
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;
  }
  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;
  }
  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], 'captured', argTo);
  }
}

module.exports = {
  isAncestor: isAncestor,
  getLowestCommonAncestor: getLowestCommonAncestor,
  getParentInstance: getParentInstance,
  traverseTwoPhase: traverseTwoPhase,
  traverseEnterLeave: traverseEnterLeave
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var DOMProperty = __webpack_require__(18);
var EventPluginRegistry = __webpack_require__(39);
var ReactComponentTreeHook = __webpack_require__(11);

var warning = __webpack_require__(3);

if (process.env.NODE_ENV !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true,

    autoFocus: true,
    defaultValue: true,
    valueLink: true,
    defaultChecked: true,
    checkedLink: true,
    innerHTML: true,
    suppressContentEditableWarning: true,
    onFocusIn: true,
    onFocusOut: true
  };
  var warnedProperties = {};

  var validateProperty = function validateProperty(tagName, name, debugID) {
    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
      return true;
    }
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return true;
    }
    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
      return true;
    }
    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

    if (standardName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else if (registrationName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else {
      // We were unable to guess which prop the user intended.
      // It is likely that the user was just blindly spreading/forwarding props
      // Components should be careful to only render valid props/attributes.
      // Warning will be invoked in warnUnknownProperties to allow grouping.
      return false;
    }
  };
}

var warnUnknownProperties = function warnUnknownProperties(debugID, element) {
  var unknownProps = [];
  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (unknownProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (unknownProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
};

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }
  warnUnknownProperties(debugID, element);
}

var ReactDOMUnknownPropertyHook = {
  onBeforeMountComponent: function onBeforeMountComponent(debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMUnknownPropertyHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2016-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var ReactInvalidSetStateWarningHook = __webpack_require__(286);
var ReactHostOperationHistoryHook = __webpack_require__(284);
var ReactComponentTreeHook = __webpack_require__(11);
var ExecutionEnvironment = __webpack_require__(9);

var performanceNow = __webpack_require__(204);
var warning = __webpack_require__(3);

var hooks = [];
var didHookThrowForEvent = {};

function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
  try {
    fn.call(context, arg1, arg2, arg3, arg4, arg5);
  } catch (e) {
    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
    didHookThrowForEvent[event] = true;
  }
}

function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    var fn = hook[event];
    if (fn) {
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
  }
}

var _isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = [];
var currentFlushStartTime = 0;
var currentTimerDebugID = null;
var currentTimerStartTime = 0;
var currentTimerNestedFlushDuration = 0;
var currentTimerType = null;

var lifeCycleTimerHasWarned = false;

function clearHistory() {
  ReactComponentTreeHook.purgeUnmountedComponents();
  ReactHostOperationHistoryHook.clearHistory();
}

function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var parentID = ReactComponentTreeHook.getParentID(id);
    tree[id] = {
      displayName: ReactComponentTreeHook.getDisplayName(id),
      text: ReactComponentTreeHook.getText(id),
      updateCount: ReactComponentTreeHook.getUpdateCount(id),
      childIDs: ReactComponentTreeHook.getChildIDs(id),
      // Text nodes don't have owners but this is close enough.
      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
      parentID: parentID
    };
    return tree;
  }, {});
}

function resetMeasurements() {
  var previousStartTime = currentFlushStartTime;
  var previousMeasurements = currentFlushMeasurements;
  var previousOperations = ReactHostOperationHistoryHook.getHistory();

  if (currentFlushNesting === 0) {
    currentFlushStartTime = 0;
    currentFlushMeasurements = [];
    clearHistory();
    return;
  }

  if (previousMeasurements.length || previousOperations.length) {
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
    flushHistory.push({
      duration: performanceNow() - previousStartTime,
      measurements: previousMeasurements || [],
      operations: previousOperations || [],
      treeSnapshot: getTreeSnapshot(registeredIDs)
    });
  }

  clearHistory();
  currentFlushStartTime = performanceNow();
  currentFlushMeasurements = [];
}

function checkDebugID(debugID) {
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (allowRoot && debugID === 0) {
    return;
  }
  if (!debugID) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
  }
}

function beginLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

function endLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  if (_isProfiling) {
    currentFlushMeasurements.push({
      timerType: timerType,
      instanceID: debugID,
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    });
  }
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function pauseCurrentLifeCycleTimer() {
  var currentTimer = {
    startTime: currentTimerStartTime,
    nestedFlushStartTime: performanceNow(),
    debugID: currentTimerDebugID,
    timerType: currentTimerType
  };
  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function resumeCurrentLifeCycleTimer() {
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
      startTime = _lifeCycleTimerStack$.startTime,
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
      debugID = _lifeCycleTimerStack$.debugID,
      timerType = _lifeCycleTimerStack$.timerType;

  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

var lastMarkTimeStamp = 0;
var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

function shouldMark(debugID) {
  if (!_isProfiling || !canUsePerformanceMeasure) {
    return false;
  }
  var element = ReactComponentTreeHook.getElement(debugID);
  if (element == null || (typeof element === 'undefined' ? 'undefined' : _typeof(element)) !== 'object') {
    return false;
  }
  var isHostElement = typeof element.type === 'string';
  if (isHostElement) {
    return false;
  }
  return true;
}

function markBegin(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  lastMarkTimeStamp = performanceNow();
  performance.mark(markName);
}

function markEnd(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

  // Chrome has an issue of dropping markers recorded too fast:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
  // To work around this, we will not report very small measurements.
  // I determined the magic number by tweaking it back and forth.
  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
  // When the bug is fixed, we can `measure()` unconditionally if we want to.
  var timeStamp = performanceNow();
  if (timeStamp - lastMarkTimeStamp > 0.1) {
    var measurementName = displayName + ' [' + markType + ']';
    performance.measure(measurementName, markName);
  }

  performance.clearMarks(markName);
  if (measurementName) {
    performance.clearMeasures(measurementName);
  }
}

var ReactDebugTool = {
  addHook: function addHook(hook) {
    hooks.push(hook);
  },
  removeHook: function removeHook(hook) {
    for (var i = 0; i < hooks.length; i++) {
      if (hooks[i] === hook) {
        hooks.splice(i, 1);
        i--;
      }
    }
  },
  isProfiling: function isProfiling() {
    return _isProfiling;
  },
  beginProfiling: function beginProfiling() {
    if (_isProfiling) {
      return;
    }

    _isProfiling = true;
    flushHistory.length = 0;
    resetMeasurements();
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
  },
  endProfiling: function endProfiling() {
    if (!_isProfiling) {
      return;
    }

    _isProfiling = false;
    resetMeasurements();
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
  },
  getFlushHistory: function getFlushHistory() {
    return flushHistory;
  },
  onBeginFlush: function onBeginFlush() {
    currentFlushNesting++;
    resetMeasurements();
    pauseCurrentLifeCycleTimer();
    emitEvent('onBeginFlush');
  },
  onEndFlush: function onEndFlush() {
    resetMeasurements();
    currentFlushNesting--;
    resumeCurrentLifeCycleTimer();
    emitEvent('onEndFlush');
  },
  onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    markBegin(debugID, timerType);
    beginLifeCycleTimer(debugID, timerType);
  },
  onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
    checkDebugID(debugID);
    endLifeCycleTimer(debugID, timerType);
    markEnd(debugID, timerType);
    emitEvent('onEndLifeCycleTimer', debugID, timerType);
  },
  onBeginProcessingChildContext: function onBeginProcessingChildContext() {
    emitEvent('onBeginProcessingChildContext');
  },
  onEndProcessingChildContext: function onEndProcessingChildContext() {
    emitEvent('onEndProcessingChildContext');
  },
  onHostOperation: function onHostOperation(operation) {
    checkDebugID(operation.instanceID);
    emitEvent('onHostOperation', operation);
  },
  onSetState: function onSetState() {
    emitEvent('onSetState');
  },
  onSetChildren: function onSetChildren(debugID, childDebugIDs) {
    checkDebugID(debugID);
    childDebugIDs.forEach(checkDebugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);
  },
  onBeforeMountComponent: function onBeforeMountComponent(debugID, element, parentDebugID) {
    checkDebugID(debugID);
    checkDebugID(parentDebugID, true);
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
    markBegin(debugID, 'mount');
  },
  onMountComponent: function onMountComponent(debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'mount');
    emitEvent('onMountComponent', debugID);
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);
    markBegin(debugID, 'update');
  },
  onUpdateComponent: function onUpdateComponent(debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'update');
    emitEvent('onUpdateComponent', debugID);
  },
  onBeforeUnmountComponent: function onBeforeUnmountComponent(debugID) {
    checkDebugID(debugID);
    emitEvent('onBeforeUnmountComponent', debugID);
    markBegin(debugID, 'unmount');
  },
  onUnmountComponent: function onUnmountComponent(debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'unmount');
    emitEvent('onUnmountComponent', debugID);
  },
  onTestEvent: function onTestEvent() {
    emitEvent('onTestEvent');
  }
};

// TODO remove these when RN/www gets updated
ReactDebugTool.addDevtool = ReactDebugTool.addHook;
ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
ReactDebugTool.addHook(ReactComponentTreeHook);
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
if (/[?&]react_perf\b/.test(url)) {
  ReactDebugTool.beginProfiling();
}

module.exports = ReactDebugTool;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var EventPluginHub = __webpack_require__(32);

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {
  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   */
  handleTopLevel: function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _assign = __webpack_require__(6);

var EventListener = __webpack_require__(87);
var ExecutionEnvironment = __webpack_require__(9);
var PooledClass = __webpack_require__(22);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactUpdates = __webpack_require__(13);

var getEventTarget = __webpack_require__(66);
var getUnboundedScrollPosition = __webpack_require__(197);

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findParent(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst._hostParent) {
    inst = inst._hostParent;
  }
  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
  var container = rootNode.parentNode;
  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
_assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function destructor() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    bookKeeping.ancestors.push(ancestor);
    ancestor = ancestor && findParent(ancestor);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function setHandleTopLevel(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function setEnabled(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function isEnabled() {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function trapBubbledEvent(topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function trapCapturedEvent(topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function monitorScrollValue(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function dispatchEvent(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var history = [];

var ReactHostOperationHistoryHook = {
  onHostOperation: function onHostOperation(operation) {
    history.push(operation);
  },
  clearHistory: function clearHistory() {
    if (ReactHostOperationHistoryHook._preventClearing) {
      // Should only be used for tests.
      return;
    }

    history = [];
  },
  getHistory: function getHistory() {
    return history;
  }
};

module.exports = ReactHostOperationHistoryHook;

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var DOMProperty = __webpack_require__(18);
var EventPluginHub = __webpack_require__(32);
var EventPluginUtils = __webpack_require__(57);
var ReactComponentEnvironment = __webpack_require__(60);
var ReactEmptyComponent = __webpack_require__(111);
var ReactBrowserEventEmitter = __webpack_require__(40);
var ReactHostComponent = __webpack_require__(113);
var ReactUpdates = __webpack_require__(13);

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventPluginUtils: EventPluginUtils.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  HostComponent: ReactHostComponent.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2016-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var warning = __webpack_require__(3);

if (process.env.NODE_ENV !== 'production') {
  var processingChildContext = false;

  var warnInvalidSetState = function warnInvalidSetState() {
    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
  };
}

var ReactInvalidSetStateWarningHook = {
  onBeginProcessingChildContext: function onBeginProcessingChildContext() {
    processingChildContext = true;
  },
  onEndProcessingChildContext: function onEndProcessingChildContext() {
    processingChildContext = false;
  },
  onSetState: function onSetState() {
    warnInvalidSetState();
  }
};

module.exports = ReactInvalidSetStateWarningHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(4);

var ReactComponentEnvironment = __webpack_require__(60);
var ReactInstanceMap = __webpack_require__(34);
var ReactInstrumentation = __webpack_require__(10);

var ReactCurrentOwner = __webpack_require__(15);
var ReactReconciler = __webpack_require__(23);
var ReactChildReconciler = __webpack_require__(262);

var emptyFunction = __webpack_require__(14);
var flattenChildren = __webpack_require__(312);
var invariant = __webpack_require__(2);

/**
 * Make an update for markup to be rendered and inserted at a supplied index.
 *
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function makeInsertMarkup(markup, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'INSERT_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for moving an existing element to another index.
 *
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function makeMove(child, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'MOVE_EXISTING',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: ReactReconciler.getHostNode(child),
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for removing an element at an index.
 *
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function makeRemove(child, node) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'REMOVE_NODE',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: node,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the markup of a node.
 *
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function makeSetMarkup(markup) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'SET_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the text content.
 *
 * @param {string} textContent Text content to set.
 * @private
 */
function makeTextContent(textContent) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'TEXT_CONTENT',
    content: textContent,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Push an update, if any, onto the queue. Creates a new queue if none is
 * passed and always returns the queue. Mutative.
 */
function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);
  }
  return queue;
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  var getDebugID = function getDebugID(inst) {
    if (!inst._debugID) {
      // Check for ART-like instances. TODO: This is silly/gross.
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;
      }
    }
    return inst._debugID;
  };
  setChildrenForInstrumentation = function setChildrenForInstrumentation(children) {
    var debugID = getDebugID(this);
    // TODO: React Native empty components are also multichild.
    // This means they still get into this method but don't have _debugID.
    if (debugID !== 0) {
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    }
  };
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {
  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {
    _reconcilerInstantiateChildren: function _reconcilerInstantiateChildren(nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        var selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function _reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
      var nextChildren;
      var selfDebugID = 0;
      if (process.env.NODE_ENV !== 'production') {
        selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
          return nextChildren;
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
      return nextChildren;
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function mountChildren(nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;

      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          var selfDebugID = 0;
          if (process.env.NODE_ENV !== 'production') {
            selfDebugID = getDebugID(this);
          }
          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, children);
      }

      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function updateTextContent(nextContent) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      // Set new text content.
      var updates = [makeTextContent(nextContent)];
      processQueue(this, updates);
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function updateMarkup(nextMarkup) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      var updates = [makeSetMarkup(nextMarkup)];
      processQueue(this, updates);
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function updateChildren(nextNestedChildrenElements, transaction, context) {
      // Hook used by React ART
      this._updateChildren(nextNestedChildrenElements, transaction, context);
    },

    /**
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function _updateChildren(nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var removedNodes = {};
      var mountImages = [];
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
      if (!nextChildren && !prevChildren) {
        return;
      }
      var updates = null;
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var nextIndex = 0;
      var lastIndex = 0;
      // `nextMountIndex` will increment for each newly mounted child.
      var nextMountIndex = 0;
      var lastPlacedNode = null;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            // The `removedNodes` loop below will actually remove the child.
          }
          // The child must be instantiated before it's mounted.
          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
          nextMountIndex++;
        }
        nextIndex++;
        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
      }
      // Remove children that are no longer present.
      for (name in removedNodes) {
        if (removedNodes.hasOwnProperty(name)) {
          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
        }
      }
      if (updates) {
        processQueue(this, updates);
      }
      this._renderedChildren = nextChildren;

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, nextChildren);
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted. It does not actually perform any
     * backend operations.
     *
     * @internal
     */
    unmountChildren: function unmountChildren(safely) {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren, safely);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function moveChild(child, afterNode, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        return makeMove(child, afterNode, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function createChild(child, afterNode, mountImage) {
      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function removeChild(child, node) {
      return makeRemove(child, node);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildAtIndex: function _mountChildAtIndex(child, mountImage, afterNode, index, transaction, context) {
      child._mountIndex = index;
      return this.createChild(child, afterNode, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function _unmountChild(child, node) {
      var update = this.removeChild(child, node);
      child._mountIndex = null;
      return update;
    }
  }
};

module.exports = ReactMultiChild;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

var invariant = __webpack_require__(2);

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid owner.
 * @final
 */
function isValidOwner(object) {
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
}

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {
  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function addComponentAsRefTo(component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function removeComponentAsRefFrom(component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
    var ownerPublicInstance = owner.getPublicInstance();
    // Check that `component`'s owner is still alive and that `component` is still the current ref
    // because we do not want to detach the ref if another component stole it.
    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }
};

module.exports = ReactOwner;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _assign = __webpack_require__(6);

var CallbackQueue = __webpack_require__(104);
var PooledClass = __webpack_require__(22);
var ReactBrowserEventEmitter = __webpack_require__(40);
var ReactInputSelection = __webpack_require__(114);
var ReactInstrumentation = __webpack_require__(10);
var Transaction = __webpack_require__(42);
var ReactUpdateQueue = __webpack_require__(62);

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function initialize() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function close(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function initialize() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function close() {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(useCreateElement) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactDOMTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function getTransactionWrappers() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function getReactMountReady() {
    return this.reactMountReady;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function getUpdateQueue() {
    return ReactUpdateQueue;
  },

  /**
   * Save current transaction state -- if the return value from this method is
   * passed to `rollback`, the transaction will be reset to that state.
   */
  checkpoint: function checkpoint() {
    // reactMountReady is the our only stateful wrapper
    return this.reactMountReady.checkpoint();
  },

  rollback: function rollback(checkpoint) {
    this.reactMountReady.rollback(checkpoint);
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function destructor() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var ReactOwner = __webpack_require__(288);

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || (typeof element === 'undefined' ? 'undefined' : _typeof(element)) !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevRef = null;
  var prevOwner = null;
  if (prevElement !== null && (typeof prevElement === 'undefined' ? 'undefined' : _typeof(prevElement)) === 'object') {
    prevRef = prevElement.ref;
    prevOwner = prevElement._owner;
  }

  var nextRef = null;
  var nextOwner = null;
  if (nextElement !== null && (typeof nextElement === 'undefined' ? 'undefined' : _typeof(nextElement)) === 'object') {
    nextRef = nextElement.ref;
    nextOwner = nextElement._owner;
  }

  return prevRef !== nextRef ||
  // If owner changes but we have an unchanged function ref, don't update refs
  typeof nextRef === 'string' && nextOwner !== prevOwner;
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || (typeof element === 'undefined' ? 'undefined' : _typeof(element)) !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ReactServerBatchingStrategy = {
  isBatchingUpdates: false,
  batchedUpdates: function batchedUpdates(callback) {
    // Don't do anything here. During the server rendering we don't want to
    // schedule any updates. We will simply ignore them.
  }
};

module.exports = ReactServerBatchingStrategy;

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */


var _prodInvariant = __webpack_require__(4);

var React = __webpack_require__(24);
var ReactDOMContainerInfo = __webpack_require__(107);
var ReactDefaultBatchingStrategy = __webpack_require__(109);
var ReactInstrumentation = __webpack_require__(10);
var ReactMarkupChecksum = __webpack_require__(115);
var ReactReconciler = __webpack_require__(23);
var ReactServerBatchingStrategy = __webpack_require__(292);
var ReactServerRenderingTransaction = __webpack_require__(119);
var ReactUpdates = __webpack_require__(13);

var emptyObject = __webpack_require__(31);
var instantiateReactComponent = __webpack_require__(67);
var invariant = __webpack_require__(2);

var pendingTransactions = 0;

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToStringImpl(element, makeStaticMarkup) {
  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    transaction = ReactServerRenderingTransaction.getPooled(makeStaticMarkup);

    pendingTransactions++;

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, true);
      var markup = ReactReconciler.mountComponent(componentInstance, transaction, null, ReactDOMContainerInfo(), emptyObject, 0 /* parentDebugID */
      );
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onUnmountComponent(componentInstance._debugID);
      }
      if (!makeStaticMarkup) {
        markup = ReactMarkupChecksum.addChecksumToMarkup(markup);
      }
      return markup;
    }, null);
  } finally {
    pendingTransactions--;
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    if (!pendingTransactions) {
      ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
    }
  }
}

/**
 * Render a ReactElement to its initial HTML. This should only be used on the
 * server.
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdomserver.rendertostring
 */
function renderToString(element) {
  !React.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : _prodInvariant('46') : void 0;
  return renderToStringImpl(element, false);
}

/**
 * Similar to renderToString, except this doesn't create extra DOM attributes
 * such as data-react-id that React uses internally.
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdomserver.rendertostaticmarkup
 */
function renderToStaticMarkup(element) {
  !React.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : _prodInvariant('47') : void 0;
  return renderToStringImpl(element, true);
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var ReactUpdateQueue = __webpack_require__(62);

var warning = __webpack_require__(3);

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the update queue used for server rendering.
 * It delegates to ReactUpdateQueue while server rendering is in progress and
 * switches to ReactNoopUpdateQueue after the transaction has completed.
 * @class ReactServerUpdateQueue
 * @param {Transaction} transaction
 */

var ReactServerUpdateQueue = function () {
  function ReactServerUpdateQueue(transaction) {
    _classCallCheck(this, ReactServerUpdateQueue);

    this.transaction = transaction;
  }

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */

  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
    return false;
  };

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */

  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
    }
  };

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */

  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
    } else {
      warnNoop(publicInstance, 'forceUpdate');
    }
  };

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} completeState Next state.
   * @internal
   */

  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
    } else {
      warnNoop(publicInstance, 'replaceState');
    }
  };

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} partialState Next partial state to be merged with state.
   * @internal
   */

  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
    } else {
      warnNoop(publicInstance, 'setState');
    }
  };

  return ReactServerUpdateQueue;
}();

module.exports = ReactServerUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

// We use attributes for everything SVG so let's avoid some duplication and run
// code instead.
// The following are all specified in the HTML config already so we exclude here.
// - class (as className)
// - color
// - height
// - id
// - lang
// - max
// - media
// - method
// - min
// - name
// - style
// - target
// - type
// - width
var ATTRS = {
  accentHeight: 'accent-height',
  accumulate: 0,
  additive: 0,
  alignmentBaseline: 'alignment-baseline',
  allowReorder: 'allowReorder',
  alphabetic: 0,
  amplitude: 0,
  arabicForm: 'arabic-form',
  ascent: 0,
  attributeName: 'attributeName',
  attributeType: 'attributeType',
  autoReverse: 'autoReverse',
  azimuth: 0,
  baseFrequency: 'baseFrequency',
  baseProfile: 'baseProfile',
  baselineShift: 'baseline-shift',
  bbox: 0,
  begin: 0,
  bias: 0,
  by: 0,
  calcMode: 'calcMode',
  capHeight: 'cap-height',
  clip: 0,
  clipPath: 'clip-path',
  clipRule: 'clip-rule',
  clipPathUnits: 'clipPathUnits',
  colorInterpolation: 'color-interpolation',
  colorInterpolationFilters: 'color-interpolation-filters',
  colorProfile: 'color-profile',
  colorRendering: 'color-rendering',
  contentScriptType: 'contentScriptType',
  contentStyleType: 'contentStyleType',
  cursor: 0,
  cx: 0,
  cy: 0,
  d: 0,
  decelerate: 0,
  descent: 0,
  diffuseConstant: 'diffuseConstant',
  direction: 0,
  display: 0,
  divisor: 0,
  dominantBaseline: 'dominant-baseline',
  dur: 0,
  dx: 0,
  dy: 0,
  edgeMode: 'edgeMode',
  elevation: 0,
  enableBackground: 'enable-background',
  end: 0,
  exponent: 0,
  externalResourcesRequired: 'externalResourcesRequired',
  fill: 0,
  fillOpacity: 'fill-opacity',
  fillRule: 'fill-rule',
  filter: 0,
  filterRes: 'filterRes',
  filterUnits: 'filterUnits',
  floodColor: 'flood-color',
  floodOpacity: 'flood-opacity',
  focusable: 0,
  fontFamily: 'font-family',
  fontSize: 'font-size',
  fontSizeAdjust: 'font-size-adjust',
  fontStretch: 'font-stretch',
  fontStyle: 'font-style',
  fontVariant: 'font-variant',
  fontWeight: 'font-weight',
  format: 0,
  from: 0,
  fx: 0,
  fy: 0,
  g1: 0,
  g2: 0,
  glyphName: 'glyph-name',
  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
  glyphOrientationVertical: 'glyph-orientation-vertical',
  glyphRef: 'glyphRef',
  gradientTransform: 'gradientTransform',
  gradientUnits: 'gradientUnits',
  hanging: 0,
  horizAdvX: 'horiz-adv-x',
  horizOriginX: 'horiz-origin-x',
  ideographic: 0,
  imageRendering: 'image-rendering',
  'in': 0,
  in2: 0,
  intercept: 0,
  k: 0,
  k1: 0,
  k2: 0,
  k3: 0,
  k4: 0,
  kernelMatrix: 'kernelMatrix',
  kernelUnitLength: 'kernelUnitLength',
  kerning: 0,
  keyPoints: 'keyPoints',
  keySplines: 'keySplines',
  keyTimes: 'keyTimes',
  lengthAdjust: 'lengthAdjust',
  letterSpacing: 'letter-spacing',
  lightingColor: 'lighting-color',
  limitingConeAngle: 'limitingConeAngle',
  local: 0,
  markerEnd: 'marker-end',
  markerMid: 'marker-mid',
  markerStart: 'marker-start',
  markerHeight: 'markerHeight',
  markerUnits: 'markerUnits',
  markerWidth: 'markerWidth',
  mask: 0,
  maskContentUnits: 'maskContentUnits',
  maskUnits: 'maskUnits',
  mathematical: 0,
  mode: 0,
  numOctaves: 'numOctaves',
  offset: 0,
  opacity: 0,
  operator: 0,
  order: 0,
  orient: 0,
  orientation: 0,
  origin: 0,
  overflow: 0,
  overlinePosition: 'overline-position',
  overlineThickness: 'overline-thickness',
  paintOrder: 'paint-order',
  panose1: 'panose-1',
  pathLength: 'pathLength',
  patternContentUnits: 'patternContentUnits',
  patternTransform: 'patternTransform',
  patternUnits: 'patternUnits',
  pointerEvents: 'pointer-events',
  points: 0,
  pointsAtX: 'pointsAtX',
  pointsAtY: 'pointsAtY',
  pointsAtZ: 'pointsAtZ',
  preserveAlpha: 'preserveAlpha',
  preserveAspectRatio: 'preserveAspectRatio',
  primitiveUnits: 'primitiveUnits',
  r: 0,
  radius: 0,
  refX: 'refX',
  refY: 'refY',
  renderingIntent: 'rendering-intent',
  repeatCount: 'repeatCount',
  repeatDur: 'repeatDur',
  requiredExtensions: 'requiredExtensions',
  requiredFeatures: 'requiredFeatures',
  restart: 0,
  result: 0,
  rotate: 0,
  rx: 0,
  ry: 0,
  scale: 0,
  seed: 0,
  shapeRendering: 'shape-rendering',
  slope: 0,
  spacing: 0,
  specularConstant: 'specularConstant',
  specularExponent: 'specularExponent',
  speed: 0,
  spreadMethod: 'spreadMethod',
  startOffset: 'startOffset',
  stdDeviation: 'stdDeviation',
  stemh: 0,
  stemv: 0,
  stitchTiles: 'stitchTiles',
  stopColor: 'stop-color',
  stopOpacity: 'stop-opacity',
  strikethroughPosition: 'strikethrough-position',
  strikethroughThickness: 'strikethrough-thickness',
  string: 0,
  stroke: 0,
  strokeDasharray: 'stroke-dasharray',
  strokeDashoffset: 'stroke-dashoffset',
  strokeLinecap: 'stroke-linecap',
  strokeLinejoin: 'stroke-linejoin',
  strokeMiterlimit: 'stroke-miterlimit',
  strokeOpacity: 'stroke-opacity',
  strokeWidth: 'stroke-width',
  surfaceScale: 'surfaceScale',
  systemLanguage: 'systemLanguage',
  tableValues: 'tableValues',
  targetX: 'targetX',
  targetY: 'targetY',
  textAnchor: 'text-anchor',
  textDecoration: 'text-decoration',
  textRendering: 'text-rendering',
  textLength: 'textLength',
  to: 0,
  transform: 0,
  u1: 0,
  u2: 0,
  underlinePosition: 'underline-position',
  underlineThickness: 'underline-thickness',
  unicode: 0,
  unicodeBidi: 'unicode-bidi',
  unicodeRange: 'unicode-range',
  unitsPerEm: 'units-per-em',
  vAlphabetic: 'v-alphabetic',
  vHanging: 'v-hanging',
  vIdeographic: 'v-ideographic',
  vMathematical: 'v-mathematical',
  values: 0,
  vectorEffect: 'vector-effect',
  version: 0,
  vertAdvY: 'vert-adv-y',
  vertOriginX: 'vert-origin-x',
  vertOriginY: 'vert-origin-y',
  viewBox: 'viewBox',
  viewTarget: 'viewTarget',
  visibility: 0,
  widths: 0,
  wordSpacing: 'word-spacing',
  writingMode: 'writing-mode',
  x: 0,
  xHeight: 'x-height',
  x1: 0,
  x2: 0,
  xChannelSelector: 'xChannelSelector',
  xlinkActuate: 'xlink:actuate',
  xlinkArcrole: 'xlink:arcrole',
  xlinkHref: 'xlink:href',
  xlinkRole: 'xlink:role',
  xlinkShow: 'xlink:show',
  xlinkTitle: 'xlink:title',
  xlinkType: 'xlink:type',
  xmlBase: 'xml:base',
  xmlns: 0,
  xmlnsXlink: 'xmlns:xlink',
  xmlLang: 'xml:lang',
  xmlSpace: 'xml:space',
  y: 0,
  y1: 0,
  y2: 0,
  yChannelSelector: 'yChannelSelector',
  z: 0,
  zoomAndPan: 'zoomAndPan'
};

var SVGDOMPropertyConfig = {
  Properties: {},
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {}
};

Object.keys(ATTRS).forEach(function (key) {
  SVGDOMPropertyConfig.Properties[key] = 0;
  if (ATTRS[key]) {
    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
  }
});

module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var EventPropagators = __webpack_require__(33);
var ExecutionEnvironment = __webpack_require__(9);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactInputSelection = __webpack_require__(114);
var SyntheticEvent = __webpack_require__(17);

var getActiveElement = __webpack_require__(89);
var isTextInputElement = __webpack_require__(127);
var shallowEqual = __webpack_require__(48);

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement = null;
var activeElementInst = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events. See #3639.
var hasListener = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement = targetNode;
          activeElementInst = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement = null;
        activeElementInst = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function didPutListener(inst, registrationName, listener) {
    if (registrationName === 'onSelect') {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var _prodInvariant = __webpack_require__(4);

var EventListener = __webpack_require__(87);
var EventPropagators = __webpack_require__(33);
var ReactDOMComponentTree = __webpack_require__(7);
var SyntheticAnimationEvent = __webpack_require__(298);
var SyntheticClipboardEvent = __webpack_require__(299);
var SyntheticEvent = __webpack_require__(17);
var SyntheticFocusEvent = __webpack_require__(302);
var SyntheticKeyboardEvent = __webpack_require__(304);
var SyntheticMouseEvent = __webpack_require__(41);
var SyntheticDragEvent = __webpack_require__(301);
var SyntheticTouchEvent = __webpack_require__(305);
var SyntheticTransitionEvent = __webpack_require__(306);
var SyntheticUIEvent = __webpack_require__(35);
var SyntheticWheelEvent = __webpack_require__(307);

var emptyFunction = __webpack_require__(14);
var getEventCharCode = __webpack_require__(64);
var invariant = __webpack_require__(2);

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

var onClickListeners = {};

function getDictionaryKey(inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

var SimpleEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topAbort':
      case 'topCanPlay':
      case 'topCanPlayThrough':
      case 'topDurationChange':
      case 'topEmptied':
      case 'topEncrypted':
      case 'topEnded':
      case 'topError':
      case 'topInput':
      case 'topInvalid':
      case 'topLoad':
      case 'topLoadedData':
      case 'topLoadedMetadata':
      case 'topLoadStart':
      case 'topPause':
      case 'topPlay':
      case 'topPlaying':
      case 'topProgress':
      case 'topRateChange':
      case 'topReset':
      case 'topSeeked':
      case 'topSeeking':
      case 'topStalled':
      case 'topSubmit':
      case 'topSuspend':
      case 'topTimeUpdate':
      case 'topVolumeChange':
      case 'topWaiting':
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function didPutListener(inst, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      if (!onClickListeners[key]) {
        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function willDeleteListener(inst, registrationName) {
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      onClickListeners[key].remove();
      delete onClickListeners[key];
    }
  }
};

module.exports = SimpleEventPlugin;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var SyntheticEvent = __webpack_require__(17);

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

module.exports = SyntheticAnimationEvent;

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var SyntheticEvent = __webpack_require__(17);

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function clipboardData(event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var SyntheticEvent = __webpack_require__(17);

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var SyntheticMouseEvent = __webpack_require__(41);

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var SyntheticUIEvent = __webpack_require__(35);

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var SyntheticEvent = __webpack_require__(17);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var SyntheticUIEvent = __webpack_require__(35);

var getEventCharCode = __webpack_require__(64);
var getEventKey = __webpack_require__(313);
var getEventModifierState = __webpack_require__(65);

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function charCode(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function keyCode(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function which(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var SyntheticUIEvent = __webpack_require__(35);

var getEventModifierState = __webpack_require__(65);

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var SyntheticEvent = __webpack_require__(17);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

module.exports = SyntheticTransitionEvent;

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var SyntheticMouseEvent = __webpack_require__(41);

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function deltaX(event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function deltaY(event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    var n = Math.min(i + 4096, m);
    for (; i < n; i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(4);

var ReactPropTypeLocationNames = __webpack_require__(289);
var ReactPropTypesSecret = __webpack_require__(118);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(11);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error === 'undefined' ? 'undefined' : _typeof(error)) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(11);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var CSSProperty = __webpack_require__(103);
var warning = __webpack_require__(3);

var isUnitlessNumber = CSSProperty.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isCustomProperty || isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if (process.env.NODE_ENV !== 'production') {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};
        }
        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;
          }
        }
        if (!warned) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }
      }
    }
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(4);

var ReactCurrentOwner = __webpack_require__(15);
var ReactDOMComponentTree = __webpack_require__(7);
var ReactInstanceMap = __webpack_require__(34);

var getHostComponentFromComposite = __webpack_require__(124);
var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

/**
 * Returns the DOM node rendered by this element.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (process.env.NODE_ENV !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }

  var inst = ReactInstanceMap.get(componentOrElement);
  if (inst) {
    inst = getHostComponentFromComposite(inst);
    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
  }

  if (typeof componentOrElement.render === 'function') {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
  } else {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
  }
}

module.exports = findDOMNode;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var KeyEscapeUtils = __webpack_require__(58);
var traverseAllChildren = __webpack_require__(129);
var warning = __webpack_require__(3);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(11);
}

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 * @param {number=} selfDebugID Optional debugID of the current internal instance.
 */
function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  // We found a component instance.
  if (traverseContext && (typeof traverseContext === 'undefined' ? 'undefined' : _typeof(traverseContext)) === 'object') {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if (process.env.NODE_ENV !== 'production') {
      if (!ReactComponentTreeHook) {
        ReactComponentTreeHook = __webpack_require__(11);
      }
      if (!keyUnique) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
      }
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;
  }
  var result = {};

  if (process.env.NODE_ENV !== 'production') {
    traverseAllChildren(children, function (traverseContext, child, name) {
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result);
  } else {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
  }
  return result;
}

module.exports = flattenChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var getEventCharCode = __webpack_require__(64);

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1',
  113: 'F2',
  114: 'F3',
  115: 'F4',
  116: 'F5',
  117: 'F6',
  118: 'F7',
  119: 'F8',
  120: 'F9',
  121: 'F10',
  122: 'F11',
  123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ExecutionEnvironment = __webpack_require__(9);

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

module.exports = getVendorPrefixedEventName;

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var escapeTextContentForBrowser = __webpack_require__(43);

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ReactMount = __webpack_require__(116);

module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(275);

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.8.6
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

if (process.env.NODE_ENV !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', { value: true });

    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;

    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' ||
      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }

    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var lowPriorityWarning = function lowPriorityWarning() {};

    {
      var printWarning = function printWarning(format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
          console.warn(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function lowPriorityWarning(condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }
        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }

    var lowPriorityWarning$1 = lowPriorityWarning;

    function typeOf(object) {
      if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null) {
        var $$typeof = object.$$typeof;
        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;
              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;
                  default:
                    return $$typeof;
                }
            }
          case REACT_LAZY_TYPE:
          case REACT_MEMO_TYPE:
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    }

    // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;

    var hasWarnedAboutDeprecatedIsAsyncMode = false;

    // AsyncMode should be deprecated
    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true;
          lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }
      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }

    exports.typeOf = typeOf;
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isValidElementType = isValidElementType;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
  })();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.8.6
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", { value: !0 });
var b = "function" === typeof Symbol && Symbol.for,
    c = b ? Symbol.for("react.element") : 60103,
    d = b ? Symbol.for("react.portal") : 60106,
    e = b ? Symbol.for("react.fragment") : 60107,
    f = b ? Symbol.for("react.strict_mode") : 60108,
    g = b ? Symbol.for("react.profiler") : 60114,
    h = b ? Symbol.for("react.provider") : 60109,
    k = b ? Symbol.for("react.context") : 60110,
    l = b ? Symbol.for("react.async_mode") : 60111,
    m = b ? Symbol.for("react.concurrent_mode") : 60111,
    n = b ? Symbol.for("react.forward_ref") : 60112,
    p = b ? Symbol.for("react.suspense") : 60113,
    q = b ? Symbol.for("react.memo") : 60115,
    r = b ? Symbol.for("react.lazy") : 60116;function t(a) {
  if ("object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a) {
    var u = a.$$typeof;switch (u) {case c:
        switch (a = a.type, a) {case l:case m:case e:case g:case f:case p:
            return a;default:
            switch (a = a && a.$$typeof, a) {case k:case n:case h:
                return a;default:
                return u;}}case r:case q:case d:
        return u;}
  }
}function v(a) {
  return t(a) === m;
}exports.typeOf = t;exports.AsyncMode = l;exports.ConcurrentMode = m;exports.ContextConsumer = k;exports.ContextProvider = h;exports.Element = c;exports.ForwardRef = n;
exports.Fragment = e;exports.Lazy = r;exports.Memo = q;exports.Portal = d;exports.Profiler = g;exports.StrictMode = f;exports.Suspense = p;exports.isValidElementType = function (a) {
  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || "object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a && (a.$$typeof === r || a.$$typeof === q || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n);
};exports.isAsyncMode = function (a) {
  return v(a) || t(a) === l;
};exports.isConcurrentMode = v;exports.isContextConsumer = function (a) {
  return t(a) === k;
};
exports.isContextProvider = function (a) {
  return t(a) === h;
};exports.isElement = function (a) {
  return "object" === (typeof a === "undefined" ? "undefined" : _typeof(a)) && null !== a && a.$$typeof === c;
};exports.isForwardRef = function (a) {
  return t(a) === n;
};exports.isFragment = function (a) {
  return t(a) === e;
};exports.isLazy = function (a) {
  return t(a) === r;
};exports.isMemo = function (a) {
  return t(a) === q;
};exports.isPortal = function (a) {
  return t(a) === d;
};exports.isProfiler = function (a) {
  return t(a) === g;
};exports.isStrictMode = function (a) {
  return t(a) === f;
};
exports.isSuspense = function (a) {
  return t(a) === p;
};

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _warning = __webpack_require__(19);

var _warning2 = _interopRequireDefault(_warning);

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _history = __webpack_require__(27);

var _Router = __webpack_require__(71);

var _Router2 = _interopRequireDefault(_Router);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * The public API for a <Router> that uses HTML5 history.
 */

var BrowserRouter = function (_React$Component) {
  _inherits(BrowserRouter, _React$Component);

  function BrowserRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, BrowserRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _history.createBrowserHistory)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }

  BrowserRouter.prototype.componentWillMount = function componentWillMount() {
    (0, _warning2.default)(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { BrowserRouter as Router }`.");
  };

  BrowserRouter.prototype.render = function render() {
    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });
  };

  return BrowserRouter;
}(_react2.default.Component);

BrowserRouter.propTypes = {
  basename: _propTypes2.default.string,
  forceRefresh: _propTypes2.default.bool,
  getUserConfirmation: _propTypes2.default.func,
  keyLength: _propTypes2.default.number,
  children: _propTypes2.default.node
};

exports.default = BrowserRouter;

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _warning = __webpack_require__(19);

var _warning2 = _interopRequireDefault(_warning);

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _history = __webpack_require__(27);

var _Router = __webpack_require__(71);

var _Router2 = _interopRequireDefault(_Router);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * The public API for a <Router> that uses window.location.hash.
 */

var HashRouter = function (_React$Component) {
  _inherits(HashRouter, _React$Component);

  function HashRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, HashRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _history.createHashHistory)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }

  HashRouter.prototype.componentWillMount = function componentWillMount() {
    (0, _warning2.default)(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.");
  };

  HashRouter.prototype.render = function render() {
    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });
  };

  return HashRouter;
}(_react2.default.Component);

HashRouter.propTypes = {
  basename: _propTypes2.default.string,
  getUserConfirmation: _propTypes2.default.func,
  hashType: _propTypes2.default.oneOf(["hashbang", "noslash", "slash"]),
  children: _propTypes2.default.node
};

exports.default = HashRouter;

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _MemoryRouter = __webpack_require__(333);

var _MemoryRouter2 = _interopRequireDefault(_MemoryRouter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _MemoryRouter2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Route = __webpack_require__(132);

var _Route2 = _interopRequireDefault(_Route);

var _Link = __webpack_require__(131);

var _Link2 = _interopRequireDefault(_Link);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

/**
 * A <Link> wrapper that knows if it's "active" or not.
 */
var NavLink = function NavLink(_ref) {
  var to = _ref.to,
      exact = _ref.exact,
      strict = _ref.strict,
      location = _ref.location,
      activeClassName = _ref.activeClassName,
      className = _ref.className,
      activeStyle = _ref.activeStyle,
      style = _ref.style,
      getIsActive = _ref.isActive,
      ariaCurrent = _ref["aria-current"],
      rest = _objectWithoutProperties(_ref, ["to", "exact", "strict", "location", "activeClassName", "className", "activeStyle", "style", "isActive", "aria-current"]);

  var path = (typeof to === "undefined" ? "undefined" : _typeof(to)) === "object" ? to.pathname : to;

  // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202
  var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");

  return _react2.default.createElement(_Route2.default, {
    path: escapedPath,
    exact: exact,
    strict: strict,
    location: location,
    children: function children(_ref2) {
      var location = _ref2.location,
          match = _ref2.match;

      var isActive = !!(getIsActive ? getIsActive(match, location) : match);

      return _react2.default.createElement(_Link2.default, _extends({
        to: to,
        className: isActive ? [className, activeClassName].filter(function (i) {
          return i;
        }).join(" ") : className,
        style: isActive ? _extends({}, style, activeStyle) : style,
        "aria-current": isActive && ariaCurrent || null
      }, rest));
    }
  });
};

NavLink.propTypes = {
  to: _Link2.default.propTypes.to,
  exact: _propTypes2.default.bool,
  strict: _propTypes2.default.bool,
  location: _propTypes2.default.object,
  activeClassName: _propTypes2.default.string,
  className: _propTypes2.default.string,
  activeStyle: _propTypes2.default.object,
  style: _propTypes2.default.object,
  isActive: _propTypes2.default.func,
  "aria-current": _propTypes2.default.oneOf(["page", "step", "location", "date", "time", "true"])
};

NavLink.defaultProps = {
  activeClassName: "active",
  "aria-current": "page"
};

exports.default = NavLink;

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Prompt = __webpack_require__(334);

var _Prompt2 = _interopRequireDefault(_Prompt);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _Prompt2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Redirect = __webpack_require__(335);

var _Redirect2 = _interopRequireDefault(_Redirect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _Redirect2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _StaticRouter = __webpack_require__(336);

var _StaticRouter2 = _interopRequireDefault(_StaticRouter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _StaticRouter2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Switch = __webpack_require__(337);

var _Switch2 = _interopRequireDefault(_Switch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _Switch2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _generatePath = __webpack_require__(134);

var _generatePath2 = _interopRequireDefault(_generatePath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _generatePath2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _matchPath = __webpack_require__(73);

var _matchPath2 = _interopRequireDefault(_matchPath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _matchPath2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _withRouter = __webpack_require__(338);

var _withRouter2 = _interopRequireDefault(_withRouter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _withRouter2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _warning = __webpack_require__(19);

var _warning2 = _interopRequireDefault(_warning);

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _history = __webpack_require__(27);

var _Router = __webpack_require__(72);

var _Router2 = _interopRequireDefault(_Router);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * The public API for a <Router> that stores location in memory.
 */

var MemoryRouter = function (_React$Component) {
  _inherits(MemoryRouter, _React$Component);

  function MemoryRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, MemoryRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _history.createMemoryHistory)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }

  MemoryRouter.prototype.componentWillMount = function componentWillMount() {
    (0, _warning2.default)(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { MemoryRouter as Router }`.");
  };

  MemoryRouter.prototype.render = function render() {
    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });
  };

  return MemoryRouter;
}(_react2.default.Component);

MemoryRouter.propTypes = {
  initialEntries: _propTypes2.default.array,
  initialIndex: _propTypes2.default.number,
  getUserConfirmation: _propTypes2.default.func,
  keyLength: _propTypes2.default.number,
  children: _propTypes2.default.node
};

exports.default = MemoryRouter;

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _invariant = __webpack_require__(21);

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * The public API for prompting the user before navigating away
 * from a screen with a component.
 */

var Prompt = function (_React$Component) {
  _inherits(Prompt, _React$Component);

  function Prompt() {
    _classCallCheck(this, Prompt);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Prompt.prototype.enable = function enable(message) {
    if (this.unblock) this.unblock();

    this.unblock = this.context.router.history.block(message);
  };

  Prompt.prototype.disable = function disable() {
    if (this.unblock) {
      this.unblock();
      this.unblock = null;
    }
  };

  Prompt.prototype.componentWillMount = function componentWillMount() {
    (0, _invariant2.default)(this.context.router, "You should not use <Prompt> outside a <Router>");

    if (this.props.when) this.enable(this.props.message);
  };

  Prompt.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.when) {
      if (!this.props.when || this.props.message !== nextProps.message) this.enable(nextProps.message);
    } else {
      this.disable();
    }
  };

  Prompt.prototype.componentWillUnmount = function componentWillUnmount() {
    this.disable();
  };

  Prompt.prototype.render = function render() {
    return null;
  };

  return Prompt;
}(_react2.default.Component);

Prompt.propTypes = {
  when: _propTypes2.default.bool,
  message: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired
};
Prompt.defaultProps = {
  when: true
};
Prompt.contextTypes = {
  router: _propTypes2.default.shape({
    history: _propTypes2.default.shape({
      block: _propTypes2.default.func.isRequired
    }).isRequired
  }).isRequired
};

exports.default = Prompt;

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _warning = __webpack_require__(19);

var _warning2 = _interopRequireDefault(_warning);

var _invariant = __webpack_require__(21);

var _invariant2 = _interopRequireDefault(_invariant);

var _history = __webpack_require__(27);

var _generatePath = __webpack_require__(134);

var _generatePath2 = _interopRequireDefault(_generatePath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * The public API for updating the location programmatically
 * with a component.
 */

var Redirect = function (_React$Component) {
  _inherits(Redirect, _React$Component);

  function Redirect() {
    _classCallCheck(this, Redirect);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Redirect.prototype.isStatic = function isStatic() {
    return this.context.router && this.context.router.staticContext;
  };

  Redirect.prototype.componentWillMount = function componentWillMount() {
    (0, _invariant2.default)(this.context.router, "You should not use <Redirect> outside a <Router>");

    if (this.isStatic()) this.perform();
  };

  Redirect.prototype.componentDidMount = function componentDidMount() {
    if (!this.isStatic()) this.perform();
  };

  Redirect.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    var prevTo = (0, _history.createLocation)(prevProps.to);
    var nextTo = (0, _history.createLocation)(this.props.to);

    if ((0, _history.locationsAreEqual)(prevTo, nextTo)) {
      (0, _warning2.default)(false, "You tried to redirect to the same route you're currently on: " + ("\"" + nextTo.pathname + nextTo.search + "\""));
      return;
    }

    this.perform();
  };

  Redirect.prototype.computeTo = function computeTo(_ref) {
    var computedMatch = _ref.computedMatch,
        to = _ref.to;

    if (computedMatch) {
      if (typeof to === "string") {
        return (0, _generatePath2.default)(to, computedMatch.params);
      } else {
        return _extends({}, to, {
          pathname: (0, _generatePath2.default)(to.pathname, computedMatch.params)
        });
      }
    }

    return to;
  };

  Redirect.prototype.perform = function perform() {
    var history = this.context.router.history;
    var push = this.props.push;

    var to = this.computeTo(this.props);

    if (push) {
      history.push(to);
    } else {
      history.replace(to);
    }
  };

  Redirect.prototype.render = function render() {
    return null;
  };

  return Redirect;
}(_react2.default.Component);

Redirect.propTypes = {
  computedMatch: _propTypes2.default.object, // private, from <Switch>
  push: _propTypes2.default.bool,
  from: _propTypes2.default.string,
  to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired
};
Redirect.defaultProps = {
  push: false
};
Redirect.contextTypes = {
  router: _propTypes2.default.shape({
    history: _propTypes2.default.shape({
      push: _propTypes2.default.func.isRequired,
      replace: _propTypes2.default.func.isRequired
    }).isRequired,
    staticContext: _propTypes2.default.object
  }).isRequired
};

exports.default = Redirect;

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _warning = __webpack_require__(19);

var _warning2 = _interopRequireDefault(_warning);

var _invariant = __webpack_require__(21);

var _invariant2 = _interopRequireDefault(_invariant);

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _history = __webpack_require__(27);

var _Router = __webpack_require__(72);

var _Router2 = _interopRequireDefault(_Router);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var addLeadingSlash = function addLeadingSlash(path) {
  return path.charAt(0) === "/" ? path : "/" + path;
};

var addBasename = function addBasename(basename, location) {
  if (!basename) return location;

  return _extends({}, location, {
    pathname: addLeadingSlash(basename) + location.pathname
  });
};

var stripBasename = function stripBasename(basename, location) {
  if (!basename) return location;

  var base = addLeadingSlash(basename);

  if (location.pathname.indexOf(base) !== 0) return location;

  return _extends({}, location, {
    pathname: location.pathname.substr(base.length)
  });
};

var createURL = function createURL(location) {
  return typeof location === "string" ? location : (0, _history.createPath)(location);
};

var staticHandler = function staticHandler(methodName) {
  return function () {
    (0, _invariant2.default)(false, "You cannot %s with <StaticRouter>", methodName);
  };
};

var noop = function noop() {};

/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */

var StaticRouter = function (_React$Component) {
  _inherits(StaticRouter, _React$Component);

  function StaticRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, StaticRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.createHref = function (path) {
      return addLeadingSlash(_this.props.basename + createURL(path));
    }, _this.handlePush = function (location) {
      var _this$props = _this.props,
          basename = _this$props.basename,
          context = _this$props.context;

      context.action = "PUSH";
      context.location = addBasename(basename, (0, _history.createLocation)(location));
      context.url = createURL(context.location);
    }, _this.handleReplace = function (location) {
      var _this$props2 = _this.props,
          basename = _this$props2.basename,
          context = _this$props2.context;

      context.action = "REPLACE";
      context.location = addBasename(basename, (0, _history.createLocation)(location));
      context.url = createURL(context.location);
    }, _this.handleListen = function () {
      return noop;
    }, _this.handleBlock = function () {
      return noop;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  StaticRouter.prototype.getChildContext = function getChildContext() {
    return {
      router: {
        staticContext: this.props.context
      }
    };
  };

  StaticRouter.prototype.componentWillMount = function componentWillMount() {
    (0, _warning2.default)(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { StaticRouter as Router }`.");
  };

  StaticRouter.prototype.render = function render() {
    var _props = this.props,
        basename = _props.basename,
        context = _props.context,
        location = _props.location,
        props = _objectWithoutProperties(_props, ["basename", "context", "location"]);

    var history = {
      createHref: this.createHref,
      action: "POP",
      location: stripBasename(basename, (0, _history.createLocation)(location)),
      push: this.handlePush,
      replace: this.handleReplace,
      go: staticHandler("go"),
      goBack: staticHandler("goBack"),
      goForward: staticHandler("goForward"),
      listen: this.handleListen,
      block: this.handleBlock
    };

    return _react2.default.createElement(_Router2.default, _extends({}, props, { history: history }));
  };

  return StaticRouter;
}(_react2.default.Component);

StaticRouter.propTypes = {
  basename: _propTypes2.default.string,
  context: _propTypes2.default.object.isRequired,
  location: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])
};
StaticRouter.defaultProps = {
  basename: "",
  location: "/"
};
StaticRouter.childContextTypes = {
  router: _propTypes2.default.object.isRequired
};

exports.default = StaticRouter;

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _warning = __webpack_require__(19);

var _warning2 = _interopRequireDefault(_warning);

var _invariant = __webpack_require__(21);

var _invariant2 = _interopRequireDefault(_invariant);

var _matchPath = __webpack_require__(73);

var _matchPath2 = _interopRequireDefault(_matchPath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * The public API for rendering the first <Route> that matches.
 */

var Switch = function (_React$Component) {
  _inherits(Switch, _React$Component);

  function Switch() {
    _classCallCheck(this, Switch);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Switch.prototype.componentWillMount = function componentWillMount() {
    (0, _invariant2.default)(this.context.router, "You should not use <Switch> outside a <Router>");
  };

  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    (0, _warning2.default)(!(nextProps.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

    (0, _warning2.default)(!(!nextProps.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
  };

  Switch.prototype.render = function render() {
    var route = this.context.router.route;
    var children = this.props.children;

    var location = this.props.location || route.location;

    var match = void 0,
        child = void 0;
    _react2.default.Children.forEach(children, function (element) {
      if (match == null && _react2.default.isValidElement(element)) {
        var _element$props = element.props,
            pathProp = _element$props.path,
            exact = _element$props.exact,
            strict = _element$props.strict,
            sensitive = _element$props.sensitive,
            from = _element$props.from;

        var path = pathProp || from;

        child = element;
        match = (0, _matchPath2.default)(location.pathname, { path: path, exact: exact, strict: strict, sensitive: sensitive }, route.match);
      }
    });

    return match ? _react2.default.cloneElement(child, { location: location, computedMatch: match }) : null;
  };

  return Switch;
}(_react2.default.Component);

Switch.contextTypes = {
  router: _propTypes2.default.shape({
    route: _propTypes2.default.object.isRequired
  }).isRequired
};
Switch.propTypes = {
  children: _propTypes2.default.node,
  location: _propTypes2.default.object
};

exports.default = Switch;

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _hoistNonReactStatics = __webpack_require__(205);

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _Route = __webpack_require__(133);

var _Route2 = _interopRequireDefault(_Route);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

/**
 * A public higher-order component to access the imperative API
 */
var withRouter = function withRouter(Component) {
  var C = function C(props) {
    var wrappedComponentRef = props.wrappedComponentRef,
        remainingProps = _objectWithoutProperties(props, ["wrappedComponentRef"]);

    return _react2.default.createElement(_Route2.default, {
      children: function children(routeComponentProps) {
        return _react2.default.createElement(Component, _extends({}, remainingProps, routeComponentProps, {
          ref: wrappedComponentRef
        }));
      }
    });
  };

  C.displayName = "withRouter(" + (Component.displayName || Component.name) + ")";
  C.WrappedComponent = Component;
  C.propTypes = {
    wrappedComponentRef: _propTypes2.default.func
  };

  return (0, _hoistNonReactStatics2.default)(C, Component);
};

exports.default = withRouter;

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getScrollTop = getScrollTop;
exports.setScrollTop = setScrollTop;
exports.getOffsetTop = getOffsetTop;
function getScrollTop() {
  // jQuery => $('html, body').scrollTop
  return document.documentElement.scrollTop || document.body.scrollTop;
}

function setScrollTop(position) {
  document.documentElement.scrollTop = document.body.scrollTop = position;
}

function getOffsetTop(element) {
  var _element$getBoundingC = element.getBoundingClientRect(),
      top = _element$getBoundingC.top;

  return top + getScrollTop();
}

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _propTypes = __webpack_require__(8);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = __webpack_require__(1);

var _react2 = _interopRequireDefault(_react);

var _server = __webpack_require__(319);

var _server2 = _interopRequireDefault(_server);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

// See: https://github.com/webpack/react-starter/issues/37
var isBrowser = typeof window !== 'undefined';
var SVGInjector = isBrowser ? __webpack_require__(355) : undefined;

var ReactSVG = function (_React$Component) {
  _inherits(ReactSVG, _React$Component);

  function ReactSVG() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ReactSVG);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactSVG.__proto__ || Object.getPrototypeOf(ReactSVG)).call.apply(_ref, [this].concat(args))), _this), _this.refCallback = function (container) {
      if (!container) {
        _this.removeSVG();
        return;
      }

      _this.container = container;
      _this.renderSVG();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ReactSVG, [{
    key: 'renderSVG',
    value: function renderSVG() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

      if (this.container instanceof Node) {
        var each = props.callback,
            className = props.className,
            evalScripts = props.evalScripts,
            path = props.path,
            style = props.style;

        var div = document.createElement('div');
        div.innerHTML = _server2.default.renderToStaticMarkup(_react2.default.createElement('div', null, _react2.default.createElement('div', { className: className, 'data-src': path, style: style })));

        var wrapper = this.container.appendChild(div.firstChild);

        SVGInjector(wrapper.firstChild, {
          evalScripts: evalScripts,
          each: each
        });
      }
    }
  }, {
    key: 'removeSVG',
    value: function removeSVG() {
      if (this.container instanceof Node && this.container.firstChild instanceof Node) {
        this.container.removeChild(this.container.firstChild);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.removeSVG();
      this.renderSVG(nextProps);
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      return false;
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', { ref: this.refCallback, className: this.props.wrapperClassName });
    }
  }]);

  return ReactSVG;
}(_react2.default.Component);

ReactSVG.defaultProps = {
  callback: function callback() {},
  className: null,
  evalScripts: 'never',
  style: {},
  wrapperClassName: null
};
ReactSVG.propTypes = {
  callback: _propTypes2.default.func,
  className: _propTypes2.default.string,
  evalScripts: _propTypes2.default.oneOf(['always', 'once', 'never']),
  path: _propTypes2.default.string.isRequired,
  style: _propTypes2.default.object,
  wrapperClassName: _propTypes2.default.string
};
exports.default = ReactSVG;
module.exports = exports['default'];

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var _prodInvariant = __webpack_require__(29);

var invariant = __webpack_require__(2);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function standardReleaser(instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var PooledClass = __webpack_require__(342);
var ReactElement = __webpack_require__(25);

var emptyFunction = __webpack_require__(14);
var traverseAllChildren = __webpack_require__(353);

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;

  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ReactElement = __webpack_require__(25);

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = __webpack_require__(138);
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _require = __webpack_require__(25),
    isValidElement = _require.isValidElement;

var factory = __webpack_require__(93);

module.exports = factory(isValidElement);

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



module.exports = '15.6.2';

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(29);

var ReactPropTypeLocationNames = __webpack_require__(345);
var ReactPropTypesSecret = __webpack_require__(347);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(3);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(11);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error === 'undefined' ? 'undefined' : _typeof(error)) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(11);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _require = __webpack_require__(136),
    Component = _require.Component;

var _require2 = __webpack_require__(25),
    isValidElement = _require2.isValidElement;

var ReactNoopUpdateQueue = __webpack_require__(139);
var factory = __webpack_require__(189);

module.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var nextDebugID = 1;

function getNextDebugID() {
  return nextDebugID++;
}

module.exports = getNextDebugID;

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */


var _prodInvariant = __webpack_require__(29);

var ReactElement = __webpack_require__(25);

var invariant = __webpack_require__(2);

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _prodInvariant = __webpack_require__(29);

var ReactCurrentOwner = __webpack_require__(15);
var REACT_ELEMENT_TYPE = __webpack_require__(137);

var getIteratorFn = __webpack_require__(140);
var invariant = __webpack_require__(2);
var KeyEscapeUtils = __webpack_require__(341);
var warning = __webpack_require__(3);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && (typeof component === 'undefined' ? 'undefined' : _typeof(component)) === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children === 'undefined' ? 'undefined' : _typeof(children);

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
function isAbsolute(pathname) {
  return pathname.charAt(0) === '/';
}

// About 1.5x faster than the two-arg version of Array#splice()
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }

  list.pop();
}

// This implementation is based heavily on node's url.parse
function resolvePathname(to) {
  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var toParts = to && to.split('/') || [];
  var fromParts = from && from.split('/') || [];

  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;

  if (to && isAbsolute(to)) {
    // to is absolute
    fromParts = toParts;
  } else if (toParts.length) {
    // to is relative, drop the filename
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }

  if (!fromParts.length) return '/';

  var hasTrailingSlash = void 0;
  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === '.' || last === '..' || last === '';
  } else {
    hasTrailingSlash = false;
  }

  var up = 0;
  for (var i = fromParts.length; i >= 0; i--) {
    var part = fromParts[i];

    if (part === '.') {
      spliceOne(fromParts, i);
    } else if (part === '..') {
      spliceOne(fromParts, i);
      up++;
    } else if (up) {
      spliceOne(fromParts, i);
      up--;
    }
  }

  if (!mustEndAbs) for (; up--; up) {
    fromParts.unshift('..');
  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');

  var result = fromParts.join('/');

  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

  return result;
}

exports.default = resolvePathname;

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * SVGInjector v1.1.3 - Fast, caching, dynamic inline SVG DOM injection library
 * https://github.com/iconic/SVGInjector
 *
 * Copyright (c) 2014-2015 Waybury <hello@waybury.com>
 * @license MIT
 */

(function (window, document) {

  'use strict';

  // Environment

  var isLocal = window.location.protocol === 'file:';
  var hasSvgSupport = document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');

  function uniqueClasses(list) {
    list = list.split(' ');

    var hash = {};
    var i = list.length;
    var out = [];

    while (i--) {
      if (!hash.hasOwnProperty(list[i])) {
        hash[list[i]] = 1;
        out.unshift(list[i]);
      }
    }

    return out.join(' ');
  }

  /**
   * cache (or polyfill for <= IE8) Array.forEach()
   * source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
   */
  var forEach = Array.prototype.forEach || function (fn, scope) {
    if (this === void 0 || this === null || typeof fn !== 'function') {
      throw new TypeError();
    }

    /* jshint bitwise: false */
    var i,
        len = this.length >>> 0;
    /* jshint bitwise: true */

    for (i = 0; i < len; ++i) {
      if (i in this) {
        fn.call(scope, this[i], i, this);
      }
    }
  };

  // SVG Cache
  var svgCache = {};

  var injectCount = 0;
  var injectedElements = [];

  // Request Queue
  var requestQueue = [];

  // Script running status
  var ranScripts = {};

  var cloneSvg = function cloneSvg(sourceSvg) {
    return sourceSvg.cloneNode(true);
  };

  var queueRequest = function queueRequest(url, callback) {
    requestQueue[url] = requestQueue[url] || [];
    requestQueue[url].push(callback);
  };

  var processRequestQueue = function processRequestQueue(url) {
    for (var i = 0, len = requestQueue[url].length; i < len; i++) {
      // Make these calls async so we avoid blocking the page/renderer
      /* jshint loopfunc: true */
      (function (index) {
        setTimeout(function () {
          requestQueue[url][index](cloneSvg(svgCache[url]));
        }, 0);
      })(i);
      /* jshint loopfunc: false */
    }
  };

  var loadSvg = function loadSvg(url, callback) {
    if (svgCache[url] !== undefined) {
      if (svgCache[url] instanceof SVGSVGElement) {
        // We already have it in cache, so use it
        callback(cloneSvg(svgCache[url]));
      } else {
        // We don't have it in cache yet, but we are loading it, so queue this request
        queueRequest(url, callback);
      }
    } else {

      if (!window.XMLHttpRequest) {
        callback('Browser does not support XMLHttpRequest');
        return false;
      }

      // Seed the cache to indicate we are loading this URL already
      svgCache[url] = {};
      queueRequest(url, callback);

      var httpRequest = new XMLHttpRequest();

      httpRequest.onreadystatechange = function () {
        // readyState 4 = complete
        if (httpRequest.readyState === 4) {

          // Handle status
          if (httpRequest.status === 404 || httpRequest.responseXML === null) {
            callback('Unable to load SVG file: ' + url);

            if (isLocal) callback('Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver.');

            callback();
            return false;
          }

          // 200 success from server, or 0 when using file:// protocol locally
          if (httpRequest.status === 200 || isLocal && httpRequest.status === 0) {

            /* globals Document */
            if (httpRequest.responseXML instanceof Document) {
              // Cache it
              svgCache[url] = httpRequest.responseXML.documentElement;
            }
            /* globals -Document */

            // IE9 doesn't create a responseXML Document object from loaded SVG,
            // and throws a "DOM Exception: HIERARCHY_REQUEST_ERR (3)" error when injected.
            //
            // So, we'll just create our own manually via the DOMParser using
            // the the raw XML responseText.
            //
            // :NOTE: IE8 and older doesn't have DOMParser, but they can't do SVG either, so...
            else if (DOMParser && DOMParser instanceof Function) {
                var xmlDoc;
                try {
                  var parser = new DOMParser();
                  xmlDoc = parser.parseFromString(httpRequest.responseText, 'text/xml');
                } catch (e) {
                  xmlDoc = undefined;
                }

                if (!xmlDoc || xmlDoc.getElementsByTagName('parsererror').length) {
                  callback('Unable to parse SVG file: ' + url);
                  return false;
                } else {
                  // Cache it
                  svgCache[url] = xmlDoc.documentElement;
                }
              }

            // We've loaded a new asset, so process any requests waiting for it
            processRequestQueue(url);
          } else {
            callback('There was a problem injecting the SVG: ' + httpRequest.status + ' ' + httpRequest.statusText);
            return false;
          }
        }
      };

      httpRequest.open('GET', url);

      // Treat and parse the response as XML, even if the
      // server sends us a different mimetype
      if (httpRequest.overrideMimeType) httpRequest.overrideMimeType('text/xml');

      httpRequest.send();
    }
  };

  // Inject a single element
  var injectElement = function injectElement(el, evalScripts, pngFallback, callback) {

    // Grab the src or data-src attribute
    var imgUrl = el.getAttribute('data-src') || el.getAttribute('src');

    // We can only inject SVG
    if (!/\.svg/i.test(imgUrl)) {
      callback('Attempted to inject a file with a non-svg extension: ' + imgUrl);
      return;
    }

    // If we don't have SVG support try to fall back to a png,
    // either defined per-element via data-fallback or data-png,
    // or globally via the pngFallback directory setting
    if (!hasSvgSupport) {
      var perElementFallback = el.getAttribute('data-fallback') || el.getAttribute('data-png');

      // Per-element specific PNG fallback defined, so use that
      if (perElementFallback) {
        el.setAttribute('src', perElementFallback);
        callback(null);
      }
      // Global PNG fallback directoriy defined, use the same-named PNG
      else if (pngFallback) {
          el.setAttribute('src', pngFallback + '/' + imgUrl.split('/').pop().replace('.svg', '.png'));
          callback(null);
        }
        // um...
        else {
            callback('This browser does not support SVG and no PNG fallback was defined.');
          }

      return;
    }

    // Make sure we aren't already in the process of injecting this element to
    // avoid a race condition if multiple injections for the same element are run.
    // :NOTE: Using indexOf() only _after_ we check for SVG support and bail,
    // so no need for IE8 indexOf() polyfill
    if (injectedElements.indexOf(el) !== -1) {
      return;
    }

    // Remember the request to inject this element, in case other injection
    // calls are also trying to replace this element before we finish
    injectedElements.push(el);

    // Try to avoid loading the orginal image src if possible.
    el.setAttribute('src', '');

    // Load it up
    loadSvg(imgUrl, function (svg) {

      if (typeof svg === 'undefined' || typeof svg === 'string') {
        callback(svg);
        return false;
      }

      var imgId = el.getAttribute('id');
      if (imgId) {
        svg.setAttribute('id', imgId);
      }

      var imgTitle = el.getAttribute('title');
      if (imgTitle) {
        svg.setAttribute('title', imgTitle);
      }

      // Concat the SVG classes + 'injected-svg' + the img classes
      var classMerge = [].concat(svg.getAttribute('class') || [], 'injected-svg', el.getAttribute('class') || []).join(' ');
      svg.setAttribute('class', uniqueClasses(classMerge));

      var imgStyle = el.getAttribute('style');
      if (imgStyle) {
        svg.setAttribute('style', imgStyle);
      }

      // Copy all the data elements to the svg
      var imgData = [].filter.call(el.attributes, function (at) {
        return (/^data-\w[\w\-]*$/.test(at.name)
        );
      });
      forEach.call(imgData, function (dataAttr) {
        if (dataAttr.name && dataAttr.value) {
          svg.setAttribute(dataAttr.name, dataAttr.value);
        }
      });

      // Make sure any internally referenced clipPath ids and their
      // clip-path references are unique.
      //
      // This addresses the issue of having multiple instances of the
      // same SVG on a page and only the first clipPath id is referenced.
      //
      // Browsers often shortcut the SVG Spec and don't use clipPaths
      // contained in parent elements that are hidden, so if you hide the first
      // SVG instance on the page, then all other instances lose their clipping.
      // Reference: https://bugzilla.mozilla.org/show_bug.cgi?id=376027

      // Handle all defs elements that have iri capable attributes as defined by w3c: http://www.w3.org/TR/SVG/linking.html#processingIRI
      // Mapping IRI addressable elements to the properties that can reference them:
      var iriElementsAndProperties = {
        'clipPath': ['clip-path'],
        'color-profile': ['color-profile'],
        'cursor': ['cursor'],
        'filter': ['filter'],
        'linearGradient': ['fill', 'stroke'],
        'marker': ['marker', 'marker-start', 'marker-mid', 'marker-end'],
        'mask': ['mask'],
        'pattern': ['fill', 'stroke'],
        'radialGradient': ['fill', 'stroke']
      };

      var element, elementDefs, properties, currentId, newId;
      Object.keys(iriElementsAndProperties).forEach(function (key) {
        element = key;
        properties = iriElementsAndProperties[key];

        elementDefs = svg.querySelectorAll('defs ' + element + '[id]');
        for (var i = 0, elementsLen = elementDefs.length; i < elementsLen; i++) {
          currentId = elementDefs[i].id;
          newId = currentId + '-' + injectCount;

          // All of the properties that can reference this element type
          var referencingElements;
          forEach.call(properties, function (property) {
            // :NOTE: using a substring match attr selector here to deal with IE "adding extra quotes in url() attrs"
            referencingElements = svg.querySelectorAll('[' + property + '*="' + currentId + '"]');
            for (var j = 0, referencingElementLen = referencingElements.length; j < referencingElementLen; j++) {
              referencingElements[j].setAttribute(property, 'url(#' + newId + ')');
            }
          });

          elementDefs[i].id = newId;
        }
      });

      // Remove any unwanted/invalid namespaces that might have been added by SVG editing tools
      svg.removeAttribute('xmlns:a');

      // Post page load injected SVGs don't automatically have their script
      // elements run, so we'll need to make that happen, if requested

      // Find then prune the scripts
      var scripts = svg.querySelectorAll('script');
      var scriptsToEval = [];
      var script, scriptType;

      for (var k = 0, scriptsLen = scripts.length; k < scriptsLen; k++) {
        scriptType = scripts[k].getAttribute('type');

        // Only process javascript types.
        // SVG defaults to 'application/ecmascript' for unset types
        if (!scriptType || scriptType === 'application/ecmascript' || scriptType === 'application/javascript') {

          // innerText for IE, textContent for other browsers
          script = scripts[k].innerText || scripts[k].textContent;

          // Stash
          scriptsToEval.push(script);

          // Tidy up and remove the script element since we don't need it anymore
          svg.removeChild(scripts[k]);
        }
      }

      // Run/Eval the scripts if needed
      if (scriptsToEval.length > 0 && (evalScripts === 'always' || evalScripts === 'once' && !ranScripts[imgUrl])) {
        for (var l = 0, scriptsToEvalLen = scriptsToEval.length; l < scriptsToEvalLen; l++) {

          // :NOTE: Yup, this is a form of eval, but it is being used to eval code
          // the caller has explictely asked to be loaded, and the code is in a caller
          // defined SVG file... not raw user input.
          //
          // Also, the code is evaluated in a closure and not in the global scope.
          // If you need to put something in global scope, use 'window'
          new Function(scriptsToEval[l])(window); // jshint ignore:line
        }

        // Remember we already ran scripts for this svg
        ranScripts[imgUrl] = true;
      }

      // :WORKAROUND:
      // IE doesn't evaluate <style> tags in SVGs that are dynamically added to the page.
      // This trick will trigger IE to read and use any existing SVG <style> tags.
      //
      // Reference: https://github.com/iconic/SVGInjector/issues/23
      var styleTags = svg.querySelectorAll('style');
      forEach.call(styleTags, function (styleTag) {
        styleTag.textContent += '';
      });

      // Replace the image with the svg
      el.parentNode.replaceChild(svg, el);

      // Now that we no longer need it, drop references
      // to the original element so it can be GC'd
      delete injectedElements[injectedElements.indexOf(el)];
      el = null;

      // Increment the injected count
      injectCount++;

      callback(svg);
    });
  };

  /**
   * SVGInjector
   *
   * Replace the given elements with their full inline SVG DOM elements.
   *
   * :NOTE: We are using get/setAttribute with SVG because the SVG DOM spec differs from HTML DOM and
   * can return other unexpected object types when trying to directly access svg properties.
   * ex: "className" returns a SVGAnimatedString with the class value found in the "baseVal" property,
   * instead of simple string like with HTML Elements.
   *
   * @param {mixes} Array of or single DOM element
   * @param {object} options
   * @param {function} callback
   * @return {object} Instance of SVGInjector
   */
  var SVGInjector = function SVGInjector(elements, options, done) {

    // Options & defaults
    options = options || {};

    // Should we run the scripts blocks found in the SVG
    // 'always' - Run them every time
    // 'once' - Only run scripts once for each SVG
    // [false|'never'] - Ignore scripts
    var evalScripts = options.evalScripts || 'always';

    // Location of fallback pngs, if desired
    var pngFallback = options.pngFallback || false;

    // Callback to run during each SVG injection, returning the SVG injected
    var eachCallback = options.each;

    // Do the injection...
    if (elements.length !== undefined) {
      var elementsLoaded = 0;
      forEach.call(elements, function (element) {
        injectElement(element, evalScripts, pngFallback, function (svg) {
          if (eachCallback && typeof eachCallback === 'function') eachCallback(svg);
          if (done && elements.length === ++elementsLoaded) done(elementsLoaded);
        });
      });
    } else {
      if (elements) {
        injectElement(elements, evalScripts, pngFallback, function (svg) {
          if (eachCallback && typeof eachCallback === 'function') eachCallback(svg);
          if (done) done(1);
          elements = null;
        });
      } else {
        if (done) done(0);
      }
    }
  };

  /* global module, exports: true, define */
  // Node.js or CommonJS
  if (( false ? 'undefined' : _typeof(module)) === 'object' && _typeof(module.exports) === 'object') {
    module.exports = exports = SVGInjector;
  }
  // AMD support
  else if (true) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
        return SVGInjector;
      }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
    // Otherwise, attach to window as global
    else if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {
        window.SVGInjector = SVGInjector;
      }
  /* global -module, -exports, -define */
})(window, document);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(360)(module)))

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var isProduction = process.env.NODE_ENV === 'production';
var prefix = 'Invariant failed';
function invariant(condition, message) {
  if (condition) {
    return;
  }

  if (isProduction) {
    throw new Error(prefix);
  } else {
    throw new Error(prefix + ": " + (message || ''));
  }
}

exports.default = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var isProduction = process.env.NODE_ENV === 'production';
function warning(condition, message) {
  if (!isProduction) {
    if (condition) {
      return;
    }

    var text = "Warning: " + message;

    if (typeof console !== 'undefined') {
      console.warn(text);
    }

    try {
      throw Error(text);
    } catch (x) {}
  }
}

exports.default = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

function valueEqual(a, b) {
  if (a === b) return true;

  if (a == null || b == null) return false;

  if (Array.isArray(a)) {
    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
      return valueEqual(item, b[index]);
    });
  }

  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);

  if (aType !== bType) return false;

  if (aType === 'object') {
    var aValue = a.valueOf();
    var bValue = b.valueOf();

    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);

    if (aKeys.length !== bKeys.length) return false;

    return aKeys.every(function (key) {
      return valueEqual(a[key], b[key]);
    });
  }

  return false;
}

exports.default = valueEqual;

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function () {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function get() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function get() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ }),
/* 361 */
/***/ (function(module, exports) {

module.exports = function() {
	throw new Error("define cannot be used indirect");
};


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYjY1NzgzODBkMTUwMzhhYWM1NzUiLCJ3ZWJwYWNrOi8vLy4vfi9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9yZWFjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL3JlYWN0UHJvZEludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JhZGl1bS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTUNvbXBvbmVudFRyZWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0SW5zdHJ1bWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0Q29tcG9uZW50VHJlZUhvb2suanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0VXBkYXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RDdXJyZW50T3duZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3V0aWxzL2dldFByZWZpeGVkVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0V2ZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9ET01Qcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9+L3dhcm5pbmcvd2FybmluZy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9Qb29sZWRDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RSZWNvbmNpbGVyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0RWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXJvdXRlci1kb20vZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9ET01MYXp5VHJlZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9yZWFjdFByb2RJbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvVGl0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi9lbXB0eU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvRXZlbnRQbHVnaW5IdWIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL0V2ZW50UHJvcGFnYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0SW5zdGFuY2VNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY1VJRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1zY3JvbGxjaG9yL2xpYi9zY3JvbGxjaG9yLmpzIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL0J1eUJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvdXRpbHMvam9pblByZWZpeGVkVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL0V2ZW50UGx1Z2luUmVnaXN0cnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvU3ludGhldGljTW91c2VFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvVHJhbnNhY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvc2V0SW5uZXJIVE1MLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL2NhbkRlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL1RleHQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3V0aWxzL2NhcGl0YWxpemVTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3V0aWxzL2lzUHJlZml4ZWRWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9jc3MtcnVsZS1zZXQtdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9wcmVmaXhlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JhZGl1bS9saWIvc3R5bGUta2VlcGVyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9ET01DaGlsZHJlbk9wZXJhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL0RPTU5hbWVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL0V2ZW50UGx1Z2luVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL0tleUVzY2FwZVV0aWxzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9MaW5rZWRWYWx1ZVV0aWxzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdEVycm9yVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0VXBkYXRlUXVldWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL2NyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL2dldEV2ZW50Q2hhckNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL2dldEV2ZW50TW9kaWZpZXJTdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvZ2V0RXZlbnRUYXJnZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL2lzRXZlbnRTdXBwb3J0ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi92YWxpZGF0ZURPTU5lc3RpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXJvdXRlci9lcy9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1yb3V0ZXIvZXMvbWF0Y2hQYXRoLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL2xvd1ByaW9yaXR5V2FybmluZy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9BcHAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9EZXRhaWxzSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvTGF5b3V0LmpzIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL1BlcnNvbi5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9Zb3VUdWJlLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL0V2ZW50TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi9mb2N1c05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL34vaHlwaGVuYXRlLXN0eWxlLW5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3N0YXRpYy9wcmVmaXhQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvdXRpbHMvc29ydFByZWZpeGVkU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9wcm9wLXR5cGVzL2ZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9hcHBlbmQtcHgtaWYtbmVlZGVkLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9lbmhhbmNlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JhZGl1bS9saWIvZ2V0LXN0YXRlLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JhZGl1bS9saWIvZ2V0LXN0YXRlLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9oYXNoLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9tYXAtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9wbHVnaW5zL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9yZXNvbHZlLXN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvQ1NTUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL0NhbGxiYWNrUXVldWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL0RPTVByb3BlcnR5T3BlcmF0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01Db21wb25lbnRGbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01Db250YWluZXJJbmZvLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTVNlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3REZWZhdWx0SW5qZWN0aW9uLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdEVtcHR5Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdEZlYXR1cmVGbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RIb3N0Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdElucHV0U2VsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdE1hcmt1cENoZWNrc3VtLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdE1vdW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdE5vZGVUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0VmVyc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvVmlld3BvcnRNZXRyaWNzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9hY2N1bXVsYXRlSW50by5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvZm9yRWFjaEFjY3VtdWxhdGVkLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9nZXRIb3N0Q29tcG9uZW50RnJvbUNvbXBvc2l0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvZ2V0VGV4dENvbnRlbnRBY2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvaW5wdXRWYWx1ZVRyYWNraW5nLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9pc1RleHRJbnB1dEVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL3NldFRleHRDb250ZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi90cmF2ZXJzZUFsbENoaWxkcmVuLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1yb3V0ZXItZG9tL2VzL0xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtcm91dGVyL2VzL1JvdXRlLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtcm91dGVyL2VzL2dlbmVyYXRlUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXJvdXRlci9+L3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0QmFzZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RFbGVtZW50U3ltYm9sLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0RWxlbWVudFZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdE5vb3BVcGRhdGVRdWV1ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9nZXRJdGVyYXRvckZuLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9EZXZpY2VMb29rdXAuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvRmVhdHVyZXMuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvRm9vdGVyLmpzIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL0hlcm9WaWRlby5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9JbWFnZVNwbGl0LmpzIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL0ltYWdlU3BsaXRQaG9uZS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9JblRoZUJveC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9JblRoZUJveF9mci5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9JblRoZUJveF9nci5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9OYXYuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvTmF2TGlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvUGVvcGxlLmpzIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvVGVjaFNwZWNzLmpzIiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL1RlY2hTcGVjc19mci5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9UZWNoU3BlY3NfZ3IuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3BhZ2VzL0Fib3V0LmpzIiwid2VicGFjazovLy8uL2FwcC9wYWdlcy9Ib21lLmpzIiwid2VicGFjazovLy8uL2FwcC9wYWdlcy9Ob3RGb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvcGFnZXMvUHJpdmFjeS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvcGFnZXMvUHJvZHVjdC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvcGFnZXMvUHVyY2hhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3BhZ2VzL1B1cmNoYXNlX2ZyLmpzIiwid2VicGFjazovLy8uL2FwcC9wYWdlcy9QdXJjaGFzZV9nci5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvcGFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3JvdXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2J0b2EuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL34vYm93c2VyL3NyYy9ib3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jcmVhdGUtcmVhY3QtY2xhc3MvZmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9+L2V4ZW52L2luZGV4LmpzIiwid2VicGFjazovLy8uL34vZmJqcy9saWIvY2FtZWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi9jYW1lbGl6ZVN0eWxlTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2NvbnRhaW5zTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2NyZWF0ZUFycmF5RnJvbU1peGVkLmpzIiwid2VicGFjazovLy8uL34vZmJqcy9saWIvY3JlYXRlTm9kZXNGcm9tTWFya3VwLmpzIiwid2VicGFjazovLy8uL34vZmJqcy9saWIvZ2V0TWFya3VwV3JhcC5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2dldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uLmpzIiwid2VicGFjazovLy8uL34vZmJqcy9saWIvaHlwaGVuYXRlLmpzIiwid2VicGFjazovLy8uL34vZmJqcy9saWIvaHlwaGVuYXRlU3R5bGVOYW1lLmpzIiwid2VicGFjazovLy8uL34vZmJqcy9saWIvaXNOb2RlLmpzIiwid2VicGFjazovLy8uL34vZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL21lbW9pemVTdHJpbmdPbmx5LmpzIiwid2VicGFjazovLy8uL34vZmJqcy9saWIvcGVyZm9ybWFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi9wZXJmb3JtYW5jZU5vdy5qcyIsIndlYnBhY2s6Ly8vLi9+L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9QcmVmaXhlci5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvcGx1Z2lucy9jYWxjLmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9wbHVnaW5zL2ZsZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3BsdWdpbnMvZmxleGJveElFLmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9wbHVnaW5zL2ZsZXhib3hPbGQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3BsdWdpbnMvZ3JhYkN1cnNvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvcGx1Z2lucy9ncmFkaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvcGx1Z2lucy9wb3NpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvcGx1Z2lucy9zaXppbmcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3BsdWdpbnMvdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvcGx1Z2lucy96b29tQ3Vyc29yLmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9wcmVmaXhQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvc3RhdGljL3BsdWdpbnMvY2FsYy5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvc3RhdGljL3BsdWdpbnMvY3Vyc29yLmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9zdGF0aWMvcGx1Z2lucy9mbGV4LmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9zdGF0aWMvcGx1Z2lucy9mbGV4Ym94SUUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3N0YXRpYy9wbHVnaW5zL2ZsZXhib3hPbGQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3N0YXRpYy9wbHVnaW5zL2dyYWRpZW50LmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9zdGF0aWMvcGx1Z2lucy9wb3NpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvc3RhdGljL3BsdWdpbnMvc2l6aW5nLmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9zdGF0aWMvcGx1Z2lucy90cmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9zdGF0aWMvcHJlZml4QWxsLmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi91dGlscy9nZXRCcm93c2VySW5mb3JtYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3V0aWxzL2dldFByZWZpeGVkS2V5ZnJhbWVzLmpzIiwid2VicGFjazovLy8uL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi91dGlscy9pc1ByZWZpeGVkUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3V0aWxzL3VucHJlZml4UHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcHJvcC10eXBlcy9jaGVja1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9hcHBlbmQtaW1wb3J0YW50LXRvLWVhY2gtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL2NhbWVsLWNhc2UtcHJvcHMtdG8tZGFzaC1jYXNlLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9jb21wb25lbnRzL3N0eWxlLXJvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL2NvbXBvbmVudHMvc3R5bGUtc2hlZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL2NvbXBvbmVudHMvc3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL2tleWZyYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JhZGl1bS9saWIvbWVyZ2Utc3R5bGVzLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9wbHVnaW5zL2NoZWNrLXByb3BzLXBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JhZGl1bS9saWIvcGx1Z2lucy9rZXlmcmFtZXMtcGx1Z2luLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9wbHVnaW5zL21lcmdlLXN0eWxlLWFycmF5LXBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JhZGl1bS9saWIvcGx1Z2lucy9tb3VzZS11cC1saXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JhZGl1bS9saWIvcGx1Z2lucy9wcmVmaXgtcGx1Z2luLmpzIiwid2VicGFjazovLy8uL34vcmFkaXVtL2xpYi9wbHVnaW5zL3JlbW92ZS1uZXN0ZWQtc3R5bGVzLXBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JhZGl1bS9saWIvcGx1Z2lucy9yZXNvbHZlLWludGVyYWN0aW9uLXN0eWxlcy1wbHVnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yYWRpdW0vbGliL3BsdWdpbnMvcmVzb2x2ZS1tZWRpYS1xdWVyaWVzLXBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JhZGl1bS9saWIvcGx1Z2lucy92aXNpdGVkLXBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvQVJJQURPTVByb3BlcnR5Q29uZmlnLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9BdXRvRm9jdXNVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvQmVmb3JlSW5wdXRFdmVudFBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvQ1NTUHJvcGVydHlPcGVyYXRpb25zLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9DaGFuZ2VFdmVudFBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvRGFuZ2VyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9EZWZhdWx0RXZlbnRQbHVnaW5PcmRlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvRW50ZXJMZWF2ZUV2ZW50UGx1Z2luLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9GYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL0hUTUxET01Qcm9wZXJ0eUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RDaGlsZFJlY29uY2lsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET00uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTUVtcHR5Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTUZlYXR1cmVGbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01JRE9wZXJhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NSW52YWxpZEFSSUFIb29rLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTU51bGxJbnB1dFZhbHVlUHJvcEhvb2suanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NT3B0aW9uLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTVNlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01TZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NVGV4dENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01UZXh0YXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01UcmVlVHJhdmVyc2FsLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTVVua25vd25Qcm9wZXJ0eUhvb2suanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0RGVidWdUb29sLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdEVsZW1lbnRTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0RXZlbnRFbWl0dGVyTWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0RXZlbnRMaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RIb3N0T3BlcmF0aW9uSGlzdG9yeUhvb2suanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0SW5qZWN0aW9uLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdIb29rLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdE11bHRpQ2hpbGQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0T3duZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdFJlZi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RTZXJ2ZXJCYXRjaGluZ1N0cmF0ZWd5LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdFNlcnZlclJlbmRlcmluZy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvU1ZHRE9NUHJvcGVydHlDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1NlbGVjdEV2ZW50UGx1Z2luLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9TaW1wbGVFdmVudFBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvU3ludGhldGljQW5pbWF0aW9uRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0NsaXBib2FyZEV2ZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNEcmFnRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0ZvY3VzRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0lucHV0RXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0tleWJvYXJkRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY1RvdWNoRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY1RyYW5zaXRpb25FdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvU3ludGhldGljV2hlZWxFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvYWRsZXIzMi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvY2hlY2tSZWFjdFR5cGVTcGVjLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9kYW5nZXJvdXNTdHlsZVZhbHVlLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9maW5kRE9NTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvZmxhdHRlbkNoaWxkcmVuLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9nZXRFdmVudEtleS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvZ2V0SXRlcmF0b3JGbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL3F1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9zZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1pcy9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1yb3V0ZXItZG9tL2VzL0Jyb3dzZXJSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1yb3V0ZXItZG9tL2VzL0hhc2hSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1yb3V0ZXItZG9tL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXJvdXRlci1kb20vZXMvTmF2TGluay5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXJvdXRlci1kb20vZXMvUHJvbXB0LmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtcm91dGVyLWRvbS9lcy9SZWRpcmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXJvdXRlci1kb20vZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtcm91dGVyLWRvbS9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1yb3V0ZXItZG9tL2VzL2dlbmVyYXRlUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXJvdXRlci1kb20vZXMvbWF0Y2hQYXRoLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtcm91dGVyLWRvbS9lcy93aXRoUm91dGVyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtcm91dGVyL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXJvdXRlci9lcy9Qcm9tcHQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1yb3V0ZXIvZXMvUmVkaXJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtcm91dGVyL2VzL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3Qtc2Nyb2xsY2hvci9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1zdmcvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL0tleUVzY2FwZVV0aWxzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1Bvb2xlZENsYXNzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0Q2hpbGRyZW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RET01GYWN0b3JpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RWZXJzaW9uLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL2NoZWNrUmVhY3RUeXBlU3BlYy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9nZXROZXh0RGVidWdJRC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9vbmx5Q2hpbGQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvdHJhdmVyc2VBbGxDaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3Jlc29sdmUtcGF0aG5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9zdmctaW5qZWN0b3Ivc3ZnLWluamVjdG9yLmpzIiwid2VicGFjazovLy8uL34vdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vfi90aW55LXdhcm5pbmcvZGlzdC90aW55LXdhcm5pbmcuZXNtLmpzIiwid2VicGFjazovLy8uL34vdmFsdWUtZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9hbWQtZGVmaW5lLmpzIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJFcnJvciIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiZSIsImNsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjYWxsIiwicnVuQ2xlYXJUaW1lb3V0IiwibWFya2VyIiwicXVldWUiLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJsZW5ndGgiLCJjb25jYXQiLCJkcmFpblF1ZXVlIiwidGltZW91dCIsImxlbiIsInJ1biIsIm5leHRUaWNrIiwiYXJncyIsIkFycmF5IiwiYXJndW1lbnRzIiwiaSIsInB1c2giLCJJdGVtIiwiYXJyYXkiLCJwcm90b3R5cGUiLCJhcHBseSIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJub29wIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwibmFtZSIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwicmVxdWlyZSIsInZhbGlkYXRlRm9ybWF0IiwiZm9ybWF0IiwiTk9ERV9FTlYiLCJ1bmRlZmluZWQiLCJpbnZhcmlhbnQiLCJjb25kaXRpb24iLCJhIiwiYiIsImMiLCJkIiwiZiIsImVycm9yIiwiYXJnSW5kZXgiLCJyZXBsYWNlIiwiZnJhbWVzVG9Qb3AiLCJlbXB0eUZ1bmN0aW9uIiwid2FybmluZyIsInByaW50V2FybmluZyIsIl9sZW4iLCJfa2V5IiwibWVzc2FnZSIsImNvbnNvbGUiLCJ4IiwiaW5kZXhPZiIsIl9sZW4yIiwiX2tleTIiLCJyZWFjdFByb2RJbnZhcmlhbnQiLCJjb2RlIiwiYXJnQ291bnQiLCJhcmdJZHgiLCJlbmNvZGVVUklDb21wb25lbnQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX2VuaGFuY2VyIiwiX2VuaGFuY2VyMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfcGx1Z2lucyIsIl9wbHVnaW5zMiIsIl9zdHlsZSIsIl9zdHlsZTIiLCJfc3R5bGVSb290IiwiX3N0eWxlUm9vdDIiLCJfZ2V0U3RhdGUiLCJfZ2V0U3RhdGUyIiwiX2tleWZyYW1lcyIsIl9rZXlmcmFtZXMyIiwiX3Jlc29sdmVTdHlsZXMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIlJhZGl1bSIsIkNvbXBvc2VkQ29tcG9uZW50IiwiUGx1Z2lucyIsIlN0eWxlIiwiU3R5bGVSb290IiwiZ2V0U3RhdGUiLCJrZXlmcmFtZXMiLCJUZXN0TW9kZSIsImNsZWFyU3RhdGUiLCJfX2NsZWFyU3RhdGVGb3JUZXN0cyIsImRpc2FibGUiLCJfX3NldFRlc3RNb2RlIiwiYmluZCIsImVuYWJsZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsImhhc093blByb3BlcnR5IiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJUeXBlRXJyb3IiLCJzaG91bGRVc2VOYXRpdmUiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsIm9yZGVyMiIsIm1hcCIsIm4iLCJqb2luIiwidGVzdDMiLCJzcGxpdCIsImZvckVhY2giLCJsZXR0ZXIiLCJrZXlzIiwiZXJyIiwidGFyZ2V0Iiwic291cmNlIiwiZnJvbSIsInRvIiwic3ltYm9scyIsInMiLCJrZXkiLCJfcHJvZEludmFyaWFudCIsIkRPTVByb3BlcnR5IiwiUmVhY3RET01Db21wb25lbnRGbGFncyIsIkFUVFJfTkFNRSIsIklEX0FUVFJJQlVURV9OQU1FIiwiRmxhZ3MiLCJpbnRlcm5hbEluc3RhbmNlS2V5IiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic2xpY2UiLCJzaG91bGRQcmVjYWNoZU5vZGUiLCJub2RlIiwibm9kZUlEIiwibm9kZVR5cGUiLCJnZXRBdHRyaWJ1dGUiLCJub2RlVmFsdWUiLCJnZXRSZW5kZXJlZEhvc3RPclRleHRGcm9tQ29tcG9uZW50IiwiY29tcG9uZW50IiwicmVuZGVyZWQiLCJfcmVuZGVyZWRDb21wb25lbnQiLCJwcmVjYWNoZU5vZGUiLCJpbnN0IiwiaG9zdEluc3QiLCJfaG9zdE5vZGUiLCJ1bmNhY2hlTm9kZSIsInByZWNhY2hlQ2hpbGROb2RlcyIsIl9mbGFncyIsImhhc0NhY2hlZENoaWxkTm9kZXMiLCJjaGlsZHJlbiIsIl9yZW5kZXJlZENoaWxkcmVuIiwiY2hpbGROb2RlIiwiZmlyc3RDaGlsZCIsIm91dGVyIiwiY2hpbGRJbnN0IiwiY2hpbGRJRCIsIl9kb21JRCIsIm5leHRTaWJsaW5nIiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJwYXJlbnRzIiwicGFyZW50Tm9kZSIsImNsb3Nlc3QiLCJwb3AiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsIl9ob3N0UGFyZW50IiwiUmVhY3RET01Db21wb25lbnRUcmVlIiwiUmVhY3RJcyIsInRocm93T25EaXJlY3RBY2Nlc3MiLCJpc0VsZW1lbnQiLCJjYW5Vc2VET00iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImNhblVzZVdvcmtlcnMiLCJXb3JrZXIiLCJjYW5Vc2VFdmVudExpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiaXNJbldvcmtlciIsImRlYnVnVG9vbCIsIlJlYWN0RGVidWdUb29sIiwiUmVhY3RDdXJyZW50T3duZXIiLCJpc05hdGl2ZSIsImZuIiwiZnVuY1RvU3RyaW5nIiwiRnVuY3Rpb24iLCJyZUlzTmF0aXZlIiwiUmVnRXhwIiwidGVzdCIsImNhblVzZUNvbGxlY3Rpb25zIiwiTWFwIiwiU2V0Iiwic2V0SXRlbSIsImdldEl0ZW0iLCJyZW1vdmVJdGVtIiwiZ2V0SXRlbUlEcyIsImFkZFJvb3QiLCJyZW1vdmVSb290IiwiZ2V0Um9vdElEcyIsIml0ZW1NYXAiLCJyb290SURTZXQiLCJpZCIsIml0ZW0iLCJzZXQiLCJnZXQiLCJhZGQiLCJpdGVtQnlLZXkiLCJyb290QnlLZXkiLCJnZXRLZXlGcm9tSUQiLCJnZXRJREZyb21LZXkiLCJwYXJzZUludCIsInN1YnN0ciIsInVubW91bnRlZElEcyIsInB1cmdlRGVlcCIsImNoaWxkSURzIiwiZGVzY3JpYmVDb21wb25lbnRGcmFtZSIsIm93bmVyTmFtZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImdldERpc3BsYXlOYW1lIiwiZWxlbWVudCIsInR5cGUiLCJkaXNwbGF5TmFtZSIsImRlc2NyaWJlSUQiLCJSZWFjdENvbXBvbmVudFRyZWVIb29rIiwiZ2V0RWxlbWVudCIsIm93bmVySUQiLCJnZXRPd25lcklEIiwiX3NvdXJjZSIsIm9uU2V0Q2hpbGRyZW4iLCJuZXh0Q2hpbGRJRHMiLCJuZXh0Q2hpbGRJRCIsIm5leHRDaGlsZCIsImlzTW91bnRlZCIsInBhcmVudElEIiwib25CZWZvcmVNb3VudENvbXBvbmVudCIsInRleHQiLCJ1cGRhdGVDb3VudCIsIm9uQmVmb3JlVXBkYXRlQ29tcG9uZW50Iiwib25Nb3VudENvbXBvbmVudCIsImlzUm9vdCIsIm9uVXBkYXRlQ29tcG9uZW50Iiwib25Vbm1vdW50Q29tcG9uZW50IiwicHVyZ2VVbm1vdW50ZWRDb21wb25lbnRzIiwiX3ByZXZlbnRQdXJnaW5nIiwiZ2V0Q3VycmVudFN0YWNrQWRkZW5kdW0iLCJ0b3BFbGVtZW50IiwiaW5mbyIsIm93bmVyIiwiX293bmVyIiwiZ2V0TmFtZSIsImN1cnJlbnRPd25lciIsImN1cnJlbnQiLCJfZGVidWdJRCIsImdldFN0YWNrQWRkZW5kdW1CeUlEIiwiZ2V0UGFyZW50SUQiLCJnZXRDaGlsZElEcyIsImdldFNvdXJjZSIsImdldFRleHQiLCJnZXRVcGRhdGVDb3VudCIsImdldFJlZ2lzdGVyZWRJRHMiLCJwdXNoTm9uU3RhbmRhcmRXYXJuaW5nU3RhY2siLCJpc0NyZWF0aW5nRWxlbWVudCIsImN1cnJlbnRTb3VyY2UiLCJyZWFjdFN0YWNrIiwic3RhY2siLCJwb3BOb25TdGFuZGFyZFdhcm5pbmdTdGFjayIsInJlYWN0U3RhY2tFbmQiLCJpc0J1ZmZlciIsImlzQXJyYXkiLCJpc0FycmF5QnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJyZXN1bHQiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc1VuZGVmaW5lZCIsImlzT2JqZWN0IiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNGdW5jdGlvbiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwidHJpbSIsInN0ciIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsImwiLCJtZXJnZSIsImFzc2lnblZhbHVlIiwiZXh0ZW5kIiwidGhpc0FyZyIsIl9hc3NpZ24iLCJDYWxsYmFja1F1ZXVlIiwiUG9vbGVkQ2xhc3MiLCJSZWFjdEZlYXR1cmVGbGFncyIsIlJlYWN0UmVjb25jaWxlciIsIlRyYW5zYWN0aW9uIiwiZGlydHlDb21wb25lbnRzIiwidXBkYXRlQmF0Y2hOdW1iZXIiLCJhc2FwQ2FsbGJhY2tRdWV1ZSIsImdldFBvb2xlZCIsImFzYXBFbnF1ZXVlZCIsImJhdGNoaW5nU3RyYXRlZ3kiLCJlbnN1cmVJbmplY3RlZCIsIlJlYWN0VXBkYXRlcyIsIlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24iLCJORVNURURfVVBEQVRFUyIsImluaXRpYWxpemUiLCJkaXJ0eUNvbXBvbmVudHNMZW5ndGgiLCJjbG9zZSIsInNwbGljZSIsImZsdXNoQmF0Y2hlZFVwZGF0ZXMiLCJVUERBVEVfUVVFVUVJTkciLCJjYWxsYmFja1F1ZXVlIiwicmVzZXQiLCJub3RpZnlBbGwiLCJUUkFOU0FDVElPTl9XUkFQUEVSUyIsIlJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24iLCJyZWluaXRpYWxpemVUcmFuc2FjdGlvbiIsInJlY29uY2lsZVRyYW5zYWN0aW9uIiwiZ2V0VHJhbnNhY3Rpb25XcmFwcGVycyIsImRlc3RydWN0b3IiLCJyZWxlYXNlIiwicGVyZm9ybSIsIm1ldGhvZCIsInNjb3BlIiwiYWRkUG9vbGluZ1RvIiwiYmF0Y2hlZFVwZGF0ZXMiLCJjYWxsYmFjayIsIm1vdW50T3JkZXJDb21wYXJhdG9yIiwiYzEiLCJjMiIsIl9tb3VudE9yZGVyIiwicnVuQmF0Y2hlZFVwZGF0ZXMiLCJ0cmFuc2FjdGlvbiIsInNvcnQiLCJjYWxsYmFja3MiLCJfcGVuZGluZ0NhbGxiYWNrcyIsIm1hcmtlck5hbWUiLCJsb2dUb3BMZXZlbFJlbmRlcnMiLCJuYW1lZENvbXBvbmVudCIsIl9jdXJyZW50RWxlbWVudCIsImlzUmVhY3RUb3BMZXZlbFdyYXBwZXIiLCJ0aW1lIiwicGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5IiwidGltZUVuZCIsImoiLCJlbnF1ZXVlIiwiZ2V0UHVibGljSW5zdGFuY2UiLCJlbnF1ZXVlVXBkYXRlIiwiaXNCYXRjaGluZ1VwZGF0ZXMiLCJfdXBkYXRlQmF0Y2hOdW1iZXIiLCJhc2FwIiwiY29udGV4dCIsIlJlYWN0VXBkYXRlc0luamVjdGlvbiIsImluamVjdFJlY29uY2lsZVRyYW5zYWN0aW9uIiwiUmVjb25jaWxlVHJhbnNhY3Rpb24iLCJpbmplY3RCYXRjaGluZ1N0cmF0ZWd5IiwiX2JhdGNoaW5nU3RyYXRlZ3kiLCJpbmplY3Rpb24iLCJtYWtlRW1wdHlGdW5jdGlvbiIsImFyZyIsInRoYXRSZXR1cm5zIiwidGhhdFJldHVybnNGYWxzZSIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zTnVsbCIsInRoYXRSZXR1cm5zVGhpcyIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJwcmVmaXhlZFZhbHVlIiwia2VlcFVucHJlZml4ZWQiLCJkaWRXYXJuRm9yQWRkZWROZXdQcm9wZXJ0eSIsImlzUHJveHlTdXBwb3J0ZWQiLCJQcm94eSIsInNob3VsZEJlUmVsZWFzZWRQcm9wZXJ0aWVzIiwiRXZlbnRJbnRlcmZhY2UiLCJjdXJyZW50VGFyZ2V0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiZXZlbnQiLCJEYXRlIiwibm93IiwiZGVmYXVsdFByZXZlbnRlZCIsImlzVHJ1c3RlZCIsIlN5bnRoZXRpY0V2ZW50IiwiZGlzcGF0Y2hDb25maWciLCJ0YXJnZXRJbnN0IiwibmF0aXZlRXZlbnQiLCJuYXRpdmVFdmVudFRhcmdldCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiX3RhcmdldEluc3QiLCJJbnRlcmZhY2UiLCJjb25zdHJ1Y3RvciIsInByb3BOYW1lIiwibm9ybWFsaXplIiwicmV0dXJuVmFsdWUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uIiwiYXVnbWVudENsYXNzIiwiQ2xhc3MiLCJTdXBlciIsIkUiLCJmb3VyQXJndW1lbnRQb29sZXIiLCJjb25zdHJ1Y3QiLCJjcmVhdGUiLCJ0aGF0IiwicHJvcCIsImdldFZhbCIsImNvbmZpZ3VyYWJsZSIsImFjdGlvbiIsIndhcm4iLCJ3YXJuaW5nQ29uZGl0aW9uIiwiY2hlY2tNYXNrIiwiYml0bWFzayIsIkRPTVByb3BlcnR5SW5qZWN0aW9uIiwiTVVTVF9VU0VfUFJPUEVSVFkiLCJIQVNfQk9PTEVBTl9WQUxVRSIsIkhBU19OVU1FUklDX1ZBTFVFIiwiSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUiLCJIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFIiwiaW5qZWN0RE9NUHJvcGVydHlDb25maWciLCJkb21Qcm9wZXJ0eUNvbmZpZyIsIkluamVjdGlvbiIsIlByb3BlcnRpZXMiLCJET01BdHRyaWJ1dGVOYW1lc3BhY2VzIiwiRE9NQXR0cmlidXRlTmFtZXMiLCJET01Qcm9wZXJ0eU5hbWVzIiwiRE9NTXV0YXRpb25NZXRob2RzIiwiaXNDdXN0b21BdHRyaWJ1dGUiLCJfaXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnMiLCJwcm9wZXJ0aWVzIiwibG93ZXJDYXNlZCIsInRvTG93ZXJDYXNlIiwicHJvcENvbmZpZyIsInByb3BlcnR5SW5mbyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJwcm9wZXJ0eU5hbWUiLCJtdXRhdGlvbk1ldGhvZCIsIm11c3RVc2VQcm9wZXJ0eSIsImhhc0Jvb2xlYW5WYWx1ZSIsImhhc051bWVyaWNWYWx1ZSIsImhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlIiwiaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZSIsImdldFBvc3NpYmxlU3RhbmRhcmROYW1lIiwiQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiIsIlJPT1RfQVRUUklCVVRFX05BTUUiLCJBVFRSSUJVVEVfTkFNRV9DSEFSIiwiYXV0b2ZvY3VzIiwiaXNDdXN0b21BdHRyaWJ1dGVGbiIsIl9fREVWX18iLCJBcHAiLCJCdXlCdXR0b24iLCJMYXlvdXQiLCJOYXYiLCJOYXZMaWdodCIsIkZvb3RlciIsIkhlcm9WaWRlbyIsIlRpdGxlIiwiVGV4dCIsIlNlY3Rpb24iLCJJbWFnZVNwbGl0IiwiRmVhdHVyZXMiLCJQZXJzb24iLCJQZW9wbGUiLCJEZXZpY2VMb29rdXAiLCJEZXRhaWxzSW5wdXQiLCJJbnB1dCIsIllvdVR1YmUiLCJJblRoZUJveCIsIkluVGhlQm94X2ZyIiwiSW5UaGVCb3hfZ3IiLCJUZWNoU3BlY3MiLCJUZWNoU3BlY3NfZnIiLCJUZWNoU3BlY3NfZ3IiLCJJbWFnZVNwbGl0UGhvbmUiLCJvbmVBcmd1bWVudFBvb2xlciIsImNvcHlGaWVsZHNGcm9tIiwiS2xhc3MiLCJpbnN0YW5jZVBvb2wiLCJpbnN0YW5jZSIsInR3b0FyZ3VtZW50UG9vbGVyIiwiYTEiLCJhMiIsInRocmVlQXJndW1lbnRQb29sZXIiLCJhMyIsImE0Iiwic3RhbmRhcmRSZWxlYXNlciIsInBvb2xTaXplIiwiREVGQVVMVF9QT09MX1NJWkUiLCJERUZBVUxUX1BPT0xFUiIsIkNvcHlDb25zdHJ1Y3RvciIsInBvb2xlciIsIk5ld0tsYXNzIiwiUmVhY3RSZWYiLCJSZWFjdEluc3RydW1lbnRhdGlvbiIsImF0dGFjaFJlZnMiLCJtb3VudENvbXBvbmVudCIsImludGVybmFsSW5zdGFuY2UiLCJob3N0UGFyZW50IiwiaG9zdENvbnRhaW5lckluZm8iLCJwYXJlbnREZWJ1Z0lEIiwibWFya3VwIiwicmVmIiwiZ2V0UmVhY3RNb3VudFJlYWR5IiwiZ2V0SG9zdE5vZGUiLCJ1bm1vdW50Q29tcG9uZW50Iiwic2FmZWx5Iiwib25CZWZvcmVVbm1vdW50Q29tcG9uZW50IiwiZGV0YWNoUmVmcyIsInJlY2VpdmVDb21wb25lbnQiLCJuZXh0RWxlbWVudCIsInByZXZFbGVtZW50IiwiX2NvbnRleHQiLCJyZWZzQ2hhbmdlZCIsInNob3VsZFVwZGF0ZVJlZnMiLCJSZWFjdEJhc2VDbGFzc2VzIiwiUmVhY3RDaGlsZHJlbiIsIlJlYWN0RE9NRmFjdG9yaWVzIiwiUmVhY3RFbGVtZW50IiwiUmVhY3RQcm9wVHlwZXMiLCJSZWFjdFZlcnNpb24iLCJjcmVhdGVSZWFjdENsYXNzIiwib25seUNoaWxkIiwiY3JlYXRlRmFjdG9yeSIsImNsb25lRWxlbWVudCIsImxvd1ByaW9yaXR5V2FybmluZyIsImNhbkRlZmluZVByb3BlcnR5IiwiUmVhY3RFbGVtZW50VmFsaWRhdG9yIiwiZGlkV2FyblByb3BUeXBlc0RlcHJlY2F0ZWQiLCJfX3NwcmVhZCIsImNyZWF0ZU1peGluIiwibWl4aW4iLCJ3YXJuZWRGb3JTcHJlYWQiLCJ3YXJuZWRGb3JDcmVhdGVNaXhpbiIsIlJlYWN0IiwiQ2hpbGRyZW4iLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiQ29tcG9uZW50IiwiUHVyZUNvbXBvbmVudCIsImlzVmFsaWRFbGVtZW50IiwiUHJvcFR5cGVzIiwiY3JlYXRlQ2xhc3MiLCJET00iLCJ3YXJuZWRGb3JDcmVhdGVDbGFzcyIsIndhcm5lZEZvckZhY3RvcmllcyIsImZhY3RvcnkiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJSRVNFUlZFRF9QUk9QUyIsIl9fc2VsZiIsIl9fc291cmNlIiwic3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24iLCJzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93biIsImhhc1ZhbGlkUmVmIiwiY29uZmlnIiwiZ2V0dGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaXNSZWFjdFdhcm5pbmciLCJoYXNWYWxpZEtleSIsImRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyIiwicHJvcHMiLCJ3YXJuQWJvdXRBY2Nlc3NpbmdLZXkiLCJkZWZpbmVSZWZQcm9wV2FybmluZ0dldHRlciIsIndhcm5BYm91dEFjY2Vzc2luZ1JlZiIsInNlbGYiLCIkJHR5cGVvZiIsIl9zdG9yZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsInZhbGlkYXRlZCIsIl9zZWxmIiwiZnJlZXplIiwiY2hpbGRyZW5MZW5ndGgiLCJjaGlsZEFycmF5IiwiZGVmYXVsdFByb3BzIiwiY2xvbmVBbmRSZXBsYWNlS2V5Iiwib2xkRWxlbWVudCIsIm5ld0tleSIsIm5ld0VsZW1lbnQiLCJvYmplY3QiLCJCcm93c2VyUm91dGVyIiwiX0Jyb3dzZXJSb3V0ZXIiLCJIYXNoUm91dGVyIiwiX0hhc2hSb3V0ZXIiLCJMaW5rIiwiX0xpbmsiLCJNZW1vcnlSb3V0ZXIiLCJfTWVtb3J5Um91dGVyIiwiTmF2TGluayIsIl9OYXZMaW5rIiwiUHJvbXB0IiwiX1Byb21wdCIsIlJlZGlyZWN0IiwiX1JlZGlyZWN0IiwiUm91dGUiLCJfUm91dGUiLCJSb3V0ZXIiLCJfUm91dGVyIiwiU3RhdGljUm91dGVyIiwiX1N0YXRpY1JvdXRlciIsIlN3aXRjaCIsIl9Td2l0Y2giLCJnZW5lcmF0ZVBhdGgiLCJfZ2VuZXJhdGVQYXRoIiwibWF0Y2hQYXRoIiwiX21hdGNoUGF0aCIsIndpdGhSb3V0ZXIiLCJfd2l0aFJvdXRlciIsImFkZExlYWRpbmdTbGFzaCIsInBhdGgiLCJjaGFyQXQiLCJzdHJpcExlYWRpbmdTbGFzaCIsImhhc0Jhc2VuYW1lIiwicHJlZml4Iiwic3RyaXBCYXNlbmFtZSIsInN0cmlwVHJhaWxpbmdTbGFzaCIsInBhcnNlUGF0aCIsInBhdGhuYW1lIiwic2VhcmNoIiwiaGFzaCIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwiY3JlYXRlUGF0aCIsImxvY2F0aW9uIiwiY3JlYXRlTG9jYXRpb24iLCJzdGF0ZSIsImN1cnJlbnRMb2NhdGlvbiIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwibG9jYXRpb25zQXJlRXF1YWwiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImFwcGVuZExpc3RlbmVyIiwiaXNBY3RpdmUiLCJsaXN0ZW5lciIsImZpbHRlciIsIm5vdGlmeUxpc3RlbmVycyIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJzdXBwb3J0c0hpc3RvcnkiLCJ1YSIsInVzZXJBZ2VudCIsImhpc3RvcnkiLCJzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlIiwic3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2giLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiUG9wU3RhdGVFdmVudCIsIkhhc2hDaGFuZ2VFdmVudCIsImdldEhpc3RvcnlTdGF0ZSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl9yZWYiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwidHJhbnNpdGlvbk1hbmFnZXIiLCJzZXRTdGF0ZSIsIm5leHRTdGF0ZSIsImhhbmRsZVBvcFN0YXRlIiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsIm9rIiwicmV2ZXJ0UG9wIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxLZXlzIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJnbyIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJocmVmIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNCbG9ja2VkIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJIYXNoQ2hhbmdlRXZlbnQkMSIsIkhhc2hQYXRoQ29kZXJzIiwiaGFzaGJhbmciLCJlbmNvZGVQYXRoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsImdldEhhc2hQYXRoIiwic3Vic3RyaW5nIiwicHVzaEhhc2hQYXRoIiwicmVwbGFjZUhhc2hQYXRoIiwiY3JlYXRlSGFzaEhpc3RvcnkiLCJjYW5Hb1dpdGhvdXRSZWxvYWQiLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImlnbm9yZVBhdGgiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImFsbFBhdGhzIiwibGFzdEluZGV4T2YiLCJoYXNoQ2hhbmdlZCIsIm5leHRQYXRocyIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJtaW4iLCJtYXgiLCJjcmVhdGVNZW1vcnlIaXN0b3J5IiwiX3Byb3BzJGluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEVudHJpZXMiLCJfcHJvcHMkaW5pdGlhbEluZGV4IiwiaW5pdGlhbEluZGV4IiwiZW50cmllcyIsImluZGV4IiwiZW50cnkiLCJuZXh0SW5kZXgiLCJuZXh0RW50cmllcyIsImNhbkdvIiwiRE9NTmFtZXNwYWNlcyIsInNldElubmVySFRNTCIsImNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24iLCJzZXRUZXh0Q29udGVudCIsIkVMRU1FTlRfTk9ERV9UWVBFIiwiRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFIiwiZW5hYmxlTGF6eSIsImRvY3VtZW50TW9kZSIsImluc2VydFRyZWVDaGlsZHJlbiIsInRyZWUiLCJpbnNlcnRUcmVlQmVmb3JlIiwiaHRtbCIsInJlZmVyZW5jZU5vZGUiLCJub2RlTmFtZSIsIm5hbWVzcGFjZVVSSSIsImluc2VydEJlZm9yZSIsInJlcGxhY2VDaGlsZFdpdGhUcmVlIiwib2xkTm9kZSIsIm5ld1RyZWUiLCJyZXBsYWNlQ2hpbGQiLCJxdWV1ZUNoaWxkIiwicGFyZW50VHJlZSIsImNoaWxkVHJlZSIsImFwcGVuZENoaWxkIiwicXVldWVIVE1MIiwicXVldWVUZXh0IiwiRE9NTGF6eVRyZWUiLCJzdHlsZXMiLCJmb250U2l6ZSIsIm1hcmdpblRvcCIsImVtcHR5T2JqZWN0IiwiRXZlbnRQbHVnaW5SZWdpc3RyeSIsIkV2ZW50UGx1Z2luVXRpbHMiLCJSZWFjdEVycm9yVXRpbHMiLCJhY2N1bXVsYXRlSW50byIsImZvckVhY2hBY2N1bXVsYXRlZCIsImxpc3RlbmVyQmFuayIsImV2ZW50UXVldWUiLCJleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UiLCJzaW11bGF0ZWQiLCJleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIiLCJleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VTaW11bGF0ZWQiLCJleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VUb3BMZXZlbCIsImdldERpY3Rpb25hcnlLZXkiLCJfcm9vdE5vZGVJRCIsImlzSW50ZXJhY3RpdmUiLCJ0YWciLCJzaG91bGRQcmV2ZW50TW91c2VFdmVudCIsImRpc2FibGVkIiwiRXZlbnRQbHVnaW5IdWIiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwicHV0TGlzdGVuZXIiLCJyZWdpc3RyYXRpb25OYW1lIiwiYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUiLCJQbHVnaW5Nb2R1bGUiLCJyZWdpc3RyYXRpb25OYW1lTW9kdWxlcyIsImRpZFB1dExpc3RlbmVyIiwiZ2V0TGlzdGVuZXIiLCJkZWxldGVMaXN0ZW5lciIsIndpbGxEZWxldGVMaXN0ZW5lciIsImRlbGV0ZUFsbExpc3RlbmVycyIsImV4dHJhY3RFdmVudHMiLCJ0b3BMZXZlbFR5cGUiLCJldmVudHMiLCJwbHVnaW5zIiwicG9zc2libGVQbHVnaW4iLCJleHRyYWN0ZWRFdmVudHMiLCJlbnF1ZXVlRXZlbnRzIiwicHJvY2Vzc0V2ZW50UXVldWUiLCJwcm9jZXNzaW5nRXZlbnRRdWV1ZSIsInJldGhyb3dDYXVnaHRFcnJvciIsIl9fcHVyZ2UiLCJfX2dldExpc3RlbmVyQmFuayIsImxpc3RlbmVyQXRQaGFzZSIsInByb3BhZ2F0aW9uUGhhc2UiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsImFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMiLCJwaGFzZSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGUiLCJ0cmF2ZXJzZVR3b1BoYXNlIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZVNraXBUYXJnZXQiLCJwYXJlbnRJbnN0IiwiZ2V0UGFyZW50SW5zdGFuY2UiLCJhY2N1bXVsYXRlRGlzcGF0Y2hlcyIsImlnbm9yZWREaXJlY3Rpb24iLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZSIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldCIsImFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyIsImxlYXZlIiwiZW50ZXIiLCJ0cmF2ZXJzZUVudGVyTGVhdmUiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsIkV2ZW50UHJvcGFnYXRvcnMiLCJSZWFjdEluc3RhbmNlTWFwIiwicmVtb3ZlIiwiX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSIsImhhcyIsImdldEV2ZW50VGFyZ2V0IiwiVUlFdmVudEludGVyZmFjZSIsInZpZXciLCJkb2MiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJkZXRhaWwiLCJTeW50aGV0aWNVSUV2ZW50IiwiZGlzcGF0Y2hNYXJrZXIiLCJfZXh0ZW5kcyIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfcmVhY3QiLCJfcmVhY3QyIiwiX3Byb3BUeXBlcyIsIl9wcm9wVHlwZXMyIiwiX3dhcm5pbmciLCJfd2FybmluZzIiLCJfdXRpbHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJTY3JvbGxjaG9yIiwiX1JlYWN0JENvbXBvbmVudCIsIl90aGlzIiwiZ2V0UHJvdG90eXBlT2YiLCJoYW5kbGVDbGljayIsIl9iZWZvcmVBbmltYXRlIiwiYW5pbWF0ZVNjcm9sbCIsIl90byIsIl9hbmltYXRlIiwiX2FmdGVyQW5pbWF0ZSIsImFuaW1hdGUiLCJfcmVmJG9mZnNldCIsIm9mZnNldCIsIl9yZWYkZHVyYXRpb24iLCJkdXJhdGlvbiIsIl9yZWYkZWFzaW5nIiwiZWFzaW5nIiwiZWFzZU91dFF1YWQiLCJiZWZvcmVBbmltYXRlIiwiYWZ0ZXJBbmltYXRlIiwicmVuZGVyIiwib25DbGljayIsInByb3BUeXBlcyIsInN0cmluZyIsImlzUmVxdWlyZWQiLCJzaGFwZSIsIm51bWJlciIsImZ1bmMiLCJnZXRFbGVtZW50QnlJZCIsImJvZHkiLCJzY3JvbGxUbyIsIl9yZWYyIiwic3RhcnQiLCJnZXRTY3JvbGxUb3AiLCJnZXRPZmZzZXRUb3AiLCJjaGFuZ2UiLCJpbmNyZW1lbnQiLCJlbGFwc2VkVGltZSIsImVsYXBzZWQiLCJwb3NpdGlvbiIsInNldFNjcm9sbFRvcCIsInQiLCJsaW5rIiwiYm94IiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyUmFkaXVzIiwidGV4dEFsaWduIiwid2lkdGgiLCJtYXJnaW4iLCJoZWlnaHQiLCJkaXNwbGF5IiwiZmxleERpcmVjdGlvbiIsImp1c3RpZnlDb250ZW50IiwiY29sb3IiLCJ0ZXh0RGVjb3JhdGlvbiIsInRleHRUcmFuc2Zvcm0iLCJfZGVmaW5lUHJvcGVydHkiLCJwcm9wZXJ0eSIsInJlcGxhY2VyIiwiZXZlbnRQbHVnaW5PcmRlciIsIm5hbWVzVG9QbHVnaW5zIiwicmVjb21wdXRlUGx1Z2luT3JkZXJpbmciLCJwbHVnaW5OYW1lIiwicGx1Z2luTW9kdWxlIiwicGx1Z2luSW5kZXgiLCJwdWJsaXNoZWRFdmVudHMiLCJldmVudFR5cGVzIiwiZXZlbnROYW1lIiwicHVibGlzaEV2ZW50Rm9yUGx1Z2luIiwiZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzIiwicGhhc2VOYW1lIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZSIsInB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lIiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsImRlcGVuZGVuY2llcyIsImxvd2VyQ2FzZWROYW1lIiwicG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyIsIm9uZGJsY2xpY2siLCJpbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RlZE5hbWVzVG9QbHVnaW5zIiwiaXNPcmRlcmluZ0RpcnR5IiwiZ2V0UGx1Z2luTW9kdWxlRm9yRXZlbnQiLCJfcmVzZXRFdmVudFBsdWdpbnMiLCJSZWFjdEV2ZW50RW1pdHRlck1peGluIiwiVmlld3BvcnRNZXRyaWNzIiwiZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUiLCJpc0V2ZW50U3VwcG9ydGVkIiwiaGFzRXZlbnRQYWdlWFkiLCJhbHJlYWR5TGlzdGVuaW5nVG8iLCJpc01vbml0b3JpbmdTY3JvbGxWYWx1ZSIsInJlYWN0VG9wTGlzdGVuZXJzQ291bnRlciIsInRvcEV2ZW50TWFwcGluZyIsInRvcEFib3J0IiwidG9wQW5pbWF0aW9uRW5kIiwidG9wQW5pbWF0aW9uSXRlcmF0aW9uIiwidG9wQW5pbWF0aW9uU3RhcnQiLCJ0b3BCbHVyIiwidG9wQ2FuUGxheSIsInRvcENhblBsYXlUaHJvdWdoIiwidG9wQ2hhbmdlIiwidG9wQ2xpY2siLCJ0b3BDb21wb3NpdGlvbkVuZCIsInRvcENvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvblVwZGF0ZSIsInRvcENvbnRleHRNZW51IiwidG9wQ29weSIsInRvcEN1dCIsInRvcERvdWJsZUNsaWNrIiwidG9wRHJhZyIsInRvcERyYWdFbmQiLCJ0b3BEcmFnRW50ZXIiLCJ0b3BEcmFnRXhpdCIsInRvcERyYWdMZWF2ZSIsInRvcERyYWdPdmVyIiwidG9wRHJhZ1N0YXJ0IiwidG9wRHJvcCIsInRvcER1cmF0aW9uQ2hhbmdlIiwidG9wRW1wdGllZCIsInRvcEVuY3J5cHRlZCIsInRvcEVuZGVkIiwidG9wRXJyb3IiLCJ0b3BGb2N1cyIsInRvcElucHV0IiwidG9wS2V5RG93biIsInRvcEtleVByZXNzIiwidG9wS2V5VXAiLCJ0b3BMb2FkZWREYXRhIiwidG9wTG9hZGVkTWV0YWRhdGEiLCJ0b3BMb2FkU3RhcnQiLCJ0b3BNb3VzZURvd24iLCJ0b3BNb3VzZU1vdmUiLCJ0b3BNb3VzZU91dCIsInRvcE1vdXNlT3ZlciIsInRvcE1vdXNlVXAiLCJ0b3BQYXN0ZSIsInRvcFBhdXNlIiwidG9wUGxheSIsInRvcFBsYXlpbmciLCJ0b3BQcm9ncmVzcyIsInRvcFJhdGVDaGFuZ2UiLCJ0b3BTY3JvbGwiLCJ0b3BTZWVrZWQiLCJ0b3BTZWVraW5nIiwidG9wU2VsZWN0aW9uQ2hhbmdlIiwidG9wU3RhbGxlZCIsInRvcFN1c3BlbmQiLCJ0b3BUZXh0SW5wdXQiLCJ0b3BUaW1lVXBkYXRlIiwidG9wVG91Y2hDYW5jZWwiLCJ0b3BUb3VjaEVuZCIsInRvcFRvdWNoTW92ZSIsInRvcFRvdWNoU3RhcnQiLCJ0b3BUcmFuc2l0aW9uRW5kIiwidG9wVm9sdW1lQ2hhbmdlIiwidG9wV2FpdGluZyIsInRvcFdoZWVsIiwidG9wTGlzdGVuZXJzSURLZXkiLCJnZXRMaXN0ZW5pbmdGb3JEb2N1bWVudCIsIm1vdW50QXQiLCJSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIiLCJSZWFjdEV2ZW50TGlzdGVuZXIiLCJpbmplY3RSZWFjdEV2ZW50TGlzdGVuZXIiLCJzZXRIYW5kbGVUb3BMZXZlbCIsImhhbmRsZVRvcExldmVsIiwic2V0RW5hYmxlZCIsImVuYWJsZWQiLCJpc0VuYWJsZWQiLCJsaXN0ZW5UbyIsImNvbnRlbnREb2N1bWVudEhhbmRsZSIsImlzTGlzdGVuaW5nIiwiZGVwZW5kZW5jeSIsInRyYXBCdWJibGVkRXZlbnQiLCJ0cmFwQ2FwdHVyZWRFdmVudCIsIldJTkRPV19IQU5ETEUiLCJoYW5kbGVyQmFzZU5hbWUiLCJoYW5kbGUiLCJzdXBwb3J0c0V2ZW50UGFnZVhZIiwiY3JlYXRlRXZlbnQiLCJldiIsImVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZyIsInJlZnJlc2giLCJyZWZyZXNoU2Nyb2xsVmFsdWVzIiwibW9uaXRvclNjcm9sbFZhbHVlIiwiZ2V0RXZlbnRNb2RpZmllclN0YXRlIiwiTW91c2VFdmVudEludGVyZmFjZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJzcmNFbGVtZW50IiwidG9FbGVtZW50IiwicGFnZVgiLCJjdXJyZW50U2Nyb2xsTGVmdCIsInBhZ2VZIiwiY3VycmVudFNjcm9sbFRvcCIsIlN5bnRoZXRpY01vdXNlRXZlbnQiLCJPQlNFUlZFRF9FUlJPUiIsIlRyYW5zYWN0aW9uSW1wbCIsInRyYW5zYWN0aW9uV3JhcHBlcnMiLCJ3cmFwcGVySW5pdERhdGEiLCJfaXNJblRyYW5zYWN0aW9uIiwiaXNJblRyYW5zYWN0aW9uIiwiZXJyb3JUaHJvd24iLCJyZXQiLCJpbml0aWFsaXplQWxsIiwiY2xvc2VBbGwiLCJzdGFydEluZGV4Iiwid3JhcHBlciIsImluaXREYXRhIiwibWF0Y2hIdG1sUmVnRXhwIiwiZXNjYXBlSHRtbCIsIm1hdGNoIiwiZXhlYyIsImVzY2FwZSIsImxhc3RJbmRleCIsImNoYXJDb2RlQXQiLCJlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIiLCJXSElURVNQQUNFX1RFU1QiLCJOT05WSVNJQkxFX1RFU1QiLCJyZXVzYWJsZVNWR0NvbnRhaW5lciIsInN2ZyIsImlubmVySFRNTCIsInN2Z05vZGUiLCJ0ZXN0RWxlbWVudCIsInRleHROb2RlIiwiZGF0YSIsInJlbW92ZUNoaWxkIiwiZGVsZXRlRGF0YSIsInN0eWxlIiwibWF4V2lkdGgiLCJwYWRkaW5nIiwidXRpbHMiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwiZ2V0RGVmYXVsdEFkYXB0ZXIiLCJhZGFwdGVyIiwiWE1MSHR0cFJlcXVlc3QiLCJkZWZhdWx0cyIsInRyYW5zZm9ybVJlcXVlc3QiLCJKU09OIiwic3RyaW5naWZ5IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJwYXJzZSIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJzdGF0dXMiLCJjb21tb24iLCJmb3JFYWNoTWV0aG9kTm9EYXRhIiwiZm9yRWFjaE1ldGhvZFdpdGhEYXRhIiwiaXMiLCJ5Iiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwidG9VcHBlckNhc2UiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImNzc1J1bGVTZXRUb1N0cmluZyIsIl9hcHBlbmRQeElmTmVlZGVkIiwiX2FwcGVuZFB4SWZOZWVkZWQyIiwiX2NhbWVsQ2FzZVByb3BzVG9EYXNoQ2FzZSIsIl9jYW1lbENhc2VQcm9wc1RvRGFzaENhc2UyIiwiX21hcE9iamVjdCIsIl9tYXBPYmplY3QyIiwiX3ByZWZpeGVyIiwiY3JlYXRlTWFya3VwRm9yU3R5bGVzIiwic2VsZWN0b3IiLCJydWxlcyIsInJ1bGVzV2l0aFB4IiwicHJlZml4ZWRSdWxlcyIsImdldFByZWZpeGVkU3R5bGUiLCJjc3NQcmVmaXhlZFJ1bGVzIiwic2VyaWFsaXplZFJ1bGVzIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiZ2V0UHJlZml4ZWRLZXlmcmFtZXMiLCJfaW5saW5lU3R5bGVQcmVmaXhlciIsIl9pbmxpbmVTdHlsZVByZWZpeGVyMiIsInRyYW5zZm9ybVZhbHVlcyIsInJlZHVjZSIsIm5ld1N0eWxlIiwiX2hhc1dhcm5lZEFib3V0VXNlckFnZW50IiwiX2xhc3RVc2VyQWdlbnQiLCJfY2FjaGVkUHJlZml4ZXIiLCJnZXRQcmVmaXhlciIsImFjdHVhbFVzZXJBZ2VudCIsImdsb2JhbCIsInByZWZpeEFsbCIsInByZWZpeGVkS2V5ZnJhbWVzIiwic3R5bGVXaXRoRmFsbGJhY2tzIiwicHJlZml4ZXIiLCJwcmVmaXhlZFN0eWxlIiwiU3R5bGVLZWVwZXIiLCJfdXNlckFnZW50IiwiX2xpc3RlbmVycyIsIl9jc3NTZXQiLCJzdWJzY3JpYmUiLCJsaXN0ZW5lckluZGV4IiwiYWRkQ1NTIiwiY3NzIiwiX3RoaXMyIiwiX2VtaXRDaGFuZ2UiLCJnZXRDU1MiLCJEYW5nZXIiLCJnZXROb2RlQWZ0ZXIiLCJpbnNlcnRDaGlsZEF0IiwiaW5zZXJ0TGF6eVRyZWVDaGlsZEF0IiwibW92ZUNoaWxkIiwibW92ZURlbGltaXRlZFRleHQiLCJjbG9zaW5nQ29tbWVudCIsInJlbW92ZURlbGltaXRlZFRleHQiLCJvcGVuaW5nQ29tbWVudCIsIm5leHROb2RlIiwic3RhcnROb2RlIiwicmVwbGFjZURlbGltaXRlZFRleHQiLCJzdHJpbmdUZXh0Iiwibm9kZUFmdGVyQ29tbWVudCIsImNyZWF0ZVRleHROb2RlIiwib25Ib3N0T3BlcmF0aW9uIiwiaW5zdGFuY2VJRCIsInBheWxvYWQiLCJkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCIsIm9sZENoaWxkIiwicHJldkluc3RhbmNlIiwibmV4dEluc3RhbmNlIiwiRE9NQ2hpbGRyZW5PcGVyYXRpb25zIiwicHJvY2Vzc1VwZGF0ZXMiLCJ1cGRhdGVzIiwicGFyZW50Tm9kZURlYnVnSUQiLCJrIiwidXBkYXRlIiwiY29udGVudCIsImFmdGVyTm9kZSIsImZyb21Ob2RlIiwibWF0aG1sIiwiQ29tcG9uZW50VHJlZSIsIlRyZWVUcmF2ZXJzYWwiLCJpbmplY3RDb21wb25lbnRUcmVlIiwiSW5qZWN0ZWQiLCJpbmplY3RUcmVlVHJhdmVyc2FsIiwiaXNBbmNlc3RvciIsImdldExvd2VzdENvbW1vbkFuY2VzdG9yIiwiaXNFbmRpc2giLCJpc01vdmVpc2giLCJpc1N0YXJ0aXNoIiwidmFsaWRhdGVFdmVudERpc3BhdGNoZXMiLCJkaXNwYXRjaExpc3RlbmVycyIsImRpc3BhdGNoSW5zdGFuY2VzIiwibGlzdGVuZXJzSXNBcnIiLCJsaXN0ZW5lcnNMZW4iLCJpbnN0YW5jZXNJc0FyciIsImluc3RhbmNlc0xlbiIsImV4ZWN1dGVEaXNwYXRjaCIsImludm9rZUd1YXJkZWRDYWxsYmFja1dpdGhDYXRjaCIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsIiwiZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZSIsImV4ZWN1dGVEaXJlY3REaXNwYXRjaCIsImRpc3BhdGNoTGlzdGVuZXIiLCJkaXNwYXRjaEluc3RhbmNlIiwicmVzIiwiaGFzRGlzcGF0Y2hlcyIsImFyZ0Zyb20iLCJhcmdUbyIsImVzY2FwZVJlZ2V4IiwiZXNjYXBlckxvb2t1cCIsImVzY2FwZWRTdHJpbmciLCJ1bmVzY2FwZSIsInVuZXNjYXBlUmVnZXgiLCJ1bmVzY2FwZXJMb29rdXAiLCJrZXlTdWJzdHJpbmciLCJLZXlFc2NhcGVVdGlscyIsInByb3BUeXBlc0ZhY3RvcnkiLCJoYXNSZWFkT25seVZhbHVlIiwiY2hlY2tib3giLCJpbWFnZSIsImhpZGRlbiIsInJhZGlvIiwic3VibWl0IiwiX2Fzc2VydFNpbmdsZUxpbmsiLCJpbnB1dFByb3BzIiwiY2hlY2tlZExpbmsiLCJ2YWx1ZUxpbmsiLCJfYXNzZXJ0VmFsdWVMaW5rIiwib25DaGFuZ2UiLCJfYXNzZXJ0Q2hlY2tlZExpbmsiLCJjaGVja2VkIiwiY29tcG9uZW50TmFtZSIsInJlYWRPbmx5IiwibG9nZ2VkVHlwZUZhaWx1cmVzIiwiZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtIiwiTGlua2VkVmFsdWVVdGlscyIsImNoZWNrUHJvcFR5cGVzIiwidGFnTmFtZSIsImFkZGVuZHVtIiwiZ2V0VmFsdWUiLCJnZXRDaGVja2VkIiwiZXhlY3V0ZU9uQ2hhbmdlIiwicmVxdWVzdENoYW5nZSIsImluamVjdGVkIiwiUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCIsInJlcGxhY2VOb2RlV2l0aE1hcmt1cCIsInByb2Nlc3NDaGlsZHJlblVwZGF0ZXMiLCJpbmplY3RFbnZpcm9ubWVudCIsImVudmlyb25tZW50IiwiY2F1Z2h0RXJyb3IiLCJkaXNwYXRjaEV2ZW50IiwiZmFrZU5vZGUiLCJib3VuZEZ1bmMiLCJldnRUeXBlIiwiZXZ0IiwiaW5pdEV2ZW50IiwiZm9ybWF0VW5leHBlY3RlZEFyZ3VtZW50IiwiZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlIiwicHVibGljSW5zdGFuY2UiLCJjYWxsZXJOYW1lIiwiY3RvciIsIlJlYWN0VXBkYXRlUXVldWUiLCJfd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIiLCJlbnF1ZXVlQ2FsbGJhY2siLCJ2YWxpZGF0ZUNhbGxiYWNrIiwiZW5xdWV1ZUNhbGxiYWNrSW50ZXJuYWwiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJfcGVuZGluZ0ZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImNvbXBsZXRlU3RhdGUiLCJfcGVuZGluZ1N0YXRlUXVldWUiLCJfcGVuZGluZ1JlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsInBhcnRpYWxTdGF0ZSIsIm9uU2V0U3RhdGUiLCJlbnF1ZXVlRWxlbWVudEludGVybmFsIiwibmV4dENvbnRleHQiLCJfcGVuZGluZ0VsZW1lbnQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwiYXJnMCIsImFyZzEiLCJhcmcyIiwiYXJnMyIsImdldEV2ZW50Q2hhckNvZGUiLCJjaGFyQ29kZSIsImtleUNvZGUiLCJtb2RpZmllcktleVRvUHJvcCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJtb2RpZmllclN0YXRlR2V0dGVyIiwia2V5QXJnIiwic3ludGhldGljRXZlbnQiLCJrZXlQcm9wIiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCIsIlJlYWN0RW1wdHlDb21wb25lbnQiLCJSZWFjdEhvc3RDb21wb25lbnQiLCJnZXROZXh0RGVidWdJRCIsIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlciIsImlzSW50ZXJuYWxDb21wb25lbnRUeXBlIiwiaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCIsInNob3VsZEhhdmVEZWJ1Z0lEIiwiY3JlYXRlSW50ZXJuYWxDb21wb25lbnQiLCJnZXROYXRpdmVOb2RlIiwiY3JlYXRlSW5zdGFuY2VGb3JUZXh0IiwiX21vdW50SW5kZXgiLCJfbW91bnRJbWFnZSIsInByZXZlbnRFeHRlbnNpb25zIiwiX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQiLCJ1c2VIYXNGZWF0dXJlIiwiaW1wbGVtZW50YXRpb24iLCJoYXNGZWF0dXJlIiwiZXZlbnROYW1lU3VmZml4IiwiY2FwdHVyZSIsImlzU3VwcG9ydGVkIiwic2V0QXR0cmlidXRlIiwic2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQiLCJwcmV2RW1wdHkiLCJuZXh0RW1wdHkiLCJwcmV2VHlwZSIsIm5leHRUeXBlIiwidmFsaWRhdGVET01OZXN0aW5nIiwic3BlY2lhbFRhZ3MiLCJpblNjb3BlVGFncyIsImJ1dHRvblNjb3BlVGFncyIsImltcGxpZWRFbmRUYWdzIiwiZW1wdHlBbmNlc3RvckluZm8iLCJmb3JtVGFnIiwiYVRhZ0luU2NvcGUiLCJidXR0b25UYWdJblNjb3BlIiwibm9iclRhZ0luU2NvcGUiLCJwVGFnSW5CdXR0b25TY29wZSIsImxpc3RJdGVtVGFnQXV0b2Nsb3NpbmciLCJkbEl0ZW1UYWdBdXRvY2xvc2luZyIsInVwZGF0ZWRBbmNlc3RvckluZm8iLCJvbGRJbmZvIiwiYW5jZXN0b3JJbmZvIiwiaXNUYWdWYWxpZFdpdGhQYXJlbnQiLCJwYXJlbnRUYWciLCJmaW5kSW52YWxpZEFuY2VzdG9yRm9yVGFnIiwiZmluZE93bmVyU3RhY2siLCJyZXZlcnNlIiwiZGlkV2FybiIsImNoaWxkVGFnIiwiY2hpbGRUZXh0IiwiY2hpbGRJbnN0YW5jZSIsInBhcmVudEluZm8iLCJpbnZhbGlkUGFyZW50IiwiaW52YWxpZEFuY2VzdG9yIiwicHJvYmxlbWF0aWMiLCJhbmNlc3RvclRhZyIsImFuY2VzdG9ySW5zdGFuY2UiLCJjaGlsZE93bmVyIiwiYW5jZXN0b3JPd25lciIsImNoaWxkT3duZXJzIiwiYW5jZXN0b3JPd25lcnMiLCJtaW5TdGFja0xlbiIsImRlZXBlc3RDb21tb24iLCJVTktOT1dOIiwiY2hpbGRPd25lck5hbWVzIiwiYW5jZXN0b3JPd25lck5hbWVzIiwib3duZXJJbmZvIiwid2FybktleSIsInRhZ0Rpc3BsYXlOYW1lIiwid2hpdGVzcGFjZUluZm8iLCJpc1RhZ1ZhbGlkSW5Db250ZXh0IiwiX3RlbXAiLCJfcmV0IiwiY29tcHV0ZU1hdGNoIiwiZ2V0Q2hpbGRDb250ZXh0Iiwicm91dGVyIiwicm91dGUiLCJ1cmwiLCJwYXJhbXMiLCJpc0V4YWN0IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY29udGV4dFR5cGVzIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJwYXR0ZXJuQ2FjaGUiLCJjYWNoZUxpbWl0IiwiY2FjaGVDb3VudCIsImNvbXBpbGVQYXRoIiwicGF0dGVybiIsIm9wdGlvbnMiLCJjYWNoZUtleSIsImVuZCIsInN0cmljdCIsInNlbnNpdGl2ZSIsImNhY2hlIiwicmUiLCJjb21waWxlZFBhdHRlcm4iLCJwYXJlbnQiLCJfb3B0aW9ucyIsIl9vcHRpb25zJGV4YWN0IiwiZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJfY29tcGlsZVBhdGgiLCJ2YWx1ZXMiLCJtZW1vIiwiZmlyc3QiLCJsYXN0IiwiZW1haWwiLCJtb2RlIiwiZGV2aWNlIiwic2lnbnVwIiwiYXhpb3MiLCJwb3N0IiwidGhlbiIsImxvZyIsImNhdGNoIiwiZGV2aWNlcyIsImNvbnRhaW5lciIsIm5hbWVIb2xkZXIiLCJpbnB1dCIsImZpcnN0Q2hhbmdlIiwibGFzdENoYW5nZSIsImVtYWlsQ2hhbmdlIiwiaGFuZGxlU3VibWl0Iiwic21hbGwiLCJkZXZpY2VDaGFuZ2UiLCJsaWdodCIsInJlbmRlckluaXQiLCJzdWNjZXNzIiwibWluSGVpZ2h0IiwidGljayIsIm1hcmdpblJpZ2h0IiwicGxhY2Vob2xkZXIiLCJpbnB1dEhvbGRlciIsImJvcmRlciIsIm92ZXJmbG93IiwibWFyZ2luQm90dG9tIiwiYm94U2l6aW5nIiwiYm94U2hhZG93IiwiYmFja2dyb3VuZEltYWdlIiwiYXBwZWFyZW5jZSIsIm91dGxpbmUiLCJwaWN0dXJlIiwidmVydGljYWxBbGlnbiIsImJhY2tncm91bmRTaXplIiwiYmFja2dyb3VuZFBvc2l0aW9uIiwiZm9udFdlaWdodCIsIllvdXR1YmUiLCJ2aWRlb1NyYyIsInZpZGVvSWQiLCJhdXRvcGxheSIsInJlbCIsIm1vZGVzdCIsImNvbnRyb2xzIiwic2hvd2luZm8iLCJzZXR0bGUiLCJidWlsZFVSTCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwiYnRvYSIsInhockFkYXB0ZXIiLCJQcm9taXNlIiwiZGlzcGF0Y2hYaHJSZXF1ZXN0IiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0IiwibG9hZEV2ZW50IiwieERvbWFpbiIsIlhEb21haW5SZXF1ZXN0Iiwib25wcm9ncmVzcyIsImhhbmRsZVByb2dyZXNzIiwib250aW1lb3V0IiwiaGFuZGxlVGltZW91dCIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiQXV0aG9yaXphdGlvbiIsIm9wZW4iLCJwYXJhbXNTZXJpYWxpemVyIiwiaGFuZGxlTG9hZCIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlRGF0YSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInJlc3BvbnNlIiwic3RhdHVzVGV4dCIsIm9uZXJyb3IiLCJoYW5kbGVFcnJvciIsImNvb2tpZXMiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZWFkIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsInByb21pc2UiLCJvbkNhbmNlbGVkIiwiY2FuY2VsIiwiYWJvcnQiLCJzZW5kIiwiQ2FuY2VsIiwiX19DQU5DRUxfXyIsImlzQ2FuY2VsIiwiZW5oYW5jZUVycm9yIiwid3JhcCIsIkV2ZW50TGlzdGVuZXIiLCJldmVudFR5cGUiLCJkZXRhY2hFdmVudCIsInJlZ2lzdGVyRGVmYXVsdCIsImZvY3VzTm9kZSIsImZvY3VzIiwiZ2V0QWN0aXZlRWxlbWVudCIsImFjdGl2ZUVsZW1lbnQiLCJ1cHBlcmNhc2VQYXR0ZXJuIiwibXNQYXR0ZXJuIiwidG9IeXBoZW5Mb3dlciIsImh5cGhlbmF0ZVN0eWxlTmFtZSIsImhOYW1lIiwic29ydFByZWZpeGVkU3R5bGUiLCJfaXNQcmVmaXhlZFByb3BlcnR5IiwiX2lzUHJlZml4ZWRQcm9wZXJ0eTIiLCJsZWZ0IiwicmlnaHQiLCJzb3J0ZWRTdHlsZSIsImVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGwiLCJJVEVSQVRPUl9TWU1CT0wiLCJGQVVYX0lURVJBVE9SX1NZTUJPTCIsImdldEl0ZXJhdG9yRm4iLCJtYXliZUl0ZXJhYmxlIiwiaXRlcmF0b3JGbiIsIkFOT05ZTU9VUyIsImNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyIiwiYm9vbCIsInN5bWJvbCIsImFueSIsImNyZWF0ZUFueVR5cGVDaGVja2VyIiwiYXJyYXlPZiIsImNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlciIsImNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlciIsImVsZW1lbnRUeXBlIiwiY3JlYXRlRWxlbWVudFR5cGVUeXBlQ2hlY2tlciIsImluc3RhbmNlT2YiLCJjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyIiwiY3JlYXRlTm9kZUNoZWNrZXIiLCJvYmplY3RPZiIsImNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIiLCJvbmVPZiIsImNyZWF0ZUVudW1UeXBlQ2hlY2tlciIsIm9uZU9mVHlwZSIsImNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIiLCJjcmVhdGVTaGFwZVR5cGVDaGVja2VyIiwiY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlciIsIlByb3BUeXBlRXJyb3IiLCJjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlciIsInZhbGlkYXRlIiwibWFudWFsUHJvcFR5cGVDYWxsQ2FjaGUiLCJtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCIsImNoZWNrVHlwZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImNoYWluZWRDaGVja1R5cGUiLCJleHBlY3RlZFR5cGUiLCJwcm9wVmFsdWUiLCJwcm9wVHlwZSIsImdldFByb3BUeXBlIiwicHJlY2lzZVR5cGUiLCJnZXRQcmVjaXNlVHlwZSIsInR5cGVDaGVja2VyIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwiZXhwZWN0ZWRDbGFzcyIsImV4cGVjdGVkQ2xhc3NOYW1lIiwiYWN0dWFsQ2xhc3NOYW1lIiwiZ2V0Q2xhc3NOYW1lIiwiZXhwZWN0ZWRWYWx1ZXMiLCJ2YWx1ZXNTdHJpbmciLCJhcnJheU9mVHlwZUNoZWNrZXJzIiwiY2hlY2tlciIsImdldFBvc3RmaXhGb3JUeXBlV2FybmluZyIsImlzTm9kZSIsInNoYXBlVHlwZXMiLCJldmVyeSIsInN0ZXAiLCJuZXh0IiwiZG9uZSIsImlzU3ltYm9sIiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJhcHBlbmRQeElmTmVlZGVkIiwiaXNVbml0bGVzc051bWJlciIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkQ29sdW1uIiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwibmVlZHNQeFN1ZmZpeCIsImVuaGFuY2VXaXRoUmFkaXVtIiwiX3N0eWxlS2VlcGVyIiwiX3N0eWxlS2VlcGVyMiIsIl9yZXNvbHZlU3R5bGVzMiIsIktFWVNfVE9fSUdOT1JFX1dIRU5fQ09QWUlOR19QUk9QRVJUSUVTIiwiY29weVByb3BlcnRpZXMiLCJpc1N0YXRlbGVzcyIsImlzTmF0aXZlQ2xhc3MiLCJpbmhlcml0cyIsImNvbmZpZ09yQ29tcG9zZWRDb21wb25lbnQiLCJfY2xhc3MiLCJuZXdDb25maWciLCJjb25maWdPckNvbXBvbmVudCIsIk9yaWdDb21wb25lbnQiLCJOZXdDb21wb25lbnQiLCJfQ29tcG9uZW50IiwiUmFkaXVtRW5oYW5jZXIiLCJfQ29tcG9zZWRDb21wb25lbnQiLCJfcmFkaXVtU3R5bGVTdGF0ZSIsIl9yYWRpdW1Jc01vdW50ZWQiLCJfcmFkaXVtTW91c2VVcExpc3RlbmVyIiwiX3JhZGl1bU1lZGlhUXVlcnlMaXN0ZW5lcnNCeVF1ZXJ5IiwicXVlcnkiLCJzdXBlckNoaWxkQ29udGV4dCIsInJhZGl1bUNvbmZpZyIsIm5ld0NvbnRleHQiLCJfcmFkaXVtQ29uZmlnIiwicmVuZGVyZWRFbGVtZW50IiwiY3VycmVudENvbmZpZyIsIl9pc1JhZGl1bUVuaGFuY2VkIiwiX3JhZGl1bVN0eWxlS2VlcGVyIiwiZ2V0U3RhdGVLZXkiLCJlbGVtZW50S2V5IiwiX2dldFN0YXRlS2V5IiwiX2dldFN0YXRlS2V5MiIsImhhc2hWYWx1ZSIsIm1hcE9iamVjdCIsIm1hcHBlciIsIl9jaGVja1Byb3BzUGx1Z2luIiwiX2NoZWNrUHJvcHNQbHVnaW4yIiwiX2tleWZyYW1lc1BsdWdpbiIsIl9rZXlmcmFtZXNQbHVnaW4yIiwiX21lcmdlU3R5bGVBcnJheVBsdWdpbiIsIl9tZXJnZVN0eWxlQXJyYXlQbHVnaW4yIiwiX3ByZWZpeFBsdWdpbiIsIl9wcmVmaXhQbHVnaW4yIiwiX3JlbW92ZU5lc3RlZFN0eWxlc1BsdWdpbiIsIl9yZW1vdmVOZXN0ZWRTdHlsZXNQbHVnaW4yIiwiX3Jlc29sdmVJbnRlcmFjdGlvblN0eWxlc1BsdWdpbiIsIl9yZXNvbHZlSW50ZXJhY3Rpb25TdHlsZXNQbHVnaW4yIiwiX3Jlc29sdmVNZWRpYVF1ZXJpZXNQbHVnaW4iLCJfcmVzb2x2ZU1lZGlhUXVlcmllc1BsdWdpbjIiLCJfdmlzaXRlZFBsdWdpbiIsIl92aXNpdGVkUGx1Z2luMiIsImNoZWNrUHJvcHMiLCJtZXJnZVN0eWxlQXJyYXkiLCJyZW1vdmVOZXN0ZWRTdHlsZXMiLCJyZXNvbHZlSW50ZXJhY3Rpb25TdHlsZXMiLCJyZXNvbHZlTWVkaWFRdWVyaWVzIiwidmlzaXRlZCIsIl9hcHBlbmRJbXBvcnRhbnRUb0VhY2hWYWx1ZSIsIl9hcHBlbmRJbXBvcnRhbnRUb0VhY2hWYWx1ZTIiLCJfY3NzUnVsZVNldFRvU3RyaW5nIiwiX2Nzc1J1bGVTZXRUb1N0cmluZzIiLCJfaGFzaCIsIl9oYXNoMiIsIl9tZXJnZVN0eWxlcyIsIl9leGVudiIsIl9leGVudjIiLCJERUZBVUxUX0NPTkZJRyIsImdsb2JhbFN0YXRlIiwicmVzb2x2ZVN0eWxlcyIsIl9zaG91bGRSZXNvbHZlU3R5bGVzIiwiX3Jlc29sdmVDaGlsZHJlbiIsImV4aXN0aW5nS2V5TWFwIiwiY2hpbGRyZW5UeXBlIiwiY2hpbGQiLCJfcmVzb2x2ZVByb3BzIiwibmV3UHJvcHMiLCJfYnVpbGRHZXRLZXkiLCJfcmVmMyIsIm9yaWdpbmFsS2V5IiwiYWxyZWFkeUdvdEtleSIsImdldEtleSIsImVsZW1lbnROYW1lIiwiX3NldFN0eWxlU3RhdGUiLCJzdGF0ZUtleSIsImV4aXN0aW5nIiwiX2xhc3RSYWRpdW1TdGF0ZSIsIl9ydW5QbHVnaW5zIiwiX3JlZjQiLCJnZXRDb21wb25lbnRGaWVsZCIsImdldEdsb2JhbFN0YXRlIiwiY29tcG9uZW50R2V0U3RhdGUiLCJzdHlsZUtlZXBlciIsIl9faXNUZXN0TW9kZUVuYWJsZWQiLCJwbHVnaW4iLCJhcHBlbmRJbXBvcnRhbnRUb0VhY2hWYWx1ZSIsIm1lcmdlU3R5bGVzIiwiaXNOZXN0ZWRTdHlsZSIsIm5ld0NvbXBvbmVudEZpZWxkcyIsImNvbXBvbmVudEZpZWxkcyIsImZpZWxkTmFtZSIsIm5ld0dsb2JhbFN0YXRlIiwiX2Nsb25lRWxlbWVudCIsIm5ld0NoaWxkcmVuIiwic2hvdWxkQ2hlY2tCZWZvcmVSZXNvbHZlIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImNvbHVtbnMiLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmbG9vZE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VNaXRlcmxpbWl0IiwicHJlZml4S2V5IiwicHJlZml4ZXMiLCJzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnMiLCJiYWNrZ3JvdW5kIiwiYmFja2dyb3VuZEF0dGFjaG1lbnQiLCJiYWNrZ3JvdW5kUG9zaXRpb25YIiwiYmFja2dyb3VuZFBvc2l0aW9uWSIsImJhY2tncm91bmRSZXBlYXQiLCJib3JkZXJXaWR0aCIsImJvcmRlclN0eWxlIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJCb3R0b20iLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlckJvdHRvbVN0eWxlIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJMZWZ0IiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyTGVmdFN0eWxlIiwiYm9yZGVyTGVmdENvbG9yIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyUmlnaHRTdHlsZSIsImJvcmRlclJpZ2h0Q29sb3IiLCJib3JkZXJUb3AiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclRvcFN0eWxlIiwiYm9yZGVyVG9wQ29sb3IiLCJmb250IiwiZm9udFN0eWxlIiwiZm9udFZhcmlhbnQiLCJmb250RmFtaWx5Iiwib3V0bGluZVdpZHRoIiwib3V0bGluZVN0eWxlIiwib3V0bGluZUNvbG9yIiwiQ1NTUHJvcGVydHkiLCJfY2FsbGJhY2tzIiwiX2NvbnRleHRzIiwiX2FyZyIsImNvbnRleHRzIiwiY2hlY2twb2ludCIsInJvbGxiYWNrIiwicXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIiLCJWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCIsImlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUiLCJ2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUiLCJpc0F0dHJpYnV0ZU5hbWVTYWZlIiwic2hvdWxkSWdub3JlVmFsdWUiLCJpc05hTiIsIkRPTVByb3BlcnR5T3BlcmF0aW9ucyIsImNyZWF0ZU1hcmt1cEZvcklEIiwic2V0QXR0cmlidXRlRm9ySUQiLCJjcmVhdGVNYXJrdXBGb3JSb290Iiwic2V0QXR0cmlidXRlRm9yUm9vdCIsImNyZWF0ZU1hcmt1cEZvclByb3BlcnR5IiwiY3JlYXRlTWFya3VwRm9yQ3VzdG9tQXR0cmlidXRlIiwic2V0VmFsdWVGb3JQcm9wZXJ0eSIsImRlbGV0ZVZhbHVlRm9yUHJvcGVydHkiLCJuYW1lc3BhY2UiLCJzZXRBdHRyaWJ1dGVOUyIsInNldFZhbHVlRm9yQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiZGVsZXRlVmFsdWVGb3JBdHRyaWJ1dGUiLCJET0NfTk9ERV9UWVBFIiwiUmVhY3RET01Db250YWluZXJJbmZvIiwidG9wTGV2ZWxXcmFwcGVyIiwiX3RvcExldmVsV3JhcHBlciIsIl9pZENvdW50ZXIiLCJfb3duZXJEb2N1bWVudCIsIl9ub2RlIiwiX3RhZyIsIl9uYW1lc3BhY2VVUkkiLCJfYW5jZXN0b3JJbmZvIiwiZGlkV2FyblZhbHVlTGluayIsImRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSIsInVwZGF0ZU9wdGlvbnNJZlBlbmRpbmdVcGRhdGVBbmRNb3VudGVkIiwiX3dyYXBwZXJTdGF0ZSIsInBlbmRpbmdVcGRhdGUiLCJ1cGRhdGVPcHRpb25zIiwiQm9vbGVhbiIsIm11bHRpcGxlIiwidmFsdWVQcm9wTmFtZXMiLCJjaGVja1NlbGVjdFByb3BUeXBlcyIsInNlbGVjdGVkVmFsdWUiLCJzZWxlY3RlZCIsIlJlYWN0RE9NU2VsZWN0IiwiZ2V0SG9zdFByb3BzIiwibW91bnRXcmFwcGVyIiwiaW5pdGlhbFZhbHVlIiwiZGVmYXVsdFZhbHVlIiwiX2hhbmRsZUNoYW5nZSIsIndhc011bHRpcGxlIiwiZ2V0U2VsZWN0VmFsdWVDb250ZXh0IiwicG9zdFVwZGF0ZVdyYXBwZXIiLCJSRVNFVF9CQVRDSEVEX1VQREFURVMiLCJSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5IiwiRkxVU0hfQkFUQ0hFRF9VUERBVEVTIiwiUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uIiwiYWxyZWFkeUJhdGNoaW5nVXBkYXRlcyIsIkFSSUFET01Qcm9wZXJ0eUNvbmZpZyIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIkRlZmF1bHRFdmVudFBsdWdpbk9yZGVyIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiSFRNTERPTVByb3BlcnR5Q29uZmlnIiwiUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQiLCJSZWFjdERPTUNvbXBvbmVudCIsIlJlYWN0RE9NRW1wdHlDb21wb25lbnQiLCJSZWFjdERPTVRyZWVUcmF2ZXJzYWwiLCJSZWFjdERPTVRleHRDb21wb25lbnQiLCJSZWFjdEluamVjdGlvbiIsIlNWR0RPTVByb3BlcnR5Q29uZmlnIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJTaW1wbGVFdmVudFBsdWdpbiIsImFscmVhZHlJbmplY3RlZCIsImluamVjdCIsIkV2ZW50RW1pdHRlciIsIkhvc3RDb21wb25lbnQiLCJpbmplY3RHZW5lcmljQ29tcG9uZW50Q2xhc3MiLCJpbmplY3RUZXh0Q29tcG9uZW50Q2xhc3MiLCJFbXB0eUNvbXBvbmVudCIsImluamVjdEVtcHR5Q29tcG9uZW50RmFjdG9yeSIsImluc3RhbnRpYXRlIiwiVXBkYXRlcyIsImVtcHR5Q29tcG9uZW50RmFjdG9yeSIsIlJlYWN0RW1wdHlDb21wb25lbnRJbmplY3Rpb24iLCJnZW5lcmljQ29tcG9uZW50Q2xhc3MiLCJ0ZXh0Q29tcG9uZW50Q2xhc3MiLCJSZWFjdEhvc3RDb21wb25lbnRJbmplY3Rpb24iLCJjb21wb25lbnRDbGFzcyIsImlzVGV4dENvbXBvbmVudCIsIlJlYWN0RE9NU2VsZWN0aW9uIiwiY29udGFpbnNOb2RlIiwiaXNJbkRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiUmVhY3RJbnB1dFNlbGVjdGlvbiIsImhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyIsImVsZW0iLCJjb250ZW50RWRpdGFibGUiLCJnZXRTZWxlY3Rpb25JbmZvcm1hdGlvbiIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJnZXRTZWxlY3Rpb24iLCJyZXN0b3JlU2VsZWN0aW9uIiwicHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbiIsImN1ckZvY3VzZWRFbGVtIiwicHJpb3JGb2N1c2VkRWxlbSIsInByaW9yU2VsZWN0aW9uUmFuZ2UiLCJzZXRTZWxlY3Rpb24iLCJzZWxlY3Rpb24iLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsInJhbmdlIiwiY3JlYXRlUmFuZ2UiLCJwYXJlbnRFbGVtZW50IiwibW92ZVN0YXJ0IiwibW92ZUVuZCIsImdldE9mZnNldHMiLCJvZmZzZXRzIiwiY3JlYXRlVGV4dFJhbmdlIiwiY29sbGFwc2UiLCJzZWxlY3QiLCJzZXRPZmZzZXRzIiwiYWRsZXIzMiIsIlRBR19FTkQiLCJDT01NRU5UX1NUQVJUIiwiUmVhY3RNYXJrdXBDaGVja3N1bSIsIkNIRUNLU1VNX0FUVFJfTkFNRSIsImFkZENoZWNrc3VtVG9NYXJrdXAiLCJjaGVja3N1bSIsImNhblJldXNlTWFya3VwIiwiZXhpc3RpbmdDaGVja3N1bSIsIm1hcmt1cENoZWNrc3VtIiwiUmVhY3RET01GZWF0dXJlRmxhZ3MiLCJST09UX0FUVFJfTkFNRSIsImluc3RhbmNlc0J5UmVhY3RSb290SUQiLCJmaXJzdERpZmZlcmVuY2VJbmRleCIsInN0cmluZzEiLCJzdHJpbmcyIiwibWluTGVuIiwiZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyIiwiaW50ZXJuYWxHZXRJRCIsIm1vdW50Q29tcG9uZW50SW50b05vZGUiLCJ3cmFwcGVySW5zdGFuY2UiLCJzaG91bGRSZXVzZU1hcmt1cCIsIndyYXBwZWRFbGVtZW50IiwiUmVhY3RNb3VudCIsIl9tb3VudEltYWdlSW50b05vZGUiLCJiYXRjaGVkTW91bnRDb21wb25lbnRJbnRvTm9kZSIsImNvbXBvbmVudEluc3RhbmNlIiwidXNlQ3JlYXRlRWxlbWVudCIsInVubW91bnRDb21wb25lbnRGcm9tTm9kZSIsIm9uQmVnaW5GbHVzaCIsIm9uRW5kRmx1c2giLCJsYXN0Q2hpbGQiLCJoYXNOb25Sb290UmVhY3RDaGlsZCIsInJvb3RFbCIsIm5vZGVJc1JlbmRlcmVkQnlPdGhlckluc3RhbmNlIiwiaXNSZWFjdE5vZGUiLCJpc1ZhbGlkQ29udGFpbmVyIiwiaGFzQXR0cmlidXRlIiwiZ2V0SG9zdFJvb3RJbnN0YW5jZUluQ29udGFpbmVyIiwicHJldkhvc3RJbnN0YW5jZSIsImdldFRvcExldmVsV3JhcHBlckluQ29udGFpbmVyIiwicm9vdCIsIl9ob3N0Q29udGFpbmVySW5mbyIsInRvcExldmVsUm9vdENvdW50ZXIiLCJUb3BMZXZlbFdyYXBwZXIiLCJyb290SUQiLCJpc1JlYWN0Q29tcG9uZW50IiwiX2luc3RhbmNlc0J5UmVhY3RSb290SUQiLCJzY3JvbGxNb25pdG9yIiwicmVuZGVyQ2FsbGJhY2siLCJfdXBkYXRlUm9vdENvbXBvbmVudCIsInByZXZDb21wb25lbnQiLCJfcmVuZGVyTmV3Um9vdENvbXBvbmVudCIsIndyYXBwZXJJRCIsIl9pbnN0YW5jZSIsInJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwicGFyZW50Q29tcG9uZW50IiwiX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwibmV4dFdyYXBwZWRFbGVtZW50IiwiX3Byb2Nlc3NDaGlsZENvbnRleHQiLCJwcmV2V3JhcHBlZEVsZW1lbnQiLCJwdWJsaWNJbnN0IiwidXBkYXRlZENhbGxiYWNrIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInJlYWN0Um9vdEVsZW1lbnQiLCJjb250YWluZXJIYXNSZWFjdE1hcmt1cCIsImNvbnRhaW5lckhhc05vblJvb3RSZWFjdENoaWxkIiwicm9vdEVsZW1lbnRTaWJsaW5nIiwiaXNDb250YWluZXJSZWFjdFJvb3QiLCJyb290RWxlbWVudCIsInJvb3RNYXJrdXAiLCJvdXRlckhUTUwiLCJub3JtYWxpemVkTWFya3VwIiwibm9ybWFsaXplciIsImNvbnRlbnREb2N1bWVudCIsIndyaXRlIiwiZGlmZkluZGV4IiwiZGlmZmVyZW5jZSIsImhvc3ROb2RlIiwiUmVhY3ROb2RlVHlwZXMiLCJIT1NUIiwiQ09NUE9TSVRFIiwiRU1QVFkiLCJnZXRUeXBlIiwiUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZSIsIm5vb3BDYWxsYmFja1F1ZXVlIiwiUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbiIsInJlbmRlclRvU3RhdGljTWFya3VwIiwidXBkYXRlUXVldWUiLCJNaXhpbiIsImdldFVwZGF0ZVF1ZXVlIiwic2Nyb2xsUG9zaXRpb24iLCJhcnIiLCJjYiIsImdldEhvc3RDb21wb25lbnRGcm9tQ29tcG9zaXRlIiwiX3JlbmRlcmVkTm9kZVR5cGUiLCJjb250ZW50S2V5IiwiZ2V0VGV4dENvbnRlbnRBY2Nlc3NvciIsImlzQ2hlY2thYmxlIiwiZ2V0VHJhY2tlciIsInZhbHVlVHJhY2tlciIsImF0dGFjaFRyYWNrZXIiLCJ0cmFja2VyIiwiZGV0YWNoVHJhY2tlciIsImdldFZhbHVlRnJvbU5vZGUiLCJpbnB1dFZhbHVlVHJhY2tpbmciLCJfZ2V0VHJhY2tlckZyb21Ob2RlIiwidHJhY2siLCJ2YWx1ZUZpZWxkIiwiY3VycmVudFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJ1cGRhdGVWYWx1ZUlmQ2hhbmdlZCIsImxhc3RWYWx1ZSIsIm5leHRWYWx1ZSIsInN1cHBvcnRlZElucHV0VHlwZXMiLCJkYXRlIiwiZGF0ZXRpbWUiLCJtb250aCIsInRlbCIsIndlZWsiLCJpc1RleHRJbnB1dEVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsIlNFUEFSQVRPUiIsIlNVQlNFUEFSQVRPUiIsImRpZFdhcm5BYm91dE1hcHMiLCJnZXRDb21wb25lbnRLZXkiLCJ0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbCIsIm5hbWVTb0ZhciIsInRyYXZlcnNlQ29udGV4dCIsIm5leHROYW1lIiwic3VidHJlZUNvdW50IiwibmV4dE5hbWVQcmVmaXgiLCJpaSIsIm1hcHNBc0NoaWxkcmVuQWRkZW5kdW0iLCJtYXBzQXNDaGlsZHJlbk93bmVyTmFtZSIsIl9pc1JlYWN0RWxlbWVudCIsImNoaWxkcmVuU3RyaW5nIiwidHJhdmVyc2VBbGxDaGlsZHJlbiIsImlzTW9kaWZpZWRFdmVudCIsIl90aGlzJHByb3BzIiwiaW5uZXJSZWYiLCJpc0VtcHR5Q2hpbGRyZW4iLCJjb21wdXRlZE1hdGNoIiwiX2NvbnRleHQkcm91dGVyIiwic3RhdGljQ29udGV4dCIsImNvbXBpbGVHZW5lcmF0b3IiLCJjb21waWxlZEdlbmVyYXRvciIsInBhdGhUb1JlZ2V4cCIsImNvbXBpbGUiLCJnZW5lcmF0b3IiLCJwcmV0dHkiLCJpc2FycmF5IiwidG9rZW5zVG9GdW5jdGlvbiIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJ0b2tlbnMiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwibSIsImVzY2FwZWQiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwicmVwZWF0Iiwib3B0aW9uYWwiLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsImVuY29kZUFzdGVyaXNrIiwibWF0Y2hlcyIsIm9wdHMiLCJlbmNvZGUiLCJ0b2tlbiIsInNlZ21lbnQiLCJhdHRhY2hLZXlzIiwiZmxhZ3MiLCJyZWdleHBUb1JlZ2V4cCIsImdyb3VwcyIsImFycmF5VG9SZWdleHAiLCJwYXJ0cyIsInJlZ2V4cCIsInN0cmluZ1RvUmVnZXhwIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJSZWFjdE5vb3BVcGRhdGVRdWV1ZSIsIlJlYWN0Q29tcG9uZW50IiwidXBkYXRlciIsInJlZnMiLCJmb3JjZVVwZGF0ZSIsImRlcHJlY2F0ZWRBUElzIiwiZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nIiwibWV0aG9kTmFtZSIsImZuTmFtZSIsIlJlYWN0UHVyZUNvbXBvbmVudCIsIkNvbXBvbmVudER1bW15IiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJjaGVja1JlYWN0VHlwZVNwZWMiLCJnZXRTb3VyY2VJbmZvRXJyb3JBZGRlbmR1bSIsImVsZW1lbnRQcm9wcyIsIm93bmVySGFzS2V5VXNlV2FybmluZyIsImdldEN1cnJlbnRDb21wb25lbnRFcnJvckluZm8iLCJwYXJlbnRUeXBlIiwicGFyZW50TmFtZSIsInZhbGlkYXRlRXhwbGljaXRLZXkiLCJtZW1vaXplciIsInVuaXF1ZUtleSIsImN1cnJlbnRDb21wb25lbnRFcnJvckluZm8iLCJ2YWxpZGF0ZUNoaWxkS2V5cyIsInZhbGlkYXRlUHJvcFR5cGVzIiwiZ2V0RGVmYXVsdFByb3BzIiwiaXNSZWFjdENsYXNzQXBwcm92ZWQiLCJ2YWxpZFR5cGUiLCJzb3VyY2VJbmZvIiwidmFsaWRhdGVkRmFjdG9yeSIsIndhcm5Ob29wIiwiYnJhbmQiLCJtb2RlbCIsInNlbGVjdHMiLCJzZWxlY3RIb2xkZXIiLCJpbmFjdGl2ZSIsImJyYW5kQ2hhbmdlIiwibW9kZWxDaGFuZ2UiLCJtb2RlbHMiLCJ0eXBlcyIsInJlbmRlckNvbnRhY3QiLCJyZW5kZXJDb21wYXRpYmxlIiwiYnV5Iiwic2VjdGlvbnMiLCJpY29uIiwiaW52ZXJ0IiwiaW1nIiwibGluZSIsImRldGFpbHMiLCJjdXJzb3IiLCJsZXR0ZXJTcGVjaW5nIiwibGlua3MiLCJuZXR3b3JrIiwic29jaWFsIiwic21hbGxUZXh0IiwiZ2V0WWVhciIsInNob3ciLCJwcmV2aWV3IiwiZ3JhZGllbnQiLCJhbGlnbkl0ZW1zIiwicGFkZGluZ1RvcCIsInRvcCIsImJvdHRvbSIsInNjcm9sbGRvd24iLCJxdW90ZSIsInFMb2dvIiwiZGlyZWN0aW9uIiwic3JjIiwicGFuZWwiLCJ0ZXh0Qm94IiwiYWxpZ25TZWxmIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJpbm5lciIsImxvZ29Db250YWluZXIiLCJsb2dvIiwibGlua0NvbnRhaW5lciIsIm9yZGVyQnRuQ29udGFpbmVyIiwiYnV5TGluayIsImxldHRlclNwYWNpbmciLCJsYW5nSG9sZGVyIiwiZmlsbCIsInBlb3BsZSIsInNjcm9sbE5hbWUiLCJzY3JvbGxUYXJnZXQiLCJwYWRkaW5nQm90dG9tIiwidGV4dEJveExlZnQiLCJ0ZXh0Qm94V1RpdGxlIiwibGluZUJyZWFrIiwiQWJvdXQiLCJhdFRvcCIsImhhbmRsZVNjcm9sbCIsInNjcm9sbFRvcCIsIm5hdkxpbmtzIiwiSG9tZSIsIlByb2R1Y3QiLCJhYm91dCIsImRhcmsiLCJkZXNpZ24iLCJhYm91dFNwbGl0IiwianVzdGlmeSIsInN1cHBvcnQiLCJwYWRib3R0b20iLCJtZWRpYSIsImJ1eWJhbm5lciIsImZlYXR1cmVzIiwicGxheWJ1dHRvbiIsImZlYXR1cmVzdmlkZW8iLCJwYW5lbExlZnQiLCJmbG9hdCIsInBhbmVsUmlnaHQiLCJpbm5lclBhbmVsIiwiaW5uZXJQYW5lbEwiLCJzZWN0aW9uIiwidmlkZW9zIiwiaGVybyIsIk5vdEZvdW5kIiwic2Nyb2xsZWQiLCJub3RzcGFjZWQiLCJqZGF0YSIsInBob25lcyIsImNhcCIsInBob25lczIiLCJsYXB0b3BzIiwibGFwdG9wczIiLCJ0ZWNoU3BlY3MiLCJ0ZXh0TG93IiwidGVjaFNwZWNzTWlkIiwidGVjaFNwZWNzUmlnaHQiLCJpbm5lclBhbmVsQyIsImlkeCIsInNwaW5uZXIiLCJzcGlubmVyVGV4dCIsInRlY2hCb3giLCJpbmZvSG9sZGVyIiwidHh0VGl0bGUiLCJpbm5lclBhbmVsUiIsIlB1cmNoYXNlIiwic2hvd1RlY2giLCJpc1RlY2hBY3RpdmUiLCJ1bmJveCIsInB1cmNoYXNlIiwiYXBwU2VjdGlvbiIsImluc2lkZWJveCIsImFjdGl2ZSIsInJlbmRlckJveCIsInJlbmRlclRlY2hTcGVjcyIsInRlY2hJbWciLCJ0ZXh0RGVjb3JhdGlvbkxpbmUiLCJQdXJjaGFzZV9mciIsInB1cmNoYXNlX2ZyIiwiYXBwU2VjdGlvbl9mciIsImluc2lkZWJveF9mciIsIlB1cmNoYXNlX2dyIiwicHVyY2hhc2VfZ3IiLCJhcHBTZWN0aW9uX2dyIiwiaW5zaWRlYm94X2dyIiwiUHJpdmFjeSIsIm9ubG9hZCIsIlJlYWN0RE9NIiwiciIsIkF4aW9zIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsInByb21pc2VFeGVjdXRvciIsInJlYXNvbiIsInRocm93SWZSZXF1ZXN0ZWQiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJpbnRlcmNlcHRvcnMiLCJiYXNlVVJMIiwiY2hhaW4iLCJ1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzIiwic2hpZnQiLCJoYW5kbGVycyIsInVzZSIsImVqZWN0IiwiZm9yRWFjaEhhbmRsZXIiLCJoIiwidHJhbnNmb3JtRGF0YSIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJjbGVhbkhlYWRlckNvbmZpZyIsIm9uQWRhcHRlclJlc29sdXRpb24iLCJvbkFkYXB0ZXJSZWplY3Rpb24iLCJmbnMiLCJ0cmFuc2Zvcm0iLCJjaGFycyIsIm91dHB1dCIsInNlcmlhbGl6ZWRQYXJhbXMiLCJzZXJpYWxpemUiLCJwYXJzZVZhbHVlIiwidiIsInRvSVNPU3RyaW5nIiwicmVsYXRpdmVVUkwiLCJzdGFuZGFyZEJyb3dzZXJFbnYiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJub25TdGFuZGFyZEJyb3dzZXJFbnYiLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJvcmlnaW5VUkwiLCJyZXNvbHZlVVJMIiwicHJvdG9jb2wiLCJob3N0IiwiaG9zdG5hbWUiLCJwb3J0IiwicmVxdWVzdFVSTCIsInBhcnNlZCIsIm5vcm1hbGl6ZWROYW1lIiwicHJvY2Vzc0hlYWRlciIsInBhcnNlciIsImRlZmluaXRpb24iLCJkZWZpbmUiLCJkZXRlY3QiLCJnZXRGaXJzdE1hdGNoIiwicmVnZXgiLCJnZXRTZWNvbmRNYXRjaCIsImlvc2RldmljZSIsImxpa2VBbmRyb2lkIiwiYW5kcm9pZCIsIm5leHVzTW9iaWxlIiwibmV4dXNUYWJsZXQiLCJjaHJvbWVvcyIsInNpbGsiLCJzYWlsZmlzaCIsInRpemVuIiwid2Vib3MiLCJ3aW5kb3dzcGhvbmUiLCJzYW1zdW5nQnJvd3NlciIsIndpbmRvd3MiLCJtYWMiLCJsaW51eCIsImVkZ2VWZXJzaW9uIiwidmVyc2lvbklkZW50aWZpZXIiLCJ0YWJsZXQiLCJtb2JpbGUiLCJ4Ym94Iiwib3BlcmEiLCJ3aGFsZSIsIm16YnJvd3NlciIsImNvYXN0IiwieWFuZGV4YnJvd3NlciIsInVjYnJvd3NlciIsIm1heHRob24iLCJlcGlwaGFueSIsInB1ZmZpbiIsInNsZWlwbmlyIiwia01lbGVvbiIsIm9zbmFtZSIsIm1zZWRnZSIsImNocm9tZUJvb2siLCJjaHJvbWUiLCJ2aXZhbGRpIiwic2VhbW9ua2V5IiwiZmlyZWZveCIsImZpcmVmb3hvcyIsInBoYW50b20iLCJzbGltZXIiLCJibGFja2JlcnJ5IiwidG91Y2hwYWQiLCJiYWRhIiwicXVwemlsbGEiLCJjaHJvbWl1bSIsInNhZmFyaSIsImdvb2dsZWJvdCIsImJsaW5rIiwid2Via2l0IiwiZ2Vja28iLCJpb3MiLCJnZXRXaW5kb3dzVmVyc2lvbiIsIm9zVmVyc2lvbiIsIm9zdmVyc2lvbiIsIm9zTWFqb3JWZXJzaW9uIiwiY29tcGFyZVZlcnNpb25zIiwiYm93c2VyIiwiYnJvd3Nlckxpc3QiLCJicm93c2VySXRlbSIsImdldFZlcnNpb25QcmVjaXNpb24iLCJwcmVjaXNpb24iLCJjaHVua3MiLCJjaHVuayIsImlzVW5zdXBwb3J0ZWRCcm93c2VyIiwibWluVmVyc2lvbnMiLCJzdHJpY3RNb2RlIiwiX2Jvd3NlciIsImNoZWNrIiwiX2RldGVjdCIsIl9pbnZhcmlhbnQiLCJNSVhJTlNfS0VZIiwiaWRlbnRpdHkiLCJSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyIsImNoaWxkQ29udGV4dCIsImluamVjdGVkTWl4aW5zIiwiUmVhY3RDbGFzc0ludGVyZmFjZSIsIm1peGlucyIsInN0YXRpY3MiLCJnZXRJbml0aWFsU3RhdGUiLCJjb21wb25lbnREaWRNb3VudCIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsInVwZGF0ZUNvbXBvbmVudCIsIlJlYWN0Q2xhc3NTdGF0aWNJbnRlcmZhY2UiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJSRVNFUlZFRF9TUEVDX0tFWVMiLCJtaXhTcGVjSW50b0NvbXBvbmVudCIsInZhbGlkYXRlVHlwZURlZiIsImNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uIiwibWl4U3RhdGljU3BlY0ludG9Db21wb25lbnQiLCJhdXRvYmluZCIsInR5cGVEZWYiLCJ2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlIiwiaXNBbHJlYWR5RGVmaW5lZCIsInNwZWNQb2xpY3kiLCJSZWFjdENsYXNzTWl4aW4iLCJzcGVjIiwidHlwZW9mU3BlYyIsImlzTWl4aW5WYWxpZCIsInByb3RvIiwiYXV0b0JpbmRQYWlycyIsIl9fcmVhY3RBdXRvQmluZFBhaXJzIiwiaXNSZWFjdENsYXNzTWV0aG9kIiwic2hvdWxkQXV0b0JpbmQiLCJjcmVhdGVDaGFpbmVkRnVuY3Rpb24iLCJpc1Jlc2VydmVkIiwibWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyIsIm9uZSIsInR3byIsIm1lcmdlZFJlc3VsdCIsImNoYWluZWRGdW5jdGlvbiIsImJpbmRBdXRvQmluZE1ldGhvZCIsImJvdW5kTWV0aG9kIiwiX19yZWFjdEJvdW5kQ29udGV4dCIsIl9fcmVhY3RCb3VuZE1ldGhvZCIsIl9fcmVhY3RCb3VuZEFyZ3VtZW50cyIsIl9iaW5kIiwibmV3VGhpcyIsInJlYm91bmRNZXRob2QiLCJiaW5kQXV0b0JpbmRNZXRob2RzIiwicGFpcnMiLCJhdXRvQmluZEtleSIsIklzTW91bnRlZFByZU1peGluIiwiX19pc01vdW50ZWQiLCJJc01vdW50ZWRQb3N0TWl4aW4iLCJuZXdTdGF0ZSIsIl9fZGlkV2FybklzTW91bnRlZCIsIlJlYWN0Q2xhc3NDb21wb25lbnQiLCJpbml0aWFsU3RhdGUiLCJfaXNNb2NrRnVuY3Rpb24iLCJjb21wb25lbnRTaG91bGRVcGRhdGUiLCJjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMiLCJfaHlwaGVuUGF0dGVybiIsImNhbWVsaXplIiwiXyIsImNoYXJhY3RlciIsImNhbWVsaXplU3R5bGVOYW1lIiwiaXNUZXh0Tm9kZSIsIm91dGVyTm9kZSIsImlubmVyTm9kZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJjYWxsZWUiLCJoYXNBcnJheU5hdHVyZSIsImNyZWF0ZUFycmF5RnJvbU1peGVkIiwiZ2V0TWFya3VwV3JhcCIsImR1bW15Tm9kZSIsIm5vZGVOYW1lUGF0dGVybiIsImdldE5vZGVOYW1lIiwibm9kZU5hbWVNYXRjaCIsImNyZWF0ZU5vZGVzRnJvbU1hcmt1cCIsImhhbmRsZVNjcmlwdCIsIndyYXBEZXB0aCIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIm5vZGVzIiwiY2hpbGROb2RlcyIsInNob3VsZFdyYXAiLCJzZWxlY3RXcmFwIiwidGFibGVXcmFwIiwidHJXcmFwIiwic3ZnV3JhcCIsIm1hcmt1cFdyYXAiLCJzdmdFbGVtZW50cyIsImdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uIiwic2Nyb2xsYWJsZSIsIldpbmRvdyIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsTGVmdCIsInBhZ2VZT2Zmc2V0IiwiX3VwcGVyY2FzZVBhdHRlcm4iLCJoeXBoZW5hdGUiLCJOb2RlIiwibWVtb2l6ZVN0cmluZ09ubHkiLCJwZXJmb3JtYW5jZSIsIm1zUGVyZm9ybWFuY2UiLCJ3ZWJraXRQZXJmb3JtYW5jZSIsInBlcmZvcm1hbmNlTm93IiwiUkVBQ1RfU1RBVElDUyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJhcml0eSIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwiX3ByZWZpeEFsbDIiLCJfcHJlZml4QWxsMyIsIl9nZXRCcm93c2VySW5mb3JtYXRpb24iLCJfZ2V0QnJvd3NlckluZm9ybWF0aW9uMiIsIl9nZXRQcmVmaXhlZEtleWZyYW1lcyIsIl9nZXRQcmVmaXhlZEtleWZyYW1lczIiLCJfY2FwaXRhbGl6ZVN0cmluZyIsIl9jYXBpdGFsaXplU3RyaW5nMiIsIl9zb3J0UHJlZml4ZWRTdHlsZSIsIl9zb3J0UHJlZml4ZWRTdHlsZTIiLCJfcHJlZml4UHJvcHMiLCJfcHJlZml4UHJvcHMyIiwiX3Bvc2l0aW9uIiwiX3Bvc2l0aW9uMiIsIl9jYWxjIiwiX2NhbGMyIiwiX3pvb21DdXJzb3IiLCJfem9vbUN1cnNvcjIiLCJfZ3JhYkN1cnNvciIsIl9ncmFiQ3Vyc29yMiIsIl9mbGV4IiwiX2ZsZXgyIiwiX3NpemluZyIsIl9zaXppbmcyIiwiX2dyYWRpZW50IiwiX2dyYWRpZW50MiIsIl90cmFuc2l0aW9uIiwiX3RyYW5zaXRpb24yIiwiX2ZsZXhib3hJRSIsIl9mbGV4Ym94SUUyIiwiX2ZsZXhib3hPbGQiLCJfZmxleGJveE9sZDIiLCJQcmVmaXhlciIsImRlZmF1bHRVc2VyQWdlbnQiLCJfa2VlcFVucHJlZml4ZWQiLCJfYnJvd3NlckluZm8iLCJjc3NQcmVmaXgiLCJqc1ByZWZpeCIsImlubGluZSIsIl91c2VQcmVmaXhBbGxGYWxsYmFjayIsIl9yZXF1aXJlc1ByZWZpeCIsIl9oYXNQcm9wc1JlcXVpcmluZ1ByZWZpeCIsImFzc2lnblN0eWxlcyIsImJyb3dzZXJJbmZvIiwianMiLCJyZXF1aXJlc1ByZWZpeCIsImJhc2UiLCJiYXNlVmFsdWUiLCJjYWxjIiwiX2dldFByZWZpeGVkVmFsdWUiLCJfZ2V0UHJlZml4ZWRWYWx1ZTIiLCJfcmVmJGJyb3dzZXJJbmZvIiwiZmxleGJveElFIiwiYWx0ZXJuYXRpdmVWYWx1ZXMiLCJhbHRlcm5hdGl2ZVByb3BzIiwiYWxpZ25Db250ZW50IiwiZmxleEJhc2lzIiwiZmxleGJveE9sZCIsImZsZXhXcmFwIiwib3RoZXJQcm9wcyIsIldlYmtpdEJveE9yaWVudCIsIldlYmtpdEJveERpcmVjdGlvbiIsImdyYWJDdXJzb3IiLCJncmFiIiwiZ3JhYmJpbmciLCJzaXppbmciLCJtYXhIZWlnaHQiLCJjb2x1bW5XaWR0aCIsIm1pbldpZHRoIiwidHJhbnNpdGlvbiIsIl9oeXBoZW5hdGVTdHlsZU5hbWUiLCJfaHlwaGVuYXRlU3R5bGVOYW1lMiIsIl91bnByZWZpeFByb3BlcnR5IiwiX3VucHJlZml4UHJvcGVydHkyIiwidHJhbnNpdGlvblByb3BlcnR5IiwidW5wcmVmaXhlZFByb3BlcnR5IiwicmVxdWlyZXNQcmVmaXhEYXNoQ2FzZWQiLCJtdWx0aXBsZVZhbHVlcyIsInpvb21DdXJzb3IiLCJfam9pblByZWZpeGVkVmFsdWUiLCJfam9pblByZWZpeGVkVmFsdWUyIiwiX2lzUHJlZml4ZWRWYWx1ZSIsIl9pc1ByZWZpeGVkVmFsdWUyIiwiV2Via2l0VHJhbnNpdGlvbiIsIldlYmtpdFRyYW5zaXRpb25Qcm9wZXJ0eSIsIm91dHB1dFZhbHVlIiwicHJlZml4VmFsdWUiLCJ3ZWJraXRPdXRwdXQiLCJvdXQiLCJkYXNoQ2FzZVByZWZpeCIsImRhc2hDYXNlUHJvcGVydHkiLCJfY3Vyc29yIiwiX2N1cnNvcjIiLCJ2YWx1ZUluZGV4IiwiX2Jvd3NlcjIiLCJ2ZW5kb3JQcmVmaXhlcyIsIldlYmtpdCIsIk1veiIsIm1zIiwiYnJvd3NlcnMiLCJlZGdlIiwiaW9zX3NhZiIsImllIiwib3BfbWluaSIsImFuZF91YyIsImJyb3dzZXJCeUluZm8iLCJzaW5nbGUiLCJwYXJzZUZsb2F0IiwidW5wcmVmaXhlZCIsImlzU2xvd0J1ZmZlciIsIl9pc0J1ZmZlciIsInJlYWRGbG9hdExFIiwidHlwZVNwZWNzIiwiZ2V0U3RhY2siLCJ0eXBlU3BlY05hbWUiLCJleCIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJzaGltIiwiZ2V0U2hpbSIsIl9jYW1lbENhc2VSZWdleCIsIl9jYW1lbENhc2VSZXBsYWNlciIsInAxIiwicDIiLCJfY2FtZWxDYXNlVG9EYXNoQ2FzZSIsImNhbWVsQ2FzZVByb3BzVG9EYXNoQ2FzZSIsImRhc2hDYXNlS2V5IiwiX3N0eWxlU2hlZXQiLCJfc3R5bGVTaGVldDIiLCJfZ2V0U3R5bGVLZWVwZXIiLCJfUHVyZUNvbXBvbmVudCIsIlN0eWxlU2hlZXQiLCJfb25DaGFuZ2UiLCJfaXNNb3VudGVkIiwiX2dldENTU1N0YXRlIiwiX3N1YnNjcmlwdGlvbiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwiX2J1aWxkU3R5bGVzIiwic2NvcGVTZWxlY3RvciIsInJvb3RSdWxlcyIsImFjY3VtdWxhdG9yIiwicm9vdFN0eWxlcyIsIl9idWlsZE1lZGlhUXVlcnlTdHJpbmciLCJjb21wbGV0ZVNlbGVjdG9yIiwicGFydCIsInN0eWxlc0J5TWVkaWFRdWVyeSIsIl90aGlzMyIsIm1lZGlhUXVlcnlTdHJpbmciLCJrZXlmcmFtZVJ1bGVzIiwiX19yYWRpdW1LZXlmcmFtZXMiLCJfX3Byb2Nlc3MiLCJrZXlmcmFtZXNQcmVmaXhlZCIsInBlcmNlbnRhZ2UiLCJhbmltYXRpb25OYW1lIiwiX2NoZWNrUHJvcHMiLCJib3JkZXJJbWFnZSIsImxpc3RTdHlsZSIsInN0eWxlS2V5cyIsInN0eWxlS2V5Iiwic29tZSIsInNwIiwia2V5ZnJhbWVzUGx1Z2luIiwibmV3U3R5bGVJblByb2dyZXNzIiwia2V5ZnJhbWVzVmFsdWUiLCJfa2V5ZnJhbWVzVmFsdWUkX19wcm8iLCJtZXJnZVN0eWxlQXJyYXlQbHVnaW4iLCJfbW91c2VVcExpc3RlbmVySXNBY3RpdmUiLCJfaGFuZGxlTW91c2VVcCIsIl9fdHJpZ2dlckZvclRlc3RzIiwicHJlZml4UGx1Z2luIiwiX21vdXNlVXBMaXN0ZW5lciIsIl9tb3VzZVVwTGlzdGVuZXIyIiwiX2lzSW50ZXJhY3RpdmVTdHlsZUZpZWxkIiwic3R5bGVGaWVsZE5hbWUiLCJleGlzdGluZ09uTW91c2VFbnRlciIsIm9uTW91c2VFbnRlciIsImV4aXN0aW5nT25Nb3VzZUxlYXZlIiwib25Nb3VzZUxlYXZlIiwiZXhpc3RpbmdPbk1vdXNlRG93biIsIm9uTW91c2VEb3duIiwiX2xhc3RNb3VzZURvd24iLCJleGlzdGluZ09uS2V5RG93biIsIm9uS2V5RG93biIsImV4aXN0aW5nT25LZXlVcCIsIm9uS2V5VXAiLCJleGlzdGluZ09uRm9jdXMiLCJvbkZvY3VzIiwiZXhpc3RpbmdPbkJsdXIiLCJvbkJsdXIiLCJpbnRlcmFjdGlvblN0eWxlcyIsInN0eWxlV2l0aG91dEludGVyYWN0aW9ucyIsIl93aW5kb3dNYXRjaE1lZGlhIiwiX2dldFdpbmRvd01hdGNoTWVkaWEiLCJtYXRjaE1lZGlhIiwiX2ZpbHRlck9iamVjdCIsInByZWRpY2F0ZSIsIl9yZW1vdmVNZWRpYVF1ZXJpZXMiLCJzdHlsZVdpdGhvdXRNZWRpYSIsIl90b3BMZXZlbFJ1bGVzVG9DU1MiLCJjbGFzc05hbWUiLCJ0b3BMZXZlbFJ1bGVzIiwicnVsZUNTUyIsIm1lZGlhUXVlcnlDbGFzc05hbWUiLCJfc3Vic2NyaWJlVG9NZWRpYVF1ZXJ5IiwibGlzdGVuZXJzQnlRdWVyeSIsIm1lZGlhUXVlcnlMaXN0c0J5UXVlcnkiLCJtcWwiLCJtZWRpYVF1ZXJ5Q2xhc3NOYW1lcyIsIm5lc3RlZFJ1bGVzIiwidmlzaXRlZENsYXNzTmFtZSIsIkF1dG9Gb2N1c1V0aWxzIiwiZm9jdXNET01Db21wb25lbnQiLCJGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUiLCJTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50IiwiU3ludGhldGljSW5wdXRFdmVudCIsIkVORF9LRVlDT0RFUyIsIlNUQVJUX0tFWUNPREUiLCJjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IiwiY2FuVXNlVGV4dElucHV0RXZlbnQiLCJpc1ByZXN0byIsInVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhIiwiU1BBQ0VCQVJfQ09ERSIsIlNQQUNFQkFSX0NIQVIiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwiaGFzU3BhY2VLZXlwcmVzcyIsImlzS2V5cHJlc3NDb21tYW5kIiwiZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUiLCJpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCIsImlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCIsImdldERhdGFGcm9tQ3VzdG9tRXZlbnQiLCJjdXJyZW50Q29tcG9zaXRpb24iLCJleHRyYWN0Q29tcG9zaXRpb25FdmVudCIsImZhbGxiYWNrRGF0YSIsImdldERhdGEiLCJjdXN0b21EYXRhIiwiZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyIsIndoaWNoIiwiZ2V0RmFsbGJhY2tCZWZvcmVJbnB1dENoYXJzIiwiZXh0cmFjdEJlZm9yZUlucHV0RXZlbnQiLCJkYW5nZXJvdXNTdHlsZVZhbHVlIiwicHJvY2Vzc1N0eWxlTmFtZSIsInN0eWxlTmFtZSIsImhhc1Nob3J0aGFuZFByb3BlcnR5QnVnIiwic3R5bGVGbG9hdEFjY2Vzc29yIiwidGVtcFN0eWxlIiwiY3NzRmxvYXQiLCJiYWRWZW5kb3JlZFN0eWxlTmFtZVBhdHRlcm4iLCJiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4iLCJ3YXJuZWRTdHlsZU5hbWVzIiwid2FybmVkU3R5bGVWYWx1ZXMiLCJ3YXJuZWRGb3JOYU5WYWx1ZSIsIndhcm5IeXBoZW5hdGVkU3R5bGVOYW1lIiwiY2hlY2tSZW5kZXJNZXNzYWdlIiwid2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lIiwid2FyblN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uIiwid2FyblN0eWxlVmFsdWVJc05hTiIsIndhcm5WYWxpZFN0eWxlIiwiQ1NTUHJvcGVydHlPcGVyYXRpb25zIiwic2VyaWFsaXplZCIsImlzQ3VzdG9tUHJvcGVydHkiLCJzdHlsZVZhbHVlIiwic2V0VmFsdWVGb3JTdHlsZXMiLCJzZXRQcm9wZXJ0eSIsImV4cGFuc2lvbiIsImluZGl2aWR1YWxTdHlsZU5hbWUiLCJjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQiLCJhY3RpdmVFbGVtZW50SW5zdCIsInNob3VsZFVzZUNoYW5nZUV2ZW50IiwiZG9lc0NoYW5nZUV2ZW50QnViYmxlIiwibWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudCIsInJ1bkV2ZW50SW5CYXRjaCIsInN0YXJ0V2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCIsInN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4IiwiZ2V0SW5zdElmVmFsdWVDaGFuZ2VkIiwidXBkYXRlZCIsIl9hbGxvd1NpbXVsYXRlZFBhc3NUaHJvdWdoIiwiZ2V0VGFyZ2V0SW5zdEZvckNoYW5nZUV2ZW50IiwiaGFuZGxlRXZlbnRzRm9yQ2hhbmdlRXZlbnRJRTgiLCJpc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UiLCJoYW5kbGVQcm9wZXJ0eUNoYW5nZSIsInN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlIiwiaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudFBvbHlmaWxsIiwiZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnRQb2x5ZmlsbCIsInNob3VsZFVzZUNsaWNrRXZlbnQiLCJnZXRUYXJnZXRJbnN0Rm9yQ2xpY2tFdmVudCIsImdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQiLCJoYW5kbGVDb250cm9sbGVkSW5wdXRCbHVyIiwiY29udHJvbGxlZCIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJ0YXJnZXROb2RlIiwiZ2V0VGFyZ2V0SW5zdEZ1bmMiLCJoYW5kbGVFdmVudEZ1bmMiLCJuZXdDaGlsZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwid2luIiwicmVsYXRlZCIsInRvTm9kZSIsIl9yb290IiwiX3N0YXJ0VGV4dCIsIl9mYWxsYmFja1RleHQiLCJzdGFydFZhbHVlIiwic3RhcnRMZW5ndGgiLCJlbmRWYWx1ZSIsImVuZExlbmd0aCIsIm1pbkVuZCIsInNsaWNlVGFpbCIsImFjY2VwdCIsImFjY2VwdENoYXJzZXQiLCJhY2Nlc3NLZXkiLCJhbGxvd0Z1bGxTY3JlZW4iLCJhbGxvd1RyYW5zcGFyZW5jeSIsImFsdCIsImFzIiwiYXN5bmMiLCJhdXRvQ29tcGxldGUiLCJhdXRvUGxheSIsImNlbGxQYWRkaW5nIiwiY2VsbFNwYWNpbmciLCJjaGFyU2V0IiwiY2hhbGxlbmdlIiwiY2l0ZSIsImNsYXNzSUQiLCJjb2xzIiwiY29sU3BhbiIsImNvbnRleHRNZW51IiwiY29udHJvbHNMaXN0IiwiY29vcmRzIiwiY3Jvc3NPcmlnaW4iLCJkYXRlVGltZSIsImRlZmVyIiwiZG93bmxvYWQiLCJkcmFnZ2FibGUiLCJlbmNUeXBlIiwiZm9ybSIsImZvcm1BY3Rpb24iLCJmb3JtRW5jVHlwZSIsImZvcm1NZXRob2QiLCJmb3JtTm9WYWxpZGF0ZSIsImZvcm1UYXJnZXQiLCJmcmFtZUJvcmRlciIsImhpZ2giLCJocmVmTGFuZyIsImh0bWxGb3IiLCJodHRwRXF1aXYiLCJpbnB1dE1vZGUiLCJpbnRlZ3JpdHkiLCJrZXlQYXJhbXMiLCJrZXlUeXBlIiwia2luZCIsImxhYmVsIiwibGFuZyIsImxpc3QiLCJsb29wIiwibG93IiwibWFuaWZlc3QiLCJtYXJnaW5IZWlnaHQiLCJtYXJnaW5XaWR0aCIsIm1heExlbmd0aCIsIm1lZGlhR3JvdXAiLCJtaW5MZW5ndGgiLCJtdXRlZCIsIm5vbmNlIiwibm9WYWxpZGF0ZSIsIm9wdGltdW0iLCJwbGF5c0lubGluZSIsInBvc3RlciIsInByZWxvYWQiLCJwcm9maWxlIiwicmFkaW9Hcm91cCIsInJlZmVycmVyUG9saWN5IiwicmVxdWlyZWQiLCJyZXZlcnNlZCIsInJvbGUiLCJyb3dzIiwicm93U3BhbiIsInNhbmRib3giLCJzY29wZWQiLCJzY3JvbGxpbmciLCJzZWFtbGVzcyIsInNpemUiLCJzaXplcyIsInNwYW4iLCJzcGVsbENoZWNrIiwic3JjRG9jIiwic3JjTGFuZyIsInNyY1NldCIsInN1bW1hcnkiLCJ0YWJJbmRleCIsInVzZU1hcCIsIndtb2RlIiwiZGF0YXR5cGUiLCJpbmxpc3QiLCJyZXNvdXJjZSIsInZvY2FiIiwiYXV0b0NhcGl0YWxpemUiLCJhdXRvQ29ycmVjdCIsImF1dG9TYXZlIiwiaXRlbVByb3AiLCJpdGVtU2NvcGUiLCJpdGVtVHlwZSIsIml0ZW1JRCIsIml0ZW1SZWYiLCJyZXN1bHRzIiwic2VjdXJpdHkiLCJ1bnNlbGVjdGFibGUiLCJ2YWxpZGl0eSIsImJhZElucHV0IiwiaW5zdGFudGlhdGVDaGlsZCIsImNoaWxkSW5zdGFuY2VzIiwic2VsZkRlYnVnSUQiLCJrZXlVbmlxdWUiLCJSZWFjdENoaWxkUmVjb25jaWxlciIsImluc3RhbnRpYXRlQ2hpbGRyZW4iLCJuZXN0ZWRDaGlsZE5vZGVzIiwiY2hpbGRJbnN0cyIsInVwZGF0ZUNoaWxkcmVuIiwicHJldkNoaWxkcmVuIiwibmV4dENoaWxkcmVuIiwibW91bnRJbWFnZXMiLCJyZW1vdmVkTm9kZXMiLCJwcmV2Q2hpbGQiLCJuZXh0Q2hpbGRJbnN0YW5jZSIsIm5leHRDaGlsZE1vdW50SW1hZ2UiLCJ1bm1vdW50Q2hpbGRyZW4iLCJyZW5kZXJlZENoaWxkcmVuIiwicmVuZGVyZWRDaGlsZCIsIlJlYWN0RE9NSURPcGVyYXRpb25zIiwiZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzIiwiQ29tcG9zaXRlVHlwZXMiLCJJbXB1cmVDbGFzcyIsIlB1cmVDbGFzcyIsIlN0YXRlbGVzc0Z1bmN0aW9uYWwiLCJTdGF0ZWxlc3NDb21wb25lbnQiLCJ3YXJuSWZJbnZhbGlkRWxlbWVudCIsInNob3VsZENvbnN0cnVjdCIsImlzUHVyZUNvbXBvbmVudCIsIm1lYXN1cmVMaWZlQ3ljbGVQZXJmIiwiZGVidWdJRCIsInRpbWVyVHlwZSIsIm9uQmVnaW5MaWZlQ3ljbGVUaW1lciIsIm9uRW5kTGlmZUN5Y2xlVGltZXIiLCJuZXh0TW91bnRJRCIsIl9jb21wb3NpdGVUeXBlIiwiX2NhbGxlZENvbXBvbmVudFdpbGxVbm1vdW50IiwicHVibGljUHJvcHMiLCJwdWJsaWNDb250ZXh0IiwiX3Byb2Nlc3NDb250ZXh0IiwiZG9Db25zdHJ1Y3QiLCJfY29uc3RydWN0Q29tcG9uZW50IiwicHJvcHNNdXRhdGVkIiwiY29tcG9uZW50RGlkVW5tb3VudCIsInVuc3RhYmxlX2hhbmRsZUVycm9yIiwicGVyZm9ybUluaXRpYWxNb3VudFdpdGhFcnJvckhhbmRsaW5nIiwicGVyZm9ybUluaXRpYWxNb3VudCIsIl9jb25zdHJ1Y3RDb21wb25lbnRXaXRob3V0T3duZXIiLCJfcHJvY2Vzc1BlbmRpbmdTdGF0ZSIsIl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQiLCJjaGlsZERlYnVnSURzIiwiX21hc2tDb250ZXh0IiwibWFza2VkQ29udGV4dCIsImNvbnRleHROYW1lIiwiX2NoZWNrQ29udGV4dFR5cGVzIiwiY3VycmVudENvbnRleHQiLCJvbkJlZ2luUHJvY2Vzc2luZ0NoaWxkQ29udGV4dCIsIm9uRW5kUHJvY2Vzc2luZ0NoaWxkQ29udGV4dCIsInByZXZDb250ZXh0IiwicHJldlBhcmVudEVsZW1lbnQiLCJuZXh0UGFyZW50RWxlbWVudCIsInByZXZVbm1hc2tlZENvbnRleHQiLCJuZXh0VW5tYXNrZWRDb250ZXh0Iiwid2lsbFJlY2VpdmUiLCJwcmV2UHJvcHMiLCJzaG91bGRVcGRhdGUiLCJfcGVyZm9ybUNvbXBvbmVudFVwZGF0ZSIsInVubWFza2VkQ29udGV4dCIsImhhc0NvbXBvbmVudERpZFVwZGF0ZSIsInByZXZTdGF0ZSIsIl91cGRhdGVSZW5kZXJlZENvbXBvbmVudCIsInByZXZDb21wb25lbnRJbnN0YW5jZSIsInByZXZSZW5kZXJlZEVsZW1lbnQiLCJuZXh0UmVuZGVyZWRFbGVtZW50Iiwib2xkSG9zdE5vZGUiLCJuZXh0TWFya3VwIiwiX3JlcGxhY2VOb2RlV2l0aE1hcmt1cCIsIl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnRXaXRob3V0T3duZXJPckNvbnRleHQiLCJhdHRhY2hSZWYiLCJwdWJsaWNDb21wb25lbnRJbnN0YW5jZSIsImRldGFjaFJlZiIsIlJlYWN0RGVmYXVsdEluamVjdGlvbiIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIk1vdW50IiwiUmVjb25jaWxlciIsInNob3dGaWxlVXJsTWVzc2FnZSIsImRlYnVnIiwidGVzdEZ1bmMiLCJ0ZXN0Rm4iLCJpZUNvbXBhdGliaWxpdHlNb2RlIiwiZXhwZWN0ZWRGZWF0dXJlcyIsIlJlYWN0RE9NVW5rbm93blByb3BlcnR5SG9vayIsIlJlYWN0RE9NTnVsbElucHV0VmFsdWVQcm9wSG9vayIsIlJlYWN0RE9NSW52YWxpZEFSSUFIb29rIiwiYWRkSG9vayIsIlJlYWN0RE9NSW5wdXQiLCJSZWFjdERPTU9wdGlvbiIsIlJlYWN0RE9NVGV4dGFyZWEiLCJSZWFjdE11bHRpQ2hpbGQiLCJnZXROb2RlIiwiQ09OVEVOVF9UWVBFUyIsIlNUWUxFIiwiSFRNTCIsInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyIsIkRPQ19GUkFHTUVOVF9UWVBFIiwiZnJpZW5kbHlTdHJpbmdpZnkiLCJrZXlFc2NhcGVkIiwic3R5bGVNdXRhdGlvbldhcm5pbmciLCJjaGVja0FuZFdhcm5Gb3JNdXRhdGVkU3R5bGUiLCJzdHlsZTEiLCJzdHlsZTIiLCJhc3NlcnRWYWxpZFByb3BzIiwidm9pZEVsZW1lbnRUYWdzIiwib25Gb2N1c0luIiwib25Gb2N1c091dCIsImVucXVldWVQdXRMaXN0ZW5lciIsImNvbnRhaW5lckluZm8iLCJpc0RvY3VtZW50RnJhZ21lbnQiLCJsaXN0ZW5lclRvUHV0IiwiaW5wdXRQb3N0TW91bnQiLCJwb3N0TW91bnRXcmFwcGVyIiwidGV4dGFyZWFQb3N0TW91bnQiLCJvcHRpb25Qb3N0TW91bnQiLCJzZXRBbmRWYWxpZGF0ZUNvbnRlbnRDaGlsZERldiIsImhhc0V4aXN0aW5nQ29udGVudCIsIl9jb250ZW50RGVidWdJRCIsImNvbnRlbnREZWJ1Z0lEIiwibWVkaWFFdmVudHMiLCJ0cmFja0lucHV0VmFsdWUiLCJ0cmFwQnViYmxlZEV2ZW50c0xvY2FsIiwicG9zdFVwZGF0ZVNlbGVjdFdyYXBwZXIiLCJvbWl0dGVkQ2xvc2VUYWdzIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImtleWdlbiIsIm1ldGEiLCJwYXJhbSIsIndiciIsIm5ld2xpbmVFYXRpbmdUYWdzIiwibGlzdGluZyIsInByZSIsInRleHRhcmVhIiwibWVudWl0ZW0iLCJWQUxJRF9UQUdfUkVHRVgiLCJ2YWxpZGF0ZWRUYWdDYWNoZSIsInZhbGlkYXRlRGFuZ2Vyb3VzVGFnIiwiaXNDdXN0b21Db21wb25lbnQiLCJnbG9iYWxJZENvdW50ZXIiLCJfcHJldmlvdXNTdHlsZSIsIl9wcmV2aW91c1N0eWxlQ29weSIsIm1vdW50SW1hZ2UiLCJlbCIsImRpdiIsImNyZWF0ZUVsZW1lbnROUyIsIl91cGRhdGVET01Qcm9wZXJ0aWVzIiwibGF6eVRyZWUiLCJfY3JlYXRlSW5pdGlhbENoaWxkcmVuIiwidGFnT3BlbiIsIl9jcmVhdGVPcGVuVGFnTWFya3VwQW5kUHV0TGlzdGVuZXJzIiwidGFnQ29udGVudCIsIl9jcmVhdGVDb250ZW50TWFya3VwIiwiYXV0b0ZvY3VzIiwicHJvcEtleSIsImNvbnRlbnRUb1VzZSIsImNoaWxkcmVuVG9Vc2UiLCJtb3VudENoaWxkcmVuIiwibGFzdFByb3BzIiwiX3VwZGF0ZURPTUNoaWxkcmVuIiwidXBkYXRlV3JhcHBlciIsInN0eWxlVXBkYXRlcyIsImxhc3RTdHlsZSIsIm5leHRQcm9wIiwibGFzdFByb3AiLCJsYXN0Q29udGVudCIsIm5leHRDb250ZW50IiwibGFzdEh0bWwiLCJuZXh0SHRtbCIsImxhc3RDaGlsZHJlbiIsImxhc3RIYXNDb250ZW50T3JIdG1sIiwibmV4dEhhc0NvbnRlbnRPckh0bWwiLCJ1cGRhdGVUZXh0Q29udGVudCIsInVwZGF0ZU1hcmt1cCIsImRvbUlEIiwiY3JlYXRlQ29tbWVudCIsInVzZUZpYmVyIiwiZGlkV2FybkNoZWNrZWRMaW5rIiwiZGlkV2FybkNoZWNrZWREZWZhdWx0Q2hlY2tlZCIsImRpZFdhcm5Db250cm9sbGVkVG9VbmNvbnRyb2xsZWQiLCJkaWRXYXJuVW5jb250cm9sbGVkVG9Db250cm9sbGVkIiwiZm9yY2VVcGRhdGVJZk1vdW50ZWQiLCJpc0NvbnRyb2xsZWQiLCJ1c2VzQ2hlY2tlZCIsImhvc3RQcm9wcyIsImRlZmF1bHRDaGVja2VkIiwiaW5pdGlhbENoZWNrZWQiLCJ2YWx1ZUFzTnVtYmVyIiwicm9vdE5vZGUiLCJxdWVyeVJvb3QiLCJxdWVyeVNlbGVjdG9yQWxsIiwib3RoZXJOb2RlIiwib3RoZXJJbnN0YW5jZSIsIndhcm5lZFByb3BlcnRpZXMiLCJyQVJJQSIsInZhbGlkYXRlUHJvcGVydHkiLCJzdGFuZGFyZE5hbWUiLCJ3YXJuSW52YWxpZEFSSUFQcm9wcyIsImludmFsaWRQcm9wcyIsImlzVmFsaWQiLCJ1bmtub3duUHJvcFN0cmluZyIsImhhbmRsZUVsZW1lbnQiLCJkaWRXYXJuVmFsdWVOdWxsIiwiZGlkV2FybkludmFsaWRPcHRpb25DaGlsZHJlbiIsImZsYXR0ZW5DaGlsZHJlbiIsInNlbGVjdFZhbHVlIiwic2VsZWN0UGFyZW50IiwiZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldCIsImlzQ29sbGFwc2VkIiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzT2Zmc2V0IiwiZ2V0SUVPZmZzZXRzIiwic2VsZWN0ZWRSYW5nZSIsInNlbGVjdGVkTGVuZ3RoIiwiZnJvbVN0YXJ0IiwiZHVwbGljYXRlIiwibW92ZVRvRWxlbWVudFRleHQiLCJzZXRFbmRQb2ludCIsInN0YXJ0T2Zmc2V0IiwiZW5kT2Zmc2V0IiwiZ2V0TW9kZXJuT2Zmc2V0cyIsInJhbmdlQ291bnQiLCJjdXJyZW50UmFuZ2UiLCJnZXRSYW5nZUF0Iiwic3RhcnRDb250YWluZXIiLCJlbmRDb250YWluZXIiLCJpc1NlbGVjdGlvbkNvbGxhcHNlZCIsInJhbmdlTGVuZ3RoIiwidGVtcFJhbmdlIiwiY2xvbmVSYW5nZSIsInNlbGVjdE5vZGVDb250ZW50cyIsInNldEVuZCIsImlzVGVtcFJhbmdlQ29sbGFwc2VkIiwiZGV0ZWN0aW9uUmFuZ2UiLCJzZXRTdGFydCIsImlzQmFja3dhcmQiLCJjb2xsYXBzZWQiLCJzZXRJRU9mZnNldHMiLCJzZXRNb2Rlcm5PZmZzZXRzIiwidGVtcCIsInN0YXJ0TWFya2VyIiwiZW5kTWFya2VyIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJ1c2VJRU9mZnNldHMiLCJSZWFjdFNlcnZlclJlbmRlcmluZyIsIlJlYWN0RE9NU2VydmVyIiwicmVuZGVyVG9TdHJpbmciLCJfc3RyaW5nVGV4dCIsIl9jbG9zaW5nQ29tbWVudCIsIl9jb21tZW50Tm9kZXMiLCJvcGVuaW5nVmFsdWUiLCJjbG9zaW5nVmFsdWUiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZXNjYXBlZFRleHQiLCJuZXh0VGV4dCIsIm5leHRTdHJpbmdUZXh0IiwiY29tbWVudE5vZGVzIiwiZGlkV2FyblZhbERlZmF1bHRWYWwiLCJuZXdWYWx1ZSIsImluc3RBIiwiaW5zdEIiLCJkZXB0aEEiLCJ0ZW1wQSIsImRlcHRoQiIsInRlbXBCIiwiZGVwdGgiLCJwYXRoRnJvbSIsInBhdGhUbyIsInJlYWN0UHJvcHMiLCJ3YXJuVW5rbm93blByb3BlcnRpZXMiLCJ1bmtub3duUHJvcHMiLCJSZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdIb29rIiwiUmVhY3RIb3N0T3BlcmF0aW9uSGlzdG9yeUhvb2siLCJob29rcyIsImRpZEhvb2tUaHJvd0ZvckV2ZW50IiwiY2FsbEhvb2siLCJhcmc0IiwiYXJnNSIsImVtaXRFdmVudCIsImhvb2siLCJpc1Byb2ZpbGluZyIsImZsdXNoSGlzdG9yeSIsImxpZmVDeWNsZVRpbWVyU3RhY2siLCJjdXJyZW50Rmx1c2hOZXN0aW5nIiwiY3VycmVudEZsdXNoTWVhc3VyZW1lbnRzIiwiY3VycmVudEZsdXNoU3RhcnRUaW1lIiwiY3VycmVudFRpbWVyRGVidWdJRCIsImN1cnJlbnRUaW1lclN0YXJ0VGltZSIsImN1cnJlbnRUaW1lck5lc3RlZEZsdXNoRHVyYXRpb24iLCJjdXJyZW50VGltZXJUeXBlIiwibGlmZUN5Y2xlVGltZXJIYXNXYXJuZWQiLCJjbGVhckhpc3RvcnkiLCJnZXRUcmVlU25hcHNob3QiLCJyZWdpc3RlcmVkSURzIiwicmVzZXRNZWFzdXJlbWVudHMiLCJwcmV2aW91c1N0YXJ0VGltZSIsInByZXZpb3VzTWVhc3VyZW1lbnRzIiwicHJldmlvdXNPcGVyYXRpb25zIiwiZ2V0SGlzdG9yeSIsIm1lYXN1cmVtZW50cyIsIm9wZXJhdGlvbnMiLCJ0cmVlU25hcHNob3QiLCJjaGVja0RlYnVnSUQiLCJhbGxvd1Jvb3QiLCJiZWdpbkxpZmVDeWNsZVRpbWVyIiwiZW5kTGlmZUN5Y2xlVGltZXIiLCJwYXVzZUN1cnJlbnRMaWZlQ3ljbGVUaW1lciIsImN1cnJlbnRUaW1lciIsInN0YXJ0VGltZSIsIm5lc3RlZEZsdXNoU3RhcnRUaW1lIiwicmVzdW1lQ3VycmVudExpZmVDeWNsZVRpbWVyIiwiX2xpZmVDeWNsZVRpbWVyU3RhY2skIiwibmVzdGVkRmx1c2hEdXJhdGlvbiIsImxhc3RNYXJrVGltZVN0YW1wIiwiY2FuVXNlUGVyZm9ybWFuY2VNZWFzdXJlIiwibWFyayIsImNsZWFyTWFya3MiLCJtZWFzdXJlIiwiY2xlYXJNZWFzdXJlcyIsInNob3VsZE1hcmsiLCJpc0hvc3RFbGVtZW50IiwibWFya0JlZ2luIiwibWFya1R5cGUiLCJtYXJrTmFtZSIsIm1hcmtFbmQiLCJtZWFzdXJlbWVudE5hbWUiLCJyZW1vdmVIb29rIiwiYmVnaW5Qcm9maWxpbmciLCJlbmRQcm9maWxpbmciLCJnZXRGbHVzaEhpc3RvcnkiLCJvcGVyYXRpb24iLCJvblRlc3RFdmVudCIsImFkZERldnRvb2wiLCJyZW1vdmVEZXZ0b29sIiwicnVuRXZlbnRRdWV1ZUluQmF0Y2giLCJmaW5kUGFyZW50IiwiVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nIiwiYW5jZXN0b3JzIiwiaGFuZGxlVG9wTGV2ZWxJbXBsIiwiYm9va0tlZXBpbmciLCJhbmNlc3RvciIsIl9oYW5kbGVUb3BMZXZlbCIsInNjcm9sbFZhbHVlTW9uaXRvciIsIl9lbmFibGVkIiwiX3ByZXZlbnRDbGVhcmluZyIsInByb2Nlc3NpbmdDaGlsZENvbnRleHQiLCJ3YXJuSW52YWxpZFNldFN0YXRlIiwibWFrZUluc2VydE1hcmt1cCIsIm1ha2VNb3ZlIiwibWFrZVJlbW92ZSIsIm1ha2VTZXRNYXJrdXAiLCJtYWtlVGV4dENvbnRlbnQiLCJwcm9jZXNzUXVldWUiLCJzZXRDaGlsZHJlbkZvckluc3RydW1lbnRhdGlvbiIsImdldERlYnVnSUQiLCJpbnRlcm5hbCIsIl9yZWNvbmNpbGVySW5zdGFudGlhdGVDaGlsZHJlbiIsIm5lc3RlZENoaWxkcmVuIiwiX3JlY29uY2lsZXJVcGRhdGVDaGlsZHJlbiIsIm5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzIiwiX3VwZGF0ZUNoaWxkcmVuIiwibmV4dE1vdW50SW5kZXgiLCJsYXN0UGxhY2VkTm9kZSIsIl9tb3VudENoaWxkQXRJbmRleCIsIl91bm1vdW50Q2hpbGQiLCJjcmVhdGVDaGlsZCIsImlzVmFsaWRPd25lciIsIlJlYWN0T3duZXIiLCJhZGRDb21wb25lbnRBc1JlZlRvIiwicmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tIiwib3duZXJQdWJsaWNJbnN0YW5jZSIsIlNFTEVDVElPTl9SRVNUT1JBVElPTiIsIkVWRU5UX1NVUFBSRVNTSU9OIiwiY3VycmVudGx5RW5hYmxlZCIsInByZXZpb3VzbHlFbmFibGVkIiwiT05fRE9NX1JFQURZX1FVRVVFSU5HIiwicmVhY3RNb3VudFJlYWR5IiwicHJldlJlZiIsInByZXZPd25lciIsIm5leHRSZWYiLCJuZXh0T3duZXIiLCJSZWFjdFNlcnZlckJhdGNoaW5nU3RyYXRlZ3kiLCJwZW5kaW5nVHJhbnNhY3Rpb25zIiwicmVuZGVyVG9TdHJpbmdJbXBsIiwibWFrZVN0YXRpY01hcmt1cCIsIk5TIiwieGxpbmsiLCJ4bWwiLCJBVFRSUyIsImFjY2VudEhlaWdodCIsImFjY3VtdWxhdGUiLCJhZGRpdGl2ZSIsImFsaWdubWVudEJhc2VsaW5lIiwiYWxsb3dSZW9yZGVyIiwiYWxwaGFiZXRpYyIsImFtcGxpdHVkZSIsImFyYWJpY0Zvcm0iLCJhc2NlbnQiLCJhdHRyaWJ1dGVUeXBlIiwiYXV0b1JldmVyc2UiLCJhemltdXRoIiwiYmFzZUZyZXF1ZW5jeSIsImJhc2VQcm9maWxlIiwiYmFzZWxpbmVTaGlmdCIsImJib3giLCJiZWdpbiIsImJpYXMiLCJieSIsImNhbGNNb2RlIiwiY2FwSGVpZ2h0IiwiY2xpcCIsImNsaXBQYXRoIiwiY2xpcFJ1bGUiLCJjbGlwUGF0aFVuaXRzIiwiY29sb3JJbnRlcnBvbGF0aW9uIiwiY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVycyIsImNvbG9yUHJvZmlsZSIsImNvbG9yUmVuZGVyaW5nIiwiY29udGVudFNjcmlwdFR5cGUiLCJjb250ZW50U3R5bGVUeXBlIiwiY3giLCJjeSIsImRlY2VsZXJhdGUiLCJkZXNjZW50IiwiZGlmZnVzZUNvbnN0YW50IiwiZGl2aXNvciIsImRvbWluYW50QmFzZWxpbmUiLCJkdXIiLCJkeCIsImR5IiwiZWRnZU1vZGUiLCJlbGV2YXRpb24iLCJlbmFibGVCYWNrZ3JvdW5kIiwiZXhwb25lbnQiLCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkIiwiZmlsbFJ1bGUiLCJmaWx0ZXJSZXMiLCJmaWx0ZXJVbml0cyIsImZsb29kQ29sb3IiLCJmb2N1c2FibGUiLCJmb250U2l6ZUFkanVzdCIsImZvbnRTdHJldGNoIiwiZngiLCJmeSIsImcxIiwiZzIiLCJnbHlwaE5hbWUiLCJnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbCIsImdseXBoT3JpZW50YXRpb25WZXJ0aWNhbCIsImdseXBoUmVmIiwiZ3JhZGllbnRUcmFuc2Zvcm0iLCJncmFkaWVudFVuaXRzIiwiaGFuZ2luZyIsImhvcml6QWR2WCIsImhvcml6T3JpZ2luWCIsImlkZW9ncmFwaGljIiwiaW1hZ2VSZW5kZXJpbmciLCJpbjIiLCJpbnRlcmNlcHQiLCJrMSIsImsyIiwiazMiLCJrNCIsImtlcm5lbE1hdHJpeCIsImtlcm5lbFVuaXRMZW5ndGgiLCJrZXJuaW5nIiwia2V5UG9pbnRzIiwia2V5U3BsaW5lcyIsImtleVRpbWVzIiwibGVuZ3RoQWRqdXN0IiwibGlnaHRpbmdDb2xvciIsImxpbWl0aW5nQ29uZUFuZ2xlIiwibG9jYWwiLCJtYXJrZXJFbmQiLCJtYXJrZXJNaWQiLCJtYXJrZXJTdGFydCIsIm1hcmtlckhlaWdodCIsIm1hcmtlclVuaXRzIiwibWFya2VyV2lkdGgiLCJtYXNrIiwibWFza0NvbnRlbnRVbml0cyIsIm1hc2tVbml0cyIsIm1hdGhlbWF0aWNhbCIsIm51bU9jdGF2ZXMiLCJvcGVyYXRvciIsIm9yaWVudCIsIm9yaWVudGF0aW9uIiwib3JpZ2luIiwib3ZlcmxpbmVQb3NpdGlvbiIsIm92ZXJsaW5lVGhpY2tuZXNzIiwicGFpbnRPcmRlciIsInBhbm9zZTEiLCJwYXRoTGVuZ3RoIiwicGF0dGVybkNvbnRlbnRVbml0cyIsInBhdHRlcm5UcmFuc2Zvcm0iLCJwYXR0ZXJuVW5pdHMiLCJwb2ludGVyRXZlbnRzIiwicG9pbnRzIiwicG9pbnRzQXRYIiwicG9pbnRzQXRZIiwicG9pbnRzQXRaIiwicHJlc2VydmVBbHBoYSIsInByZXNlcnZlQXNwZWN0UmF0aW8iLCJwcmltaXRpdmVVbml0cyIsInJhZGl1cyIsInJlZlgiLCJyZWZZIiwicmVuZGVyaW5nSW50ZW50IiwicmVwZWF0Q291bnQiLCJyZXBlYXREdXIiLCJyZXF1aXJlZEV4dGVuc2lvbnMiLCJyZXF1aXJlZEZlYXR1cmVzIiwicmVzdGFydCIsInJvdGF0ZSIsInJ4IiwicnkiLCJzY2FsZSIsInNlZWQiLCJzaGFwZVJlbmRlcmluZyIsInNsb3BlIiwic3BhY2luZyIsInNwZWN1bGFyQ29uc3RhbnQiLCJzcGVjdWxhckV4cG9uZW50Iiwic3BlZWQiLCJzcHJlYWRNZXRob2QiLCJzdGREZXZpYXRpb24iLCJzdGVtaCIsInN0ZW12Iiwic3RpdGNoVGlsZXMiLCJzdG9wQ29sb3IiLCJzdHJpa2V0aHJvdWdoUG9zaXRpb24iLCJzdHJpa2V0aHJvdWdoVGhpY2tuZXNzIiwic3Ryb2tlIiwic3Ryb2tlTGluZWNhcCIsInN0cm9rZUxpbmVqb2luIiwic3VyZmFjZVNjYWxlIiwic3lzdGVtTGFuZ3VhZ2UiLCJ0YWJsZVZhbHVlcyIsInRhcmdldFgiLCJ0YXJnZXRZIiwidGV4dEFuY2hvciIsInRleHRSZW5kZXJpbmciLCJ0ZXh0TGVuZ3RoIiwidTEiLCJ1MiIsInVuZGVybGluZVBvc2l0aW9uIiwidW5kZXJsaW5lVGhpY2tuZXNzIiwidW5pY29kZSIsInVuaWNvZGVCaWRpIiwidW5pY29kZVJhbmdlIiwidW5pdHNQZXJFbSIsInZBbHBoYWJldGljIiwidkhhbmdpbmciLCJ2SWRlb2dyYXBoaWMiLCJ2TWF0aGVtYXRpY2FsIiwidmVjdG9yRWZmZWN0IiwidmVydEFkdlkiLCJ2ZXJ0T3JpZ2luWCIsInZlcnRPcmlnaW5ZIiwidmlld0JveCIsInZpZXdUYXJnZXQiLCJ2aXNpYmlsaXR5Iiwid2lkdGhzIiwid29yZFNwYWNpbmciLCJ3cml0aW5nTW9kZSIsInhIZWlnaHQiLCJ4MSIsIngyIiwieENoYW5uZWxTZWxlY3RvciIsInhsaW5rQWN0dWF0ZSIsInhsaW5rQXJjcm9sZSIsInhsaW5rSHJlZiIsInhsaW5rUm9sZSIsInhsaW5rU2hvdyIsInhsaW5rVGl0bGUiLCJ4bGlua1R5cGUiLCJ4bWxCYXNlIiwieG1sbnMiLCJ4bWxuc1hsaW5rIiwieG1sTGFuZyIsInhtbFNwYWNlIiwieTEiLCJ5MiIsInlDaGFubmVsU2VsZWN0b3IiLCJ6Iiwiem9vbUFuZFBhbiIsInNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCIsImxhc3RTZWxlY3Rpb24iLCJtb3VzZURvd24iLCJoYXNMaXN0ZW5lciIsImJvdW5kaW5nVG9wIiwiYm91bmRpbmdMZWZ0IiwiY29uc3RydWN0U2VsZWN0RXZlbnQiLCJjdXJyZW50U2VsZWN0aW9uIiwiU3ludGhldGljQW5pbWF0aW9uRXZlbnQiLCJTeW50aGV0aWNDbGlwYm9hcmRFdmVudCIsIlN5bnRoZXRpY0ZvY3VzRXZlbnQiLCJTeW50aGV0aWNLZXlib2FyZEV2ZW50IiwiU3ludGhldGljRHJhZ0V2ZW50IiwiU3ludGhldGljVG91Y2hFdmVudCIsIlN5bnRoZXRpY1RyYW5zaXRpb25FdmVudCIsIlN5bnRoZXRpY1doZWVsRXZlbnQiLCJ0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWciLCJjYXBpdGFsaXplZEV2ZW50Iiwib25FdmVudCIsInRvcEV2ZW50Iiwib25DbGlja0xpc3RlbmVycyIsIkV2ZW50Q29uc3RydWN0b3IiLCJBbmltYXRpb25FdmVudEludGVyZmFjZSIsInBzZXVkb0VsZW1lbnQiLCJDbGlwYm9hcmRFdmVudEludGVyZmFjZSIsImNsaXBib2FyZERhdGEiLCJDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlIiwiRHJhZ0V2ZW50SW50ZXJmYWNlIiwiZGF0YVRyYW5zZmVyIiwiRm9jdXNFdmVudEludGVyZmFjZSIsIklucHV0RXZlbnRJbnRlcmZhY2UiLCJnZXRFdmVudEtleSIsIktleWJvYXJkRXZlbnRJbnRlcmZhY2UiLCJsb2NhbGUiLCJUb3VjaEV2ZW50SW50ZXJmYWNlIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlRyYW5zaXRpb25FdmVudEludGVyZmFjZSIsIldoZWVsRXZlbnRJbnRlcmZhY2UiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIk1PRCIsImNvbXBvbmVudFN0YWNrSW5mbyIsInN0eWxlV2FybmluZ3MiLCJpc0VtcHR5IiwiaXNOb25OdW1lcmljIiwid2FybmVkIiwid2FybmluZ3MiLCJjb21wb25lbnRPckVsZW1lbnQiLCJmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCIsIm5vcm1hbGl6ZUtleSIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJ0cmFuc2xhdGVUb0tleSIsImdldExlYWZOb2RlIiwiZ2V0U2libGluZ05vZGUiLCJub2RlU3RhcnQiLCJub2RlRW5kIiwibWFrZVByZWZpeE1hcCIsInN0eWxlUHJvcCIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsInByZWZpeGVkRXZlbnROYW1lcyIsImFuaW1hdGlvbiIsInByZWZpeE1hcCIsImhhc1N5bWJvbCIsImZvciIsIlJFQUNUX1BPUlRBTF9UWVBFIiwiUkVBQ1RfRlJBR01FTlRfVFlQRSIsIlJFQUNUX1NUUklDVF9NT0RFX1RZUEUiLCJSRUFDVF9QUk9GSUxFUl9UWVBFIiwiUkVBQ1RfUFJPVklERVJfVFlQRSIsIlJFQUNUX0NPTlRFWFRfVFlQRSIsIlJFQUNUX0FTWU5DX01PREVfVFlQRSIsIlJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFIiwiUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSIsIlJFQUNUX1NVU1BFTlNFX1RZUEUiLCJSRUFDVF9NRU1PX1RZUEUiLCJSRUFDVF9MQVpZX1RZUEUiLCJsb3dQcmlvcml0eVdhcm5pbmckMSIsInR5cGVPZiIsIiQkdHlwZW9mVHlwZSIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkZvcndhcmRSZWYiLCJGcmFnbWVudCIsIkxhenkiLCJNZW1vIiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNNZW1vIiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImciLCJwIiwicSIsInUiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImdldElzQWN0aXZlIiwiYXJpYUN1cnJlbnQiLCJyZXN0IiwiZXNjYXBlZFBhdGgiLCJ3aGVuIiwiaXNTdGF0aWMiLCJwcmV2VG8iLCJuZXh0VG8iLCJjb21wdXRlVG8iLCJhZGRCYXNlbmFtZSIsImNyZWF0ZVVSTCIsInN0YXRpY0hhbmRsZXIiLCJoYW5kbGVQdXNoIiwiaGFuZGxlUmVwbGFjZSIsIl90aGlzJHByb3BzMiIsImhhbmRsZUxpc3RlbiIsImhhbmRsZUJsb2NrIiwiX2VsZW1lbnQkcHJvcHMiLCJwYXRoUHJvcCIsIkMiLCJ3cmFwcGVkQ29tcG9uZW50UmVmIiwicmVtYWluaW5nUHJvcHMiLCJyb3V0ZUNvbXBvbmVudFByb3BzIiwiV3JhcHBlZENvbXBvbmVudCIsIl9lbGVtZW50JGdldEJvdW5kaW5nQyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIl9zZXJ2ZXIiLCJfc2VydmVyMiIsImlzQnJvd3NlciIsIlNWR0luamVjdG9yIiwiUmVhY3RTVkciLCJyZWZDYWxsYmFjayIsInJlbW92ZVNWRyIsInJlbmRlclNWRyIsImVhY2giLCJldmFsU2NyaXB0cyIsIndyYXBwZXJDbGFzc05hbWUiLCJ1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCIsImVzY2FwZVVzZXJQcm92aWRlZEtleSIsIkZvckVhY2hCb29rS2VlcGluZyIsImZvckVhY2hGdW5jdGlvbiIsImZvckVhY2hDb250ZXh0IiwiZm9yRWFjaFNpbmdsZUNoaWxkIiwiZm9yRWFjaENoaWxkcmVuIiwiZm9yRWFjaEZ1bmMiLCJNYXBCb29rS2VlcGluZyIsIm1hcFJlc3VsdCIsImtleVByZWZpeCIsIm1hcEZ1bmN0aW9uIiwibWFwQ29udGV4dCIsIm1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQiLCJjaGlsZEtleSIsIm1hcHBlZENoaWxkIiwibWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbCIsImVzY2FwZWRQcmVmaXgiLCJtYXBDaGlsZHJlbiIsImZvckVhY2hTaW5nbGVDaGlsZER1bW15IiwiY291bnRDaGlsZHJlbiIsImNyZWF0ZURPTUZhY3RvcnkiLCJhYmJyIiwiYWRkcmVzcyIsImFydGljbGUiLCJhc2lkZSIsImF1ZGlvIiwiYmRpIiwiYmRvIiwiYmlnIiwiYmxvY2txdW90ZSIsImNhbnZhcyIsImNhcHRpb24iLCJjb2xncm91cCIsImRhdGFsaXN0IiwiZGQiLCJkZWwiLCJkZm4iLCJkaWFsb2ciLCJkbCIsImR0IiwiZW0iLCJmaWVsZHNldCIsImZpZ2NhcHRpb24iLCJmaWd1cmUiLCJmb290ZXIiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJoZWFkIiwiaGVhZGVyIiwiaGdyb3VwIiwiaWZyYW1lIiwiaW5zIiwia2JkIiwibGVnZW5kIiwibGkiLCJtYWluIiwibWVudSIsIm1ldGVyIiwibmF2Iiwibm9zY3JpcHQiLCJvbCIsIm9wdGdyb3VwIiwib3B0aW9uIiwicHJvZ3Jlc3MiLCJycCIsInJ0IiwicnVieSIsInNhbXAiLCJzY3JpcHQiLCJzdHJvbmciLCJzdWIiLCJzdXAiLCJ0YWJsZSIsInRib2R5IiwidGQiLCJ0Zm9vdCIsInRoIiwidGhlYWQiLCJ0ciIsInVsIiwidmlkZW8iLCJjaXJjbGUiLCJkZWZzIiwiZWxsaXBzZSIsImxpbmVhckdyYWRpZW50IiwicG9seWdvbiIsInBvbHlsaW5lIiwicmFkaWFsR3JhZGllbnQiLCJyZWN0Iiwic3RvcCIsInRzcGFuIiwiX3JlcXVpcmUiLCJfcmVxdWlyZTIiLCJuZXh0RGVidWdJRCIsImlzQWJzb2x1dGUiLCJzcGxpY2VPbmUiLCJyZXNvbHZlUGF0aG5hbWUiLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJoYXNUcmFpbGluZ1NsYXNoIiwidXAiLCJpc0xvY2FsIiwiaGFzU3ZnU3VwcG9ydCIsInVuaXF1ZUNsYXNzZXMiLCJzdmdDYWNoZSIsImluamVjdENvdW50IiwiaW5qZWN0ZWRFbGVtZW50cyIsInJlcXVlc3RRdWV1ZSIsInJhblNjcmlwdHMiLCJjbG9uZVN2ZyIsInNvdXJjZVN2ZyIsImNsb25lTm9kZSIsInF1ZXVlUmVxdWVzdCIsInByb2Nlc3NSZXF1ZXN0UXVldWUiLCJsb2FkU3ZnIiwiU1ZHU1ZHRWxlbWVudCIsImh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VYTUwiLCJEb2N1bWVudCIsIkRPTVBhcnNlciIsInhtbERvYyIsInBhcnNlRnJvbVN0cmluZyIsIm92ZXJyaWRlTWltZVR5cGUiLCJpbmplY3RFbGVtZW50IiwicG5nRmFsbGJhY2siLCJpbWdVcmwiLCJwZXJFbGVtZW50RmFsbGJhY2siLCJpbWdJZCIsImltZ1RpdGxlIiwiY2xhc3NNZXJnZSIsImltZ1N0eWxlIiwiaW1nRGF0YSIsImF0dHJpYnV0ZXMiLCJhdCIsImRhdGFBdHRyIiwiaXJpRWxlbWVudHNBbmRQcm9wZXJ0aWVzIiwiZWxlbWVudERlZnMiLCJjdXJyZW50SWQiLCJuZXdJZCIsImVsZW1lbnRzTGVuIiwicmVmZXJlbmNpbmdFbGVtZW50cyIsInJlZmVyZW5jaW5nRWxlbWVudExlbiIsInNjcmlwdHNUb0V2YWwiLCJzY3JpcHRUeXBlIiwic2NyaXB0c0xlbiIsImlubmVyVGV4dCIsInNjcmlwdHNUb0V2YWxMZW4iLCJzdHlsZVRhZ3MiLCJzdHlsZVRhZyIsImVsZW1lbnRzIiwiZWFjaENhbGxiYWNrIiwiZWxlbWVudHNMb2FkZWQiLCJpc1Byb2R1Y3Rpb24iLCJ2YWx1ZUVxdWFsIiwiYVR5cGUiLCJiVHlwZSIsImFWYWx1ZSIsInZhbHVlT2YiLCJiVmFsdWUiLCJhS2V5cyIsImJLZXlzIiwiZXZhbCIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7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NzRILE1BQVA7QUFDQSxDQXJCRCxDOzs7Ozs7QUNBQTtBQUNBO0FBQ0EiLCJmaWxlIjoiY2xpZW50LWJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbiBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTY5KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCBiNjU3ODM4MGQxNTAzOGFhYzU3NSIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3Byb2Nlc3MvYnJvd3Nlci5qcyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9SZWFjdCcpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC9yZWFjdC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2ZianMvbGliL2ludmFyaWFudC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCcuL2VtcHR5RnVuY3Rpb24nKTtcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBlbXB0eUZ1bmN0aW9uO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG5cbiAgd2FybmluZyA9IGZ1bmN0aW9uIHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5pbmRleE9mKCdGYWlsZWQgQ29tcG9zaXRlIHByb3BUeXBlOiAnKSA9PT0gMCkge1xuICAgICAgcmV0dXJuOyAvLyBJZ25vcmUgQ29tcG9zaXRlQ29tcG9uZW50IHByb3B0eXBlIGNoZWNrLlxuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDIgPyBfbGVuMiAtIDIgOiAwKSwgX2tleTIgPSAyOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHByaW50V2FybmluZy5hcHBseSh1bmRlZmluZWQsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9mYmpzL2xpYi93YXJuaW5nLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFdBUk5JTkc6IERPIE5PVCBtYW51YWxseSByZXF1aXJlIHRoaXMgbW9kdWxlLlxuICogVGhpcyBpcyBhIHJlcGxhY2VtZW50IGZvciBgaW52YXJpYW50KC4uLilgIHVzZWQgYnkgdGhlIGVycm9yIGNvZGUgc3lzdGVtXG4gKiBhbmQgd2lsbCBfb25seV8gYmUgcmVxdWlyZWQgYnkgdGhlIGNvcnJlc3BvbmRpbmcgYmFiZWwgcGFzcy5cbiAqIEl0IGFsd2F5cyB0aHJvd3MuXG4gKi9cblxuZnVuY3Rpb24gcmVhY3RQcm9kSW52YXJpYW50KGNvZGUpIHtcbiAgdmFyIGFyZ0NvdW50ID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG5cbiAgdmFyIG1lc3NhZ2UgPSAnTWluaWZpZWQgUmVhY3QgZXJyb3IgIycgKyBjb2RlICsgJzsgdmlzaXQgJyArICdodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD0nICsgY29kZTtcblxuICBmb3IgKHZhciBhcmdJZHggPSAwOyBhcmdJZHggPCBhcmdDb3VudDsgYXJnSWR4KyspIHtcbiAgICBtZXNzYWdlICs9ICcmYXJnc1tdPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2FyZ0lkeCArIDFdKTtcbiAgfVxuXG4gIG1lc3NhZ2UgKz0gJyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQnICsgJyBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nO1xuXG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IHJlYWN0UHJvZEludmFyaWFudCdzIG93biBmcmFtZVxuXG4gIHRocm93IGVycm9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlYWN0UHJvZEludmFyaWFudDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvcmVhY3RQcm9kSW52YXJpYW50LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2VuaGFuY2VyID0gcmVxdWlyZSgnLi9lbmhhbmNlcicpO1xuXG52YXIgX2VuaGFuY2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VuaGFuY2VyKTtcblxudmFyIF9wbHVnaW5zID0gcmVxdWlyZSgnLi9wbHVnaW5zJyk7XG5cbnZhciBfcGx1Z2luczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wbHVnaW5zKTtcblxudmFyIF9zdHlsZSA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9zdHlsZScpO1xuXG52YXIgX3N0eWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0eWxlKTtcblxudmFyIF9zdHlsZVJvb3QgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvc3R5bGUtcm9vdCcpO1xuXG52YXIgX3N0eWxlUm9vdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHlsZVJvb3QpO1xuXG52YXIgX2dldFN0YXRlID0gcmVxdWlyZSgnLi9nZXQtc3RhdGUnKTtcblxudmFyIF9nZXRTdGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRTdGF0ZSk7XG5cbnZhciBfa2V5ZnJhbWVzID0gcmVxdWlyZSgnLi9rZXlmcmFtZXMnKTtcblxudmFyIF9rZXlmcmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5ZnJhbWVzKTtcblxudmFyIF9yZXNvbHZlU3R5bGVzID0gcmVxdWlyZSgnLi9yZXNvbHZlLXN0eWxlcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBSYWRpdW0oQ29tcG9zZWRDb21wb25lbnQpIHtcbiAgcmV0dXJuICgwLCBfZW5oYW5jZXIyLmRlZmF1bHQpKENvbXBvc2VkQ29tcG9uZW50KTtcbn1cblxuUmFkaXVtLlBsdWdpbnMgPSBfcGx1Z2luczIuZGVmYXVsdDtcblJhZGl1bS5TdHlsZSA9IF9zdHlsZTIuZGVmYXVsdDtcblJhZGl1bS5TdHlsZVJvb3QgPSBfc3R5bGVSb290Mi5kZWZhdWx0O1xuUmFkaXVtLmdldFN0YXRlID0gX2dldFN0YXRlMi5kZWZhdWx0O1xuUmFkaXVtLmtleWZyYW1lcyA9IF9rZXlmcmFtZXMyLmRlZmF1bHQ7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJhZGl1bS5UZXN0TW9kZSA9IHtcbiAgICBjbGVhclN0YXRlOiBfcmVzb2x2ZVN0eWxlcy5fX2NsZWFyU3RhdGVGb3JUZXN0cyxcbiAgICBkaXNhYmxlOiBfcmVzb2x2ZVN0eWxlcy5fX3NldFRlc3RNb2RlLmJpbmQobnVsbCwgZmFsc2UpLFxuICAgIGVuYWJsZTogX3Jlc29sdmVTdHlsZXMuX19zZXRUZXN0TW9kZS5iaW5kKG51bGwsIHRydWUpXG4gIH07XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFJhZGl1bTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmFkaXVtL2xpYi9pbmRleC5qcyIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L29iamVjdC1hc3NpZ24vaW5kZXguanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHknKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudEZsYWdzID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudEZsYWdzJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxudmFyIEFUVFJfTkFNRSA9IERPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FO1xudmFyIEZsYWdzID0gUmVhY3RET01Db21wb25lbnRGbGFncztcblxudmFyIGludGVybmFsSW5zdGFuY2VLZXkgPSAnX19yZWFjdEludGVybmFsSW5zdGFuY2UkJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgZ2l2ZW4gbm9kZSBzaG91bGQgYmUgY2FjaGVkLlxuICovXG5mdW5jdGlvbiBzaG91bGRQcmVjYWNoZU5vZGUobm9kZSwgbm9kZUlEKSB7XG4gIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAxICYmIG5vZGUuZ2V0QXR0cmlidXRlKEFUVFJfTkFNRSkgPT09IFN0cmluZyhub2RlSUQpIHx8IG5vZGUubm9kZVR5cGUgPT09IDggJiYgbm9kZS5ub2RlVmFsdWUgPT09ICcgcmVhY3QtdGV4dDogJyArIG5vZGVJRCArICcgJyB8fCBub2RlLm5vZGVUeXBlID09PSA4ICYmIG5vZGUubm9kZVZhbHVlID09PSAnIHJlYWN0LWVtcHR5OiAnICsgbm9kZUlEICsgJyAnO1xufVxuXG4vKipcbiAqIERyaWxsIGRvd24gKHRocm91Z2ggY29tcG9zaXRlcyBhbmQgZW1wdHkgY29tcG9uZW50cykgdW50aWwgd2UgZ2V0IGEgaG9zdCBvclxuICogaG9zdCB0ZXh0IGNvbXBvbmVudC5cbiAqXG4gKiBUaGlzIGlzIHByZXR0eSBwb2x5bW9ycGhpYyBidXQgdW5hdm9pZGFibGUgd2l0aCB0aGUgY3VycmVudCBzdHJ1Y3R1cmUgd2UgaGF2ZVxuICogZm9yIGBfcmVuZGVyZWRDaGlsZHJlbmAuXG4gKi9cbmZ1bmN0aW9uIGdldFJlbmRlcmVkSG9zdE9yVGV4dEZyb21Db21wb25lbnQoY29tcG9uZW50KSB7XG4gIHZhciByZW5kZXJlZDtcbiAgd2hpbGUgKHJlbmRlcmVkID0gY29tcG9uZW50Ll9yZW5kZXJlZENvbXBvbmVudCkge1xuICAgIGNvbXBvbmVudCA9IHJlbmRlcmVkO1xuICB9XG4gIHJldHVybiBjb21wb25lbnQ7XG59XG5cbi8qKlxuICogUG9wdWxhdGUgYF9ob3N0Tm9kZWAgb24gdGhlIHJlbmRlcmVkIGhvc3QvdGV4dCBjb21wb25lbnQgd2l0aCB0aGUgZ2l2ZW5cbiAqIERPTSBub2RlLiBUaGUgcGFzc2VkIGBpbnN0YCBjYW4gYmUgYSBjb21wb3NpdGUuXG4gKi9cbmZ1bmN0aW9uIHByZWNhY2hlTm9kZShpbnN0LCBub2RlKSB7XG4gIHZhciBob3N0SW5zdCA9IGdldFJlbmRlcmVkSG9zdE9yVGV4dEZyb21Db21wb25lbnQoaW5zdCk7XG4gIGhvc3RJbnN0Ll9ob3N0Tm9kZSA9IG5vZGU7XG4gIG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSBob3N0SW5zdDtcbn1cblxuZnVuY3Rpb24gdW5jYWNoZU5vZGUoaW5zdCkge1xuICB2YXIgbm9kZSA9IGluc3QuX2hvc3ROb2RlO1xuICBpZiAobm9kZSkge1xuICAgIGRlbGV0ZSBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICAgIGluc3QuX2hvc3ROb2RlID0gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIFBvcHVsYXRlIGBfaG9zdE5vZGVgIG9uIGVhY2ggY2hpbGQgb2YgYGluc3RgLCBhc3N1bWluZyB0aGF0IHRoZSBjaGlsZHJlblxuICogbWF0Y2ggdXAgd2l0aCB0aGUgRE9NIChlbGVtZW50KSBjaGlsZHJlbiBvZiBgbm9kZWAuXG4gKlxuICogV2UgY2FjaGUgZW50aXJlIGxldmVscyBhdCBvbmNlIHRvIGF2b2lkIGFuIG5eMiBwcm9ibGVtIHdoZXJlIHdlIGFjY2VzcyB0aGVcbiAqIGNoaWxkcmVuIG9mIGEgbm9kZSBzZXF1ZW50aWFsbHkgYW5kIGhhdmUgdG8gd2FsayBmcm9tIHRoZSBzdGFydCB0byBvdXIgdGFyZ2V0XG4gKiBub2RlIGV2ZXJ5IHRpbWUuXG4gKlxuICogU2luY2Ugd2UgdXBkYXRlIGBfcmVuZGVyZWRDaGlsZHJlbmAgYW5kIHRoZSBhY3R1YWwgRE9NIGF0IChzbGlnaHRseSlcbiAqIGRpZmZlcmVudCB0aW1lcywgd2UgY291bGQgcmFjZSBoZXJlIGFuZCBzZWUgYSBuZXdlciBgX3JlbmRlcmVkQ2hpbGRyZW5gIHRoYW5cbiAqIHRoZSBET00gbm9kZXMgd2Ugc2VlLiBUbyBhdm9pZCB0aGlzLCBSZWFjdE11bHRpQ2hpbGQgY2FsbHNcbiAqIGBwcmVwYXJlVG9NYW5hZ2VDaGlsZHJlbmAgYmVmb3JlIHdlIGNoYW5nZSBgX3JlbmRlcmVkQ2hpbGRyZW5gLCBhdCB3aGljaFxuICogdGltZSB0aGUgY29udGFpbmVyJ3MgY2hpbGQgbm9kZXMgYXJlIGFsd2F5cyBjYWNoZWQgKHVudGlsIGl0IHVubW91bnRzKS5cbiAqL1xuZnVuY3Rpb24gcHJlY2FjaGVDaGlsZE5vZGVzKGluc3QsIG5vZGUpIHtcbiAgaWYgKGluc3QuX2ZsYWdzICYgRmxhZ3MuaGFzQ2FjaGVkQ2hpbGROb2Rlcykge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgY2hpbGRyZW4gPSBpbnN0Ll9yZW5kZXJlZENoaWxkcmVuO1xuICB2YXIgY2hpbGROb2RlID0gbm9kZS5maXJzdENoaWxkO1xuICBvdXRlcjogZm9yICh2YXIgbmFtZSBpbiBjaGlsZHJlbikge1xuICAgIGlmICghY2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YXIgY2hpbGRJbnN0ID0gY2hpbGRyZW5bbmFtZV07XG4gICAgdmFyIGNoaWxkSUQgPSBnZXRSZW5kZXJlZEhvc3RPclRleHRGcm9tQ29tcG9uZW50KGNoaWxkSW5zdCkuX2RvbUlEO1xuICAgIGlmIChjaGlsZElEID09PSAwKSB7XG4gICAgICAvLyBXZSdyZSBjdXJyZW50bHkgdW5tb3VudGluZyB0aGlzIGNoaWxkIGluIFJlYWN0TXVsdGlDaGlsZDsgc2tpcCBpdC5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICAvLyBXZSBhc3N1bWUgdGhlIGNoaWxkIG5vZGVzIGFyZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgY2hpbGQgaW5zdGFuY2VzLlxuICAgIGZvciAoOyBjaGlsZE5vZGUgIT09IG51bGw7IGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZykge1xuICAgICAgaWYgKHNob3VsZFByZWNhY2hlTm9kZShjaGlsZE5vZGUsIGNoaWxkSUQpKSB7XG4gICAgICAgIHByZWNhY2hlTm9kZShjaGlsZEluc3QsIGNoaWxkTm9kZSk7XG4gICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBXZSByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIERPTSBjaGlsZHJlbiB3aXRob3V0IGZpbmRpbmcgYW4gSUQgbWF0Y2guXG4gICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1VuYWJsZSB0byBmaW5kIGVsZW1lbnQgd2l0aCBJRCAlcy4nLCBjaGlsZElEKSA6IF9wcm9kSW52YXJpYW50KCczMicsIGNoaWxkSUQpIDogdm9pZCAwO1xuICB9XG4gIGluc3QuX2ZsYWdzIHw9IEZsYWdzLmhhc0NhY2hlZENoaWxkTm9kZXM7XG59XG5cbi8qKlxuICogR2l2ZW4gYSBET00gbm9kZSwgcmV0dXJuIHRoZSBjbG9zZXN0IFJlYWN0RE9NQ29tcG9uZW50IG9yXG4gKiBSZWFjdERPTVRleHRDb21wb25lbnQgaW5zdGFuY2UgYW5jZXN0b3IuXG4gKi9cbmZ1bmN0aW9uIGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKG5vZGUpIHtcbiAgaWYgKG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0pIHtcbiAgICByZXR1cm4gbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XTtcbiAgfVxuXG4gIC8vIFdhbGsgdXAgdGhlIHRyZWUgdW50aWwgd2UgZmluZCBhbiBhbmNlc3RvciB3aG9zZSBpbnN0YW5jZSB3ZSBoYXZlIGNhY2hlZC5cbiAgdmFyIHBhcmVudHMgPSBbXTtcbiAgd2hpbGUgKCFub2RlW2ludGVybmFsSW5zdGFuY2VLZXldKSB7XG4gICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRvcCBvZiB0aGUgdHJlZS4gVGhpcyBub2RlIG11c3Qgbm90IGJlIHBhcnQgb2YgYSBSZWFjdCB0cmVlIChvciBpc1xuICAgICAgLy8gdW5tb3VudGVkLCBwb3RlbnRpYWxseSkuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICB2YXIgY2xvc2VzdDtcbiAgdmFyIGluc3Q7XG4gIGZvciAoOyBub2RlICYmIChpbnN0ID0gbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSk7IG5vZGUgPSBwYXJlbnRzLnBvcCgpKSB7XG4gICAgY2xvc2VzdCA9IGluc3Q7XG4gICAgaWYgKHBhcmVudHMubGVuZ3RoKSB7XG4gICAgICBwcmVjYWNoZUNoaWxkTm9kZXMoaW5zdCwgbm9kZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNsb3Nlc3Q7XG59XG5cbi8qKlxuICogR2l2ZW4gYSBET00gbm9kZSwgcmV0dXJuIHRoZSBSZWFjdERPTUNvbXBvbmVudCBvciBSZWFjdERPTVRleHRDb21wb25lbnRcbiAqIGluc3RhbmNlLCBvciBudWxsIGlmIHRoZSBub2RlIHdhcyBub3QgcmVuZGVyZWQgYnkgdGhpcyBSZWFjdC5cbiAqL1xuZnVuY3Rpb24gZ2V0SW5zdGFuY2VGcm9tTm9kZShub2RlKSB7XG4gIHZhciBpbnN0ID0gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUobm9kZSk7XG4gIGlmIChpbnN0ICE9IG51bGwgJiYgaW5zdC5faG9zdE5vZGUgPT09IG5vZGUpIHtcbiAgICByZXR1cm4gaW5zdDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEdpdmVuIGEgUmVhY3RET01Db21wb25lbnQgb3IgUmVhY3RET01UZXh0Q29tcG9uZW50LCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmdcbiAqIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBnZXROb2RlRnJvbUluc3RhbmNlKGluc3QpIHtcbiAgLy8gV2l0aG91dCB0aGlzIGZpcnN0IGludmFyaWFudCwgcGFzc2luZyBhIG5vbi1ET00tY29tcG9uZW50IHRyaWdnZXJzIHRoZSBuZXh0XG4gIC8vIGludmFyaWFudCBmb3IgYSBtaXNzaW5nIHBhcmVudCwgd2hpY2ggaXMgc3VwZXIgY29uZnVzaW5nLlxuICAhKGluc3QuX2hvc3ROb2RlICE9PSB1bmRlZmluZWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2dldE5vZGVGcm9tSW5zdGFuY2U6IEludmFsaWQgYXJndW1lbnQuJykgOiBfcHJvZEludmFyaWFudCgnMzMnKSA6IHZvaWQgMDtcblxuICBpZiAoaW5zdC5faG9zdE5vZGUpIHtcbiAgICByZXR1cm4gaW5zdC5faG9zdE5vZGU7XG4gIH1cblxuICAvLyBXYWxrIHVwIHRoZSB0cmVlIHVudGlsIHdlIGZpbmQgYW4gYW5jZXN0b3Igd2hvc2UgRE9NIG5vZGUgd2UgaGF2ZSBjYWNoZWQuXG4gIHZhciBwYXJlbnRzID0gW107XG4gIHdoaWxlICghaW5zdC5faG9zdE5vZGUpIHtcbiAgICBwYXJlbnRzLnB1c2goaW5zdCk7XG4gICAgIWluc3QuX2hvc3RQYXJlbnQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3QgRE9NIHRyZWUgcm9vdCBzaG91bGQgYWx3YXlzIGhhdmUgYSBub2RlIHJlZmVyZW5jZS4nKSA6IF9wcm9kSW52YXJpYW50KCczNCcpIDogdm9pZCAwO1xuICAgIGluc3QgPSBpbnN0Ll9ob3N0UGFyZW50O1xuICB9XG5cbiAgLy8gTm93IHBhcmVudHMgY29udGFpbnMgZWFjaCBhbmNlc3RvciB0aGF0IGRvZXMgKm5vdCogaGF2ZSBhIGNhY2hlZCBuYXRpdmVcbiAgLy8gbm9kZSwgYW5kIGBpbnN0YCBpcyB0aGUgZGVlcGVzdCBhbmNlc3RvciB0aGF0IGRvZXMuXG4gIGZvciAoOyBwYXJlbnRzLmxlbmd0aDsgaW5zdCA9IHBhcmVudHMucG9wKCkpIHtcbiAgICBwcmVjYWNoZUNoaWxkTm9kZXMoaW5zdCwgaW5zdC5faG9zdE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIGluc3QuX2hvc3ROb2RlO1xufVxuXG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0ge1xuICBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZTogZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUsXG4gIGdldEluc3RhbmNlRnJvbU5vZGU6IGdldEluc3RhbmNlRnJvbU5vZGUsXG4gIGdldE5vZGVGcm9tSW5zdGFuY2U6IGdldE5vZGVGcm9tSW5zdGFuY2UsXG4gIHByZWNhY2hlQ2hpbGROb2RlczogcHJlY2FjaGVDaGlsZE5vZGVzLFxuICBwcmVjYWNoZU5vZGU6IHByZWNhY2hlTm9kZSxcbiAgdW5jYWNoZU5vZGU6IHVuY2FjaGVOb2RlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01Db21wb25lbnRUcmVlLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9wcm9wLXR5cGVzL2luZGV4LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOiBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNi1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gVHJ1c3QgdGhlIGRldmVsb3BlciB0byBvbmx5IHVzZSBSZWFjdEluc3RydW1lbnRhdGlvbiB3aXRoIGEgX19ERVZfXyBjaGVja1xuXG52YXIgZGVidWdUb29sID0gbnVsbDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0RGVidWdUb29sID0gcmVxdWlyZSgnLi9SZWFjdERlYnVnVG9vbCcpO1xuICBkZWJ1Z1Rvb2wgPSBSZWFjdERlYnVnVG9vbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IGRlYnVnVG9vbDogZGVidWdUb29sIH07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0SW5zdHJ1bWVudGF0aW9uLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbmZ1bmN0aW9uIGlzTmF0aXZlKGZuKSB7XG4gIC8vIEJhc2VkIG9uIGlzTmF0aXZlKCkgZnJvbSBMb2Rhc2hcbiAgdmFyIGZ1bmNUb1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICsgZnVuY1RvU3RyaW5nXG4gIC8vIFRha2UgYW4gZXhhbXBsZSBuYXRpdmUgZnVuY3Rpb24gc291cmNlIGZvciBjb21wYXJpc29uXG4gIC5jYWxsKGhhc093blByb3BlcnR5XG4gIC8vIFN0cmlwIHJlZ2V4IGNoYXJhY3RlcnMgc28gd2UgY2FuIHVzZSBpdCBmb3IgcmVnZXhcbiAgKS5yZXBsYWNlKC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZywgJ1xcXFwkJidcbiAgLy8gUmVtb3ZlIGhhc093blByb3BlcnR5IGZyb20gdGhlIHRlbXBsYXRlIHRvIG1ha2UgaXQgZ2VuZXJpY1xuICApLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnKTtcbiAgdHJ5IHtcbiAgICB2YXIgc291cmNlID0gZnVuY1RvU3RyaW5nLmNhbGwoZm4pO1xuICAgIHJldHVybiByZUlzTmF0aXZlLnRlc3Qoc291cmNlKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbnZhciBjYW5Vc2VDb2xsZWN0aW9ucyA9XG4vLyBBcnJheS5mcm9tXG50eXBlb2YgQXJyYXkuZnJvbSA9PT0gJ2Z1bmN0aW9uJyAmJlxuLy8gTWFwXG50eXBlb2YgTWFwID09PSAnZnVuY3Rpb24nICYmIGlzTmF0aXZlKE1hcCkgJiZcbi8vIE1hcC5wcm90b3R5cGUua2V5c1xuTWFwLnByb3RvdHlwZSAhPSBudWxsICYmIHR5cGVvZiBNYXAucHJvdG90eXBlLmtleXMgPT09ICdmdW5jdGlvbicgJiYgaXNOYXRpdmUoTWFwLnByb3RvdHlwZS5rZXlzKSAmJlxuLy8gU2V0XG50eXBlb2YgU2V0ID09PSAnZnVuY3Rpb24nICYmIGlzTmF0aXZlKFNldCkgJiZcbi8vIFNldC5wcm90b3R5cGUua2V5c1xuU2V0LnByb3RvdHlwZSAhPSBudWxsICYmIHR5cGVvZiBTZXQucHJvdG90eXBlLmtleXMgPT09ICdmdW5jdGlvbicgJiYgaXNOYXRpdmUoU2V0LnByb3RvdHlwZS5rZXlzKTtcblxudmFyIHNldEl0ZW07XG52YXIgZ2V0SXRlbTtcbnZhciByZW1vdmVJdGVtO1xudmFyIGdldEl0ZW1JRHM7XG52YXIgYWRkUm9vdDtcbnZhciByZW1vdmVSb290O1xudmFyIGdldFJvb3RJRHM7XG5cbmlmIChjYW5Vc2VDb2xsZWN0aW9ucykge1xuICB2YXIgaXRlbU1hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIHJvb3RJRFNldCA9IG5ldyBTZXQoKTtcblxuICBzZXRJdGVtID0gZnVuY3Rpb24gKGlkLCBpdGVtKSB7XG4gICAgaXRlbU1hcC5zZXQoaWQsIGl0ZW0pO1xuICB9O1xuICBnZXRJdGVtID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuIGl0ZW1NYXAuZ2V0KGlkKTtcbiAgfTtcbiAgcmVtb3ZlSXRlbSA9IGZ1bmN0aW9uIChpZCkge1xuICAgIGl0ZW1NYXBbJ2RlbGV0ZSddKGlkKTtcbiAgfTtcbiAgZ2V0SXRlbUlEcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShpdGVtTWFwLmtleXMoKSk7XG4gIH07XG5cbiAgYWRkUm9vdCA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHJvb3RJRFNldC5hZGQoaWQpO1xuICB9O1xuICByZW1vdmVSb290ID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgcm9vdElEU2V0WydkZWxldGUnXShpZCk7XG4gIH07XG4gIGdldFJvb3RJRHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20ocm9vdElEU2V0LmtleXMoKSk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgaXRlbUJ5S2V5ID0ge307XG4gIHZhciByb290QnlLZXkgPSB7fTtcblxuICAvLyBVc2Ugbm9uLW51bWVyaWMga2V5cyB0byBwcmV2ZW50IFY4IHBlcmZvcm1hbmNlIGlzc3VlczpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvNzIzMlxuICB2YXIgZ2V0S2V5RnJvbUlEID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuICcuJyArIGlkO1xuICB9O1xuICB2YXIgZ2V0SURGcm9tS2V5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBwYXJzZUludChrZXkuc3Vic3RyKDEpLCAxMCk7XG4gIH07XG5cbiAgc2V0SXRlbSA9IGZ1bmN0aW9uIChpZCwgaXRlbSkge1xuICAgIHZhciBrZXkgPSBnZXRLZXlGcm9tSUQoaWQpO1xuICAgIGl0ZW1CeUtleVtrZXldID0gaXRlbTtcbiAgfTtcbiAgZ2V0SXRlbSA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBrZXkgPSBnZXRLZXlGcm9tSUQoaWQpO1xuICAgIHJldHVybiBpdGVtQnlLZXlba2V5XTtcbiAgfTtcbiAgcmVtb3ZlSXRlbSA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBrZXkgPSBnZXRLZXlGcm9tSUQoaWQpO1xuICAgIGRlbGV0ZSBpdGVtQnlLZXlba2V5XTtcbiAgfTtcbiAgZ2V0SXRlbUlEcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoaXRlbUJ5S2V5KS5tYXAoZ2V0SURGcm9tS2V5KTtcbiAgfTtcblxuICBhZGRSb290ID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGtleSA9IGdldEtleUZyb21JRChpZCk7XG4gICAgcm9vdEJ5S2V5W2tleV0gPSB0cnVlO1xuICB9O1xuICByZW1vdmVSb290ID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGtleSA9IGdldEtleUZyb21JRChpZCk7XG4gICAgZGVsZXRlIHJvb3RCeUtleVtrZXldO1xuICB9O1xuICBnZXRSb290SURzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhyb290QnlLZXkpLm1hcChnZXRJREZyb21LZXkpO1xuICB9O1xufVxuXG52YXIgdW5tb3VudGVkSURzID0gW107XG5cbmZ1bmN0aW9uIHB1cmdlRGVlcChpZCkge1xuICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICBpZiAoaXRlbSkge1xuICAgIHZhciBjaGlsZElEcyA9IGl0ZW0uY2hpbGRJRHM7XG5cbiAgICByZW1vdmVJdGVtKGlkKTtcbiAgICBjaGlsZElEcy5mb3JFYWNoKHB1cmdlRGVlcCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVzY3JpYmVDb21wb25lbnRGcmFtZShuYW1lLCBzb3VyY2UsIG93bmVyTmFtZSkge1xuICByZXR1cm4gJ1xcbiAgICBpbiAnICsgKG5hbWUgfHwgJ1Vua25vd24nKSArIChzb3VyY2UgPyAnIChhdCAnICsgc291cmNlLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sICcnKSArICc6JyArIHNvdXJjZS5saW5lTnVtYmVyICsgJyknIDogb3duZXJOYW1lID8gJyAoY3JlYXRlZCBieSAnICsgb3duZXJOYW1lICsgJyknIDogJycpO1xufVxuXG5mdW5jdGlvbiBnZXREaXNwbGF5TmFtZShlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gJyNlbXB0eSc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBlbGVtZW50ID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiAnI3RleHQnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQudHlwZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZWxlbWVudC50eXBlLmRpc3BsYXlOYW1lIHx8IGVsZW1lbnQudHlwZS5uYW1lIHx8ICdVbmtub3duJztcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXNjcmliZUlEKGlkKSB7XG4gIHZhciBuYW1lID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXREaXNwbGF5TmFtZShpZCk7XG4gIHZhciBlbGVtZW50ID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRFbGVtZW50KGlkKTtcbiAgdmFyIG93bmVySUQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldE93bmVySUQoaWQpO1xuICB2YXIgb3duZXJOYW1lO1xuICBpZiAob3duZXJJRCkge1xuICAgIG93bmVyTmFtZSA9IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0RGlzcGxheU5hbWUob3duZXJJRCk7XG4gIH1cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZWxlbWVudCwgJ1JlYWN0Q29tcG9uZW50VHJlZUhvb2s6IE1pc3NpbmcgUmVhY3QgZWxlbWVudCBmb3IgZGVidWdJRCAlcyB3aGVuICcgKyAnYnVpbGRpbmcgc3RhY2snLCBpZCkgOiB2b2lkIDA7XG4gIHJldHVybiBkZXNjcmliZUNvbXBvbmVudEZyYW1lKG5hbWUsIGVsZW1lbnQgJiYgZWxlbWVudC5fc291cmNlLCBvd25lck5hbWUpO1xufVxuXG52YXIgUmVhY3RDb21wb25lbnRUcmVlSG9vayA9IHtcbiAgb25TZXRDaGlsZHJlbjogZnVuY3Rpb24gKGlkLCBuZXh0Q2hpbGRJRHMpIHtcbiAgICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICAgICFpdGVtID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0l0ZW0gbXVzdCBoYXZlIGJlZW4gc2V0JykgOiBfcHJvZEludmFyaWFudCgnMTQ0JykgOiB2b2lkIDA7XG4gICAgaXRlbS5jaGlsZElEcyA9IG5leHRDaGlsZElEcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV4dENoaWxkSURzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmV4dENoaWxkSUQgPSBuZXh0Q2hpbGRJRHNbaV07XG4gICAgICB2YXIgbmV4dENoaWxkID0gZ2V0SXRlbShuZXh0Q2hpbGRJRCk7XG4gICAgICAhbmV4dENoaWxkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIGhvb2sgZXZlbnRzIHRvIGZpcmUgZm9yIHRoZSBjaGlsZCBiZWZvcmUgaXRzIHBhcmVudCBpbmNsdWRlcyBpdCBpbiBvblNldENoaWxkcmVuKCkuJykgOiBfcHJvZEludmFyaWFudCgnMTQwJykgOiB2b2lkIDA7XG4gICAgICAhKG5leHRDaGlsZC5jaGlsZElEcyAhPSBudWxsIHx8IHR5cGVvZiBuZXh0Q2hpbGQuZWxlbWVudCAhPT0gJ29iamVjdCcgfHwgbmV4dENoaWxkLmVsZW1lbnQgPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgb25TZXRDaGlsZHJlbigpIHRvIGZpcmUgZm9yIGEgY29udGFpbmVyIGNoaWxkIGJlZm9yZSBpdHMgcGFyZW50IGluY2x1ZGVzIGl0IGluIG9uU2V0Q2hpbGRyZW4oKS4nKSA6IF9wcm9kSW52YXJpYW50KCcxNDEnKSA6IHZvaWQgMDtcbiAgICAgICFuZXh0Q2hpbGQuaXNNb3VudGVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIG9uTW91bnRDb21wb25lbnQoKSB0byBmaXJlIGZvciB0aGUgY2hpbGQgYmVmb3JlIGl0cyBwYXJlbnQgaW5jbHVkZXMgaXQgaW4gb25TZXRDaGlsZHJlbigpLicpIDogX3Byb2RJbnZhcmlhbnQoJzcxJykgOiB2b2lkIDA7XG4gICAgICBpZiAobmV4dENoaWxkLnBhcmVudElEID09IG51bGwpIHtcbiAgICAgICAgbmV4dENoaWxkLnBhcmVudElEID0gaWQ7XG4gICAgICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSBidXQgbW91bnRpbmcgYSBuZXcgcm9vdCBkdXJpbmcgaW5cbiAgICAgICAgLy8gY29tcG9uZW50V2lsbE1vdW50IGN1cnJlbnRseSBjYXVzZXMgbm90LXlldC1tb3VudGVkIGNvbXBvbmVudHMgdG9cbiAgICAgICAgLy8gYmUgcHVyZ2VkIGZyb20gb3VyIHRyZWUgZGF0YSBzbyB0aGVpciBwYXJlbnQgaWQgaXMgbWlzc2luZy5cbiAgICAgIH1cbiAgICAgICEobmV4dENoaWxkLnBhcmVudElEID09PSBpZCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgb25CZWZvcmVNb3VudENvbXBvbmVudCgpIHBhcmVudCBhbmQgb25TZXRDaGlsZHJlbigpIHRvIGJlIGNvbnNpc3RlbnQgKCVzIGhhcyBwYXJlbnRzICVzIGFuZCAlcykuJywgbmV4dENoaWxkSUQsIG5leHRDaGlsZC5wYXJlbnRJRCwgaWQpIDogX3Byb2RJbnZhcmlhbnQoJzE0MicsIG5leHRDaGlsZElELCBuZXh0Q2hpbGQucGFyZW50SUQsIGlkKSA6IHZvaWQgMDtcbiAgICB9XG4gIH0sXG4gIG9uQmVmb3JlTW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChpZCwgZWxlbWVudCwgcGFyZW50SUQpIHtcbiAgICB2YXIgaXRlbSA9IHtcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICBwYXJlbnRJRDogcGFyZW50SUQsXG4gICAgICB0ZXh0OiBudWxsLFxuICAgICAgY2hpbGRJRHM6IFtdLFxuICAgICAgaXNNb3VudGVkOiBmYWxzZSxcbiAgICAgIHVwZGF0ZUNvdW50OiAwXG4gICAgfTtcbiAgICBzZXRJdGVtKGlkLCBpdGVtKTtcbiAgfSxcbiAgb25CZWZvcmVVcGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uIChpZCwgZWxlbWVudCkge1xuICAgIHZhciBpdGVtID0gZ2V0SXRlbShpZCk7XG4gICAgaWYgKCFpdGVtIHx8ICFpdGVtLmlzTW91bnRlZCkge1xuICAgICAgLy8gV2UgbWF5IGVuZCB1cCBoZXJlIGFzIGEgcmVzdWx0IG9mIHNldFN0YXRlKCkgaW4gY29tcG9uZW50V2lsbFVubW91bnQoKS5cbiAgICAgIC8vIEluIHRoaXMgY2FzZSwgaWdub3JlIHRoZSBlbGVtZW50LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpdGVtLmVsZW1lbnQgPSBlbGVtZW50O1xuICB9LFxuICBvbk1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICAgICFpdGVtID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0l0ZW0gbXVzdCBoYXZlIGJlZW4gc2V0JykgOiBfcHJvZEludmFyaWFudCgnMTQ0JykgOiB2b2lkIDA7XG4gICAgaXRlbS5pc01vdW50ZWQgPSB0cnVlO1xuICAgIHZhciBpc1Jvb3QgPSBpdGVtLnBhcmVudElEID09PSAwO1xuICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgIGFkZFJvb3QoaWQpO1xuICAgIH1cbiAgfSxcbiAgb25VcGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBpdGVtID0gZ2V0SXRlbShpZCk7XG4gICAgaWYgKCFpdGVtIHx8ICFpdGVtLmlzTW91bnRlZCkge1xuICAgICAgLy8gV2UgbWF5IGVuZCB1cCBoZXJlIGFzIGEgcmVzdWx0IG9mIHNldFN0YXRlKCkgaW4gY29tcG9uZW50V2lsbFVubW91bnQoKS5cbiAgICAgIC8vIEluIHRoaXMgY2FzZSwgaWdub3JlIHRoZSBlbGVtZW50LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpdGVtLnVwZGF0ZUNvdW50Kys7XG4gIH0sXG4gIG9uVW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGl0ZW0gPSBnZXRJdGVtKGlkKTtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBpZiBpdCBleGlzdHMuXG4gICAgICAvLyBgaXRlbWAgbWlnaHQgbm90IGV4aXN0IGlmIGl0IGlzIGluc2lkZSBhbiBlcnJvciBib3VuZGFyeSwgYW5kIGEgc2libGluZ1xuICAgICAgLy8gZXJyb3IgYm91bmRhcnkgY2hpbGQgdGhyZXcgd2hpbGUgbW91bnRpbmcuIFRoZW4gdGhpcyBpbnN0YW5jZSBuZXZlclxuICAgICAgLy8gZ290IGEgY2hhbmNlIHRvIG1vdW50LCBidXQgaXQgc3RpbGwgZ2V0cyBhbiB1bm1vdW50aW5nIGV2ZW50IGR1cmluZ1xuICAgICAgLy8gdGhlIGVycm9yIGJvdW5kYXJ5IGNsZWFudXAuXG4gICAgICBpdGVtLmlzTW91bnRlZCA9IGZhbHNlO1xuICAgICAgdmFyIGlzUm9vdCA9IGl0ZW0ucGFyZW50SUQgPT09IDA7XG4gICAgICBpZiAoaXNSb290KSB7XG4gICAgICAgIHJlbW92ZVJvb3QoaWQpO1xuICAgICAgfVxuICAgIH1cbiAgICB1bm1vdW50ZWRJRHMucHVzaChpZCk7XG4gIH0sXG4gIHB1cmdlVW5tb3VudGVkQ29tcG9uZW50czogZnVuY3Rpb24gKCkge1xuICAgIGlmIChSZWFjdENvbXBvbmVudFRyZWVIb29rLl9wcmV2ZW50UHVyZ2luZykge1xuICAgICAgLy8gU2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgdGVzdGluZy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVubW91bnRlZElEcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkID0gdW5tb3VudGVkSURzW2ldO1xuICAgICAgcHVyZ2VEZWVwKGlkKTtcbiAgICB9XG4gICAgdW5tb3VudGVkSURzLmxlbmd0aCA9IDA7XG4gIH0sXG4gIGlzTW91bnRlZDogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGl0ZW0gPSBnZXRJdGVtKGlkKTtcbiAgICByZXR1cm4gaXRlbSA/IGl0ZW0uaXNNb3VudGVkIDogZmFsc2U7XG4gIH0sXG4gIGdldEN1cnJlbnRTdGFja0FkZGVuZHVtOiBmdW5jdGlvbiAodG9wRWxlbWVudCkge1xuICAgIHZhciBpbmZvID0gJyc7XG4gICAgaWYgKHRvcEVsZW1lbnQpIHtcbiAgICAgIHZhciBuYW1lID0gZ2V0RGlzcGxheU5hbWUodG9wRWxlbWVudCk7XG4gICAgICB2YXIgb3duZXIgPSB0b3BFbGVtZW50Ll9vd25lcjtcbiAgICAgIGluZm8gKz0gZGVzY3JpYmVDb21wb25lbnRGcmFtZShuYW1lLCB0b3BFbGVtZW50Ll9zb3VyY2UsIG93bmVyICYmIG93bmVyLmdldE5hbWUoKSk7XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnRPd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gICAgdmFyIGlkID0gY3VycmVudE93bmVyICYmIGN1cnJlbnRPd25lci5fZGVidWdJRDtcblxuICAgIGluZm8gKz0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRTdGFja0FkZGVuZHVtQnlJRChpZCk7XG4gICAgcmV0dXJuIGluZm87XG4gIH0sXG4gIGdldFN0YWNrQWRkZW5kdW1CeUlEOiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgaW5mbyA9ICcnO1xuICAgIHdoaWxlIChpZCkge1xuICAgICAgaW5mbyArPSBkZXNjcmliZUlEKGlkKTtcbiAgICAgIGlkID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRQYXJlbnRJRChpZCk7XG4gICAgfVxuICAgIHJldHVybiBpbmZvO1xuICB9LFxuICBnZXRDaGlsZElEczogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGl0ZW0gPSBnZXRJdGVtKGlkKTtcbiAgICByZXR1cm4gaXRlbSA/IGl0ZW0uY2hpbGRJRHMgOiBbXTtcbiAgfSxcbiAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBlbGVtZW50ID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRFbGVtZW50KGlkKTtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0RGlzcGxheU5hbWUoZWxlbWVudCk7XG4gIH0sXG4gIGdldEVsZW1lbnQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBpdGVtID0gZ2V0SXRlbShpZCk7XG4gICAgcmV0dXJuIGl0ZW0gPyBpdGVtLmVsZW1lbnQgOiBudWxsO1xuICB9LFxuICBnZXRPd25lcklEOiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgZWxlbWVudCA9IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0RWxlbWVudChpZCk7XG4gICAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50Ll9vd25lcikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50Ll9vd25lci5fZGVidWdJRDtcbiAgfSxcbiAgZ2V0UGFyZW50SUQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBpdGVtID0gZ2V0SXRlbShpZCk7XG4gICAgcmV0dXJuIGl0ZW0gPyBpdGVtLnBhcmVudElEIDogbnVsbDtcbiAgfSxcbiAgZ2V0U291cmNlOiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICAgIHZhciBlbGVtZW50ID0gaXRlbSA/IGl0ZW0uZWxlbWVudCA6IG51bGw7XG4gICAgdmFyIHNvdXJjZSA9IGVsZW1lbnQgIT0gbnVsbCA/IGVsZW1lbnQuX3NvdXJjZSA6IG51bGw7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfSxcbiAgZ2V0VGV4dDogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEVsZW1lbnQoaWQpO1xuICAgIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gJycgKyBlbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sXG4gIGdldFVwZGF0ZUNvdW50OiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICAgIHJldHVybiBpdGVtID8gaXRlbS51cGRhdGVDb3VudCA6IDA7XG4gIH0sXG5cblxuICBnZXRSb290SURzOiBnZXRSb290SURzLFxuICBnZXRSZWdpc3RlcmVkSURzOiBnZXRJdGVtSURzLFxuXG4gIHB1c2hOb25TdGFuZGFyZFdhcm5pbmdTdGFjazogZnVuY3Rpb24gKGlzQ3JlYXRpbmdFbGVtZW50LCBjdXJyZW50U291cmNlKSB7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlLnJlYWN0U3RhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICB2YXIgY3VycmVudE93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICB2YXIgaWQgPSBjdXJyZW50T3duZXIgJiYgY3VycmVudE93bmVyLl9kZWJ1Z0lEO1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc0NyZWF0aW5nRWxlbWVudCkge1xuICAgICAgICBzdGFjay5wdXNoKHtcbiAgICAgICAgICBuYW1lOiBpZCA/IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0RGlzcGxheU5hbWUoaWQpIDogbnVsbCxcbiAgICAgICAgICBmaWxlTmFtZTogY3VycmVudFNvdXJjZSA/IGN1cnJlbnRTb3VyY2UuZmlsZU5hbWUgOiBudWxsLFxuICAgICAgICAgIGxpbmVOdW1iZXI6IGN1cnJlbnRTb3VyY2UgPyBjdXJyZW50U291cmNlLmxpbmVOdW1iZXIgOiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoaWQpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEVsZW1lbnQoaWQpO1xuICAgICAgICB2YXIgcGFyZW50SUQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFBhcmVudElEKGlkKTtcbiAgICAgICAgdmFyIG93bmVySUQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldE93bmVySUQoaWQpO1xuICAgICAgICB2YXIgb3duZXJOYW1lID0gb3duZXJJRCA/IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0RGlzcGxheU5hbWUob3duZXJJRCkgOiBudWxsO1xuICAgICAgICB2YXIgc291cmNlID0gZWxlbWVudCAmJiBlbGVtZW50Ll9zb3VyY2U7XG4gICAgICAgIHN0YWNrLnB1c2goe1xuICAgICAgICAgIG5hbWU6IG93bmVyTmFtZSxcbiAgICAgICAgICBmaWxlTmFtZTogc291cmNlID8gc291cmNlLmZpbGVOYW1lIDogbnVsbCxcbiAgICAgICAgICBsaW5lTnVtYmVyOiBzb3VyY2UgPyBzb3VyY2UubGluZU51bWJlciA6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICAgIGlkID0gcGFyZW50SUQ7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBJbnRlcm5hbCBzdGF0ZSBpcyBtZXNzZWQgdXAuXG4gICAgICAvLyBTdG9wIGJ1aWxkaW5nIHRoZSBzdGFjayAoaXQncyBqdXN0IGEgbmljZSB0byBoYXZlKS5cbiAgICB9XG5cbiAgICBjb25zb2xlLnJlYWN0U3RhY2soc3RhY2spO1xuICB9LFxuICBwb3BOb25TdGFuZGFyZFdhcm5pbmdTdGFjazogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgY29uc29sZS5yZWFjdFN0YWNrRW5kICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnNvbGUucmVhY3RTdGFja0VuZCgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9uZW50VHJlZUhvb2s7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC9saWIvUmVhY3RDb21wb25lbnRUcmVlSG9vay5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyAmJiAhaXNBcnJheShvYmopKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvbGliL3V0aWxzLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpLFxuICAgIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBDYWxsYmFja1F1ZXVlID0gcmVxdWlyZSgnLi9DYWxsYmFja1F1ZXVlJyk7XG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG52YXIgUmVhY3RGZWF0dXJlRmxhZ3MgPSByZXF1aXJlKCcuL1JlYWN0RmVhdHVyZUZsYWdzJyk7XG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vVHJhbnNhY3Rpb24nKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgZGlydHlDb21wb25lbnRzID0gW107XG52YXIgdXBkYXRlQmF0Y2hOdW1iZXIgPSAwO1xudmFyIGFzYXBDYWxsYmFja1F1ZXVlID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKTtcbnZhciBhc2FwRW5xdWV1ZWQgPSBmYWxzZTtcblxudmFyIGJhdGNoaW5nU3RyYXRlZ3kgPSBudWxsO1xuXG5mdW5jdGlvbiBlbnN1cmVJbmplY3RlZCgpIHtcbiAgIShSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiAmJiBiYXRjaGluZ1N0cmF0ZWd5KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgaW5qZWN0IGEgcmVjb25jaWxlIHRyYW5zYWN0aW9uIGNsYXNzIGFuZCBiYXRjaGluZyBzdHJhdGVneScpIDogX3Byb2RJbnZhcmlhbnQoJzEyMycpIDogdm9pZCAwO1xufVxuXG52YXIgTkVTVEVEX1VQREFURVMgPSB7XG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCA9IGRpcnR5Q29tcG9uZW50cy5sZW5ndGg7XG4gIH0sXG4gIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoICE9PSBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBBZGRpdGlvbmFsIHVwZGF0ZXMgd2VyZSBlbnF1ZXVlZCBieSBjb21wb25lbnREaWRVcGRhdGUgaGFuZGxlcnMgb3JcbiAgICAgIC8vIHNpbWlsYXI7IGJlZm9yZSBvdXIgb3duIFVQREFURV9RVUVVRUlORyB3cmFwcGVyIGNsb3Nlcywgd2Ugd2FudCB0byBydW5cbiAgICAgIC8vIHRoZXNlIG5ldyB1cGRhdGVzIHNvIHRoYXQgaWYgQSdzIGNvbXBvbmVudERpZFVwZGF0ZSBjYWxscyBzZXRTdGF0ZSBvblxuICAgICAgLy8gQiwgQiB3aWxsIHVwZGF0ZSBiZWZvcmUgdGhlIGNhbGxiYWNrIEEncyB1cGRhdGVyIHByb3ZpZGVkIHdoZW4gY2FsbGluZ1xuICAgICAgLy8gc2V0U3RhdGUuXG4gICAgICBkaXJ0eUNvbXBvbmVudHMuc3BsaWNlKDAsIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoKTtcbiAgICAgIGZsdXNoQmF0Y2hlZFVwZGF0ZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlydHlDb21wb25lbnRzLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9XG59O1xuXG52YXIgVVBEQVRFX1FVRVVFSU5HID0ge1xuICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jYWxsYmFja1F1ZXVlLnJlc2V0KCk7XG4gIH0sXG4gIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jYWxsYmFja1F1ZXVlLm5vdGlmeUFsbCgpO1xuICB9XG59O1xuXG52YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbTkVTVEVEX1VQREFURVMsIFVQREFURV9RVUVVRUlOR107XG5cbmZ1bmN0aW9uIFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24oKSB7XG4gIHRoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKTtcbiAgdGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGggPSBudWxsO1xuICB0aGlzLmNhbGxiYWNrUXVldWUgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpO1xuICB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uID0gUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKFxuICAvKiB1c2VDcmVhdGVFbGVtZW50ICovdHJ1ZSk7XG59XG5cbl9hc3NpZ24oUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbi5wcm90b3R5cGUsIFRyYW5zYWN0aW9uLCB7XG4gIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gIH0sXG5cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gbnVsbDtcbiAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5jYWxsYmFja1F1ZXVlKTtcbiAgICB0aGlzLmNhbGxiYWNrUXVldWUgPSBudWxsO1xuICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLnJlbGVhc2UodGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbik7XG4gICAgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbiA9IG51bGw7XG4gIH0sXG5cbiAgcGVyZm9ybTogZnVuY3Rpb24gKG1ldGhvZCwgc2NvcGUsIGEpIHtcbiAgICAvLyBFc3NlbnRpYWxseSBjYWxscyBgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbi5wZXJmb3JtKG1ldGhvZCwgc2NvcGUsIGEpYFxuICAgIC8vIHdpdGggdGhpcyB0cmFuc2FjdGlvbidzIHdyYXBwZXJzIGFyb3VuZCBpdC5cbiAgICByZXR1cm4gVHJhbnNhY3Rpb24ucGVyZm9ybS5jYWxsKHRoaXMsIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24ucGVyZm9ybSwgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbiwgbWV0aG9kLCBzY29wZSwgYSk7XG4gIH1cbn0pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbik7XG5cbmZ1bmN0aW9uIGJhdGNoZWRVcGRhdGVzKGNhbGxiYWNrLCBhLCBiLCBjLCBkLCBlKSB7XG4gIGVuc3VyZUluamVjdGVkKCk7XG4gIHJldHVybiBiYXRjaGluZ1N0cmF0ZWd5LmJhdGNoZWRVcGRhdGVzKGNhbGxiYWNrLCBhLCBiLCBjLCBkLCBlKTtcbn1cblxuLyoqXG4gKiBBcnJheSBjb21wYXJhdG9yIGZvciBSZWFjdENvbXBvbmVudHMgYnkgbW91bnQgb3JkZXJpbmcuXG4gKlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gYzEgZmlyc3QgY29tcG9uZW50IHlvdSdyZSBjb21wYXJpbmdcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGMyIHNlY29uZCBjb21wb25lbnQgeW91J3JlIGNvbXBhcmluZ1xuICogQHJldHVybiB7bnVtYmVyfSBSZXR1cm4gdmFsdWUgdXNhYmxlIGJ5IEFycmF5LnByb3RvdHlwZS5zb3J0KCkuXG4gKi9cbmZ1bmN0aW9uIG1vdW50T3JkZXJDb21wYXJhdG9yKGMxLCBjMikge1xuICByZXR1cm4gYzEuX21vdW50T3JkZXIgLSBjMi5fbW91bnRPcmRlcjtcbn1cblxuZnVuY3Rpb24gcnVuQmF0Y2hlZFVwZGF0ZXModHJhbnNhY3Rpb24pIHtcbiAgdmFyIGxlbiA9IHRyYW5zYWN0aW9uLmRpcnR5Q29tcG9uZW50c0xlbmd0aDtcbiAgIShsZW4gPT09IGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIGZsdXNoIHRyYW5zYWN0aW9uXFwncyBzdG9yZWQgZGlydHktY29tcG9uZW50cyBsZW5ndGggKCVzKSB0byBtYXRjaCBkaXJ0eS1jb21wb25lbnRzIGFycmF5IGxlbmd0aCAoJXMpLicsIGxlbiwgZGlydHlDb21wb25lbnRzLmxlbmd0aCkgOiBfcHJvZEludmFyaWFudCgnMTI0JywgbGVuLCBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoKSA6IHZvaWQgMDtcblxuICAvLyBTaW5jZSByZWNvbmNpbGluZyBhIGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIG93bmVyIGhpZXJhcmNoeSB1c3VhbGx5IChub3RcbiAgLy8gYWx3YXlzIC0tIHNlZSBzaG91bGRDb21wb25lbnRVcGRhdGUoKSkgd2lsbCByZWNvbmNpbGUgY2hpbGRyZW4sIHJlY29uY2lsZVxuICAvLyB0aGVtIGJlZm9yZSB0aGVpciBjaGlsZHJlbiBieSBzb3J0aW5nIHRoZSBhcnJheS5cbiAgZGlydHlDb21wb25lbnRzLnNvcnQobW91bnRPcmRlckNvbXBhcmF0b3IpO1xuXG4gIC8vIEFueSB1cGRhdGVzIGVucXVldWVkIHdoaWxlIHJlY29uY2lsaW5nIG11c3QgYmUgcGVyZm9ybWVkIGFmdGVyIHRoaXMgZW50aXJlXG4gIC8vIGJhdGNoLiBPdGhlcndpc2UsIGlmIGRpcnR5Q29tcG9uZW50cyBpcyBbQSwgQl0gd2hlcmUgQSBoYXMgY2hpbGRyZW4gQiBhbmRcbiAgLy8gQywgQiBjb3VsZCB1cGRhdGUgdHdpY2UgaW4gYSBzaW5nbGUgYmF0Y2ggaWYgQydzIHJlbmRlciBlbnF1ZXVlcyBhbiB1cGRhdGVcbiAgLy8gdG8gQiAoc2luY2UgQiB3b3VsZCBoYXZlIGFscmVhZHkgdXBkYXRlZCwgd2Ugc2hvdWxkIHNraXAgaXQsIGFuZCB0aGUgb25seVxuICAvLyB3YXkgd2UgY2FuIGtub3cgdG8gZG8gc28gaXMgYnkgY2hlY2tpbmcgdGhlIGJhdGNoIGNvdW50ZXIpLlxuICB1cGRhdGVCYXRjaE51bWJlcisrO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAvLyBJZiBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgYmVmb3JlIHBlbmRpbmcgY2hhbmdlcyBhcHBseSwgaXQgd2lsbCBzdGlsbFxuICAgIC8vIGJlIGhlcmUsIGJ1dCB3ZSBhc3N1bWUgdGhhdCBpdCBoYXMgY2xlYXJlZCBpdHMgX3BlbmRpbmdDYWxsYmFja3MgYW5kXG4gICAgLy8gdGhhdCBwZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkgaXMgYSBub29wLlxuICAgIHZhciBjb21wb25lbnQgPSBkaXJ0eUNvbXBvbmVudHNbaV07XG5cbiAgICAvLyBJZiBwZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkgaGFwcGVucyB0byBlbnF1ZXVlIGFueSBuZXcgdXBkYXRlcywgd2VcbiAgICAvLyBzaG91bGRuJ3QgZXhlY3V0ZSB0aGUgY2FsbGJhY2tzIHVudGlsIHRoZSBuZXh0IHJlbmRlciBoYXBwZW5zLCBzb1xuICAgIC8vIHN0YXNoIHRoZSBjYWxsYmFja3MgZmlyc3RcbiAgICB2YXIgY2FsbGJhY2tzID0gY29tcG9uZW50Ll9wZW5kaW5nQ2FsbGJhY2tzO1xuICAgIGNvbXBvbmVudC5fcGVuZGluZ0NhbGxiYWNrcyA9IG51bGw7XG5cbiAgICB2YXIgbWFya2VyTmFtZTtcbiAgICBpZiAoUmVhY3RGZWF0dXJlRmxhZ3MubG9nVG9wTGV2ZWxSZW5kZXJzKSB7XG4gICAgICB2YXIgbmFtZWRDb21wb25lbnQgPSBjb21wb25lbnQ7XG4gICAgICAvLyBEdWNrIHR5cGUgVG9wTGV2ZWxXcmFwcGVyLiBUaGlzIGlzIHByb2JhYmx5IGFsd2F5cyB0cnVlLlxuICAgICAgaWYgKGNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQudHlwZS5pc1JlYWN0VG9wTGV2ZWxXcmFwcGVyKSB7XG4gICAgICAgIG5hbWVkQ29tcG9uZW50ID0gY29tcG9uZW50Ll9yZW5kZXJlZENvbXBvbmVudDtcbiAgICAgIH1cbiAgICAgIG1hcmtlck5hbWUgPSAnUmVhY3QgdXBkYXRlOiAnICsgbmFtZWRDb21wb25lbnQuZ2V0TmFtZSgpO1xuICAgICAgY29uc29sZS50aW1lKG1hcmtlck5hbWUpO1xuICAgIH1cblxuICAgIFJlYWN0UmVjb25jaWxlci5wZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkoY29tcG9uZW50LCB0cmFuc2FjdGlvbi5yZWNvbmNpbGVUcmFuc2FjdGlvbiwgdXBkYXRlQmF0Y2hOdW1iZXIpO1xuXG4gICAgaWYgKG1hcmtlck5hbWUpIHtcbiAgICAgIGNvbnNvbGUudGltZUVuZChtYXJrZXJOYW1lKTtcbiAgICB9XG5cbiAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNhbGxiYWNrcy5sZW5ndGg7IGorKykge1xuICAgICAgICB0cmFuc2FjdGlvbi5jYWxsYmFja1F1ZXVlLmVucXVldWUoY2FsbGJhY2tzW2pdLCBjb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBmbHVzaEJhdGNoZWRVcGRhdGVzID0gZnVuY3Rpb24gKCkge1xuICAvLyBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uJ3Mgd3JhcHBlcnMgd2lsbCBjbGVhciB0aGUgZGlydHlDb21wb25lbnRzXG4gIC8vIGFycmF5IGFuZCBwZXJmb3JtIGFueSB1cGRhdGVzIGVucXVldWVkIGJ5IG1vdW50LXJlYWR5IGhhbmRsZXJzIChpLmUuLFxuICAvLyBjb21wb25lbnREaWRVcGRhdGUpIGJ1dCB3ZSBuZWVkIHRvIGNoZWNrIGhlcmUgdG9vIGluIG9yZGVyIHRvIGNhdGNoXG4gIC8vIHVwZGF0ZXMgZW5xdWV1ZWQgYnkgc2V0U3RhdGUgY2FsbGJhY2tzIGFuZCBhc2FwIGNhbGxzLlxuICB3aGlsZSAoZGlydHlDb21wb25lbnRzLmxlbmd0aCB8fCBhc2FwRW5xdWV1ZWQpIHtcbiAgICBpZiAoZGlydHlDb21wb25lbnRzLmxlbmd0aCkge1xuICAgICAgdmFyIHRyYW5zYWN0aW9uID0gUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbi5nZXRQb29sZWQoKTtcbiAgICAgIHRyYW5zYWN0aW9uLnBlcmZvcm0ocnVuQmF0Y2hlZFVwZGF0ZXMsIG51bGwsIHRyYW5zYWN0aW9uKTtcbiAgICAgIFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24ucmVsZWFzZSh0cmFuc2FjdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKGFzYXBFbnF1ZXVlZCkge1xuICAgICAgYXNhcEVucXVldWVkID0gZmFsc2U7XG4gICAgICB2YXIgcXVldWUgPSBhc2FwQ2FsbGJhY2tRdWV1ZTtcbiAgICAgIGFzYXBDYWxsYmFja1F1ZXVlID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKTtcbiAgICAgIHF1ZXVlLm5vdGlmeUFsbCgpO1xuICAgICAgQ2FsbGJhY2tRdWV1ZS5yZWxlYXNlKHF1ZXVlKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogTWFyayBhIGNvbXBvbmVudCBhcyBuZWVkaW5nIGEgcmVyZW5kZXIsIGFkZGluZyBhbiBvcHRpb25hbCBjYWxsYmFjayB0byBhXG4gKiBsaXN0IG9mIGZ1bmN0aW9ucyB3aGljaCB3aWxsIGJlIGV4ZWN1dGVkIG9uY2UgdGhlIHJlcmVuZGVyIG9jY3Vycy5cbiAqL1xuZnVuY3Rpb24gZW5xdWV1ZVVwZGF0ZShjb21wb25lbnQpIHtcbiAgZW5zdXJlSW5qZWN0ZWQoKTtcblxuICAvLyBWYXJpb3VzIHBhcnRzIG9mIG91ciBjb2RlIChzdWNoIGFzIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50J3NcbiAgLy8gX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCkgYXNzdW1lIHRoYXQgY2FsbHMgdG8gcmVuZGVyIGFyZW4ndCBuZXN0ZWQ7XG4gIC8vIHZlcmlmeSB0aGF0IHRoYXQncyB0aGUgY2FzZS4gKFRoaXMgaXMgY2FsbGVkIGJ5IGVhY2ggdG9wLWxldmVsIHVwZGF0ZVxuICAvLyBmdW5jdGlvbiwgbGlrZSBzZXRTdGF0ZSwgZm9yY2VVcGRhdGUsIGV0Yy47IGNyZWF0aW9uIGFuZFxuICAvLyBkZXN0cnVjdGlvbiBvZiB0b3AtbGV2ZWwgY29tcG9uZW50cyBpcyBndWFyZGVkIGluIFJlYWN0TW91bnQuKVxuXG4gIGlmICghYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcykge1xuICAgIGJhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMoZW5xdWV1ZVVwZGF0ZSwgY29tcG9uZW50KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBkaXJ0eUNvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICBpZiAoY29tcG9uZW50Ll91cGRhdGVCYXRjaE51bWJlciA9PSBudWxsKSB7XG4gICAgY29tcG9uZW50Ll91cGRhdGVCYXRjaE51bWJlciA9IHVwZGF0ZUJhdGNoTnVtYmVyICsgMTtcbiAgfVxufVxuXG4vKipcbiAqIEVucXVldWUgYSBjYWxsYmFjayB0byBiZSBydW4gYXQgdGhlIGVuZCBvZiB0aGUgY3VycmVudCBiYXRjaGluZyBjeWNsZS4gVGhyb3dzXG4gKiBpZiBubyB1cGRhdGVzIGFyZSBjdXJyZW50bHkgYmVpbmcgcGVyZm9ybWVkLlxuICovXG5mdW5jdGlvbiBhc2FwKGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gIGludmFyaWFudChiYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzLCBcIlJlYWN0VXBkYXRlcy5hc2FwOiBDYW4ndCBlbnF1ZXVlIGFuIGFzYXAgY2FsbGJhY2sgaW4gYSBjb250ZXh0IHdoZXJlXCIgKyAndXBkYXRlcyBhcmUgbm90IGJlaW5nIGJhdGNoZWQuJyk7XG4gIGFzYXBDYWxsYmFja1F1ZXVlLmVucXVldWUoY2FsbGJhY2ssIGNvbnRleHQpO1xuICBhc2FwRW5xdWV1ZWQgPSB0cnVlO1xufVxuXG52YXIgUmVhY3RVcGRhdGVzSW5qZWN0aW9uID0ge1xuICBpbmplY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjogZnVuY3Rpb24gKFJlY29uY2lsZVRyYW5zYWN0aW9uKSB7XG4gICAgIVJlY29uY2lsZVRyYW5zYWN0aW9uID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGEgcmVjb25jaWxlIHRyYW5zYWN0aW9uIGNsYXNzJykgOiBfcHJvZEludmFyaWFudCgnMTI2JykgOiB2b2lkIDA7XG4gICAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gPSBSZWNvbmNpbGVUcmFuc2FjdGlvbjtcbiAgfSxcblxuICBpbmplY3RCYXRjaGluZ1N0cmF0ZWd5OiBmdW5jdGlvbiAoX2JhdGNoaW5nU3RyYXRlZ3kpIHtcbiAgICAhX2JhdGNoaW5nU3RyYXRlZ3kgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYSBiYXRjaGluZyBzdHJhdGVneScpIDogX3Byb2RJbnZhcmlhbnQoJzEyNycpIDogdm9pZCAwO1xuICAgICEodHlwZW9mIF9iYXRjaGluZ1N0cmF0ZWd5LmJhdGNoZWRVcGRhdGVzID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIGJhdGNoZWRVcGRhdGVzKCkgZnVuY3Rpb24nKSA6IF9wcm9kSW52YXJpYW50KCcxMjgnKSA6IHZvaWQgMDtcbiAgICAhKHR5cGVvZiBfYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyA9PT0gJ2Jvb2xlYW4nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhbiBpc0JhdGNoaW5nVXBkYXRlcyBib29sZWFuIGF0dHJpYnV0ZScpIDogX3Byb2RJbnZhcmlhbnQoJzEyOScpIDogdm9pZCAwO1xuICAgIGJhdGNoaW5nU3RyYXRlZ3kgPSBfYmF0Y2hpbmdTdHJhdGVneTtcbiAgfVxufTtcblxudmFyIFJlYWN0VXBkYXRlcyA9IHtcbiAgLyoqXG4gICAqIFJlYWN0IHJlZmVyZW5jZXMgYFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb25gIHVzaW5nIHRoaXMgcHJvcGVydHkgaW4gb3JkZXJcbiAgICogdG8gYWxsb3cgZGVwZW5kZW5jeSBpbmplY3Rpb24uXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjogbnVsbCxcblxuICBiYXRjaGVkVXBkYXRlczogYmF0Y2hlZFVwZGF0ZXMsXG4gIGVucXVldWVVcGRhdGU6IGVucXVldWVVcGRhdGUsXG4gIGZsdXNoQmF0Y2hlZFVwZGF0ZXM6IGZsdXNoQmF0Y2hlZFVwZGF0ZXMsXG4gIGluamVjdGlvbjogUmVhY3RVcGRhdGVzSW5qZWN0aW9uLFxuICBhc2FwOiBhc2FwXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0VXBkYXRlcztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RVcGRhdGVzLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogS2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gKlxuICogVGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIGNvbXBvbmVudCB3aG8gc2hvdWxkIG93biBhbnkgY29tcG9uZW50cyB0aGF0IGFyZVxuICogY3VycmVudGx5IGJlaW5nIGNvbnN0cnVjdGVkLlxuICovXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSB7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHR5cGUge1JlYWN0Q29tcG9uZW50fVxuICAgKi9cbiAgY3VycmVudDogbnVsbFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEN1cnJlbnRPd25lcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0L2xpYi9SZWFjdEN1cnJlbnRPd25lci5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAocHJlZml4ZWRWYWx1ZSwgdmFsdWUsIGtlZXBVbnByZWZpeGVkKSB7XG4gIHJldHVybiBrZWVwVW5wcmVmaXhlZCA/IFtwcmVmaXhlZFZhbHVlLCB2YWx1ZV0gOiBwcmVmaXhlZFZhbHVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvdXRpbHMvZ2V0UHJlZml4ZWRWYWx1ZS5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoJy4vUG9vbGVkQ2xhc3MnKTtcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIGRpZFdhcm5Gb3JBZGRlZE5ld1Byb3BlcnR5ID0gZmFsc2U7XG52YXIgaXNQcm94eVN1cHBvcnRlZCA9IHR5cGVvZiBQcm94eSA9PT0gJ2Z1bmN0aW9uJztcblxudmFyIHNob3VsZEJlUmVsZWFzZWRQcm9wZXJ0aWVzID0gWydkaXNwYXRjaENvbmZpZycsICdfdGFyZ2V0SW5zdCcsICduYXRpdmVFdmVudCcsICdpc0RlZmF1bHRQcmV2ZW50ZWQnLCAnaXNQcm9wYWdhdGlvblN0b3BwZWQnLCAnX2Rpc3BhdGNoTGlzdGVuZXJzJywgJ19kaXNwYXRjaEluc3RhbmNlcyddO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHR5cGU6IG51bGwsXG4gIHRhcmdldDogbnVsbCxcbiAgLy8gY3VycmVudFRhcmdldCBpcyBzZXQgd2hlbiBkaXNwYXRjaGluZzsgbm8gdXNlIGluIGNvcHlpbmcgaXQgaGVyZVxuICBjdXJyZW50VGFyZ2V0OiBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCxcbiAgZXZlbnRQaGFzZTogbnVsbCxcbiAgYnViYmxlczogbnVsbCxcbiAgY2FuY2VsYWJsZTogbnVsbCxcbiAgdGltZVN0YW1wOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG4gIH0sXG4gIGRlZmF1bHRQcmV2ZW50ZWQ6IG51bGwsXG4gIGlzVHJ1c3RlZDogbnVsbFxufTtcblxuLyoqXG4gKiBTeW50aGV0aWMgZXZlbnRzIGFyZSBkaXNwYXRjaGVkIGJ5IGV2ZW50IHBsdWdpbnMsIHR5cGljYWxseSBpbiByZXNwb25zZSB0byBhXG4gKiB0b3AtbGV2ZWwgZXZlbnQgZGVsZWdhdGlvbiBoYW5kbGVyLlxuICpcbiAqIFRoZXNlIHN5c3RlbXMgc2hvdWxkIGdlbmVyYWxseSB1c2UgcG9vbGluZyB0byByZWR1Y2UgdGhlIGZyZXF1ZW5jeSBvZiBnYXJiYWdlXG4gKiBjb2xsZWN0aW9uLiBUaGUgc3lzdGVtIHNob3VsZCBjaGVjayBgaXNQZXJzaXN0ZW50YCB0byBkZXRlcm1pbmUgd2hldGhlciB0aGVcbiAqIGV2ZW50IHNob3VsZCBiZSByZWxlYXNlZCBpbnRvIHRoZSBwb29sIGFmdGVyIGJlaW5nIGRpc3BhdGNoZWQuIFVzZXJzIHRoYXRcbiAqIG5lZWQgYSBwZXJzaXN0ZWQgZXZlbnQgc2hvdWxkIGludm9rZSBgcGVyc2lzdGAuXG4gKlxuICogU3ludGhldGljIGV2ZW50cyAoYW5kIHN1YmNsYXNzZXMpIGltcGxlbWVudCB0aGUgRE9NIExldmVsIDMgRXZlbnRzIEFQSSBieVxuICogbm9ybWFsaXppbmcgYnJvd3NlciBxdWlya3MuIFN1YmNsYXNzZXMgZG8gbm90IG5lY2Vzc2FyaWx5IGhhdmUgdG8gaW1wbGVtZW50IGFcbiAqIERPTSBpbnRlcmZhY2U7IGN1c3RvbSBhcHBsaWNhdGlvbi1zcGVjaWZpYyBldmVudHMgY2FuIGFsc28gc3ViY2xhc3MgdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0geyp9IHRhcmdldEluc3QgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSBuYXRpdmVFdmVudFRhcmdldCBUYXJnZXQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljRXZlbnQoZGlzcGF0Y2hDb25maWcsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIHRoZXNlIGhhdmUgYSBnZXR0ZXIvc2V0dGVyIGZvciB3YXJuaW5nc1xuICAgIGRlbGV0ZSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgIGRlbGV0ZSB0aGlzLnByZXZlbnREZWZhdWx0O1xuICAgIGRlbGV0ZSB0aGlzLnN0b3BQcm9wYWdhdGlvbjtcbiAgfVxuXG4gIHRoaXMuZGlzcGF0Y2hDb25maWcgPSBkaXNwYXRjaENvbmZpZztcbiAgdGhpcy5fdGFyZ2V0SW5zdCA9IHRhcmdldEluc3Q7XG4gIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcblxuICB2YXIgSW50ZXJmYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7XG4gIGZvciAodmFyIHByb3BOYW1lIGluIEludGVyZmFjZSkge1xuICAgIGlmICghSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBkZWxldGUgdGhpc1twcm9wTmFtZV07IC8vIHRoaXMgaGFzIGEgZ2V0dGVyL3NldHRlciBmb3Igd2FybmluZ3NcbiAgICB9XG4gICAgdmFyIG5vcm1hbGl6ZSA9IEludGVyZmFjZVtwcm9wTmFtZV07XG4gICAgaWYgKG5vcm1hbGl6ZSkge1xuICAgICAgdGhpc1twcm9wTmFtZV0gPSBub3JtYWxpemUobmF0aXZlRXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcE5hbWUgPT09ICd0YXJnZXQnKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gbmF0aXZlRXZlbnRUYXJnZXQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW3Byb3BOYW1lXSA9IG5hdGl2ZUV2ZW50W3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgZGVmYXVsdFByZXZlbnRlZCA9IG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgIT0gbnVsbCA/IG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgOiBuYXRpdmVFdmVudC5yZXR1cm5WYWx1ZSA9PT0gZmFsc2U7XG4gIGlmIChkZWZhdWx0UHJldmVudGVkKSB7XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZTtcbiAgfVxuICB0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlO1xuICByZXR1cm4gdGhpcztcbn1cblxuX2Fzc2lnbihTeW50aGV0aWNFdmVudC5wcm90b3R5cGUsIHtcbiAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgIHZhciBldmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgaWYgKCFldmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB2YWxpZC10eXBlb2ZcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBldmVudC5yZXR1cm5WYWx1ZSAhPT0gJ3Vua25vd24nKSB7XG4gICAgICBldmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlO1xuICB9LFxuXG4gIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBldmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgaWYgKCFldmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHZhbGlkLXR5cGVvZlxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV2ZW50LmNhbmNlbEJ1YmJsZSAhPT0gJ3Vua25vd24nKSB7XG4gICAgICAvLyBUaGUgQ2hhbmdlRXZlbnRQbHVnaW4gcmVnaXN0ZXJzIGEgXCJwcm9wZXJ0eWNoYW5nZVwiIGV2ZW50IGZvclxuICAgICAgLy8gSUUuIFRoaXMgZXZlbnQgZG9lcyBub3Qgc3VwcG9ydCBidWJibGluZyBvciBjYW5jZWxsaW5nLCBhbmRcbiAgICAgIC8vIGFueSByZWZlcmVuY2VzIHRvIGNhbmNlbEJ1YmJsZSB0aHJvdyBcIk1lbWJlciBub3QgZm91bmRcIi4gIEFcbiAgICAgIC8vIHR5cGVvZiBjaGVjayBvZiBcInVua25vd25cIiBjaXJjdW12ZW50cyB0aGlzIGlzc3VlIChhbmQgaXMgYWxzb1xuICAgICAgLy8gSUUgc3BlY2lmaWMpLlxuICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdlIHJlbGVhc2UgYWxsIGRpc3BhdGNoZWQgYFN5bnRoZXRpY0V2ZW50YHMgYWZ0ZXIgZWFjaCBldmVudCBsb29wLCBhZGRpbmdcbiAgICogdGhlbSBiYWNrIGludG8gdGhlIHBvb2wuIFRoaXMgYWxsb3dzIGEgd2F5IHRvIGhvbGQgb250byBhIHJlZmVyZW5jZSB0aGF0XG4gICAqIHdvbid0IGJlIGFkZGVkIGJhY2sgaW50byB0aGUgcG9vbC5cbiAgICovXG4gIHBlcnNpc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmlzUGVyc2lzdGVudCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBldmVudCBzaG91bGQgYmUgcmVsZWFzZWQgYmFjayBpbnRvIHRoZSBwb29sLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoaXMgc2hvdWxkIG5vdCBiZSByZWxlYXNlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgaXNQZXJzaXN0ZW50OiBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UsXG5cbiAgLyoqXG4gICAqIGBQb29sZWRDbGFzc2AgbG9va3MgZm9yIGBkZXN0cnVjdG9yYCBvbiBlYWNoIGluc3RhbmNlIGl0IHJlbGVhc2VzLlxuICAgKi9cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBJbnRlcmZhY2UgPSB0aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBJbnRlcmZhY2UpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wTmFtZSwgZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbihwcm9wTmFtZSwgSW50ZXJmYWNlW3Byb3BOYW1lXSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc1twcm9wTmFtZV0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNob3VsZEJlUmVsZWFzZWRQcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzW3Nob3VsZEJlUmVsZWFzZWRQcm9wZXJ0aWVzW2ldXSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ25hdGl2ZUV2ZW50JywgZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbignbmF0aXZlRXZlbnQnLCBudWxsKSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3ByZXZlbnREZWZhdWx0JywgZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbigncHJldmVudERlZmF1bHQnLCBlbXB0eUZ1bmN0aW9uKSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3N0b3BQcm9wYWdhdGlvbicsIGdldFBvb2xlZFdhcm5pbmdQcm9wZXJ0eURlZmluaXRpb24oJ3N0b3BQcm9wYWdhdGlvbicsIGVtcHR5RnVuY3Rpb24pKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5TeW50aGV0aWNFdmVudC5JbnRlcmZhY2UgPSBFdmVudEludGVyZmFjZTtcblxuLyoqXG4gKiBIZWxwZXIgdG8gcmVkdWNlIGJvaWxlcnBsYXRlIHdoZW4gY3JlYXRpbmcgc3ViY2xhc3Nlcy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBDbGFzc1xuICogQHBhcmFtIHs/b2JqZWN0fSBJbnRlcmZhY2VcbiAqL1xuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzID0gZnVuY3Rpb24gKENsYXNzLCBJbnRlcmZhY2UpIHtcbiAgdmFyIFN1cGVyID0gdGhpcztcblxuICB2YXIgRSA9IGZ1bmN0aW9uICgpIHt9O1xuICBFLnByb3RvdHlwZSA9IFN1cGVyLnByb3RvdHlwZTtcbiAgdmFyIHByb3RvdHlwZSA9IG5ldyBFKCk7XG5cbiAgX2Fzc2lnbihwcm90b3R5cGUsIENsYXNzLnByb3RvdHlwZSk7XG4gIENsYXNzLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2xhc3M7XG5cbiAgQ2xhc3MuSW50ZXJmYWNlID0gX2Fzc2lnbih7fSwgU3VwZXIuSW50ZXJmYWNlLCBJbnRlcmZhY2UpO1xuICBDbGFzcy5hdWdtZW50Q2xhc3MgPSBTdXBlci5hdWdtZW50Q2xhc3M7XG5cbiAgUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKENsYXNzLCBQb29sZWRDbGFzcy5mb3VyQXJndW1lbnRQb29sZXIpO1xufTtcblxuLyoqIFByb3h5aW5nIGFmdGVyIGV2ZXJ5dGhpbmcgc2V0IG9uIFN5bnRoZXRpY0V2ZW50XG4gICogdG8gcmVzb2x2ZSBQcm94eSBpc3N1ZSBvbiBzb21lIFdlYktpdCBicm93c2Vyc1xuICAqIGluIHdoaWNoIHNvbWUgRXZlbnQgcHJvcGVydGllcyBhcmUgc2V0IHRvIHVuZGVmaW5lZCAoR0gjMTAwMTApXG4gICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBpZiAoaXNQcm94eVN1cHBvcnRlZCkge1xuICAgIC8qZXNsaW50LWRpc2FibGUgbm8tZnVuYy1hc3NpZ24gKi9cbiAgICBTeW50aGV0aWNFdmVudCA9IG5ldyBQcm94eShTeW50aGV0aWNFdmVudCwge1xuICAgICAgY29uc3RydWN0OiBmdW5jdGlvbiAodGFyZ2V0LCBhcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5KHRhcmdldCwgT2JqZWN0LmNyZWF0ZSh0YXJnZXQucHJvdG90eXBlKSwgYXJncyk7XG4gICAgICB9LFxuICAgICAgYXBwbHk6IGZ1bmN0aW9uIChjb25zdHJ1Y3RvciwgdGhhdCwgYXJncykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5KGNvbnN0cnVjdG9yLmFwcGx5KHRoYXQsIGFyZ3MpLCB7XG4gICAgICAgICAgc2V0OiBmdW5jdGlvbiAodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHByb3AgIT09ICdpc1BlcnNpc3RlbnQnICYmICF0YXJnZXQuY29uc3RydWN0b3IuSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3ApICYmIHNob3VsZEJlUmVsZWFzZWRQcm9wZXJ0aWVzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGRpZFdhcm5Gb3JBZGRlZE5ld1Byb3BlcnR5IHx8IHRhcmdldC5pc1BlcnNpc3RlbnQoKSwgXCJUaGlzIHN5bnRoZXRpYyBldmVudCBpcyByZXVzZWQgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuIElmIHlvdSdyZSBcIiArIFwic2VlaW5nIHRoaXMsIHlvdSdyZSBhZGRpbmcgYSBuZXcgcHJvcGVydHkgaW4gdGhlIHN5bnRoZXRpYyBldmVudCBvYmplY3QuIFwiICsgJ1RoZSBwcm9wZXJ0eSBpcyBuZXZlciByZWxlYXNlZC4gU2VlICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1ldmVudC1wb29saW5nIGZvciBtb3JlIGluZm9ybWF0aW9uLicpIDogdm9pZCAwO1xuICAgICAgICAgICAgICBkaWRXYXJuRm9yQWRkZWROZXdQcm9wZXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLyplc2xpbnQtZW5hYmxlIG5vLWZ1bmMtYXNzaWduICovXG4gIH1cbn1cblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFN5bnRoZXRpY0V2ZW50LCBQb29sZWRDbGFzcy5mb3VyQXJndW1lbnRQb29sZXIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0V2ZW50O1xuXG4vKipcbiAgKiBIZWxwZXIgdG8gbnVsbGlmeSBzeW50aGV0aWNFdmVudCBpbnN0YW5jZSBwcm9wZXJ0aWVzIHdoZW4gZGVzdHJ1Y3RpbmdcbiAgKlxuICAqIEBwYXJhbSB7b2JqZWN0fSBTeW50aGV0aWNFdmVudFxuICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wTmFtZVxuICAqIEByZXR1cm4ge29iamVjdH0gZGVmaW5lUHJvcGVydHkgb2JqZWN0XG4gICovXG5mdW5jdGlvbiBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKHByb3BOYW1lLCBnZXRWYWwpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgZ2V0VmFsID09PSAnZnVuY3Rpb24nO1xuICByZXR1cm4ge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBzZXQ6IHNldCxcbiAgICBnZXQ6IGdldFxuICB9O1xuXG4gIGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICB2YXIgYWN0aW9uID0gaXNGdW5jdGlvbiA/ICdzZXR0aW5nIHRoZSBtZXRob2QnIDogJ3NldHRpbmcgdGhlIHByb3BlcnR5JztcbiAgICB3YXJuKGFjdGlvbiwgJ1RoaXMgaXMgZWZmZWN0aXZlbHkgYSBuby1vcCcpO1xuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgdmFyIGFjdGlvbiA9IGlzRnVuY3Rpb24gPyAnYWNjZXNzaW5nIHRoZSBtZXRob2QnIDogJ2FjY2Vzc2luZyB0aGUgcHJvcGVydHknO1xuICAgIHZhciByZXN1bHQgPSBpc0Z1bmN0aW9uID8gJ1RoaXMgaXMgYSBuby1vcCBmdW5jdGlvbicgOiAnVGhpcyBpcyBzZXQgdG8gbnVsbCc7XG4gICAgd2FybihhY3Rpb24sIHJlc3VsdCk7XG4gICAgcmV0dXJuIGdldFZhbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdhcm4oYWN0aW9uLCByZXN1bHQpIHtcbiAgICB2YXIgd2FybmluZ0NvbmRpdGlvbiA9IGZhbHNlO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHdhcm5pbmdDb25kaXRpb24sIFwiVGhpcyBzeW50aGV0aWMgZXZlbnQgaXMgcmV1c2VkIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLiBJZiB5b3UncmUgc2VlaW5nIHRoaXMsIFwiICsgXCJ5b3UncmUgJXMgYCVzYCBvbiBhIHJlbGVhc2VkL251bGxpZmllZCBzeW50aGV0aWMgZXZlbnQuICVzLiBcIiArICdJZiB5b3UgbXVzdCBrZWVwIHRoZSBvcmlnaW5hbCBzeW50aGV0aWMgZXZlbnQgYXJvdW5kLCB1c2UgZXZlbnQucGVyc2lzdCgpLiAnICsgJ1NlZSBodHRwczovL2ZiLm1lL3JlYWN0LWV2ZW50LXBvb2xpbmcgZm9yIG1vcmUgaW5mb3JtYXRpb24uJywgYWN0aW9uLCBwcm9wTmFtZSwgcmVzdWx0KSA6IHZvaWQgMDtcbiAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNFdmVudC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG5mdW5jdGlvbiBjaGVja01hc2sodmFsdWUsIGJpdG1hc2spIHtcbiAgcmV0dXJuICh2YWx1ZSAmIGJpdG1hc2spID09PSBiaXRtYXNrO1xufVxuXG52YXIgRE9NUHJvcGVydHlJbmplY3Rpb24gPSB7XG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gbm9ybWFsaXplZCwgY2FtZWxjYXNlZCBwcm9wZXJ0eSBuYW1lcyB0byBhIGNvbmZpZ3VyYXRpb24gdGhhdFxuICAgKiBzcGVjaWZpZXMgaG93IHRoZSBhc3NvY2lhdGVkIERPTSBwcm9wZXJ0eSBzaG91bGQgYmUgYWNjZXNzZWQgb3IgcmVuZGVyZWQuXG4gICAqL1xuICBNVVNUX1VTRV9QUk9QRVJUWTogMHgxLFxuICBIQVNfQk9PTEVBTl9WQUxVRTogMHg0LFxuICBIQVNfTlVNRVJJQ19WQUxVRTogMHg4LFxuICBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRTogMHgxMCB8IDB4OCxcbiAgSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRTogMHgyMCxcblxuICAvKipcbiAgICogSW5qZWN0IHNvbWUgc3BlY2lhbGl6ZWQga25vd2xlZGdlIGFib3V0IHRoZSBET00uIFRoaXMgdGFrZXMgYSBjb25maWcgb2JqZWN0XG4gICAqIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiBpc0N1c3RvbUF0dHJpYnV0ZTogZnVuY3Rpb24gdGhhdCBnaXZlbiBhbiBhdHRyaWJ1dGUgbmFtZSB3aWxsIHJldHVybiB0cnVlXG4gICAqIGlmIGl0IGNhbiBiZSBpbnNlcnRlZCBpbnRvIHRoZSBET00gdmVyYmF0aW0uIFVzZWZ1bCBmb3IgZGF0YS0qIG9yIGFyaWEtKlxuICAgKiBhdHRyaWJ1dGVzIHdoZXJlIGl0J3MgaW1wb3NzaWJsZSB0byBlbnVtZXJhdGUgYWxsIG9mIHRoZSBwb3NzaWJsZVxuICAgKiBhdHRyaWJ1dGUgbmFtZXMsXG4gICAqXG4gICAqIFByb3BlcnRpZXM6IG9iamVjdCBtYXBwaW5nIERPTSBwcm9wZXJ0eSBuYW1lIHRvIG9uZSBvZiB0aGVcbiAgICogRE9NUHJvcGVydHlJbmplY3Rpb24gY29uc3RhbnRzIG9yIG51bGwuIElmIHlvdXIgYXR0cmlidXRlIGlzbid0IGluIGhlcmUsXG4gICAqIGl0IHdvbid0IGdldCB3cml0dGVuIHRvIHRoZSBET00uXG4gICAqXG4gICAqIERPTUF0dHJpYnV0ZU5hbWVzOiBvYmplY3QgbWFwcGluZyBSZWFjdCBhdHRyaWJ1dGUgbmFtZSB0byB0aGUgRE9NXG4gICAqIGF0dHJpYnV0ZSBuYW1lLiBBdHRyaWJ1dGUgbmFtZXMgbm90IHNwZWNpZmllZCB1c2UgdGhlICoqbG93ZXJjYXNlKipcbiAgICogbm9ybWFsaXplZCBuYW1lLlxuICAgKlxuICAgKiBET01BdHRyaWJ1dGVOYW1lc3BhY2VzOiBvYmplY3QgbWFwcGluZyBSZWFjdCBhdHRyaWJ1dGUgbmFtZSB0byB0aGUgRE9NXG4gICAqIGF0dHJpYnV0ZSBuYW1lc3BhY2UgVVJMLiAoQXR0cmlidXRlIG5hbWVzIG5vdCBzcGVjaWZpZWQgdXNlIG5vIG5hbWVzcGFjZS4pXG4gICAqXG4gICAqIERPTVByb3BlcnR5TmFtZXM6IHNpbWlsYXIgdG8gRE9NQXR0cmlidXRlTmFtZXMgYnV0IGZvciBET00gcHJvcGVydGllcy5cbiAgICogUHJvcGVydHkgbmFtZXMgbm90IHNwZWNpZmllZCB1c2UgdGhlIG5vcm1hbGl6ZWQgbmFtZS5cbiAgICpcbiAgICogRE9NTXV0YXRpb25NZXRob2RzOiBQcm9wZXJ0aWVzIHRoYXQgcmVxdWlyZSBzcGVjaWFsIG11dGF0aW9uIG1ldGhvZHMuIElmXG4gICAqIGB2YWx1ZWAgaXMgdW5kZWZpbmVkLCB0aGUgbXV0YXRpb24gbWV0aG9kIHNob3VsZCB1bnNldCB0aGUgcHJvcGVydHkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkb21Qcm9wZXJ0eUNvbmZpZyB0aGUgY29uZmlnIGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAgICovXG4gIGluamVjdERPTVByb3BlcnR5Q29uZmlnOiBmdW5jdGlvbiAoZG9tUHJvcGVydHlDb25maWcpIHtcbiAgICB2YXIgSW5qZWN0aW9uID0gRE9NUHJvcGVydHlJbmplY3Rpb247XG4gICAgdmFyIFByb3BlcnRpZXMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5Qcm9wZXJ0aWVzIHx8IHt9O1xuICAgIHZhciBET01BdHRyaWJ1dGVOYW1lc3BhY2VzID0gZG9tUHJvcGVydHlDb25maWcuRE9NQXR0cmlidXRlTmFtZXNwYWNlcyB8fCB7fTtcbiAgICB2YXIgRE9NQXR0cmlidXRlTmFtZXMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5ET01BdHRyaWJ1dGVOYW1lcyB8fCB7fTtcbiAgICB2YXIgRE9NUHJvcGVydHlOYW1lcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTVByb3BlcnR5TmFtZXMgfHwge307XG4gICAgdmFyIERPTU11dGF0aW9uTWV0aG9kcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTU11dGF0aW9uTWV0aG9kcyB8fCB7fTtcblxuICAgIGlmIChkb21Qcm9wZXJ0eUNvbmZpZy5pc0N1c3RvbUF0dHJpYnV0ZSkge1xuICAgICAgRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zLnB1c2goZG9tUHJvcGVydHlDb25maWcuaXNDdXN0b21BdHRyaWJ1dGUpO1xuICAgIH1cblxuICAgIGZvciAodmFyIHByb3BOYW1lIGluIFByb3BlcnRpZXMpIHtcbiAgICAgICEhRE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnaW5qZWN0RE9NUHJvcGVydHlDb25maWcoLi4uKTogWW91XFwncmUgdHJ5aW5nIHRvIGluamVjdCBET00gcHJvcGVydHkgXFwnJXNcXCcgd2hpY2ggaGFzIGFscmVhZHkgYmVlbiBpbmplY3RlZC4gWW91IG1heSBiZSBhY2NpZGVudGFsbHkgaW5qZWN0aW5nIHRoZSBzYW1lIERPTSBwcm9wZXJ0eSBjb25maWcgdHdpY2UsIG9yIHlvdSBtYXkgYmUgaW5qZWN0aW5nIHR3byBjb25maWdzIHRoYXQgaGF2ZSBjb25mbGljdGluZyBwcm9wZXJ0eSBuYW1lcy4nLCBwcm9wTmFtZSkgOiBfcHJvZEludmFyaWFudCgnNDgnLCBwcm9wTmFtZSkgOiB2b2lkIDA7XG5cbiAgICAgIHZhciBsb3dlckNhc2VkID0gcHJvcE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHZhciBwcm9wQ29uZmlnID0gUHJvcGVydGllc1twcm9wTmFtZV07XG5cbiAgICAgIHZhciBwcm9wZXJ0eUluZm8gPSB7XG4gICAgICAgIGF0dHJpYnV0ZU5hbWU6IGxvd2VyQ2FzZWQsXG4gICAgICAgIGF0dHJpYnV0ZU5hbWVzcGFjZTogbnVsbCxcbiAgICAgICAgcHJvcGVydHlOYW1lOiBwcm9wTmFtZSxcbiAgICAgICAgbXV0YXRpb25NZXRob2Q6IG51bGwsXG5cbiAgICAgICAgbXVzdFVzZVByb3BlcnR5OiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLk1VU1RfVVNFX1BST1BFUlRZKSxcbiAgICAgICAgaGFzQm9vbGVhblZhbHVlOiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLkhBU19CT09MRUFOX1ZBTFVFKSxcbiAgICAgICAgaGFzTnVtZXJpY1ZhbHVlOiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLkhBU19OVU1FUklDX1ZBTFVFKSxcbiAgICAgICAgaGFzUG9zaXRpdmVOdW1lcmljVmFsdWU6IGNoZWNrTWFzayhwcm9wQ29uZmlnLCBJbmplY3Rpb24uSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUpLFxuICAgICAgICBoYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlOiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUpXG4gICAgICB9O1xuICAgICAgIShwcm9wZXJ0eUluZm8uaGFzQm9vbGVhblZhbHVlICsgcHJvcGVydHlJbmZvLmhhc051bWVyaWNWYWx1ZSArIHByb3BlcnR5SW5mby5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlIDw9IDEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0RPTVByb3BlcnR5OiBWYWx1ZSBjYW4gYmUgb25lIG9mIGJvb2xlYW4sIG92ZXJsb2FkZWQgYm9vbGVhbiwgb3IgbnVtZXJpYyB2YWx1ZSwgYnV0IG5vdCBhIGNvbWJpbmF0aW9uOiAlcycsIHByb3BOYW1lKSA6IF9wcm9kSW52YXJpYW50KCc1MCcsIHByb3BOYW1lKSA6IHZvaWQgMDtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWVbbG93ZXJDYXNlZF0gPSBwcm9wTmFtZTtcbiAgICAgIH1cblxuICAgICAgaWYgKERPTUF0dHJpYnV0ZU5hbWVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IERPTUF0dHJpYnV0ZU5hbWVzW3Byb3BOYW1lXTtcbiAgICAgICAgcHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGVOYW1lO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIERPTVByb3BlcnR5LmdldFBvc3NpYmxlU3RhbmRhcmROYW1lW2F0dHJpYnV0ZU5hbWVdID0gcHJvcE5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKERPTUF0dHJpYnV0ZU5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lc3BhY2UgPSBET01BdHRyaWJ1dGVOYW1lc3BhY2VzW3Byb3BOYW1lXTtcbiAgICAgIH1cblxuICAgICAgaWYgKERPTVByb3BlcnR5TmFtZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHByb3BlcnR5SW5mby5wcm9wZXJ0eU5hbWUgPSBET01Qcm9wZXJ0eU5hbWVzW3Byb3BOYW1lXTtcbiAgICAgIH1cblxuICAgICAgaWYgKERPTU11dGF0aW9uTWV0aG9kcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgcHJvcGVydHlJbmZvLm11dGF0aW9uTWV0aG9kID0gRE9NTXV0YXRpb25NZXRob2RzW3Byb3BOYW1lXTtcbiAgICAgIH1cblxuICAgICAgRE9NUHJvcGVydHkucHJvcGVydGllc1twcm9wTmFtZV0gPSBwcm9wZXJ0eUluZm87XG4gICAgfVxuICB9XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG52YXIgQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiA9ICc6QS1aX2EtelxcXFx1MDBDMC1cXFxcdTAwRDZcXFxcdTAwRDgtXFxcXHUwMEY2XFxcXHUwMEY4LVxcXFx1MDJGRlxcXFx1MDM3MC1cXFxcdTAzN0RcXFxcdTAzN0YtXFxcXHUxRkZGXFxcXHUyMDBDLVxcXFx1MjAwRFxcXFx1MjA3MC1cXFxcdTIxOEZcXFxcdTJDMDAtXFxcXHUyRkVGXFxcXHUzMDAxLVxcXFx1RDdGRlxcXFx1RjkwMC1cXFxcdUZEQ0ZcXFxcdUZERjAtXFxcXHVGRkZEJztcbi8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuXG4vKipcbiAqIERPTVByb3BlcnR5IGV4cG9ydHMgbG9va3VwIG9iamVjdHMgdGhhdCBjYW4gYmUgdXNlZCBsaWtlIGZ1bmN0aW9uczpcbiAqXG4gKiAgID4gRE9NUHJvcGVydHkuaXNWYWxpZFsnaWQnXVxuICogICB0cnVlXG4gKiAgID4gRE9NUHJvcGVydHkuaXNWYWxpZFsnZm9vYmFyJ11cbiAqICAgdW5kZWZpbmVkXG4gKlxuICogQWx0aG91Z2ggdGhpcyBtYXkgYmUgY29uZnVzaW5nLCBpdCBwZXJmb3JtcyBiZXR0ZXIgaW4gZ2VuZXJhbC5cbiAqXG4gKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2tleS1leGlzdHNcbiAqIEBzZWUgaHR0cDovL2pzcGVyZi5jb20va2V5LW1pc3NpbmdcbiAqL1xudmFyIERPTVByb3BlcnR5ID0ge1xuICBJRF9BVFRSSUJVVEVfTkFNRTogJ2RhdGEtcmVhY3RpZCcsXG4gIFJPT1RfQVRUUklCVVRFX05BTUU6ICdkYXRhLXJlYWN0cm9vdCcsXG5cbiAgQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUjogQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUixcbiAgQVRUUklCVVRFX05BTUVfQ0hBUjogQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiArICdcXFxcLS4wLTlcXFxcdTAwQjdcXFxcdTAzMDAtXFxcXHUwMzZGXFxcXHUyMDNGLVxcXFx1MjA0MCcsXG5cbiAgLyoqXG4gICAqIE1hcCBmcm9tIHByb3BlcnR5IFwic3RhbmRhcmQgbmFtZVwiIHRvIGFuIG9iamVjdCB3aXRoIGluZm8gYWJvdXQgaG93IHRvIHNldFxuICAgKiB0aGUgcHJvcGVydHkgaW4gdGhlIERPTS4gRWFjaCBvYmplY3QgY29udGFpbnM6XG4gICAqXG4gICAqIGF0dHJpYnV0ZU5hbWU6XG4gICAqICAgVXNlZCB3aGVuIHJlbmRlcmluZyBtYXJrdXAgb3Igd2l0aCBgKkF0dHJpYnV0ZSgpYC5cbiAgICogYXR0cmlidXRlTmFtZXNwYWNlXG4gICAqIHByb3BlcnR5TmFtZTpcbiAgICogICBVc2VkIG9uIERPTSBub2RlIGluc3RhbmNlcy4gKFRoaXMgaW5jbHVkZXMgcHJvcGVydGllcyB0aGF0IG11dGF0ZSBkdWUgdG9cbiAgICogICBleHRlcm5hbCBmYWN0b3JzLilcbiAgICogbXV0YXRpb25NZXRob2Q6XG4gICAqICAgSWYgbm9uLW51bGwsIHVzZWQgaW5zdGVhZCBvZiB0aGUgcHJvcGVydHkgb3IgYHNldEF0dHJpYnV0ZSgpYCBhZnRlclxuICAgKiAgIGluaXRpYWwgcmVuZGVyLlxuICAgKiBtdXN0VXNlUHJvcGVydHk6XG4gICAqICAgV2hldGhlciB0aGUgcHJvcGVydHkgbXVzdCBiZSBhY2Nlc3NlZCBhbmQgbXV0YXRlZCBhcyBhbiBvYmplY3QgcHJvcGVydHkuXG4gICAqIGhhc0Jvb2xlYW5WYWx1ZTpcbiAgICogICBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBzaG91bGQgYmUgcmVtb3ZlZCB3aGVuIHNldCB0byBhIGZhbHNleSB2YWx1ZS5cbiAgICogaGFzTnVtZXJpY1ZhbHVlOlxuICAgKiAgIFdoZXRoZXIgdGhlIHByb3BlcnR5IG11c3QgYmUgbnVtZXJpYyBvciBwYXJzZSBhcyBhIG51bWVyaWMgYW5kIHNob3VsZCBiZVxuICAgKiAgIHJlbW92ZWQgd2hlbiBzZXQgdG8gYSBmYWxzZXkgdmFsdWUuXG4gICAqIGhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlOlxuICAgKiAgIFdoZXRoZXIgdGhlIHByb3BlcnR5IG11c3QgYmUgcG9zaXRpdmUgbnVtZXJpYyBvciBwYXJzZSBhcyBhIHBvc2l0aXZlXG4gICAqICAgbnVtZXJpYyBhbmQgc2hvdWxkIGJlIHJlbW92ZWQgd2hlbiBzZXQgdG8gYSBmYWxzZXkgdmFsdWUuXG4gICAqIGhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6XG4gICAqICAgV2hldGhlciB0aGUgcHJvcGVydHkgY2FuIGJlIHVzZWQgYXMgYSBmbGFnIGFzIHdlbGwgYXMgd2l0aCBhIHZhbHVlLlxuICAgKiAgIFJlbW92ZWQgd2hlbiBzdHJpY3RseSBlcXVhbCB0byBmYWxzZTsgcHJlc2VudCB3aXRob3V0IGEgdmFsdWUgd2hlblxuICAgKiAgIHN0cmljdGx5IGVxdWFsIHRvIHRydWU7IHByZXNlbnQgd2l0aCBhIHZhbHVlIG90aGVyd2lzZS5cbiAgICovXG4gIHByb3BlcnRpZXM6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gbG93ZXJjYXNlIHByb3BlcnR5IG5hbWVzIHRvIHRoZSBwcm9wZXJseSBjYXNlZCB2ZXJzaW9uLCB1c2VkXG4gICAqIHRvIHdhcm4gaW4gdGhlIGNhc2Ugb2YgbWlzc2luZyBwcm9wZXJ0aWVzLiBBdmFpbGFibGUgb25seSBpbiBfX0RFVl9fLlxuICAgKlxuICAgKiBhdXRvZm9jdXMgaXMgcHJlZGVmaW5lZCwgYmVjYXVzZSBhZGRpbmcgaXQgdG8gdGhlIHByb3BlcnR5IHdoaXRlbGlzdFxuICAgKiBjYXVzZXMgdW5pbnRlbmRlZCBzaWRlIGVmZmVjdHMuXG4gICAqXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBnZXRQb3NzaWJsZVN0YW5kYXJkTmFtZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHsgYXV0b2ZvY3VzOiAnYXV0b0ZvY3VzJyB9IDogbnVsbCxcblxuICAvKipcbiAgICogQWxsIG9mIHRoZSBpc0N1c3RvbUF0dHJpYnV0ZSgpIGZ1bmN0aW9ucyB0aGF0IGhhdmUgYmVlbiBpbmplY3RlZC5cbiAgICovXG4gIF9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9uczogW10sXG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIGEgcHJvcGVydHkgbmFtZSBpcyBhIGN1c3RvbSBhdHRyaWJ1dGUuXG4gICAqIEBtZXRob2RcbiAgICovXG4gIGlzQ3VzdG9tQXR0cmlidXRlOiBmdW5jdGlvbiAoYXR0cmlidXRlTmFtZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXNDdXN0b21BdHRyaWJ1dGVGbiA9IERPTVByb3BlcnR5Ll9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9uc1tpXTtcbiAgICAgIGlmIChpc0N1c3RvbUF0dHJpYnV0ZUZuKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgaW5qZWN0aW9uOiBET01Qcm9wZXJ0eUluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01Qcm9wZXJ0eTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvRE9NUHJvcGVydHkuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIF9fREVWX18gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nO1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChfX0RFVl9fKSB7XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiBwcmludFdhcm5pbmcoZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAxID8gbGVuIC0gMSA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDE7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMV0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KTtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9XG5cbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHByaW50V2FybmluZy5hcHBseShudWxsLCBbZm9ybWF0XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi93YXJuaW5nL3dhcm5pbmcuanMiLCJpbXBvcnQgQXBwICAgICAgICAgIGZyb20gJy4vQXBwJztcbmltcG9ydCBMYXlvdXQgICAgICAgZnJvbSAnLi9MYXlvdXQnO1xuaW1wb3J0IE5hdiAgICAgICAgICBmcm9tICcuL05hdic7XG5pbXBvcnQgTmF2TGlnaHQgICAgIGZyb20gJy4vTmF2TGlnaHQnO1xuaW1wb3J0IEZvb3RlciAgICAgICBmcm9tICcuL0Zvb3Rlcic7XG5pbXBvcnQgSGVyb1ZpZGVvICAgIGZyb20gJy4vSGVyb1ZpZGVvJztcbmltcG9ydCBUaXRsZSAgICAgICAgZnJvbSAnLi9UaXRsZSc7XG5pbXBvcnQgVGV4dCAgICAgICAgIGZyb20gJy4vVGV4dCc7XG5pbXBvcnQgU2VjdGlvbiAgICAgIGZyb20gJy4vU2VjdGlvbic7XG5pbXBvcnQgSW1hZ2VTcGxpdCAgIGZyb20gJy4vSW1hZ2VTcGxpdCc7XG5pbXBvcnQgRmVhdHVyZXMgICAgIGZyb20gJy4vRmVhdHVyZXMnO1xuaW1wb3J0IFBlcnNvbiAgICAgICBmcm9tICcuL1BlcnNvbic7XG5pbXBvcnQgUGVvcGxlICAgICAgIGZyb20gJy4vUGVvcGxlJztcbmltcG9ydCBEZXZpY2VMb29rdXAgZnJvbSAnLi9EZXZpY2VMb29rdXAnO1xuaW1wb3J0IERldGFpbHNJbnB1dCBmcm9tICcuL0RldGFpbHNJbnB1dCc7XG5pbXBvcnQgQnV5QnV0dG9uICAgIGZyb20gJy4vQnV5QnV0dG9uJztcbmltcG9ydCBJbnB1dCAgICAgICAgZnJvbSAnLi9JbnB1dCc7XG5pbXBvcnQgWW91VHViZSAgICAgIGZyb20gJy4vWW91VHViZSc7XG5pbXBvcnQgSW5UaGVCb3ggICAgIGZyb20gJy4vSW5UaGVCb3gnO1xuaW1wb3J0IEluVGhlQm94X2ZyICBmcm9tICcuL0luVGhlQm94X2ZyJztcbmltcG9ydCBJblRoZUJveF9nciAgZnJvbSAnLi9JblRoZUJveF9ncic7XG5pbXBvcnQgVGVjaFNwZWNzICAgIGZyb20gJy4vVGVjaFNwZWNzJztcbmltcG9ydCBUZWNoU3BlY3NfZnIgZnJvbSAnLi9UZWNoU3BlY3NfZnInO1xuaW1wb3J0IFRlY2hTcGVjc19nciBmcm9tICcuL1RlY2hTcGVjc19ncic7XG5pbXBvcnQgSW1hZ2VTcGxpdFBob25lIGZyb20gJy4vSW1hZ2VTcGxpdFBob25lJztcbmV4cG9ydCB7XG4gIEFwcCxcbiAgQnV5QnV0dG9uLFxuICBMYXlvdXQsXG4gIE5hdixcbiAgTmF2TGlnaHQsXG4gIEZvb3RlcixcbiAgSGVyb1ZpZGVvLFxuICBUaXRsZSxcbiAgVGV4dCxcbiAgU2VjdGlvbixcbiAgSW1hZ2VTcGxpdCxcbiAgRmVhdHVyZXMsXG4gIFBlcnNvbixcbiAgUGVvcGxlLFxuICBEZXZpY2VMb29rdXAsXG4gIERldGFpbHNJbnB1dCxcbiAgSW5wdXQsXG4gIFlvdVR1YmUsXG4gIEluVGhlQm94LFxuICBJblRoZUJveF9mcixcbiAgSW5UaGVCb3hfZ3IsXG4gIFRlY2hTcGVjcyxcbiAgVGVjaFNwZWNzX2ZyLFxuICBUZWNoU3BlY3NfZ3IsXG4gIEltYWdlU3BsaXRQaG9uZVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbXBvbmVudHMvaW5kZXguanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2ludmFyaWFudC9icm93c2VyLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBTdGF0aWMgcG9vbGVycy4gU2V2ZXJhbCBjdXN0b20gdmVyc2lvbnMgZm9yIGVhY2ggcG90ZW50aWFsIG51bWJlciBvZlxuICogYXJndW1lbnRzLiBBIGNvbXBsZXRlbHkgZ2VuZXJpYyBwb29sZXIgaXMgZWFzeSB0byBpbXBsZW1lbnQsIGJ1dCB3b3VsZFxuICogcmVxdWlyZSBhY2Nlc3NpbmcgdGhlIGBhcmd1bWVudHNgIG9iamVjdC4gSW4gZWFjaCBvZiB0aGVzZSwgYHRoaXNgIHJlZmVycyB0b1xuICogdGhlIENsYXNzIGl0c2VsZiwgbm90IGFuIGluc3RhbmNlLiBJZiBhbnkgb3RoZXJzIGFyZSBuZWVkZWQsIHNpbXBseSBhZGQgdGhlbVxuICogaGVyZSwgb3IgaW4gdGhlaXIgb3duIGZpbGVzLlxuICovXG52YXIgb25lQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbiAoY29weUZpZWxkc0Zyb20pIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgY29weUZpZWxkc0Zyb20pO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGNvcHlGaWVsZHNGcm9tKTtcbiAgfVxufTtcblxudmFyIHR3b0FyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24gKGExLCBhMikge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMik7XG4gIH1cbn07XG5cbnZhciB0aHJlZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24gKGExLCBhMiwgYTMpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyLCBhMyk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMyk7XG4gIH1cbn07XG5cbnZhciBmb3VyQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyLCBhMywgYTQpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMiwgYTMsIGE0KTtcbiAgfVxufTtcblxudmFyIHN0YW5kYXJkUmVsZWFzZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgIShpbnN0YW5jZSBpbnN0YW5jZW9mIEtsYXNzKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdUcnlpbmcgdG8gcmVsZWFzZSBhbiBpbnN0YW5jZSBpbnRvIGEgcG9vbCBvZiBhIGRpZmZlcmVudCB0eXBlLicpIDogX3Byb2RJbnZhcmlhbnQoJzI1JykgOiB2b2lkIDA7XG4gIGluc3RhbmNlLmRlc3RydWN0b3IoKTtcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGggPCBLbGFzcy5wb29sU2l6ZSkge1xuICAgIEtsYXNzLmluc3RhbmNlUG9vbC5wdXNoKGluc3RhbmNlKTtcbiAgfVxufTtcblxudmFyIERFRkFVTFRfUE9PTF9TSVpFID0gMTA7XG52YXIgREVGQVVMVF9QT09MRVIgPSBvbmVBcmd1bWVudFBvb2xlcjtcblxuLyoqXG4gKiBBdWdtZW50cyBgQ29weUNvbnN0cnVjdG9yYCB0byBiZSBhIHBvb2xhYmxlIGNsYXNzLCBhdWdtZW50aW5nIG9ubHkgdGhlIGNsYXNzXG4gKiBpdHNlbGYgKHN0YXRpY2FsbHkpIG5vdCBhZGRpbmcgYW55IHByb3RvdHlwaWNhbCBmaWVsZHMuIEFueSBDb3B5Q29uc3RydWN0b3JcbiAqIHlvdSBnaXZlIHRoaXMgbWF5IGhhdmUgYSBgcG9vbFNpemVgIHByb3BlcnR5LCBhbmQgd2lsbCBsb29rIGZvciBhXG4gKiBwcm90b3R5cGljYWwgYGRlc3RydWN0b3JgIG9uIGluc3RhbmNlcy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBDb3B5Q29uc3RydWN0b3IgQ29uc3RydWN0b3IgdGhhdCBjYW4gYmUgdXNlZCB0byByZXNldC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBvb2xlciBDdXN0b21pemFibGUgcG9vbGVyLlxuICovXG52YXIgYWRkUG9vbGluZ1RvID0gZnVuY3Rpb24gKENvcHlDb25zdHJ1Y3RvciwgcG9vbGVyKSB7XG4gIC8vIENhc3RpbmcgYXMgYW55IHNvIHRoYXQgZmxvdyBpZ25vcmVzIHRoZSBhY3R1YWwgaW1wbGVtZW50YXRpb24gYW5kIHRydXN0c1xuICAvLyBpdCB0byBtYXRjaCB0aGUgdHlwZSB3ZSBkZWNsYXJlZFxuICB2YXIgTmV3S2xhc3MgPSBDb3B5Q29uc3RydWN0b3I7XG4gIE5ld0tsYXNzLmluc3RhbmNlUG9vbCA9IFtdO1xuICBOZXdLbGFzcy5nZXRQb29sZWQgPSBwb29sZXIgfHwgREVGQVVMVF9QT09MRVI7XG4gIGlmICghTmV3S2xhc3MucG9vbFNpemUpIHtcbiAgICBOZXdLbGFzcy5wb29sU2l6ZSA9IERFRkFVTFRfUE9PTF9TSVpFO1xuICB9XG4gIE5ld0tsYXNzLnJlbGVhc2UgPSBzdGFuZGFyZFJlbGVhc2VyO1xuICByZXR1cm4gTmV3S2xhc3M7XG59O1xuXG52YXIgUG9vbGVkQ2xhc3MgPSB7XG4gIGFkZFBvb2xpbmdUbzogYWRkUG9vbGluZ1RvLFxuICBvbmVBcmd1bWVudFBvb2xlcjogb25lQXJndW1lbnRQb29sZXIsXG4gIHR3b0FyZ3VtZW50UG9vbGVyOiB0d29Bcmd1bWVudFBvb2xlcixcbiAgdGhyZWVBcmd1bWVudFBvb2xlcjogdGhyZWVBcmd1bWVudFBvb2xlcixcbiAgZm91ckFyZ3VtZW50UG9vbGVyOiBmb3VyQXJndW1lbnRQb29sZXJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUG9vbGVkQ2xhc3M7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1Bvb2xlZENsYXNzLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RSZWYgPSByZXF1aXJlKCcuL1JlYWN0UmVmJyk7XG52YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG4vKipcbiAqIEhlbHBlciB0byBjYWxsIFJlYWN0UmVmLmF0dGFjaFJlZnMgd2l0aCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQsIHNwbGl0IG91dFxuICogdG8gYXZvaWQgYWxsb2NhdGlvbnMgaW4gdGhlIHRyYW5zYWN0aW9uIG1vdW50LXJlYWR5IHF1ZXVlLlxuICovXG5mdW5jdGlvbiBhdHRhY2hSZWZzKCkge1xuICBSZWFjdFJlZi5hdHRhY2hSZWZzKHRoaXMsIHRoaXMuX2N1cnJlbnRFbGVtZW50KTtcbn1cblxudmFyIFJlYWN0UmVjb25jaWxlciA9IHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBjb21wb25lbnQsIHJlbmRlcnMgbWFya3VwLCBhbmQgcmVnaXN0ZXJzIGV2ZW50IGxpc3RlbmVycy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW50ZXJuYWxJbnN0YW5jZVxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHs/b2JqZWN0fSB0aGUgY29udGFpbmluZyBob3N0IGNvbXBvbmVudCBpbnN0YW5jZVxuICAgKiBAcGFyYW0gez9vYmplY3R9IGluZm8gYWJvdXQgdGhlIGhvc3QgY29udGFpbmVyXG4gICAqIEByZXR1cm4gez9zdHJpbmd9IFJlbmRlcmVkIG1hcmt1cCB0byBiZSBpbnNlcnRlZCBpbnRvIHRoZSBET00uXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoaW50ZXJuYWxJbnN0YW5jZSwgdHJhbnNhY3Rpb24sIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCBjb250ZXh0LCBwYXJlbnREZWJ1Z0lEKSAvLyAwIGluIHByb2R1Y3Rpb24gYW5kIGZvciByb290c1xuICB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZm9yZU1vdW50Q29tcG9uZW50KGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQsIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50LCBwYXJlbnREZWJ1Z0lEKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIG1hcmt1cCA9IGludGVybmFsSW5zdGFuY2UubW91bnRDb21wb25lbnQodHJhbnNhY3Rpb24sIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCBjb250ZXh0LCBwYXJlbnREZWJ1Z0lEKTtcbiAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQgJiYgaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQucmVmICE9IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoYXR0YWNoUmVmcywgaW50ZXJuYWxJbnN0YW5jZSk7XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Nb3VudENvbXBvbmVudChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lEKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hcmt1cDtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBhIHZhbHVlIHRoYXQgY2FuIGJlIHBhc3NlZCB0b1xuICAgKiBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnJlcGxhY2VOb2RlV2l0aE1hcmt1cC5cbiAgICovXG4gIGdldEhvc3ROb2RlOiBmdW5jdGlvbiAoaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgIHJldHVybiBpbnRlcm5hbEluc3RhbmNlLmdldEhvc3ROb2RlKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIGFueSByZXNvdXJjZXMgYWxsb2NhdGVkIGJ5IGBtb3VudENvbXBvbmVudGAuXG4gICAqXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChpbnRlcm5hbEluc3RhbmNlLCBzYWZlbHkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uQmVmb3JlVW5tb3VudENvbXBvbmVudChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lEKTtcbiAgICAgIH1cbiAgICB9XG4gICAgUmVhY3RSZWYuZGV0YWNoUmVmcyhpbnRlcm5hbEluc3RhbmNlLCBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudCk7XG4gICAgaW50ZXJuYWxJbnN0YW5jZS51bm1vdW50Q29tcG9uZW50KHNhZmVseSk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblVubW91bnRDb21wb25lbnQoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYSBjb21wb25lbnQgdXNpbmcgYSBuZXcgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW50ZXJuYWxJbnN0YW5jZVxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnRcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uIChpbnRlcm5hbEluc3RhbmNlLCBuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgcHJldkVsZW1lbnQgPSBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudDtcblxuICAgIGlmIChuZXh0RWxlbWVudCA9PT0gcHJldkVsZW1lbnQgJiYgY29udGV4dCA9PT0gaW50ZXJuYWxJbnN0YW5jZS5fY29udGV4dCkge1xuICAgICAgLy8gU2luY2UgZWxlbWVudHMgYXJlIGltbXV0YWJsZSBhZnRlciB0aGUgb3duZXIgaXMgcmVuZGVyZWQsXG4gICAgICAvLyB3ZSBjYW4gZG8gYSBjaGVhcCBpZGVudGl0eSBjb21wYXJlIGhlcmUgdG8gZGV0ZXJtaW5lIGlmIHRoaXMgaXMgYVxuICAgICAgLy8gc3VwZXJmbHVvdXMgcmVjb25jaWxlLiBJdCdzIHBvc3NpYmxlIGZvciBzdGF0ZSB0byBiZSBtdXRhYmxlIGJ1dCBzdWNoXG4gICAgICAvLyBjaGFuZ2Ugc2hvdWxkIHRyaWdnZXIgYW4gdXBkYXRlIG9mIHRoZSBvd25lciB3aGljaCB3b3VsZCByZWNyZWF0ZVxuICAgICAgLy8gdGhlIGVsZW1lbnQuIFdlIGV4cGxpY2l0bHkgY2hlY2sgZm9yIHRoZSBleGlzdGVuY2Ugb2YgYW4gb3duZXIgc2luY2VcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgZm9yIGFuIGVsZW1lbnQgY3JlYXRlZCBvdXRzaWRlIGEgY29tcG9zaXRlIHRvIGJlXG4gICAgICAvLyBkZWVwbHkgbXV0YXRlZCBhbmQgcmV1c2VkLlxuXG4gICAgICAvLyBUT0RPOiBCYWlsaW5nIG91dCBlYXJseSBpcyBqdXN0IGEgcGVyZiBvcHRpbWl6YXRpb24gcmlnaHQ/XG4gICAgICAvLyBUT0RPOiBSZW1vdmluZyB0aGUgcmV0dXJuIHN0YXRlbWVudCBzaG91bGQgYWZmZWN0IGNvcnJlY3RuZXNzP1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWZvcmVVcGRhdGVDb21wb25lbnQoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCwgbmV4dEVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZWZzQ2hhbmdlZCA9IFJlYWN0UmVmLnNob3VsZFVwZGF0ZVJlZnMocHJldkVsZW1lbnQsIG5leHRFbGVtZW50KTtcblxuICAgIGlmIChyZWZzQ2hhbmdlZCkge1xuICAgICAgUmVhY3RSZWYuZGV0YWNoUmVmcyhpbnRlcm5hbEluc3RhbmNlLCBwcmV2RWxlbWVudCk7XG4gICAgfVxuXG4gICAgaW50ZXJuYWxJbnN0YW5jZS5yZWNlaXZlQ29tcG9uZW50KG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG5cbiAgICBpZiAocmVmc0NoYW5nZWQgJiYgaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQgJiYgaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQucmVmICE9IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoYXR0YWNoUmVmcywgaW50ZXJuYWxJbnN0YW5jZSk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblVwZGF0ZUNvbXBvbmVudChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lEKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZsdXNoIGFueSBkaXJ0eSBjaGFuZ2VzIGluIGEgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnRlcm5hbEluc3RhbmNlXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqL1xuICBwZXJmb3JtVXBkYXRlSWZOZWNlc3Nhcnk6IGZ1bmN0aW9uIChpbnRlcm5hbEluc3RhbmNlLCB0cmFuc2FjdGlvbiwgdXBkYXRlQmF0Y2hOdW1iZXIpIHtcbiAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fdXBkYXRlQmF0Y2hOdW1iZXIgIT09IHVwZGF0ZUJhdGNoTnVtYmVyKSB7XG4gICAgICAvLyBUaGUgY29tcG9uZW50J3MgZW5xdWV1ZWQgYmF0Y2ggbnVtYmVyIHNob3VsZCBhbHdheXMgYmUgdGhlIGN1cnJlbnRcbiAgICAgIC8vIGJhdGNoIG9yIHRoZSBmb2xsb3dpbmcgb25lLlxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoaW50ZXJuYWxJbnN0YW5jZS5fdXBkYXRlQmF0Y2hOdW1iZXIgPT0gbnVsbCB8fCBpbnRlcm5hbEluc3RhbmNlLl91cGRhdGVCYXRjaE51bWJlciA9PT0gdXBkYXRlQmF0Y2hOdW1iZXIgKyAxLCAncGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5OiBVbmV4cGVjdGVkIGJhdGNoIG51bWJlciAoY3VycmVudCAlcywgJyArICdwZW5kaW5nICVzKScsIHVwZGF0ZUJhdGNoTnVtYmVyLCBpbnRlcm5hbEluc3RhbmNlLl91cGRhdGVCYXRjaE51bWJlcikgOiB2b2lkIDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWZvcmVVcGRhdGVDb21wb25lbnQoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCwgaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICBpbnRlcm5hbEluc3RhbmNlLnBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeSh0cmFuc2FjdGlvbik7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblVwZGF0ZUNvbXBvbmVudChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lEKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RSZWNvbmNpbGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdFJlY29uY2lsZXIuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgUmVhY3RCYXNlQ2xhc3NlcyA9IHJlcXVpcmUoJy4vUmVhY3RCYXNlQ2xhc3NlcycpO1xudmFyIFJlYWN0Q2hpbGRyZW4gPSByZXF1aXJlKCcuL1JlYWN0Q2hpbGRyZW4nKTtcbnZhciBSZWFjdERPTUZhY3RvcmllcyA9IHJlcXVpcmUoJy4vUmVhY3RET01GYWN0b3JpZXMnKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xudmFyIFJlYWN0UHJvcFR5cGVzID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlcycpO1xudmFyIFJlYWN0VmVyc2lvbiA9IHJlcXVpcmUoJy4vUmVhY3RWZXJzaW9uJyk7XG5cbnZhciBjcmVhdGVSZWFjdENsYXNzID0gcmVxdWlyZSgnLi9jcmVhdGVDbGFzcycpO1xudmFyIG9ubHlDaGlsZCA9IHJlcXVpcmUoJy4vb25seUNoaWxkJyk7XG5cbnZhciBjcmVhdGVFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQ7XG52YXIgY3JlYXRlRmFjdG9yeSA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5O1xudmFyIGNsb25lRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQ7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBsb3dQcmlvcml0eVdhcm5pbmcgPSByZXF1aXJlKCcuL2xvd1ByaW9yaXR5V2FybmluZycpO1xuICB2YXIgY2FuRGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL2NhbkRlZmluZVByb3BlcnR5Jyk7XG4gIHZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudFZhbGlkYXRvcicpO1xuICB2YXIgZGlkV2FyblByb3BUeXBlc0RlcHJlY2F0ZWQgPSBmYWxzZTtcbiAgY3JlYXRlRWxlbWVudCA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVFbGVtZW50O1xuICBjcmVhdGVGYWN0b3J5ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUZhY3Rvcnk7XG4gIGNsb25lRWxlbWVudCA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jbG9uZUVsZW1lbnQ7XG59XG5cbnZhciBfX3NwcmVhZCA9IF9hc3NpZ247XG52YXIgY3JlYXRlTWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgcmV0dXJuIG1peGluO1xufTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHdhcm5lZEZvclNwcmVhZCA9IGZhbHNlO1xuICB2YXIgd2FybmVkRm9yQ3JlYXRlTWl4aW4gPSBmYWxzZTtcbiAgX19zcHJlYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgbG93UHJpb3JpdHlXYXJuaW5nKHdhcm5lZEZvclNwcmVhZCwgJ1JlYWN0Ll9fc3ByZWFkIGlzIGRlcHJlY2F0ZWQgYW5kIHNob3VsZCBub3QgYmUgdXNlZC4gVXNlICcgKyAnT2JqZWN0LmFzc2lnbiBkaXJlY3RseSBvciBhbm90aGVyIGhlbHBlciBmdW5jdGlvbiB3aXRoIHNpbWlsYXIgJyArICdzZW1hbnRpY3MuIFlvdSBtYXkgYmUgc2VlaW5nIHRoaXMgd2FybmluZyBkdWUgdG8geW91ciBjb21waWxlci4gJyArICdTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1zcHJlYWQtZGVwcmVjYXRpb24gZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB3YXJuZWRGb3JTcHJlYWQgPSB0cnVlO1xuICAgIHJldHVybiBfYXNzaWduLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgY3JlYXRlTWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICBsb3dQcmlvcml0eVdhcm5pbmcod2FybmVkRm9yQ3JlYXRlTWl4aW4sICdSZWFjdC5jcmVhdGVNaXhpbiBpcyBkZXByZWNhdGVkIGFuZCBzaG91bGQgbm90IGJlIHVzZWQuICcgKyAnSW4gUmVhY3QgdjE2LjAsIGl0IHdpbGwgYmUgcmVtb3ZlZC4gJyArICdZb3UgY2FuIHVzZSB0aGlzIG1peGluIGRpcmVjdGx5IGluc3RlYWQuICcgKyAnU2VlIGh0dHBzOi8vZmIubWUvY3JlYXRlbWl4aW4td2FzLW5ldmVyLWltcGxlbWVudGVkIGZvciBtb3JlIGluZm8uJyk7XG4gICAgd2FybmVkRm9yQ3JlYXRlTWl4aW4gPSB0cnVlO1xuICAgIHJldHVybiBtaXhpbjtcbiAgfTtcbn1cblxudmFyIFJlYWN0ID0ge1xuICAvLyBNb2Rlcm5cblxuICBDaGlsZHJlbjoge1xuICAgIG1hcDogUmVhY3RDaGlsZHJlbi5tYXAsXG4gICAgZm9yRWFjaDogUmVhY3RDaGlsZHJlbi5mb3JFYWNoLFxuICAgIGNvdW50OiBSZWFjdENoaWxkcmVuLmNvdW50LFxuICAgIHRvQXJyYXk6IFJlYWN0Q2hpbGRyZW4udG9BcnJheSxcbiAgICBvbmx5OiBvbmx5Q2hpbGRcbiAgfSxcblxuICBDb21wb25lbnQ6IFJlYWN0QmFzZUNsYXNzZXMuQ29tcG9uZW50LFxuICBQdXJlQ29tcG9uZW50OiBSZWFjdEJhc2VDbGFzc2VzLlB1cmVDb21wb25lbnQsXG5cbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCxcbiAgY2xvbmVFbGVtZW50OiBjbG9uZUVsZW1lbnQsXG4gIGlzVmFsaWRFbGVtZW50OiBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQsXG5cbiAgLy8gQ2xhc3NpY1xuXG4gIFByb3BUeXBlczogUmVhY3RQcm9wVHlwZXMsXG4gIGNyZWF0ZUNsYXNzOiBjcmVhdGVSZWFjdENsYXNzLFxuICBjcmVhdGVGYWN0b3J5OiBjcmVhdGVGYWN0b3J5LFxuICBjcmVhdGVNaXhpbjogY3JlYXRlTWl4aW4sXG5cbiAgLy8gVGhpcyBsb29rcyBET00gc3BlY2lmaWMgYnV0IHRoZXNlIGFyZSBhY3R1YWxseSBpc29tb3JwaGljIGhlbHBlcnNcbiAgLy8gc2luY2UgdGhleSBhcmUganVzdCBnZW5lcmF0aW5nIERPTSBzdHJpbmdzLlxuICBET006IFJlYWN0RE9NRmFjdG9yaWVzLFxuXG4gIHZlcnNpb246IFJlYWN0VmVyc2lvbixcblxuICAvLyBEZXByZWNhdGVkIGhvb2sgZm9yIEpTWCBzcHJlYWQsIGRvbid0IHVzZSB0aGlzIGZvciBhbnl0aGluZy5cbiAgX19zcHJlYWQ6IF9fc3ByZWFkXG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgd2FybmVkRm9yQ3JlYXRlQ2xhc3MgPSBmYWxzZTtcbiAgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWN0LCAnUHJvcFR5cGVzJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxvd1ByaW9yaXR5V2FybmluZyhkaWRXYXJuUHJvcFR5cGVzRGVwcmVjYXRlZCwgJ0FjY2Vzc2luZyBQcm9wVHlwZXMgdmlhIHRoZSBtYWluIFJlYWN0IHBhY2thZ2UgaXMgZGVwcmVjYXRlZCwnICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluICBSZWFjdCB2MTYuMC4nICsgJyBVc2UgdGhlIGxhdGVzdCBhdmFpbGFibGUgdjE1LiogcHJvcC10eXBlcyBwYWNrYWdlIGZyb20gbnBtIGluc3RlYWQuJyArICcgRm9yIGluZm8gb24gdXNhZ2UsIGNvbXBhdGliaWxpdHksIG1pZ3JhdGlvbiBhbmQgbW9yZSwgc2VlICcgKyAnaHR0cHM6Ly9mYi5tZS9wcm9wLXR5cGVzLWRvY3MnKTtcbiAgICAgICAgZGlkV2FyblByb3BUeXBlc0RlcHJlY2F0ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhY3QsICdjcmVhdGVDbGFzcycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICBsb3dQcmlvcml0eVdhcm5pbmcod2FybmVkRm9yQ3JlYXRlQ2xhc3MsICdBY2Nlc3NpbmcgY3JlYXRlQ2xhc3MgdmlhIHRoZSBtYWluIFJlYWN0IHBhY2thZ2UgaXMgZGVwcmVjYXRlZCwnICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIFJlYWN0IHYxNi4wLicgKyBcIiBVc2UgYSBwbGFpbiBKYXZhU2NyaXB0IGNsYXNzIGluc3RlYWQuIElmIHlvdSdyZSBub3QgeWV0IFwiICsgJ3JlYWR5IHRvIG1pZ3JhdGUsIGNyZWF0ZS1yZWFjdC1jbGFzcyB2MTUuKiBpcyBhdmFpbGFibGUgJyArICdvbiBucG0gYXMgYSB0ZW1wb3JhcnksIGRyb3AtaW4gcmVwbGFjZW1lbnQuICcgKyAnRm9yIG1vcmUgaW5mbyBzZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1jcmVhdGUtY2xhc3MnKTtcbiAgICAgICAgd2FybmVkRm9yQ3JlYXRlQ2xhc3MgPSB0cnVlO1xuICAgICAgICByZXR1cm4gY3JlYXRlUmVhY3RDbGFzcztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJlYWN0LkRPTSBmYWN0b3JpZXMgYXJlIGRlcHJlY2F0ZWQuIFdyYXAgdGhlc2UgbWV0aG9kcyBzbyB0aGF0XG4gIC8vIGludm9jYXRpb25zIG9mIHRoZSBSZWFjdC5ET00gbmFtZXNwYWNlIGFuZCBhbGVydCB1c2VycyB0byBzd2l0Y2hcbiAgLy8gdG8gdGhlIGByZWFjdC1kb20tZmFjdG9yaWVzYCBwYWNrYWdlLlxuICBSZWFjdC5ET00gPSB7fTtcbiAgdmFyIHdhcm5lZEZvckZhY3RvcmllcyA9IGZhbHNlO1xuICBPYmplY3Qua2V5cyhSZWFjdERPTUZhY3RvcmllcykuZm9yRWFjaChmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgIFJlYWN0LkRPTVtmYWN0b3J5XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghd2FybmVkRm9yRmFjdG9yaWVzKSB7XG4gICAgICAgIGxvd1ByaW9yaXR5V2FybmluZyhmYWxzZSwgJ0FjY2Vzc2luZyBmYWN0b3JpZXMgbGlrZSBSZWFjdC5ET00uJXMgaGFzIGJlZW4gZGVwcmVjYXRlZCAnICsgJ2FuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjE2LjArLiBVc2UgdGhlICcgKyAncmVhY3QtZG9tLWZhY3RvcmllcyBwYWNrYWdlIGluc3RlYWQuICcgKyAnIFZlcnNpb24gMS4wIHByb3ZpZGVzIGEgZHJvcC1pbiByZXBsYWNlbWVudC4nICsgJyBGb3IgbW9yZSBpbmZvLCBzZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1kb20tZmFjdG9yaWVzJywgZmFjdG9yeSk7XG4gICAgICAgIHdhcm5lZEZvckZhY3RvcmllcyA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3RET01GYWN0b3JpZXNbZmFjdG9yeV0uYXBwbHkoUmVhY3RET01GYWN0b3JpZXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC9saWIvUmVhY3QuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xudmFyIGNhbkRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9jYW5EZWZpbmVQcm9wZXJ0eScpO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50U3ltYm9sJyk7XG5cbnZhciBSRVNFUlZFRF9QUk9QUyA9IHtcbiAga2V5OiB0cnVlLFxuICByZWY6IHRydWUsXG4gIF9fc2VsZjogdHJ1ZSxcbiAgX19zb3VyY2U6IHRydWVcbn07XG5cbnZhciBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93biwgc3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd247XG5cbmZ1bmN0aW9uIGhhc1ZhbGlkUmVmKGNvbmZpZykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgJ3JlZicpKSB7XG4gICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdyZWYnKS5nZXQ7XG4gICAgICBpZiAoZ2V0dGVyICYmIGdldHRlci5pc1JlYWN0V2FybmluZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjb25maWcucmVmICE9PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGhhc1ZhbGlkS2V5KGNvbmZpZykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgJ2tleScpKSB7XG4gICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdrZXknKS5nZXQ7XG4gICAgICBpZiAoZ2V0dGVyICYmIGdldHRlci5pc1JlYWN0V2FybmluZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjb25maWcua2V5ICE9PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgd2FybkFib3V0QWNjZXNzaW5nS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24pIHtcbiAgICAgIHNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duID0gdHJ1ZTtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXM6IGBrZXlgIGlzIG5vdCBhIHByb3AuIFRyeWluZyB0byBhY2Nlc3MgaXQgd2lsbCByZXN1bHQgJyArICdpbiBgdW5kZWZpbmVkYCBiZWluZyByZXR1cm5lZC4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIHRoZSBzYW1lICcgKyAndmFsdWUgd2l0aGluIHRoZSBjaGlsZCBjb21wb25lbnQsIHlvdSBzaG91bGQgcGFzcyBpdCBhcyBhIGRpZmZlcmVudCAnICsgJ3Byb3AuIChodHRwczovL2ZiLm1lL3JlYWN0LXNwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpIDogdm9pZCAwO1xuICAgIH1cbiAgfTtcbiAgd2FybkFib3V0QWNjZXNzaW5nS2V5LmlzUmVhY3RXYXJuaW5nID0gdHJ1ZTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCAna2V5Jywge1xuICAgIGdldDogd2FybkFib3V0QWNjZXNzaW5nS2V5LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZGVmaW5lUmVmUHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKSB7XG4gIHZhciB3YXJuQWJvdXRBY2Nlc3NpbmdSZWYgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93bikge1xuICAgICAgc3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd24gPSB0cnVlO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclczogYHJlZmAgaXMgbm90IGEgcHJvcC4gVHJ5aW5nIHRvIGFjY2VzcyBpdCB3aWxsIHJlc3VsdCAnICsgJ2luIGB1bmRlZmluZWRgIGJlaW5nIHJldHVybmVkLiBJZiB5b3UgbmVlZCB0byBhY2Nlc3MgdGhlIHNhbWUgJyArICd2YWx1ZSB3aXRoaW4gdGhlIGNoaWxkIGNvbXBvbmVudCwgeW91IHNob3VsZCBwYXNzIGl0IGFzIGEgZGlmZmVyZW50ICcgKyAncHJvcC4gKGh0dHBzOi8vZmIubWUvcmVhY3Qtc3BlY2lhbC1wcm9wcyknLCBkaXNwbGF5TmFtZSkgOiB2b2lkIDA7XG4gICAgfVxuICB9O1xuICB3YXJuQWJvdXRBY2Nlc3NpbmdSZWYuaXNSZWFjdFdhcm5pbmcgPSB0cnVlO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvcHMsICdyZWYnLCB7XG4gICAgZ2V0OiB3YXJuQWJvdXRBY2Nlc3NpbmdSZWYsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIEZhY3RvcnkgbWV0aG9kIHRvIGNyZWF0ZSBhIG5ldyBSZWFjdCBlbGVtZW50LiBUaGlzIG5vIGxvbmdlciBhZGhlcmVzIHRvXG4gKiB0aGUgY2xhc3MgcGF0dGVybiwgc28gZG8gbm90IHVzZSBuZXcgdG8gY2FsbCBpdC4gQWxzbywgbm8gaW5zdGFuY2VvZiBjaGVja1xuICogd2lsbCB3b3JrLiBJbnN0ZWFkIHRlc3QgJCR0eXBlb2YgZmllbGQgYWdhaW5zdCBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgdG8gY2hlY2tcbiAqIGlmIHNvbWV0aGluZyBpcyBhIFJlYWN0IEVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHsqfSB0eXBlXG4gKiBAcGFyYW0geyp9IGtleVxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSByZWZcbiAqIEBwYXJhbSB7Kn0gc2VsZiBBICp0ZW1wb3JhcnkqIGhlbHBlciB0byBkZXRlY3QgcGxhY2VzIHdoZXJlIGB0aGlzYCBpc1xuICogZGlmZmVyZW50IGZyb20gdGhlIGBvd25lcmAgd2hlbiBSZWFjdC5jcmVhdGVFbGVtZW50IGlzIGNhbGxlZCwgc28gdGhhdCB3ZVxuICogY2FuIHdhcm4uIFdlIHdhbnQgdG8gZ2V0IHJpZCBvZiBvd25lciBhbmQgcmVwbGFjZSBzdHJpbmcgYHJlZmBzIHdpdGggYXJyb3dcbiAqIGZ1bmN0aW9ucywgYW5kIGFzIGxvbmcgYXMgYHRoaXNgIGFuZCBvd25lciBhcmUgdGhlIHNhbWUsIHRoZXJlIHdpbGwgYmUgbm9cbiAqIGNoYW5nZSBpbiBiZWhhdmlvci5cbiAqIEBwYXJhbSB7Kn0gc291cmNlIEFuIGFubm90YXRpb24gb2JqZWN0IChhZGRlZCBieSBhIHRyYW5zcGlsZXIgb3Igb3RoZXJ3aXNlKVxuICogaW5kaWNhdGluZyBmaWxlbmFtZSwgbGluZSBudW1iZXIsIGFuZC9vciBvdGhlciBpbmZvcm1hdGlvbi5cbiAqIEBwYXJhbSB7Kn0gb3duZXJcbiAqIEBwYXJhbSB7Kn0gcHJvcHNcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RFbGVtZW50ID0gZnVuY3Rpb24gKHR5cGUsIGtleSwgcmVmLCBzZWxmLCBzb3VyY2UsIG93bmVyLCBwcm9wcykge1xuICB2YXIgZWxlbWVudCA9IHtcbiAgICAvLyBUaGlzIHRhZyBhbGxvdyB1cyB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzIGFzIGEgUmVhY3QgRWxlbWVudFxuICAgICQkdHlwZW9mOiBSRUFDVF9FTEVNRU5UX1RZUEUsXG5cbiAgICAvLyBCdWlsdC1pbiBwcm9wZXJ0aWVzIHRoYXQgYmVsb25nIG9uIHRoZSBlbGVtZW50XG4gICAgdHlwZTogdHlwZSxcbiAgICBrZXk6IGtleSxcbiAgICByZWY6IHJlZixcbiAgICBwcm9wczogcHJvcHMsXG5cbiAgICAvLyBSZWNvcmQgdGhlIGNvbXBvbmVudCByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgdGhpcyBlbGVtZW50LlxuICAgIF9vd25lcjogb3duZXJcbiAgfTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoZSB2YWxpZGF0aW9uIGZsYWcgaXMgY3VycmVudGx5IG11dGF0aXZlLiBXZSBwdXQgaXQgb25cbiAgICAvLyBhbiBleHRlcm5hbCBiYWNraW5nIHN0b3JlIHNvIHRoYXQgd2UgY2FuIGZyZWV6ZSB0aGUgd2hvbGUgb2JqZWN0LlxuICAgIC8vIFRoaXMgY2FuIGJlIHJlcGxhY2VkIHdpdGggYSBXZWFrTWFwIG9uY2UgdGhleSBhcmUgaW1wbGVtZW50ZWQgaW5cbiAgICAvLyBjb21tb25seSB1c2VkIGRldmVsb3BtZW50IGVudmlyb25tZW50cy5cbiAgICBlbGVtZW50Ll9zdG9yZSA9IHt9O1xuXG4gICAgLy8gVG8gbWFrZSBjb21wYXJpbmcgUmVhY3RFbGVtZW50cyBlYXNpZXIgZm9yIHRlc3RpbmcgcHVycG9zZXMsIHdlIG1ha2VcbiAgICAvLyB0aGUgdmFsaWRhdGlvbiBmbGFnIG5vbi1lbnVtZXJhYmxlICh3aGVyZSBwb3NzaWJsZSwgd2hpY2ggc2hvdWxkXG4gICAgLy8gaW5jbHVkZSBldmVyeSBlbnZpcm9ubWVudCB3ZSBydW4gdGVzdHMgaW4pLCBzbyB0aGUgdGVzdCBmcmFtZXdvcmtcbiAgICAvLyBpZ25vcmVzIGl0LlxuICAgIGlmIChjYW5EZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQuX3N0b3JlLCAndmFsaWRhdGVkJywge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICAvLyBzZWxmIGFuZCBzb3VyY2UgYXJlIERFViBvbmx5IHByb3BlcnRpZXMuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudCwgJ19zZWxmJywge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogc2VsZlxuICAgICAgfSk7XG4gICAgICAvLyBUd28gZWxlbWVudHMgY3JlYXRlZCBpbiB0d28gZGlmZmVyZW50IHBsYWNlcyBzaG91bGQgYmUgY29uc2lkZXJlZFxuICAgICAgLy8gZXF1YWwgZm9yIHRlc3RpbmcgcHVycG9zZXMgYW5kIHRoZXJlZm9yZSB3ZSBoaWRlIGl0IGZyb20gZW51bWVyYXRpb24uXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudCwgJ19zb3VyY2UnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBzb3VyY2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgPSBmYWxzZTtcbiAgICAgIGVsZW1lbnQuX3NlbGYgPSBzZWxmO1xuICAgICAgZWxlbWVudC5fc291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICBpZiAoT2JqZWN0LmZyZWV6ZSkge1xuICAgICAgT2JqZWN0LmZyZWV6ZShlbGVtZW50LnByb3BzKTtcbiAgICAgIE9iamVjdC5mcmVlemUoZWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQ7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhbmQgcmV0dXJuIGEgbmV3IFJlYWN0RWxlbWVudCBvZiB0aGUgZ2l2ZW4gdHlwZS5cbiAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdC5jcmVhdGVlbGVtZW50XG4gKi9cblJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKHR5cGUsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgdmFyIHByb3BOYW1lO1xuXG4gIC8vIFJlc2VydmVkIG5hbWVzIGFyZSBleHRyYWN0ZWRcbiAgdmFyIHByb3BzID0ge307XG5cbiAgdmFyIGtleSA9IG51bGw7XG4gIHZhciByZWYgPSBudWxsO1xuICB2YXIgc2VsZiA9IG51bGw7XG4gIHZhciBzb3VyY2UgPSBudWxsO1xuXG4gIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgIGlmIChoYXNWYWxpZFJlZihjb25maWcpKSB7XG4gICAgICByZWYgPSBjb25maWcucmVmO1xuICAgIH1cbiAgICBpZiAoaGFzVmFsaWRLZXkoY29uZmlnKSkge1xuICAgICAga2V5ID0gJycgKyBjb25maWcua2V5O1xuICAgIH1cblxuICAgIHNlbGYgPSBjb25maWcuX19zZWxmID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnLl9fc2VsZjtcbiAgICBzb3VyY2UgPSBjb25maWcuX19zb3VyY2UgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjb25maWcuX19zb3VyY2U7XG4gICAgLy8gUmVtYWluaW5nIHByb3BlcnRpZXMgYXJlIGFkZGVkIHRvIGEgbmV3IHByb3BzIG9iamVjdFxuICAgIGZvciAocHJvcE5hbWUgaW4gY29uZmlnKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSAmJiAhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ2hpbGRyZW4gY2FuIGJlIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQsIGFuZCB0aG9zZSBhcmUgdHJhbnNmZXJyZWQgb250b1xuICAvLyB0aGUgbmV3bHkgYWxsb2NhdGVkIHByb3BzIG9iamVjdC5cbiAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gIGlmIChjaGlsZHJlbkxlbmd0aCA9PT0gMSkge1xuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW5MZW5ndGggPiAxKSB7XG4gICAgdmFyIGNoaWxkQXJyYXkgPSBBcnJheShjaGlsZHJlbkxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChPYmplY3QuZnJlZXplKSB7XG4gICAgICAgIE9iamVjdC5mcmVlemUoY2hpbGRBcnJheSk7XG4gICAgICB9XG4gICAgfVxuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuXG4gIC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wc1xuICBpZiAodHlwZSAmJiB0eXBlLmRlZmF1bHRQcm9wcykge1xuICAgIHZhciBkZWZhdWx0UHJvcHMgPSB0eXBlLmRlZmF1bHRQcm9wcztcbiAgICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGtleSB8fCByZWYpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHMuJCR0eXBlb2YgPT09ICd1bmRlZmluZWQnIHx8IHByb3BzLiQkdHlwZW9mICE9PSBSRUFDVF9FTEVNRU5UX1RZUEUpIHtcbiAgICAgICAgdmFyIGRpc3BsYXlOYW1lID0gdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgPyB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCAnVW5rbm93bicgOiB0eXBlO1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgZGVmaW5lS2V5UHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVmKSB7XG4gICAgICAgICAgZGVmaW5lUmVmUHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gUmVhY3RFbGVtZW50KHR5cGUsIGtleSwgcmVmLCBzZWxmLCBzb3VyY2UsIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQsIHByb3BzKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBSZWFjdEVsZW1lbnRzIG9mIGEgZ2l2ZW4gdHlwZS5cbiAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdC5jcmVhdGVmYWN0b3J5XG4gKi9cblJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5ID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgdmFyIGZhY3RvcnkgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudC5iaW5kKG51bGwsIHR5cGUpO1xuICAvLyBFeHBvc2UgdGhlIHR5cGUgb24gdGhlIGZhY3RvcnkgYW5kIHRoZSBwcm90b3R5cGUgc28gdGhhdCBpdCBjYW4gYmVcbiAgLy8gZWFzaWx5IGFjY2Vzc2VkIG9uIGVsZW1lbnRzLiBFLmcuIGA8Rm9vIC8+LnR5cGUgPT09IEZvb2AuXG4gIC8vIFRoaXMgc2hvdWxkIG5vdCBiZSBuYW1lZCBgY29uc3RydWN0b3JgIHNpbmNlIHRoaXMgbWF5IG5vdCBiZSB0aGUgZnVuY3Rpb25cbiAgLy8gdGhhdCBjcmVhdGVkIHRoZSBlbGVtZW50LCBhbmQgaXQgbWF5IG5vdCBldmVuIGJlIGEgY29uc3RydWN0b3IuXG4gIC8vIExlZ2FjeSBob29rIFRPRE86IFdhcm4gaWYgdGhpcyBpcyBhY2Nlc3NlZFxuICBmYWN0b3J5LnR5cGUgPSB0eXBlO1xuICByZXR1cm4gZmFjdG9yeTtcbn07XG5cblJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VLZXkgPSBmdW5jdGlvbiAob2xkRWxlbWVudCwgbmV3S2V5KSB7XG4gIHZhciBuZXdFbGVtZW50ID0gUmVhY3RFbGVtZW50KG9sZEVsZW1lbnQudHlwZSwgbmV3S2V5LCBvbGRFbGVtZW50LnJlZiwgb2xkRWxlbWVudC5fc2VsZiwgb2xkRWxlbWVudC5fc291cmNlLCBvbGRFbGVtZW50Ll9vd25lciwgb2xkRWxlbWVudC5wcm9wcyk7XG5cbiAgcmV0dXJuIG5ld0VsZW1lbnQ7XG59O1xuXG4vKipcbiAqIENsb25lIGFuZCByZXR1cm4gYSBuZXcgUmVhY3RFbGVtZW50IHVzaW5nIGVsZW1lbnQgYXMgdGhlIHN0YXJ0aW5nIHBvaW50LlxuICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdG9wLWxldmVsLWFwaS5odG1sI3JlYWN0LmNsb25lZWxlbWVudFxuICovXG5SZWFjdEVsZW1lbnQuY2xvbmVFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgdmFyIHByb3BOYW1lO1xuXG4gIC8vIE9yaWdpbmFsIHByb3BzIGFyZSBjb3BpZWRcbiAgdmFyIHByb3BzID0gX2Fzc2lnbih7fSwgZWxlbWVudC5wcm9wcyk7XG5cbiAgLy8gUmVzZXJ2ZWQgbmFtZXMgYXJlIGV4dHJhY3RlZFxuICB2YXIga2V5ID0gZWxlbWVudC5rZXk7XG4gIHZhciByZWYgPSBlbGVtZW50LnJlZjtcbiAgLy8gU2VsZiBpcyBwcmVzZXJ2ZWQgc2luY2UgdGhlIG93bmVyIGlzIHByZXNlcnZlZC5cbiAgdmFyIHNlbGYgPSBlbGVtZW50Ll9zZWxmO1xuICAvLyBTb3VyY2UgaXMgcHJlc2VydmVkIHNpbmNlIGNsb25lRWxlbWVudCBpcyB1bmxpa2VseSB0byBiZSB0YXJnZXRlZCBieSBhXG4gIC8vIHRyYW5zcGlsZXIsIGFuZCB0aGUgb3JpZ2luYWwgc291cmNlIGlzIHByb2JhYmx5IGEgYmV0dGVyIGluZGljYXRvciBvZiB0aGVcbiAgLy8gdHJ1ZSBvd25lci5cbiAgdmFyIHNvdXJjZSA9IGVsZW1lbnQuX3NvdXJjZTtcblxuICAvLyBPd25lciB3aWxsIGJlIHByZXNlcnZlZCwgdW5sZXNzIHJlZiBpcyBvdmVycmlkZGVuXG4gIHZhciBvd25lciA9IGVsZW1lbnQuX293bmVyO1xuXG4gIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgIGlmIChoYXNWYWxpZFJlZihjb25maWcpKSB7XG4gICAgICAvLyBTaWxlbnRseSBzdGVhbCB0aGUgcmVmIGZyb20gdGhlIHBhcmVudC5cbiAgICAgIHJlZiA9IGNvbmZpZy5yZWY7XG4gICAgICBvd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gICAgfVxuICAgIGlmIChoYXNWYWxpZEtleShjb25maWcpKSB7XG4gICAgICBrZXkgPSAnJyArIGNvbmZpZy5rZXk7XG4gICAgfVxuXG4gICAgLy8gUmVtYWluaW5nIHByb3BlcnRpZXMgb3ZlcnJpZGUgZXhpc3RpbmcgcHJvcHNcbiAgICB2YXIgZGVmYXVsdFByb3BzO1xuICAgIGlmIChlbGVtZW50LnR5cGUgJiYgZWxlbWVudC50eXBlLmRlZmF1bHRQcm9wcykge1xuICAgICAgZGVmYXVsdFByb3BzID0gZWxlbWVudC50eXBlLmRlZmF1bHRQcm9wcztcbiAgICB9XG4gICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgcHJvcE5hbWUpICYmICFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgaWYgKGNvbmZpZ1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCAmJiBkZWZhdWx0UHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wc1xuICAgICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENoaWxkcmVuIGNhbiBiZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50LCBhbmQgdGhvc2UgYXJlIHRyYW5zZmVycmVkIG9udG9cbiAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgfVxuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdEVsZW1lbnQoZWxlbWVudC50eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpO1xufTtcblxuLyoqXG4gKiBWZXJpZmllcyB0aGUgb2JqZWN0IGlzIGEgUmVhY3RFbGVtZW50LlxuICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdG9wLWxldmVsLWFwaS5odG1sI3JlYWN0LmlzdmFsaWRlbGVtZW50XG4gKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqZWN0YCBpcyBhIHZhbGlkIGNvbXBvbmVudC5cbiAqIEBmaW5hbFxuICovXG5SZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwgJiYgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RWxlbWVudDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0L2xpYi9SZWFjdEVsZW1lbnQuanMiLCJpbXBvcnQgX0Jyb3dzZXJSb3V0ZXIgZnJvbSBcIi4vQnJvd3NlclJvdXRlclwiO1xuZXhwb3J0IHsgX0Jyb3dzZXJSb3V0ZXIgYXMgQnJvd3NlclJvdXRlciB9O1xuaW1wb3J0IF9IYXNoUm91dGVyIGZyb20gXCIuL0hhc2hSb3V0ZXJcIjtcbmV4cG9ydCB7IF9IYXNoUm91dGVyIGFzIEhhc2hSb3V0ZXIgfTtcbmltcG9ydCBfTGluayBmcm9tIFwiLi9MaW5rXCI7XG5leHBvcnQgeyBfTGluayBhcyBMaW5rIH07XG5pbXBvcnQgX01lbW9yeVJvdXRlciBmcm9tIFwiLi9NZW1vcnlSb3V0ZXJcIjtcbmV4cG9ydCB7IF9NZW1vcnlSb3V0ZXIgYXMgTWVtb3J5Um91dGVyIH07XG5pbXBvcnQgX05hdkxpbmsgZnJvbSBcIi4vTmF2TGlua1wiO1xuZXhwb3J0IHsgX05hdkxpbmsgYXMgTmF2TGluayB9O1xuaW1wb3J0IF9Qcm9tcHQgZnJvbSBcIi4vUHJvbXB0XCI7XG5leHBvcnQgeyBfUHJvbXB0IGFzIFByb21wdCB9O1xuaW1wb3J0IF9SZWRpcmVjdCBmcm9tIFwiLi9SZWRpcmVjdFwiO1xuZXhwb3J0IHsgX1JlZGlyZWN0IGFzIFJlZGlyZWN0IH07XG5pbXBvcnQgX1JvdXRlIGZyb20gXCIuL1JvdXRlXCI7XG5leHBvcnQgeyBfUm91dGUgYXMgUm91dGUgfTtcbmltcG9ydCBfUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuZXhwb3J0IHsgX1JvdXRlciBhcyBSb3V0ZXIgfTtcbmltcG9ydCBfU3RhdGljUm91dGVyIGZyb20gXCIuL1N0YXRpY1JvdXRlclwiO1xuZXhwb3J0IHsgX1N0YXRpY1JvdXRlciBhcyBTdGF0aWNSb3V0ZXIgfTtcbmltcG9ydCBfU3dpdGNoIGZyb20gXCIuL1N3aXRjaFwiO1xuZXhwb3J0IHsgX1N3aXRjaCBhcyBTd2l0Y2ggfTtcbmltcG9ydCBfZ2VuZXJhdGVQYXRoIGZyb20gXCIuL2dlbmVyYXRlUGF0aFwiO1xuZXhwb3J0IHsgX2dlbmVyYXRlUGF0aCBhcyBnZW5lcmF0ZVBhdGggfTtcbmltcG9ydCBfbWF0Y2hQYXRoIGZyb20gXCIuL21hdGNoUGF0aFwiO1xuZXhwb3J0IHsgX21hdGNoUGF0aCBhcyBtYXRjaFBhdGggfTtcbmltcG9ydCBfd2l0aFJvdXRlciBmcm9tIFwiLi93aXRoUm91dGVyXCI7XG5leHBvcnQgeyBfd2l0aFJvdXRlciBhcyB3aXRoUm91dGVyIH07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1yb3V0ZXItZG9tL2VzL2luZGV4LmpzIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcHJlZml4ICsgJyhcXFxcL3xcXFxcP3wjfCQpJywgJ2knKS50ZXN0KHBhdGgpO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZm9yY2VSZWZyZXNoID0gX3Byb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHZhciBoYXNoSW5kZXggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJyk7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NTmFtZXNwYWNlcyA9IHJlcXVpcmUoJy4vRE9NTmFtZXNwYWNlcycpO1xudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoJy4vc2V0SW5uZXJIVE1MJyk7XG5cbnZhciBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uID0gcmVxdWlyZSgnLi9jcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uJyk7XG52YXIgc2V0VGV4dENvbnRlbnQgPSByZXF1aXJlKCcuL3NldFRleHRDb250ZW50Jyk7XG5cbnZhciBFTEVNRU5UX05PREVfVFlQRSA9IDE7XG52YXIgRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFID0gMTE7XG5cbi8qKlxuICogSW4gSUUgKDgtMTEpIGFuZCBFZGdlLCBhcHBlbmRpbmcgbm9kZXMgd2l0aCBubyBjaGlsZHJlbiBpcyBkcmFtYXRpY2FsbHlcbiAqIGZhc3RlciB0aGFuIGFwcGVuZGluZyBhIGZ1bGwgc3VidHJlZSwgc28gd2UgZXNzZW50aWFsbHkgcXVldWUgdXAgdGhlXG4gKiAuYXBwZW5kQ2hpbGQgY2FsbHMgaGVyZSBhbmQgYXBwbHkgdGhlbSBzbyBlYWNoIG5vZGUgaXMgYWRkZWQgdG8gaXRzIHBhcmVudFxuICogYmVmb3JlIGFueSBjaGlsZHJlbiBhcmUgYWRkZWQuXG4gKlxuICogSW4gb3RoZXIgYnJvd3NlcnMsIGRvaW5nIHNvIGlzIHNsb3dlciBvciBuZXV0cmFsIGNvbXBhcmVkIHRvIHRoZSBvdGhlciBvcmRlclxuICogKGluIEZpcmVmb3gsIHR3aWNlIGFzIHNsb3cpIHNvIHdlIG9ubHkgZG8gdGhpcyBpbnZlcnNpb24gaW4gSUUuXG4gKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zcGljeWovaW5uZXJodG1sLXZzLWNyZWF0ZWVsZW1lbnQtdnMtY2xvbmVub2RlLlxuICovXG52YXIgZW5hYmxlTGF6eSA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50LmRvY3VtZW50TW9kZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvci51c2VyQWdlbnQgPT09ICdzdHJpbmcnICYmIC9cXGJFZGdlXFwvXFxkLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG5mdW5jdGlvbiBpbnNlcnRUcmVlQ2hpbGRyZW4odHJlZSkge1xuICBpZiAoIWVuYWJsZUxhenkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5vZGUgPSB0cmVlLm5vZGU7XG4gIHZhciBjaGlsZHJlbiA9IHRyZWUuY2hpbGRyZW47XG4gIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpbnNlcnRUcmVlQmVmb3JlKG5vZGUsIGNoaWxkcmVuW2ldLCBudWxsKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHJlZS5odG1sICE9IG51bGwpIHtcbiAgICBzZXRJbm5lckhUTUwobm9kZSwgdHJlZS5odG1sKTtcbiAgfSBlbHNlIGlmICh0cmVlLnRleHQgIT0gbnVsbCkge1xuICAgIHNldFRleHRDb250ZW50KG5vZGUsIHRyZWUudGV4dCk7XG4gIH1cbn1cblxudmFyIGluc2VydFRyZWVCZWZvcmUgPSBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uIChwYXJlbnROb2RlLCB0cmVlLCByZWZlcmVuY2VOb2RlKSB7XG4gIC8vIERvY3VtZW50RnJhZ21lbnRzIGFyZW4ndCBhY3R1YWxseSBwYXJ0IG9mIHRoZSBET00gYWZ0ZXIgaW5zZXJ0aW9uIHNvXG4gIC8vIGFwcGVuZGluZyBjaGlsZHJlbiB3b24ndCB1cGRhdGUgdGhlIERPTS4gV2UgbmVlZCB0byBlbnN1cmUgdGhlIGZyYWdtZW50XG4gIC8vIGlzIHByb3Blcmx5IHBvcHVsYXRlZCBmaXJzdCwgYnJlYWtpbmcgb3V0IG9mIG91ciBsYXp5IGFwcHJvYWNoIGZvciBqdXN0XG4gIC8vIHRoaXMgbGV2ZWwuIEFsc28sIHNvbWUgPG9iamVjdD4gcGx1Z2lucyAobGlrZSBGbGFzaCBQbGF5ZXIpIHdpbGwgcmVhZFxuICAvLyA8cGFyYW0+IG5vZGVzIGltbWVkaWF0ZWx5IHVwb24gaW5zZXJ0aW9uIGludG8gdGhlIERPTSwgc28gPG9iamVjdD5cbiAgLy8gbXVzdCBhbHNvIGJlIHBvcHVsYXRlZCBwcmlvciB0byBpbnNlcnRpb24gaW50byB0aGUgRE9NLlxuICBpZiAodHJlZS5ub2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUgfHwgdHJlZS5ub2RlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSAmJiB0cmVlLm5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ29iamVjdCcgJiYgKHRyZWUubm9kZS5uYW1lc3BhY2VVUkkgPT0gbnVsbCB8fCB0cmVlLm5vZGUubmFtZXNwYWNlVVJJID09PSBET01OYW1lc3BhY2VzLmh0bWwpKSB7XG4gICAgaW5zZXJ0VHJlZUNoaWxkcmVuKHRyZWUpO1xuICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRyZWUubm9kZSwgcmVmZXJlbmNlTm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodHJlZS5ub2RlLCByZWZlcmVuY2VOb2RlKTtcbiAgICBpbnNlcnRUcmVlQ2hpbGRyZW4odHJlZSk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiByZXBsYWNlQ2hpbGRXaXRoVHJlZShvbGROb2RlLCBuZXdUcmVlKSB7XG4gIG9sZE5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3VHJlZS5ub2RlLCBvbGROb2RlKTtcbiAgaW5zZXJ0VHJlZUNoaWxkcmVuKG5ld1RyZWUpO1xufVxuXG5mdW5jdGlvbiBxdWV1ZUNoaWxkKHBhcmVudFRyZWUsIGNoaWxkVHJlZSkge1xuICBpZiAoZW5hYmxlTGF6eSkge1xuICAgIHBhcmVudFRyZWUuY2hpbGRyZW4ucHVzaChjaGlsZFRyZWUpO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudFRyZWUubm9kZS5hcHBlbmRDaGlsZChjaGlsZFRyZWUubm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcXVldWVIVE1MKHRyZWUsIGh0bWwpIHtcbiAgaWYgKGVuYWJsZUxhenkpIHtcbiAgICB0cmVlLmh0bWwgPSBodG1sO1xuICB9IGVsc2Uge1xuICAgIHNldElubmVySFRNTCh0cmVlLm5vZGUsIGh0bWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHF1ZXVlVGV4dCh0cmVlLCB0ZXh0KSB7XG4gIGlmIChlbmFibGVMYXp5KSB7XG4gICAgdHJlZS50ZXh0ID0gdGV4dDtcbiAgfSBlbHNlIHtcbiAgICBzZXRUZXh0Q29udGVudCh0cmVlLm5vZGUsIHRleHQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdGhpcy5ub2RlLm5vZGVOYW1lO1xufVxuXG5mdW5jdGlvbiBET01MYXp5VHJlZShub2RlKSB7XG4gIHJldHVybiB7XG4gICAgbm9kZTogbm9kZSxcbiAgICBjaGlsZHJlbjogW10sXG4gICAgaHRtbDogbnVsbCxcbiAgICB0ZXh0OiBudWxsLFxuICAgIHRvU3RyaW5nOiB0b1N0cmluZ1xuICB9O1xufVxuXG5ET01MYXp5VHJlZS5pbnNlcnRUcmVlQmVmb3JlID0gaW5zZXJ0VHJlZUJlZm9yZTtcbkRPTUxhenlUcmVlLnJlcGxhY2VDaGlsZFdpdGhUcmVlID0gcmVwbGFjZUNoaWxkV2l0aFRyZWU7XG5ET01MYXp5VHJlZS5xdWV1ZUNoaWxkID0gcXVldWVDaGlsZDtcbkRPTUxhenlUcmVlLnF1ZXVlSFRNTCA9IHF1ZXVlSFRNTDtcbkRPTUxhenlUcmVlLnF1ZXVlVGV4dCA9IHF1ZXVlVGV4dDtcblxubW9kdWxlLmV4cG9ydHMgPSBET01MYXp5VHJlZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvRE9NTGF6eVRyZWUuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogV0FSTklORzogRE8gTk9UIG1hbnVhbGx5IHJlcXVpcmUgdGhpcyBtb2R1bGUuXG4gKiBUaGlzIGlzIGEgcmVwbGFjZW1lbnQgZm9yIGBpbnZhcmlhbnQoLi4uKWAgdXNlZCBieSB0aGUgZXJyb3IgY29kZSBzeXN0ZW1cbiAqIGFuZCB3aWxsIF9vbmx5XyBiZSByZXF1aXJlZCBieSB0aGUgY29ycmVzcG9uZGluZyBiYWJlbCBwYXNzLlxuICogSXQgYWx3YXlzIHRocm93cy5cbiAqL1xuXG5mdW5jdGlvbiByZWFjdFByb2RJbnZhcmlhbnQoY29kZSkge1xuICB2YXIgYXJnQ291bnQgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcblxuICB2YXIgbWVzc2FnZSA9ICdNaW5pZmllZCBSZWFjdCBlcnJvciAjJyArIGNvZGUgKyAnOyB2aXNpdCAnICsgJ2h0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PScgKyBjb2RlO1xuXG4gIGZvciAodmFyIGFyZ0lkeCA9IDA7IGFyZ0lkeCA8IGFyZ0NvdW50OyBhcmdJZHgrKykge1xuICAgIG1lc3NhZ2UgKz0gJyZhcmdzW109JyArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYXJnSWR4ICsgMV0pO1xuICB9XG5cbiAgbWVzc2FnZSArPSAnIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCcgKyAnIGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLic7XG5cbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgcmVhY3RQcm9kSW52YXJpYW50J3Mgb3duIGZyYW1lXG5cbiAgdGhyb3cgZXJyb3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVhY3RQcm9kSW52YXJpYW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QvbGliL3JlYWN0UHJvZEludmFyaWFudC5qcyIsImltcG9ydCBSZWFjdCAgICAgIGZyb20gJ3JlYWN0JztcblxuY2xhc3MgVGl0bGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxoMSB7Li4udGhpcy5wcm9wc30gc3R5bGU9e3N0eWxlcy50aXRsZX0+e3RoaXMucHJvcHMuY2hpbGRyZW59PC9oMT5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgdGl0bGU6IHtcbiAgICBmb250U2l6ZTogJzIxcHgnLFxuICAgIC8vIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgIG1hcmdpblRvcDogJzQ1cHgnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRpdGxlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbXBvbmVudHMvVGl0bGUuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHJlcXVpcmUoJy4vRXZlbnRQbHVnaW5SZWdpc3RyeScpO1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luVXRpbHMnKTtcbnZhciBSZWFjdEVycm9yVXRpbHMgPSByZXF1aXJlKCcuL1JlYWN0RXJyb3JVdGlscycpO1xuXG52YXIgYWNjdW11bGF0ZUludG8gPSByZXF1aXJlKCcuL2FjY3VtdWxhdGVJbnRvJyk7XG52YXIgZm9yRWFjaEFjY3VtdWxhdGVkID0gcmVxdWlyZSgnLi9mb3JFYWNoQWNjdW11bGF0ZWQnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBJbnRlcm5hbCBzdG9yZSBmb3IgZXZlbnQgbGlzdGVuZXJzXG4gKi9cbnZhciBsaXN0ZW5lckJhbmsgPSB7fTtcblxuLyoqXG4gKiBJbnRlcm5hbCBxdWV1ZSBvZiBldmVudHMgdGhhdCBoYXZlIGFjY3VtdWxhdGVkIHRoZWlyIGRpc3BhdGNoZXMgYW5kIGFyZVxuICogd2FpdGluZyB0byBoYXZlIHRoZWlyIGRpc3BhdGNoZXMgZXhlY3V0ZWQuXG4gKi9cbnZhciBldmVudFF1ZXVlID0gbnVsbDtcblxuLyoqXG4gKiBEaXNwYXRjaGVzIGFuIGV2ZW50IGFuZCByZWxlYXNlcyBpdCBiYWNrIGludG8gdGhlIHBvb2wsIHVubGVzcyBwZXJzaXN0ZW50LlxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gZXZlbnQgU3ludGhldGljIGV2ZW50IHRvIGJlIGRpc3BhdGNoZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHNpbXVsYXRlZCBJZiB0aGUgZXZlbnQgaXMgc2ltdWxhdGVkIChjaGFuZ2VzIGV4biBiZWhhdmlvcilcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UgPSBmdW5jdGlvbiAoZXZlbnQsIHNpbXVsYXRlZCkge1xuICBpZiAoZXZlbnQpIHtcbiAgICBFdmVudFBsdWdpblV0aWxzLmV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcihldmVudCwgc2ltdWxhdGVkKTtcblxuICAgIGlmICghZXZlbnQuaXNQZXJzaXN0ZW50KCkpIHtcbiAgICAgIGV2ZW50LmNvbnN0cnVjdG9yLnJlbGVhc2UoZXZlbnQpO1xuICAgIH1cbiAgfVxufTtcbnZhciBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VTaW11bGF0ZWQgPSBmdW5jdGlvbiAoZSkge1xuICByZXR1cm4gZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlKGUsIHRydWUpO1xufTtcbnZhciBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VUb3BMZXZlbCA9IGZ1bmN0aW9uIChlKSB7XG4gIHJldHVybiBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UoZSwgZmFsc2UpO1xufTtcblxudmFyIGdldERpY3Rpb25hcnlLZXkgPSBmdW5jdGlvbiAoaW5zdCkge1xuICAvLyBQcmV2ZW50cyBWOCBwZXJmb3JtYW5jZSBpc3N1ZTpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvNzIzMlxuICByZXR1cm4gJy4nICsgaW5zdC5fcm9vdE5vZGVJRDtcbn07XG5cbmZ1bmN0aW9uIGlzSW50ZXJhY3RpdmUodGFnKSB7XG4gIHJldHVybiB0YWcgPT09ICdidXR0b24nIHx8IHRhZyA9PT0gJ2lucHV0JyB8fCB0YWcgPT09ICdzZWxlY3QnIHx8IHRhZyA9PT0gJ3RleHRhcmVhJztcbn1cblxuZnVuY3Rpb24gc2hvdWxkUHJldmVudE1vdXNlRXZlbnQobmFtZSwgdHlwZSwgcHJvcHMpIHtcbiAgc3dpdGNoIChuYW1lKSB7XG4gICAgY2FzZSAnb25DbGljayc6XG4gICAgY2FzZSAnb25DbGlja0NhcHR1cmUnOlxuICAgIGNhc2UgJ29uRG91YmxlQ2xpY2snOlxuICAgIGNhc2UgJ29uRG91YmxlQ2xpY2tDYXB0dXJlJzpcbiAgICBjYXNlICdvbk1vdXNlRG93bic6XG4gICAgY2FzZSAnb25Nb3VzZURvd25DYXB0dXJlJzpcbiAgICBjYXNlICdvbk1vdXNlTW92ZSc6XG4gICAgY2FzZSAnb25Nb3VzZU1vdmVDYXB0dXJlJzpcbiAgICBjYXNlICdvbk1vdXNlVXAnOlxuICAgIGNhc2UgJ29uTW91c2VVcENhcHR1cmUnOlxuICAgICAgcmV0dXJuICEhKHByb3BzLmRpc2FibGVkICYmIGlzSW50ZXJhY3RpdmUodHlwZSkpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGlzIGEgdW5pZmllZCBpbnRlcmZhY2UgZm9yIGV2ZW50IHBsdWdpbnMgdG8gYmUgaW5zdGFsbGVkIGFuZCBjb25maWd1cmVkLlxuICpcbiAqIEV2ZW50IHBsdWdpbnMgY2FuIGltcGxlbWVudCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICBgZXh0cmFjdEV2ZW50c2Age2Z1bmN0aW9uKHN0cmluZywgRE9NRXZlbnRUYXJnZXQsIHN0cmluZywgb2JqZWN0KTogKn1cbiAqICAgICBSZXF1aXJlZC4gV2hlbiBhIHRvcC1sZXZlbCBldmVudCBpcyBmaXJlZCwgdGhpcyBtZXRob2QgaXMgZXhwZWN0ZWQgdG9cbiAqICAgICBleHRyYWN0IHN5bnRoZXRpYyBldmVudHMgdGhhdCB3aWxsIGluIHR1cm4gYmUgcXVldWVkIGFuZCBkaXNwYXRjaGVkLlxuICpcbiAqICAgYGV2ZW50VHlwZXNgIHtvYmplY3R9XG4gKiAgICAgT3B0aW9uYWwsIHBsdWdpbnMgdGhhdCBmaXJlIGV2ZW50cyBtdXN0IHB1Ymxpc2ggYSBtYXBwaW5nIG9mIHJlZ2lzdHJhdGlvblxuICogICAgIG5hbWVzIHRoYXQgYXJlIHVzZWQgdG8gcmVnaXN0ZXIgbGlzdGVuZXJzLiBWYWx1ZXMgb2YgdGhpcyBtYXBwaW5nIG11c3RcbiAqICAgICBiZSBvYmplY3RzIHRoYXQgY29udGFpbiBgcmVnaXN0cmF0aW9uTmFtZWAgb3IgYHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzYC5cbiAqXG4gKiAgIGBleGVjdXRlRGlzcGF0Y2hgIHtmdW5jdGlvbihvYmplY3QsIGZ1bmN0aW9uLCBzdHJpbmcpfVxuICogICAgIE9wdGlvbmFsLCBhbGxvd3MgcGx1Z2lucyB0byBvdmVycmlkZSBob3cgYW4gZXZlbnQgZ2V0cyBkaXNwYXRjaGVkLiBCeVxuICogICAgIGRlZmF1bHQsIHRoZSBsaXN0ZW5lciBpcyBzaW1wbHkgaW52b2tlZC5cbiAqXG4gKiBFYWNoIHBsdWdpbiB0aGF0IGlzIGluamVjdGVkIGludG8gYEV2ZW50c1BsdWdpbkh1YmAgaXMgaW1tZWRpYXRlbHkgb3BlcmFibGUuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgRXZlbnRQbHVnaW5IdWIgPSB7XG4gIC8qKlxuICAgKiBNZXRob2RzIGZvciBpbmplY3RpbmcgZGVwZW5kZW5jaWVzLlxuICAgKi9cbiAgaW5qZWN0aW9uOiB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHthcnJheX0gSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGluamVjdEV2ZW50UGx1Z2luT3JkZXI6IEV2ZW50UGx1Z2luUmVnaXN0cnkuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcixcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpbmplY3RlZE5hbWVzVG9QbHVnaW5zIE1hcCBmcm9tIG5hbWVzIHRvIHBsdWdpbiBtb2R1bGVzLlxuICAgICAqL1xuICAgIGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTogRXZlbnRQbHVnaW5SZWdpc3RyeS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWVcbiAgfSxcblxuICAvKipcbiAgICogU3RvcmVzIGBsaXN0ZW5lcmAgYXQgYGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXVtrZXldYC4gSXMgaWRlbXBvdGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGluc3QgVGhlIGluc3RhbmNlLCB3aGljaCBpcyB0aGUgc291cmNlIG9mIGV2ZW50cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciBUaGUgY2FsbGJhY2sgdG8gc3RvcmUuXG4gICAqL1xuICBwdXRMaXN0ZW5lcjogZnVuY3Rpb24gKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyKSB7XG4gICAgISh0eXBlb2YgbGlzdGVuZXIgPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkICVzIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24sIGluc3RlYWQgZ290IHR5cGUgJXMnLCByZWdpc3RyYXRpb25OYW1lLCB0eXBlb2YgbGlzdGVuZXIpIDogX3Byb2RJbnZhcmlhbnQoJzk0JywgcmVnaXN0cmF0aW9uTmFtZSwgdHlwZW9mIGxpc3RlbmVyKSA6IHZvaWQgMDtcblxuICAgIHZhciBrZXkgPSBnZXREaWN0aW9uYXJ5S2V5KGluc3QpO1xuICAgIHZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSA9IGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXSB8fCAobGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdID0ge30pO1xuICAgIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lW2tleV0gPSBsaXN0ZW5lcjtcblxuICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgIGlmIChQbHVnaW5Nb2R1bGUgJiYgUGx1Z2luTW9kdWxlLmRpZFB1dExpc3RlbmVyKSB7XG4gICAgICBQbHVnaW5Nb2R1bGUuZGlkUHV0TGlzdGVuZXIoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGluc3QgVGhlIGluc3RhbmNlLCB3aGljaCBpcyB0aGUgc291cmNlIG9mIGV2ZW50cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKiBAcmV0dXJuIHs/ZnVuY3Rpb259IFRoZSBzdG9yZWQgY2FsbGJhY2suXG4gICAqL1xuICBnZXRMaXN0ZW5lcjogZnVuY3Rpb24gKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICAvLyBUT0RPOiBzaG91bGRQcmV2ZW50TW91c2VFdmVudCBpcyBET00tc3BlY2lmaWMgYW5kIGRlZmluaXRlbHkgc2hvdWxkIG5vdFxuICAgIC8vIGxpdmUgaGVyZTsgbmVlZHMgdG8gYmUgbW92ZWQgdG8gYSBiZXR0ZXIgcGxhY2Ugc29vblxuICAgIHZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSA9IGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICBpZiAoc2hvdWxkUHJldmVudE1vdXNlRXZlbnQocmVnaXN0cmF0aW9uTmFtZSwgaW5zdC5fY3VycmVudEVsZW1lbnQudHlwZSwgaW5zdC5fY3VycmVudEVsZW1lbnQucHJvcHMpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGtleSA9IGdldERpY3Rpb25hcnlLZXkoaW5zdCk7XG4gICAgcmV0dXJuIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lICYmIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lW2tleV07XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYSBsaXN0ZW5lciBmcm9tIHRoZSByZWdpc3RyYXRpb24gYmFuay5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGluc3QgVGhlIGluc3RhbmNlLCB3aGljaCBpcyB0aGUgc291cmNlIG9mIGV2ZW50cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKi9cbiAgZGVsZXRlTGlzdGVuZXI6IGZ1bmN0aW9uIChpbnN0LCByZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgdmFyIFBsdWdpbk1vZHVsZSA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV07XG4gICAgaWYgKFBsdWdpbk1vZHVsZSAmJiBQbHVnaW5Nb2R1bGUud2lsbERlbGV0ZUxpc3RlbmVyKSB7XG4gICAgICBQbHVnaW5Nb2R1bGUud2lsbERlbGV0ZUxpc3RlbmVyKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpO1xuICAgIH1cblxuICAgIHZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSA9IGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICAvLyBUT0RPOiBUaGlzIHNob3VsZCBuZXZlciBiZSBudWxsIC0tIHdoZW4gaXMgaXQ/XG4gICAgaWYgKGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgICB2YXIga2V5ID0gZ2V0RGljdGlvbmFyeUtleShpbnN0KTtcbiAgICAgIGRlbGV0ZSBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtrZXldO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgbGlzdGVuZXJzIGZvciB0aGUgRE9NIGVsZW1lbnQgd2l0aCB0aGUgc3VwcGxpZWQgSUQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbnN0IFRoZSBpbnN0YW5jZSwgd2hpY2ggaXMgdGhlIHNvdXJjZSBvZiBldmVudHMuXG4gICAqL1xuICBkZWxldGVBbGxMaXN0ZW5lcnM6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgdmFyIGtleSA9IGdldERpY3Rpb25hcnlLZXkoaW5zdCk7XG4gICAgZm9yICh2YXIgcmVnaXN0cmF0aW9uTmFtZSBpbiBsaXN0ZW5lckJhbmspIHtcbiAgICAgIGlmICghbGlzdGVuZXJCYW5rLmhhc093blByb3BlcnR5KHJlZ2lzdHJhdGlvbk5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXVtrZXldKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgUGx1Z2luTW9kdWxlID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICAgIGlmIChQbHVnaW5Nb2R1bGUgJiYgUGx1Z2luTW9kdWxlLndpbGxEZWxldGVMaXN0ZW5lcikge1xuICAgICAgICBQbHVnaW5Nb2R1bGUud2lsbERlbGV0ZUxpc3RlbmVyKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdW2tleV07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgcmVnaXN0ZXJlZCBwbHVnaW5zIGFuIG9wcG9ydHVuaXR5IHRvIGV4dHJhY3QgZXZlbnRzIGZyb20gdG9wLWxldmVsXG4gICAqIG5hdGl2ZSBicm93c2VyIGV2ZW50cy5cbiAgICpcbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIGV2ZW50cztcbiAgICB2YXIgcGx1Z2lucyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2lucztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIE5vdCBldmVyeSBwbHVnaW4gaW4gdGhlIG9yZGVyaW5nIG1heSBiZSBsb2FkZWQgYXQgcnVudGltZS5cbiAgICAgIHZhciBwb3NzaWJsZVBsdWdpbiA9IHBsdWdpbnNbaV07XG4gICAgICBpZiAocG9zc2libGVQbHVnaW4pIHtcbiAgICAgICAgdmFyIGV4dHJhY3RlZEV2ZW50cyA9IHBvc3NpYmxlUGx1Z2luLmV4dHJhY3RFdmVudHModG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgICBpZiAoZXh0cmFjdGVkRXZlbnRzKSB7XG4gICAgICAgICAgZXZlbnRzID0gYWNjdW11bGF0ZUludG8oZXZlbnRzLCBleHRyYWN0ZWRFdmVudHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBldmVudHM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEVucXVldWVzIGEgc3ludGhldGljIGV2ZW50IHRoYXQgc2hvdWxkIGJlIGRpc3BhdGNoZWQgd2hlblxuICAgKiBgcHJvY2Vzc0V2ZW50UXVldWVgIGlzIGludm9rZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZXZlbnRzIEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVFdmVudHM6IGZ1bmN0aW9uIChldmVudHMpIHtcbiAgICBpZiAoZXZlbnRzKSB7XG4gICAgICBldmVudFF1ZXVlID0gYWNjdW11bGF0ZUludG8oZXZlbnRRdWV1ZSwgZXZlbnRzKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYWxsIHN5bnRoZXRpYyBldmVudHMgb24gdGhlIGV2ZW50IHF1ZXVlLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHByb2Nlc3NFdmVudFF1ZXVlOiBmdW5jdGlvbiAoc2ltdWxhdGVkKSB7XG4gICAgLy8gU2V0IGBldmVudFF1ZXVlYCB0byBudWxsIGJlZm9yZSBwcm9jZXNzaW5nIGl0IHNvIHRoYXQgd2UgY2FuIHRlbGwgaWYgbW9yZVxuICAgIC8vIGV2ZW50cyBnZXQgZW5xdWV1ZWQgd2hpbGUgcHJvY2Vzc2luZy5cbiAgICB2YXIgcHJvY2Vzc2luZ0V2ZW50UXVldWUgPSBldmVudFF1ZXVlO1xuICAgIGV2ZW50UXVldWUgPSBudWxsO1xuICAgIGlmIChzaW11bGF0ZWQpIHtcbiAgICAgIGZvckVhY2hBY2N1bXVsYXRlZChwcm9jZXNzaW5nRXZlbnRRdWV1ZSwgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlU2ltdWxhdGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yRWFjaEFjY3VtdWxhdGVkKHByb2Nlc3NpbmdFdmVudFF1ZXVlLCBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VUb3BMZXZlbCk7XG4gICAgfVxuICAgICEhZXZlbnRRdWV1ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdwcm9jZXNzRXZlbnRRdWV1ZSgpOiBBZGRpdGlvbmFsIGV2ZW50cyB3ZXJlIGVucXVldWVkIHdoaWxlIHByb2Nlc3NpbmcgYW4gZXZlbnQgcXVldWUuIFN1cHBvcnQgZm9yIHRoaXMgaGFzIG5vdCB5ZXQgYmVlbiBpbXBsZW1lbnRlZC4nKSA6IF9wcm9kSW52YXJpYW50KCc5NScpIDogdm9pZCAwO1xuICAgIC8vIFRoaXMgd291bGQgYmUgYSBnb29kIHRpbWUgdG8gcmV0aHJvdyBpZiBhbnkgb2YgdGhlIGV2ZW50IGhhbmRsZXJzIHRocmV3LlxuICAgIFJlYWN0RXJyb3JVdGlscy5yZXRocm93Q2F1Z2h0RXJyb3IoKTtcbiAgfSxcblxuICAvKipcbiAgICogVGhlc2UgYXJlIG5lZWRlZCBmb3IgdGVzdHMgb25seS4gRG8gbm90IHVzZSFcbiAgICovXG4gIF9fcHVyZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICBsaXN0ZW5lckJhbmsgPSB7fTtcbiAgfSxcblxuICBfX2dldExpc3RlbmVyQmFuazogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBsaXN0ZW5lckJhbms7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5IdWI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL0V2ZW50UGx1Z2luSHViLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luSHViJyk7XG52YXIgRXZlbnRQbHVnaW5VdGlscyA9IHJlcXVpcmUoJy4vRXZlbnRQbHVnaW5VdGlscycpO1xuXG52YXIgYWNjdW11bGF0ZUludG8gPSByZXF1aXJlKCcuL2FjY3VtdWxhdGVJbnRvJyk7XG52YXIgZm9yRWFjaEFjY3VtdWxhdGVkID0gcmVxdWlyZSgnLi9mb3JFYWNoQWNjdW11bGF0ZWQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgZ2V0TGlzdGVuZXIgPSBFdmVudFBsdWdpbkh1Yi5nZXRMaXN0ZW5lcjtcblxuLyoqXG4gKiBTb21lIGV2ZW50IHR5cGVzIGhhdmUgYSBub3Rpb24gb2YgZGlmZmVyZW50IHJlZ2lzdHJhdGlvbiBuYW1lcyBmb3IgZGlmZmVyZW50XG4gKiBcInBoYXNlc1wiIG9mIHByb3BhZ2F0aW9uLiBUaGlzIGZpbmRzIGxpc3RlbmVycyBieSBhIGdpdmVuIHBoYXNlLlxuICovXG5mdW5jdGlvbiBsaXN0ZW5lckF0UGhhc2UoaW5zdCwgZXZlbnQsIHByb3BhZ2F0aW9uUGhhc2UpIHtcbiAgdmFyIHJlZ2lzdHJhdGlvbk5hbWUgPSBldmVudC5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1twcm9wYWdhdGlvblBoYXNlXTtcbiAgcmV0dXJuIGdldExpc3RlbmVyKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpO1xufVxuXG4vKipcbiAqIFRhZ3MgYSBgU3ludGhldGljRXZlbnRgIHdpdGggZGlzcGF0Y2hlZCBsaXN0ZW5lcnMuIENyZWF0aW5nIHRoaXMgZnVuY3Rpb25cbiAqIGhlcmUsIGFsbG93cyB1cyB0byBub3QgaGF2ZSB0byBiaW5kIG9yIGNyZWF0ZSBmdW5jdGlvbnMgZm9yIGVhY2ggZXZlbnQuXG4gKiBNdXRhdGluZyB0aGUgZXZlbnQncyBtZW1iZXJzIGFsbG93cyB1cyB0byBub3QgaGF2ZSB0byBjcmVhdGUgYSB3cmFwcGluZ1xuICogXCJkaXNwYXRjaFwiIG9iamVjdCB0aGF0IHBhaXJzIHRoZSBldmVudCB3aXRoIHRoZSBsaXN0ZW5lci5cbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcyhpbnN0LCBwaGFzZSwgZXZlbnQpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhpbnN0LCAnRGlzcGF0Y2hpbmcgaW5zdCBtdXN0IG5vdCBiZSBudWxsJykgOiB2b2lkIDA7XG4gIH1cbiAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJBdFBoYXNlKGluc3QsIGV2ZW50LCBwaGFzZSk7XG4gIGlmIChsaXN0ZW5lcikge1xuICAgIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycywgbGlzdGVuZXIpO1xuICAgIGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcywgaW5zdCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRpc3BhdGNoZXMgKG11c3QgYmUgZW50aXJlbHkgY29sbGVjdGVkIGJlZm9yZSBkaXNwYXRjaGluZyAtIHNlZSB1bml0XG4gKiB0ZXN0cykuIExhemlseSBhbGxvY2F0ZSB0aGUgYXJyYXkgdG8gY29uc2VydmUgbWVtb3J5LiAgV2UgbXVzdCBsb29wIHRocm91Z2hcbiAqIGVhY2ggZXZlbnQgYW5kIHBlcmZvcm0gdGhlIHRyYXZlcnNhbCBmb3IgZWFjaCBvbmUuIFdlIGNhbm5vdCBwZXJmb3JtIGFcbiAqIHNpbmdsZSB0cmF2ZXJzYWwgZm9yIHRoZSBlbnRpcmUgY29sbGVjdGlvbiBvZiBldmVudHMgYmVjYXVzZSBlYWNoIGV2ZW50IG1heVxuICogaGF2ZSBhIGRpZmZlcmVudCB0YXJnZXQuXG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGUoZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgRXZlbnRQbHVnaW5VdGlscy50cmF2ZXJzZVR3b1BoYXNlKGV2ZW50Ll90YXJnZXRJbnN0LCBhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzLCBldmVudCk7XG4gIH1cbn1cblxuLyoqXG4gKiBTYW1lIGFzIGBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlYCwgYnV0IHNraXBzIG92ZXIgdGhlIHRhcmdldElELlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlU2tpcFRhcmdldChldmVudCkge1xuICBpZiAoZXZlbnQgJiYgZXZlbnQuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICB2YXIgdGFyZ2V0SW5zdCA9IGV2ZW50Ll90YXJnZXRJbnN0O1xuICAgIHZhciBwYXJlbnRJbnN0ID0gdGFyZ2V0SW5zdCA/IEV2ZW50UGx1Z2luVXRpbHMuZ2V0UGFyZW50SW5zdGFuY2UodGFyZ2V0SW5zdCkgOiBudWxsO1xuICAgIEV2ZW50UGx1Z2luVXRpbHMudHJhdmVyc2VUd29QaGFzZShwYXJlbnRJbnN0LCBhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzLCBldmVudCk7XG4gIH1cbn1cblxuLyoqXG4gKiBBY2N1bXVsYXRlcyB3aXRob3V0IHJlZ2FyZCB0byBkaXJlY3Rpb24sIGRvZXMgbm90IGxvb2sgZm9yIHBoYXNlZFxuICogcmVnaXN0cmF0aW9uIG5hbWVzLiBTYW1lIGFzIGBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZWAgYnV0IHdpdGhvdXRcbiAqIHJlcXVpcmluZyB0aGF0IHRoZSBgZGlzcGF0Y2hNYXJrZXJgIGJlIHRoZSBzYW1lIGFzIHRoZSBkaXNwYXRjaGVkIElELlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlzcGF0Y2hlcyhpbnN0LCBpZ25vcmVkRGlyZWN0aW9uLCBldmVudCkge1xuICBpZiAoZXZlbnQgJiYgZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHZhciByZWdpc3RyYXRpb25OYW1lID0gZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZTtcbiAgICB2YXIgbGlzdGVuZXIgPSBnZXRMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lKTtcbiAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycywgbGlzdGVuZXIpO1xuICAgICAgZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzLCBpbnN0KTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2N1bXVsYXRlcyBkaXNwYXRjaGVzIG9uIGFuIGBTeW50aGV0aWNFdmVudGAsIGJ1dCBvbmx5IGZvciB0aGVcbiAqIGBkaXNwYXRjaE1hcmtlcmAuXG4gKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudFxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZShldmVudCkge1xuICBpZiAoZXZlbnQgJiYgZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIGFjY3VtdWxhdGVEaXNwYXRjaGVzKGV2ZW50Ll90YXJnZXRJbnN0LCBudWxsLCBldmVudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudHMpIHtcbiAgZm9yRWFjaEFjY3VtdWxhdGVkKGV2ZW50cywgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZSk7XG59XG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0KGV2ZW50cykge1xuICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlU2tpcFRhcmdldCk7XG59XG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyhsZWF2ZSwgZW50ZXIsIGZyb20sIHRvKSB7XG4gIEV2ZW50UGx1Z2luVXRpbHMudHJhdmVyc2VFbnRlckxlYXZlKGZyb20sIHRvLCBhY2N1bXVsYXRlRGlzcGF0Y2hlcywgbGVhdmUsIGVudGVyKTtcbn1cblxuZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMoZXZlbnRzKSB7XG4gIGZvckVhY2hBY2N1bXVsYXRlZChldmVudHMsIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlKTtcbn1cblxuLyoqXG4gKiBBIHNtYWxsIHNldCBvZiBwcm9wYWdhdGlvbiBwYXR0ZXJucywgZWFjaCBvZiB3aGljaCB3aWxsIGFjY2VwdCBhIHNtYWxsIGFtb3VudFxuICogb2YgaW5mb3JtYXRpb24sIGFuZCBnZW5lcmF0ZSBhIHNldCBvZiBcImRpc3BhdGNoIHJlYWR5IGV2ZW50IG9iamVjdHNcIiAtIHdoaWNoXG4gKiBhcmUgc2V0cyBvZiBldmVudHMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBhbm5vdGF0ZWQgd2l0aCBhIHNldCBvZiBkaXNwYXRjaGVkXG4gKiBsaXN0ZW5lciBmdW5jdGlvbnMvaWRzLiBUaGUgQVBJIGlzIGRlc2lnbmVkIHRoaXMgd2F5IHRvIGRpc2NvdXJhZ2UgdGhlc2VcbiAqIHByb3BhZ2F0aW9uIHN0cmF0ZWdpZXMgZnJvbSBhY3R1YWxseSBleGVjdXRpbmcgdGhlIGRpc3BhdGNoZXMsIHNpbmNlIHdlXG4gKiBhbHdheXMgd2FudCB0byBjb2xsZWN0IHRoZSBlbnRpcmUgc2V0IG9mIGRpc3BhdGNoZXMgYmVmb3JlIGV4ZWN1dGluZyBldmVudCBhXG4gKiBzaW5nbGUgb25lLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBFdmVudFByb3BhZ2F0b3JzXG4gKi9cbnZhciBFdmVudFByb3BhZ2F0b3JzID0ge1xuICBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzOiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzLFxuICBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldDogYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQsXG4gIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOiBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyxcbiAgYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOiBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQcm9wYWdhdG9ycztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvRXZlbnRQcm9wYWdhdG9ycy5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBgUmVhY3RJbnN0YW5jZU1hcGAgbWFpbnRhaW5zIGEgbWFwcGluZyBmcm9tIGEgcHVibGljIGZhY2luZyBzdGF0ZWZ1bFxuICogaW5zdGFuY2UgKGtleSkgYW5kIHRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiAodmFsdWUpLiBUaGlzIGFsbG93cyBwdWJsaWNcbiAqIG1ldGhvZHMgdG8gYWNjZXB0IHRoZSB1c2VyIGZhY2luZyBpbnN0YW5jZSBhcyBhbiBhcmd1bWVudCBhbmQgbWFwIHRoZW0gYmFja1xuICogdG8gaW50ZXJuYWwgbWV0aG9kcy5cbiAqL1xuXG4vLyBUT0RPOiBSZXBsYWNlIHRoaXMgd2l0aCBFUzY6IHZhciBSZWFjdEluc3RhbmNlTWFwID0gbmV3IE1hcCgpO1xuXG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHtcbiAgLyoqXG4gICAqIFRoaXMgQVBJIHNob3VsZCBiZSBjYWxsZWQgYGRlbGV0ZWAgYnV0IHdlJ2QgaGF2ZSB0byBtYWtlIHN1cmUgdG8gYWx3YXlzXG4gICAqIHRyYW5zZm9ybSB0aGVzZSB0byBzdHJpbmdzIGZvciBJRSBzdXBwb3J0LiBXaGVuIHRoaXMgdHJhbnNmb3JtIGlzIGZ1bGx5XG4gICAqIHN1cHBvcnRlZCB3ZSBjYW4gcmVuYW1lIGl0LlxuICAgKi9cbiAgcmVtb3ZlOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5Ll9yZWFjdEludGVybmFsSW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIH0sXG5cbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGtleS5fcmVhY3RJbnRlcm5hbEluc3RhbmNlO1xuICB9LFxuXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSAhPT0gdW5kZWZpbmVkO1xuICB9LFxuXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSA9IHZhbHVlO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0SW5zdGFuY2VNYXA7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0SW5zdGFuY2VNYXAuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRXZlbnQnKTtcblxudmFyIGdldEV2ZW50VGFyZ2V0ID0gcmVxdWlyZSgnLi9nZXRFdmVudFRhcmdldCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgVUlFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBVSUV2ZW50SW50ZXJmYWNlID0ge1xuICB2aWV3OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudmlldykge1xuICAgICAgcmV0dXJuIGV2ZW50LnZpZXc7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGV2ZW50KTtcbiAgICBpZiAodGFyZ2V0LndpbmRvdyA9PT0gdGFyZ2V0KSB7XG4gICAgICAvLyB0YXJnZXQgaXMgYSB3aW5kb3cgb2JqZWN0XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIHZhciBkb2MgPSB0YXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAvLyBUT0RPOiBGaWd1cmUgb3V0IHdoeSBgb3duZXJEb2N1bWVudGAgaXMgc29tZXRpbWVzIHVuZGVmaW5lZCBpbiBJRTguXG4gICAgaWYgKGRvYykge1xuICAgICAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gd2luZG93O1xuICAgIH1cbiAgfSxcbiAgZGV0YWlsOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQuZGV0YWlsIHx8IDA7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY0V2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNVSUV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHJldHVybiBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY1VJRXZlbnQsIFVJRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY1VJRXZlbnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY1VJRXZlbnQuanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFNjcm9sbGNob3IgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU2Nyb2xsY2hvciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2Nyb2xsY2hvcihwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTY3JvbGxjaG9yKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTY3JvbGxjaG9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2Nyb2xsY2hvcikpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5fYmVmb3JlQW5pbWF0ZShldmVudCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgYW5pbWF0ZVNjcm9sbChfdGhpcy5fdG8sIF90aGlzLl9hbmltYXRlKTtcbiAgICAgIF90aGlzLl9hZnRlckFuaW1hdGUoZXZlbnQpO1xuICAgIH07XG5cbiAgICBfdGhpcy5fdG8gPSBwcm9wcy50byAmJiBwcm9wcy50by5yZXBsYWNlKC9eIy8sICcnKSB8fCAnJztcblxuICAgIHZhciBfcmVmID0gcHJvcHMuYW5pbWF0ZSB8fCB7fSxcbiAgICAgICAgX3JlZiRvZmZzZXQgPSBfcmVmLm9mZnNldCxcbiAgICAgICAgb2Zmc2V0ID0gX3JlZiRvZmZzZXQgPT09IHVuZGVmaW5lZCA/IDAgOiBfcmVmJG9mZnNldCxcbiAgICAgICAgX3JlZiRkdXJhdGlvbiA9IF9yZWYuZHVyYXRpb24sXG4gICAgICAgIGR1cmF0aW9uID0gX3JlZiRkdXJhdGlvbiA9PT0gdW5kZWZpbmVkID8gNDAwIDogX3JlZiRkdXJhdGlvbixcbiAgICAgICAgX3JlZiRlYXNpbmcgPSBfcmVmLmVhc2luZyxcbiAgICAgICAgZWFzaW5nID0gX3JlZiRlYXNpbmcgPT09IHVuZGVmaW5lZCA/IGVhc2VPdXRRdWFkIDogX3JlZiRlYXNpbmc7XG5cbiAgICBfdGhpcy5fYW5pbWF0ZSA9IHsgb2Zmc2V0OiBvZmZzZXQsIGR1cmF0aW9uOiBkdXJhdGlvbiwgZWFzaW5nOiBlYXNpbmcgfTtcbiAgICBfdGhpcy5fYmVmb3JlQW5pbWF0ZSA9IHByb3BzLmJlZm9yZUFuaW1hdGUgfHwgZnVuY3Rpb24gKCkge307XG4gICAgX3RoaXMuX2FmdGVyQW5pbWF0ZSA9IHByb3BzLmFmdGVyQW5pbWF0ZSB8fCBmdW5jdGlvbiAoKSB7fTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2Nyb2xsY2hvciwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICB0byA9IF9wcm9wcy50byxcbiAgICAgICAgICBhbmltYXRlID0gX3Byb3BzLmFuaW1hdGUsXG4gICAgICAgICAgYmVmb3JlQW5pbWF0ZSA9IF9wcm9wcy5iZWZvcmVBbmltYXRlLFxuICAgICAgICAgIGFmdGVyQW5pbWF0ZSA9IF9wcm9wcy5hZnRlckFuaW1hdGUsXG4gICAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3RvJywgJ2FuaW1hdGUnLCAnYmVmb3JlQW5pbWF0ZScsICdhZnRlckFuaW1hdGUnXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2EnLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgaHJlZjogJyMnICsgdGhpcy5fdG8sIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2sgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTY3JvbGxjaG9yO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuU2Nyb2xsY2hvci5wcm9wVHlwZXMgPSB7XG4gIHRvOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkLFxuICBhbmltYXRlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgICBvZmZzZXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIGR1cmF0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBlYXNpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY1xuICB9KSxcbiAgYmVmb3JlQW5pbWF0ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBhZnRlckFuaW1hdGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IFNjcm9sbGNob3I7XG5cblxuZnVuY3Rpb24gYW5pbWF0ZVNjcm9sbChpZCwgYW5pbWF0ZSkge1xuICB2YXIgZWxlbWVudCA9IGlkID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIDogZG9jdW1lbnQuYm9keTtcbiAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShlbGVtZW50LCAnQ2Fubm90IGZpbmQgZWxlbWVudDogIycgKyBpZCk7XG4gIHNjcm9sbFRvKGVsZW1lbnQsIGFuaW1hdGUpO1xufVxuXG5mdW5jdGlvbiBzY3JvbGxUbyhlbGVtZW50LCBfcmVmMikge1xuICB2YXIgb2Zmc2V0ID0gX3JlZjIub2Zmc2V0LFxuICAgICAgZHVyYXRpb24gPSBfcmVmMi5kdXJhdGlvbixcbiAgICAgIGVhc2luZyA9IF9yZWYyLmVhc2luZztcblxuICB2YXIgc3RhcnQgPSAoMCwgX3V0aWxzLmdldFNjcm9sbFRvcCkoKTtcbiAgdmFyIHRvID0gKDAsIF91dGlscy5nZXRPZmZzZXRUb3ApKGVsZW1lbnQpICsgb2Zmc2V0O1xuICB2YXIgY2hhbmdlID0gdG8gLSBzdGFydDtcbiAgdmFyIGluY3JlbWVudCA9IDIwO1xuXG4gIGZ1bmN0aW9uIGFuaW1hdGUoZWxhcHNlZFRpbWUpIHtcbiAgICB2YXIgZWxhcHNlZCA9IGVsYXBzZWRUaW1lICsgaW5jcmVtZW50O1xuICAgIHZhciBwb3NpdGlvbiA9IGVhc2luZyhudWxsLCBlbGFwc2VkLCBzdGFydCwgY2hhbmdlLCBkdXJhdGlvbik7XG4gICAgKDAsIF91dGlscy5zZXRTY3JvbGxUb3ApKHBvc2l0aW9uKTtcbiAgICBpZiAoZWxhcHNlZCA8IGR1cmF0aW9uKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYW5pbWF0ZShlbGFwc2VkKTtcbiAgICAgIH0sIGluY3JlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgYW5pbWF0ZSgwKTtcbn1cblxuLy8gRGVmYXVsdCBlYXNpbmcgZnVuY3Rpb25cbi8vIGpRdWVyeSBlYXNpbmcgJ3N3aW5nJ1xuZnVuY3Rpb24gZWFzZU91dFF1YWQoeCwgdCwgYiwgYywgZCkge1xuICByZXR1cm4gLWMgKiAodCAvPSBkKSAqICh0IC0gMikgKyBiO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtc2Nyb2xsY2hvci9saWIvc2Nyb2xsY2hvci5qcyIsImltcG9ydCBSZWFjdCAgICAgIGZyb20gJ3JlYWN0JztcbmltcG9ydCBTY3JvbGxjaG9yIGZyb20gJ3JlYWN0LXNjcm9sbGNob3InO1xuXG5jbGFzcyBCdXlCdXR0b24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2xpbmt9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gbGluayA/IChcbiAgICAgICAgPGEgc3R5bGU9e3N0eWxlcy5saW5rfSBocmVmPXtsaW5rfT5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuYm94fT5cbiAgICAgICAgICAgIEJ1eSBOb3dcbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9hPlxuICAgICAgKSA6IChcbiAgICAgICAgPFNjcm9sbGNob3Igc3R5bGU9e3N0eWxlcy5saW5rfSB0bz1cIiNub3RpZnlcIj5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuYm94fT5cbiAgICAgICAgICAgIFNpZ24gVXBcbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9TY3JvbGxjaG9yPlxuICAgICAgKVxuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgYm94OiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgIGJvcmRlclJhZGl1czogJzVweCcsXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICB3aWR0aDogJzEyMHB4JyxcbiAgICBtYXJnaW46ICdhdXRvJyxcbiAgICBoZWlnaHQ6ICczNHB4JyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInXG4gIH0sXG4gIGxpbms6IHtcbiAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gICAgZm9udFNpemU6IDE0LFxuICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICBsZXR0ZXJTcGFjaW5nOiAnMS43NXB4J1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBCdXlCdXR0b247XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvY29tcG9uZW50cy9CdXlCdXR0b24uanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbi8vIHJldHVybnMgYSBzdHlsZSBvYmplY3Qgd2l0aCBhIHNpbmdsZSBjb25jYXRlZCBwcmVmaXhlZCB2YWx1ZSBzdHJpbmdcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHByb3BlcnR5LCB2YWx1ZSkge1xuICB2YXIgcmVwbGFjZXIgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAocHJlZml4LCB2YWx1ZSkge1xuICAgIHJldHVybiBwcmVmaXggKyB2YWx1ZTtcbiAgfSA6IGFyZ3VtZW50c1syXTtcbiAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgcHJvcGVydHksIFsnLXdlYmtpdC0nLCAnLW1vei0nLCAnJ10ubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICByZXR1cm4gcmVwbGFjZXIocHJlZml4LCB2YWx1ZSk7XG4gIH0pKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi91dGlscy9qb2luUHJlZml4ZWRWYWx1ZS5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogSW5qZWN0YWJsZSBvcmRlcmluZyBvZiBldmVudCBwbHVnaW5zLlxuICovXG52YXIgZXZlbnRQbHVnaW5PcmRlciA9IG51bGw7XG5cbi8qKlxuICogSW5qZWN0YWJsZSBtYXBwaW5nIGZyb20gbmFtZXMgdG8gZXZlbnQgcGx1Z2luIG1vZHVsZXMuXG4gKi9cbnZhciBuYW1lc1RvUGx1Z2lucyA9IHt9O1xuXG4vKipcbiAqIFJlY29tcHV0ZXMgdGhlIHBsdWdpbiBsaXN0IHVzaW5nIHRoZSBpbmplY3RlZCBwbHVnaW5zIGFuZCBwbHVnaW4gb3JkZXJpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKSB7XG4gIGlmICghZXZlbnRQbHVnaW5PcmRlcikge1xuICAgIC8vIFdhaXQgdW50aWwgYW4gYGV2ZW50UGx1Z2luT3JkZXJgIGlzIGluamVjdGVkLlxuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIG5hbWVzVG9QbHVnaW5zKSB7XG4gICAgdmFyIHBsdWdpbk1vZHVsZSA9IG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgIHZhciBwbHVnaW5JbmRleCA9IGV2ZW50UGx1Z2luT3JkZXIuaW5kZXhPZihwbHVnaW5OYW1lKTtcbiAgICAhKHBsdWdpbkluZGV4ID4gLTEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgZXZlbnQgcGx1Z2lucyB0aGF0IGRvIG5vdCBleGlzdCBpbiB0aGUgcGx1Z2luIG9yZGVyaW5nLCBgJXNgLicsIHBsdWdpbk5hbWUpIDogX3Byb2RJbnZhcmlhbnQoJzk2JywgcGx1Z2luTmFtZSkgOiB2b2lkIDA7XG4gICAgaWYgKEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2luc1twbHVnaW5JbmRleF0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICAhcGx1Z2luTW9kdWxlLmV4dHJhY3RFdmVudHMgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogRXZlbnQgcGx1Z2lucyBtdXN0IGltcGxlbWVudCBhbiBgZXh0cmFjdEV2ZW50c2AgbWV0aG9kLCBidXQgYCVzYCBkb2VzIG5vdC4nLCBwbHVnaW5OYW1lKSA6IF9wcm9kSW52YXJpYW50KCc5NycsIHBsdWdpbk5hbWUpIDogdm9pZCAwO1xuICAgIEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2luc1twbHVnaW5JbmRleF0gPSBwbHVnaW5Nb2R1bGU7XG4gICAgdmFyIHB1Ymxpc2hlZEV2ZW50cyA9IHBsdWdpbk1vZHVsZS5ldmVudFR5cGVzO1xuICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiBwdWJsaXNoZWRFdmVudHMpIHtcbiAgICAgICFwdWJsaXNoRXZlbnRGb3JQbHVnaW4ocHVibGlzaGVkRXZlbnRzW2V2ZW50TmFtZV0sIHBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBGYWlsZWQgdG8gcHVibGlzaCBldmVudCBgJXNgIGZvciBwbHVnaW4gYCVzYC4nLCBldmVudE5hbWUsIHBsdWdpbk5hbWUpIDogX3Byb2RJbnZhcmlhbnQoJzk4JywgZXZlbnROYW1lLCBwbHVnaW5OYW1lKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBQdWJsaXNoZXMgYW4gZXZlbnQgc28gdGhhdCBpdCBjYW4gYmUgZGlzcGF0Y2hlZCBieSB0aGUgc3VwcGxpZWQgcGx1Z2luLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBEaXNwYXRjaCBjb25maWd1cmF0aW9uIGZvciB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gUGx1Z2luTW9kdWxlIFBsdWdpbiBwdWJsaXNoaW5nIHRoZSBldmVudC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV2ZW50IHdhcyBzdWNjZXNzZnVsbHkgcHVibGlzaGVkLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcHVibGlzaEV2ZW50Rm9yUGx1Z2luKGRpc3BhdGNoQ29uZmlnLCBwbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSkge1xuICAhIUV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5IdWI6IE1vcmUgdGhhbiBvbmUgcGx1Z2luIGF0dGVtcHRlZCB0byBwdWJsaXNoIHRoZSBzYW1lIGV2ZW50IG5hbWUsIGAlc2AuJywgZXZlbnROYW1lKSA6IF9wcm9kSW52YXJpYW50KCc5OScsIGV2ZW50TmFtZSkgOiB2b2lkIDA7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzW2V2ZW50TmFtZV0gPSBkaXNwYXRjaENvbmZpZztcblxuICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMgPSBkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztcbiAgaWYgKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgZm9yICh2YXIgcGhhc2VOYW1lIGluIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICBpZiAocGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkocGhhc2VOYW1lKSkge1xuICAgICAgICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZSA9IHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlTmFtZV07XG4gICAgICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWUsIHBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUsIHBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUHVibGlzaGVzIGEgcmVnaXN0cmF0aW9uIG5hbWUgdGhhdCBpcyB1c2VkIHRvIGlkZW50aWZ5IGRpc3BhdGNoZWQgZXZlbnRzIGFuZFxuICogY2FuIGJlIHVzZWQgd2l0aCBgRXZlbnRQbHVnaW5IdWIucHV0TGlzdGVuZXJgIHRvIHJlZ2lzdGVyIGxpc3RlbmVycy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVnaXN0cmF0aW9uTmFtZSBSZWdpc3RyYXRpb24gbmFtZSB0byBhZGQuXG4gKiBAcGFyYW0ge29iamVjdH0gUGx1Z2luTW9kdWxlIFBsdWdpbiBwdWJsaXNoaW5nIHRoZSBldmVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKHJlZ2lzdHJhdGlvbk5hbWUsIHBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKSB7XG4gICEhRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpbkh1YjogTW9yZSB0aGFuIG9uZSBwbHVnaW4gYXR0ZW1wdGVkIHRvIHB1Ymxpc2ggdGhlIHNhbWUgcmVnaXN0cmF0aW9uIG5hbWUsIGAlc2AuJywgcmVnaXN0cmF0aW9uTmFtZSkgOiBfcHJvZEludmFyaWFudCgnMTAwJywgcmVnaXN0cmF0aW9uTmFtZSkgOiB2b2lkIDA7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0gPSBwbHVnaW5Nb2R1bGU7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXSA9IHBsdWdpbk1vZHVsZS5ldmVudFR5cGVzW2V2ZW50TmFtZV0uZGVwZW5kZW5jaWVzO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGxvd2VyQ2FzZWROYW1lID0gcmVnaXN0cmF0aW9uTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIEV2ZW50UGx1Z2luUmVnaXN0cnkucG9zc2libGVSZWdpc3RyYXRpb25OYW1lc1tsb3dlckNhc2VkTmFtZV0gPSByZWdpc3RyYXRpb25OYW1lO1xuXG4gICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWUgPT09ICdvbkRvdWJsZUNsaWNrJykge1xuICAgICAgRXZlbnRQbHVnaW5SZWdpc3RyeS5wb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzLm9uZGJsY2xpY2sgPSByZWdpc3RyYXRpb25OYW1lO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBwbHVnaW5zIHNvIHRoYXQgdGhleSBjYW4gZXh0cmFjdCBhbmQgZGlzcGF0Y2ggZXZlbnRzLlxuICpcbiAqIEBzZWUge0V2ZW50UGx1Z2luSHVifVxuICovXG52YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHtcbiAgLyoqXG4gICAqIE9yZGVyZWQgbGlzdCBvZiBpbmplY3RlZCBwbHVnaW5zLlxuICAgKi9cbiAgcGx1Z2luczogW10sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBldmVudCBuYW1lIHRvIGRpc3BhdGNoIGNvbmZpZ1xuICAgKi9cbiAgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOiB7fSxcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIHJlZ2lzdHJhdGlvbiBuYW1lIHRvIHBsdWdpbiBtb2R1bGVcbiAgICovXG4gIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOiB7fSxcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIHJlZ2lzdHJhdGlvbiBuYW1lIHRvIGV2ZW50IG5hbWVcbiAgICovXG4gIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXM6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gbG93ZXJjYXNlIHJlZ2lzdHJhdGlvbiBuYW1lcyB0byB0aGUgcHJvcGVybHkgY2FzZWQgdmVyc2lvbixcbiAgICogdXNlZCB0byB3YXJuIGluIHRoZSBjYXNlIG9mIG1pc3NpbmcgZXZlbnQgaGFuZGxlcnMuIEF2YWlsYWJsZVxuICAgKiBvbmx5IGluIF9fREVWX18uXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge30gOiBudWxsLFxuICAvLyBUcnVzdCB0aGUgZGV2ZWxvcGVyIHRvIG9ubHkgdXNlIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMgaW4gX19ERVZfX1xuXG4gIC8qKlxuICAgKiBJbmplY3RzIGFuIG9yZGVyaW5nIG9mIHBsdWdpbnMgKGJ5IHBsdWdpbiBuYW1lKS4gVGhpcyBhbGxvd3MgdGhlIG9yZGVyaW5nXG4gICAqIHRvIGJlIGRlY291cGxlZCBmcm9tIGluamVjdGlvbiBvZiB0aGUgYWN0dWFsIHBsdWdpbnMgc28gdGhhdCBvcmRlcmluZyBpc1xuICAgKiBhbHdheXMgZGV0ZXJtaW5pc3RpYyByZWdhcmRsZXNzIG9mIHBhY2thZ2luZywgb24tdGhlLWZseSBpbmplY3Rpb24sIGV0Yy5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheX0gSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5PcmRlcn1cbiAgICovXG4gIGluamVjdEV2ZW50UGx1Z2luT3JkZXI6IGZ1bmN0aW9uIChpbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIpIHtcbiAgICAhIWV2ZW50UGx1Z2luT3JkZXIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCBldmVudCBwbHVnaW4gb3JkZXJpbmcgbW9yZSB0aGFuIG9uY2UuIFlvdSBhcmUgbGlrZWx5IHRyeWluZyB0byBsb2FkIG1vcmUgdGhhbiBvbmUgY29weSBvZiBSZWFjdC4nKSA6IF9wcm9kSW52YXJpYW50KCcxMDEnKSA6IHZvaWQgMDtcbiAgICAvLyBDbG9uZSB0aGUgb3JkZXJpbmcgc28gaXQgY2Fubm90IGJlIGR5bmFtaWNhbGx5IG11dGF0ZWQuXG4gICAgZXZlbnRQbHVnaW5PcmRlciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGluamVjdGVkRXZlbnRQbHVnaW5PcmRlcik7XG4gICAgcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKTtcbiAgfSxcblxuICAvKipcbiAgICogSW5qZWN0cyBwbHVnaW5zIHRvIGJlIHVzZWQgYnkgYEV2ZW50UGx1Z2luSHViYC4gVGhlIHBsdWdpbiBuYW1lcyBtdXN0IGJlXG4gICAqIGluIHRoZSBvcmRlcmluZyBpbmplY3RlZCBieSBgaW5qZWN0RXZlbnRQbHVnaW5PcmRlcmAuXG4gICAqXG4gICAqIFBsdWdpbnMgY2FuIGJlIGluamVjdGVkIGFzIHBhcnQgb2YgcGFnZSBpbml0aWFsaXphdGlvbiBvciBvbi10aGUtZmx5LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyBNYXAgZnJvbSBuYW1lcyB0byBwbHVnaW4gbW9kdWxlcy5cbiAgICogQGludGVybmFsXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWV9XG4gICAqL1xuICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6IGZ1bmN0aW9uIChpbmplY3RlZE5hbWVzVG9QbHVnaW5zKSB7XG4gICAgdmFyIGlzT3JkZXJpbmdEaXJ0eSA9IGZhbHNlO1xuICAgIGZvciAodmFyIHBsdWdpbk5hbWUgaW4gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucykge1xuICAgICAgaWYgKCFpbmplY3RlZE5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIHBsdWdpbk1vZHVsZSA9IGluamVjdGVkTmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgICBpZiAoIW5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpIHx8IG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdICE9PSBwbHVnaW5Nb2R1bGUpIHtcbiAgICAgICAgISFuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IHR3byBkaWZmZXJlbnQgZXZlbnQgcGx1Z2lucyB1c2luZyB0aGUgc2FtZSBuYW1lLCBgJXNgLicsIHBsdWdpbk5hbWUpIDogX3Byb2RJbnZhcmlhbnQoJzEwMicsIHBsdWdpbk5hbWUpIDogdm9pZCAwO1xuICAgICAgICBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSA9IHBsdWdpbk1vZHVsZTtcbiAgICAgICAgaXNPcmRlcmluZ0RpcnR5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzT3JkZXJpbmdEaXJ0eSkge1xuICAgICAgcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIExvb2tzIHVwIHRoZSBwbHVnaW4gZm9yIHRoZSBzdXBwbGllZCBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IEEgc3ludGhldGljIGV2ZW50LlxuICAgKiBAcmV0dXJuIHs/b2JqZWN0fSBUaGUgcGx1Z2luIHRoYXQgY3JlYXRlZCB0aGUgc3VwcGxpZWQgZXZlbnQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZ2V0UGx1Z2luTW9kdWxlRm9yRXZlbnQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBkaXNwYXRjaENvbmZpZyA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnO1xuICAgIGlmIChkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgICByZXR1cm4gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lXSB8fCBudWxsO1xuICAgIH1cbiAgICBpZiAoZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcHVsbGluZyBwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyBvdXQgb2YgZGlzcGF0Y2hDb25maWcgaGVscHMgRmxvdyBzZWVcbiAgICAgIC8vIHRoYXQgaXQgaXMgbm90IHVuZGVmaW5lZC5cbiAgICAgIHZhciBwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyA9IGRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO1xuXG4gICAgICBmb3IgKHZhciBwaGFzZSBpbiBwaGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgICAgICBpZiAoIXBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KHBoYXNlKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwbHVnaW5Nb2R1bGUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlXV07XG4gICAgICAgIGlmIChwbHVnaW5Nb2R1bGUpIHtcbiAgICAgICAgICByZXR1cm4gcGx1Z2luTW9kdWxlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVzZXRFdmVudFBsdWdpbnM6IGZ1bmN0aW9uICgpIHtcbiAgICBldmVudFBsdWdpbk9yZGVyID0gbnVsbDtcbiAgICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIG5hbWVzVG9QbHVnaW5zKSB7XG4gICAgICBpZiAobmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkpIHtcbiAgICAgICAgZGVsZXRlIG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgICBFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnMubGVuZ3RoID0gMDtcblxuICAgIHZhciBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncztcbiAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzKSB7XG4gICAgICBpZiAoZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgZGVsZXRlIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnc1tldmVudE5hbWVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZWdpc3RyYXRpb25OYW1lTW9kdWxlcyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM7XG4gICAgZm9yICh2YXIgcmVnaXN0cmF0aW9uTmFtZSBpbiByZWdpc3RyYXRpb25OYW1lTW9kdWxlcykge1xuICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHJlZ2lzdHJhdGlvbk5hbWUpKSB7XG4gICAgICAgIGRlbGV0ZSByZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM7XG4gICAgICBmb3IgKHZhciBsb3dlckNhc2VkTmFtZSBpbiBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICAgIGlmIChwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KGxvd2VyQ2FzZWROYW1lKSkge1xuICAgICAgICAgIGRlbGV0ZSBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzW2xvd2VyQ2FzZWROYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9FdmVudFBsdWdpblJlZ2lzdHJ5LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luUmVnaXN0cnknKTtcbnZhciBSZWFjdEV2ZW50RW1pdHRlck1peGluID0gcmVxdWlyZSgnLi9SZWFjdEV2ZW50RW1pdHRlck1peGluJyk7XG52YXIgVmlld3BvcnRNZXRyaWNzID0gcmVxdWlyZSgnLi9WaWV3cG9ydE1ldHJpY3MnKTtcblxudmFyIGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lID0gcmVxdWlyZSgnLi9nZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZScpO1xudmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSByZXF1aXJlKCcuL2lzRXZlbnRTdXBwb3J0ZWQnKTtcblxuLyoqXG4gKiBTdW1tYXJ5IG9mIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGV2ZW50IGhhbmRsaW5nOlxuICpcbiAqICAtIFRvcC1sZXZlbCBkZWxlZ2F0aW9uIGlzIHVzZWQgdG8gdHJhcCBtb3N0IG5hdGl2ZSBicm93c2VyIGV2ZW50cy4gVGhpc1xuICogICAgbWF5IG9ubHkgb2NjdXIgaW4gdGhlIG1haW4gdGhyZWFkIGFuZCBpcyB0aGUgcmVzcG9uc2liaWxpdHkgb2ZcbiAqICAgIFJlYWN0RXZlbnRMaXN0ZW5lciwgd2hpY2ggaXMgaW5qZWN0ZWQgYW5kIGNhbiB0aGVyZWZvcmUgc3VwcG9ydCBwbHVnZ2FibGVcbiAqICAgIGV2ZW50IHNvdXJjZXMuIFRoaXMgaXMgdGhlIG9ubHkgd29yayB0aGF0IG9jY3VycyBpbiB0aGUgbWFpbiB0aHJlYWQuXG4gKlxuICogIC0gV2Ugbm9ybWFsaXplIGFuZCBkZS1kdXBsaWNhdGUgZXZlbnRzIHRvIGFjY291bnQgZm9yIGJyb3dzZXIgcXVpcmtzLiBUaGlzXG4gKiAgICBtYXkgYmUgZG9uZSBpbiB0aGUgd29ya2VyIHRocmVhZC5cbiAqXG4gKiAgLSBGb3J3YXJkIHRoZXNlIG5hdGl2ZSBldmVudHMgKHdpdGggdGhlIGFzc29jaWF0ZWQgdG9wLWxldmVsIHR5cGUgdXNlZCB0b1xuICogICAgdHJhcCBpdCkgdG8gYEV2ZW50UGx1Z2luSHViYCwgd2hpY2ggaW4gdHVybiB3aWxsIGFzayBwbHVnaW5zIGlmIHRoZXkgd2FudFxuICogICAgdG8gZXh0cmFjdCBhbnkgc3ludGhldGljIGV2ZW50cy5cbiAqXG4gKiAgLSBUaGUgYEV2ZW50UGx1Z2luSHViYCB3aWxsIHRoZW4gcHJvY2VzcyBlYWNoIGV2ZW50IGJ5IGFubm90YXRpbmcgdGhlbSB3aXRoXG4gKiAgICBcImRpc3BhdGNoZXNcIiwgYSBzZXF1ZW5jZSBvZiBsaXN0ZW5lcnMgYW5kIElEcyB0aGF0IGNhcmUgYWJvdXQgdGhhdCBldmVudC5cbiAqXG4gKiAgLSBUaGUgYEV2ZW50UGx1Z2luSHViYCB0aGVuIGRpc3BhdGNoZXMgdGhlIGV2ZW50cy5cbiAqXG4gKiBPdmVydmlldyBvZiBSZWFjdCBhbmQgdGhlIGV2ZW50IHN5c3RlbTpcbiAqXG4gKiArLS0tLS0tLS0tLS0tKyAgICAuXG4gKiB8ICAgIERPTSAgICAgfCAgICAuXG4gKiArLS0tLS0tLS0tLS0tKyAgICAuXG4gKiAgICAgICB8ICAgICAgICAgICAuXG4gKiAgICAgICB2ICAgICAgICAgICAuXG4gKiArLS0tLS0tLS0tLS0tKyAgICAuXG4gKiB8IFJlYWN0RXZlbnQgfCAgICAuXG4gKiB8ICBMaXN0ZW5lciAgfCAgICAuXG4gKiArLS0tLS0tLS0tLS0tKyAgICAuICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLStcbiAqICAgICAgIHwgICAgICAgICAgIC4gICAgICAgICAgICAgICArLS0tLS0tLS0rfFNpbXBsZUV2ZW50fFxuICogICAgICAgfCAgICAgICAgICAgLiAgICAgICAgICAgICAgIHwgICAgICAgICB8UGx1Z2luICAgICB8XG4gKiArLS0tLS18LS0tLS0tKyAgICAuICAgICAgICAgICAgICAgdiAgICAgICAgICstLS0tLS0tLS0tLStcbiAqIHwgICAgIHwgICAgICB8ICAgIC4gICAgKy0tLS0tLS0tLS0tLS0tKyAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLStcbiAqIHwgICAgICstLS0tLS0tLS0tLS4tLS0+fEV2ZW50UGx1Z2luSHVifCAgICAgICAgICAgICAgICAgICAgfCAgICBFdmVudCAgIHxcbiAqIHwgICAgICAgICAgICB8ICAgIC4gICAgfCAgICAgICAgICAgICAgfCAgICAgKy0tLS0tLS0tLS0tKyAgfCBQcm9wYWdhdG9yc3xcbiAqIHwgUmVhY3RFdmVudCB8ICAgIC4gICAgfCAgICAgICAgICAgICAgfCAgICAgfFRhcEV2ZW50ICAgfCAgfC0tLS0tLS0tLS0tLXxcbiAqIHwgIEVtaXR0ZXIgICB8ICAgIC4gICAgfCAgICAgICAgICAgICAgfDwtLS0rfFBsdWdpbiAgICAgfCAgfG90aGVyIHBsdWdpbnxcbiAqIHwgICAgICAgICAgICB8ICAgIC4gICAgfCAgICAgICAgICAgICAgfCAgICAgKy0tLS0tLS0tLS0tKyAgfCAgdXRpbGl0aWVzIHxcbiAqIHwgICAgICstLS0tLS0tLS0tLS4tLS0+fCAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLStcbiAqIHwgICAgIHwgICAgICB8ICAgIC4gICAgKy0tLS0tLS0tLS0tLS0tK1xuICogKy0tLS0tfC0tLS0tLSsgICAgLiAgICAgICAgICAgICAgICBeICAgICAgICArLS0tLS0tLS0tLS0rXG4gKiAgICAgICB8ICAgICAgICAgICAuICAgICAgICAgICAgICAgIHwgICAgICAgIHxFbnRlci9MZWF2ZXxcbiAqICAgICAgICsgICAgICAgICAgIC4gICAgICAgICAgICAgICAgKy0tLS0tLS0rfFBsdWdpbiAgICAgfFxuICogKy0tLS0tLS0tLS0tLS0rICAgLiAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0rXG4gKiB8IGFwcGxpY2F0aW9uIHwgICAuXG4gKiB8LS0tLS0tLS0tLS0tLXwgICAuXG4gKiB8ICAgICAgICAgICAgIHwgICAuXG4gKiB8ICAgICAgICAgICAgIHwgICAuXG4gKiArLS0tLS0tLS0tLS0tLSsgICAuXG4gKiAgICAgICAgICAgICAgICAgICAuXG4gKiAgICBSZWFjdCBDb3JlICAgICAuICBHZW5lcmFsIFB1cnBvc2UgRXZlbnQgUGx1Z2luIFN5c3RlbVxuICovXG5cbnZhciBoYXNFdmVudFBhZ2VYWTtcbnZhciBhbHJlYWR5TGlzdGVuaW5nVG8gPSB7fTtcbnZhciBpc01vbml0b3JpbmdTY3JvbGxWYWx1ZSA9IGZhbHNlO1xudmFyIHJlYWN0VG9wTGlzdGVuZXJzQ291bnRlciA9IDA7XG5cbi8vIEZvciBldmVudHMgbGlrZSAnc3VibWl0JyB3aGljaCBkb24ndCBjb25zaXN0ZW50bHkgYnViYmxlICh3aGljaCB3ZSB0cmFwIGF0IGFcbi8vIGxvd2VyIG5vZGUgdGhhbiBgZG9jdW1lbnRgKSwgYmluZGluZyBhdCBgZG9jdW1lbnRgIHdvdWxkIGNhdXNlIGR1cGxpY2F0ZVxuLy8gZXZlbnRzIHNvIHdlIGRvbid0IGluY2x1ZGUgdGhlbSBoZXJlXG52YXIgdG9wRXZlbnRNYXBwaW5nID0ge1xuICB0b3BBYm9ydDogJ2Fib3J0JyxcbiAgdG9wQW5pbWF0aW9uRW5kOiBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSgnYW5pbWF0aW9uZW5kJykgfHwgJ2FuaW1hdGlvbmVuZCcsXG4gIHRvcEFuaW1hdGlvbkl0ZXJhdGlvbjogZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoJ2FuaW1hdGlvbml0ZXJhdGlvbicpIHx8ICdhbmltYXRpb25pdGVyYXRpb24nLFxuICB0b3BBbmltYXRpb25TdGFydDogZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoJ2FuaW1hdGlvbnN0YXJ0JykgfHwgJ2FuaW1hdGlvbnN0YXJ0JyxcbiAgdG9wQmx1cjogJ2JsdXInLFxuICB0b3BDYW5QbGF5OiAnY2FucGxheScsXG4gIHRvcENhblBsYXlUaHJvdWdoOiAnY2FucGxheXRocm91Z2gnLFxuICB0b3BDaGFuZ2U6ICdjaGFuZ2UnLFxuICB0b3BDbGljazogJ2NsaWNrJyxcbiAgdG9wQ29tcG9zaXRpb25FbmQ6ICdjb21wb3NpdGlvbmVuZCcsXG4gIHRvcENvbXBvc2l0aW9uU3RhcnQ6ICdjb21wb3NpdGlvbnN0YXJ0JyxcbiAgdG9wQ29tcG9zaXRpb25VcGRhdGU6ICdjb21wb3NpdGlvbnVwZGF0ZScsXG4gIHRvcENvbnRleHRNZW51OiAnY29udGV4dG1lbnUnLFxuICB0b3BDb3B5OiAnY29weScsXG4gIHRvcEN1dDogJ2N1dCcsXG4gIHRvcERvdWJsZUNsaWNrOiAnZGJsY2xpY2snLFxuICB0b3BEcmFnOiAnZHJhZycsXG4gIHRvcERyYWdFbmQ6ICdkcmFnZW5kJyxcbiAgdG9wRHJhZ0VudGVyOiAnZHJhZ2VudGVyJyxcbiAgdG9wRHJhZ0V4aXQ6ICdkcmFnZXhpdCcsXG4gIHRvcERyYWdMZWF2ZTogJ2RyYWdsZWF2ZScsXG4gIHRvcERyYWdPdmVyOiAnZHJhZ292ZXInLFxuICB0b3BEcmFnU3RhcnQ6ICdkcmFnc3RhcnQnLFxuICB0b3BEcm9wOiAnZHJvcCcsXG4gIHRvcER1cmF0aW9uQ2hhbmdlOiAnZHVyYXRpb25jaGFuZ2UnLFxuICB0b3BFbXB0aWVkOiAnZW1wdGllZCcsXG4gIHRvcEVuY3J5cHRlZDogJ2VuY3J5cHRlZCcsXG4gIHRvcEVuZGVkOiAnZW5kZWQnLFxuICB0b3BFcnJvcjogJ2Vycm9yJyxcbiAgdG9wRm9jdXM6ICdmb2N1cycsXG4gIHRvcElucHV0OiAnaW5wdXQnLFxuICB0b3BLZXlEb3duOiAna2V5ZG93bicsXG4gIHRvcEtleVByZXNzOiAna2V5cHJlc3MnLFxuICB0b3BLZXlVcDogJ2tleXVwJyxcbiAgdG9wTG9hZGVkRGF0YTogJ2xvYWRlZGRhdGEnLFxuICB0b3BMb2FkZWRNZXRhZGF0YTogJ2xvYWRlZG1ldGFkYXRhJyxcbiAgdG9wTG9hZFN0YXJ0OiAnbG9hZHN0YXJ0JyxcbiAgdG9wTW91c2VEb3duOiAnbW91c2Vkb3duJyxcbiAgdG9wTW91c2VNb3ZlOiAnbW91c2Vtb3ZlJyxcbiAgdG9wTW91c2VPdXQ6ICdtb3VzZW91dCcsXG4gIHRvcE1vdXNlT3ZlcjogJ21vdXNlb3ZlcicsXG4gIHRvcE1vdXNlVXA6ICdtb3VzZXVwJyxcbiAgdG9wUGFzdGU6ICdwYXN0ZScsXG4gIHRvcFBhdXNlOiAncGF1c2UnLFxuICB0b3BQbGF5OiAncGxheScsXG4gIHRvcFBsYXlpbmc6ICdwbGF5aW5nJyxcbiAgdG9wUHJvZ3Jlc3M6ICdwcm9ncmVzcycsXG4gIHRvcFJhdGVDaGFuZ2U6ICdyYXRlY2hhbmdlJyxcbiAgdG9wU2Nyb2xsOiAnc2Nyb2xsJyxcbiAgdG9wU2Vla2VkOiAnc2Vla2VkJyxcbiAgdG9wU2Vla2luZzogJ3NlZWtpbmcnLFxuICB0b3BTZWxlY3Rpb25DaGFuZ2U6ICdzZWxlY3Rpb25jaGFuZ2UnLFxuICB0b3BTdGFsbGVkOiAnc3RhbGxlZCcsXG4gIHRvcFN1c3BlbmQ6ICdzdXNwZW5kJyxcbiAgdG9wVGV4dElucHV0OiAndGV4dElucHV0JyxcbiAgdG9wVGltZVVwZGF0ZTogJ3RpbWV1cGRhdGUnLFxuICB0b3BUb3VjaENhbmNlbDogJ3RvdWNoY2FuY2VsJyxcbiAgdG9wVG91Y2hFbmQ6ICd0b3VjaGVuZCcsXG4gIHRvcFRvdWNoTW92ZTogJ3RvdWNobW92ZScsXG4gIHRvcFRvdWNoU3RhcnQ6ICd0b3VjaHN0YXJ0JyxcbiAgdG9wVHJhbnNpdGlvbkVuZDogZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoJ3RyYW5zaXRpb25lbmQnKSB8fCAndHJhbnNpdGlvbmVuZCcsXG4gIHRvcFZvbHVtZUNoYW5nZTogJ3ZvbHVtZWNoYW5nZScsXG4gIHRvcFdhaXRpbmc6ICd3YWl0aW5nJyxcbiAgdG9wV2hlZWw6ICd3aGVlbCdcbn07XG5cbi8qKlxuICogVG8gZW5zdXJlIG5vIGNvbmZsaWN0cyB3aXRoIG90aGVyIHBvdGVudGlhbCBSZWFjdCBpbnN0YW5jZXMgb24gdGhlIHBhZ2VcbiAqL1xudmFyIHRvcExpc3RlbmVyc0lES2V5ID0gJ19yZWFjdExpc3RlbmVyc0lEJyArIFN0cmluZyhNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtcblxuZnVuY3Rpb24gZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQobW91bnRBdCkge1xuICAvLyBJbiBJRTgsIGBtb3VudEF0YCBpcyBhIGhvc3Qgb2JqZWN0IGFuZCBkb2Vzbid0IGhhdmUgYGhhc093blByb3BlcnR5YFxuICAvLyBkaXJlY3RseS5cbiAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW91bnRBdCwgdG9wTGlzdGVuZXJzSURLZXkpKSB7XG4gICAgbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV0gPSByZWFjdFRvcExpc3RlbmVyc0NvdW50ZXIrKztcbiAgICBhbHJlYWR5TGlzdGVuaW5nVG9bbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV1dID0ge307XG4gIH1cbiAgcmV0dXJuIGFscmVhZHlMaXN0ZW5pbmdUb1ttb3VudEF0W3RvcExpc3RlbmVyc0lES2V5XV07XG59XG5cbi8qKlxuICogYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgaXMgdXNlZCB0byBhdHRhY2ggdG9wLWxldmVsIGV2ZW50IGxpc3RlbmVycy4gRm9yXG4gKiBleGFtcGxlOlxuICpcbiAqICAgRXZlbnRQbHVnaW5IdWIucHV0TGlzdGVuZXIoJ215SUQnLCAnb25DbGljaycsIG15RnVuY3Rpb24pO1xuICpcbiAqIFRoaXMgd291bGQgYWxsb2NhdGUgYSBcInJlZ2lzdHJhdGlvblwiIG9mIGAoJ29uQ2xpY2snLCBteUZ1bmN0aW9uKWAgb24gJ215SUQnLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gX2Fzc2lnbih7fSwgUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiwge1xuICAvKipcbiAgICogSW5qZWN0YWJsZSBldmVudCBiYWNrZW5kXG4gICAqL1xuICBSZWFjdEV2ZW50TGlzdGVuZXI6IG51bGwsXG5cbiAgaW5qZWN0aW9uOiB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFJlYWN0RXZlbnRMaXN0ZW5lclxuICAgICAqL1xuICAgIGluamVjdFJlYWN0RXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKFJlYWN0RXZlbnRMaXN0ZW5lcikge1xuICAgICAgUmVhY3RFdmVudExpc3RlbmVyLnNldEhhbmRsZVRvcExldmVsKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5oYW5kbGVUb3BMZXZlbCk7XG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyID0gUmVhY3RFdmVudExpc3RlbmVyO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIG9yIG5vdCBhbnkgY3JlYXRlZCBjYWxsYmFja3Mgc2hvdWxkIGJlIGVuYWJsZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCBUcnVlIGlmIGNhbGxiYWNrcyBzaG91bGQgYmUgZW5hYmxlZC5cbiAgICovXG4gIHNldEVuYWJsZWQ6IGZ1bmN0aW9uIChlbmFibGVkKSB7XG4gICAgaWYgKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIuc2V0RW5hYmxlZChlbmFibGVkKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgY2FsbGJhY2tzIGFyZSBlbmFibGVkLlxuICAgKi9cbiAgaXNFbmFibGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIgJiYgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5pc0VuYWJsZWQoKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdlIGxpc3RlbiBmb3IgYnViYmxlZCB0b3VjaCBldmVudHMgb24gdGhlIGRvY3VtZW50IG9iamVjdC5cbiAgICpcbiAgICogRmlyZWZveCB2OC4wMSAoYW5kIHBvc3NpYmx5IG90aGVycykgZXhoaWJpdGVkIHN0cmFuZ2UgYmVoYXZpb3Igd2hlblxuICAgKiBtb3VudGluZyBgb25tb3VzZW1vdmVgIGV2ZW50cyBhdCBzb21lIG5vZGUgdGhhdCB3YXMgbm90IHRoZSBkb2N1bWVudFxuICAgKiBlbGVtZW50LiBUaGUgc3ltcHRvbXMgd2VyZSB0aGF0IGlmIHlvdXIgbW91c2UgaXMgbm90IG1vdmluZyBvdmVyIHNvbWV0aGluZ1xuICAgKiBjb250YWluZWQgd2l0aGluIHRoYXQgbW91bnQgcG9pbnQgKGZvciBleGFtcGxlIG9uIHRoZSBiYWNrZ3JvdW5kKSB0aGVcbiAgICogdG9wLWxldmVsIGxpc3RlbmVycyBmb3IgYG9ubW91c2Vtb3ZlYCB3b24ndCBiZSBjYWxsZWQuIEhvd2V2ZXIsIGlmIHlvdVxuICAgKiByZWdpc3RlciB0aGUgYG1vdXNlbW92ZWAgb24gdGhlIGRvY3VtZW50IG9iamVjdCwgdGhlbiBpdCB3aWxsIG9mIGNvdXJzZVxuICAgKiBjYXRjaCBhbGwgYG1vdXNlbW92ZWBzLiBUaGlzIGFsb25nIHdpdGggaU9TIHF1aXJrcywganVzdGlmaWVzIHJlc3RyaWN0aW5nXG4gICAqIHRvcC1sZXZlbCBsaXN0ZW5lcnMgdG8gdGhlIGRvY3VtZW50IG9iamVjdCBvbmx5LCBhdCBsZWFzdCBmb3IgdGhlc2VcbiAgICogbW92ZW1lbnQgdHlwZXMgb2YgZXZlbnRzIGFuZCBwb3NzaWJseSBhbGwgZXZlbnRzLlxuICAgKlxuICAgKiBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDEwLzA5L2NsaWNrX2V2ZW50X2RlbC5odG1sXG4gICAqXG4gICAqIEFsc28sIGBrZXl1cGAvYGtleXByZXNzYC9ga2V5ZG93bmAgZG8gbm90IGJ1YmJsZSB0byB0aGUgd2luZG93IG9uIElFLCBidXRcbiAgICogdGhleSBidWJibGUgdG8gZG9jdW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRlbnREb2N1bWVudEhhbmRsZSBEb2N1bWVudCB3aGljaCBvd25zIHRoZSBjb250YWluZXJcbiAgICovXG4gIGxpc3RlblRvOiBmdW5jdGlvbiAocmVnaXN0cmF0aW9uTmFtZSwgY29udGVudERvY3VtZW50SGFuZGxlKSB7XG4gICAgdmFyIG1vdW50QXQgPSBjb250ZW50RG9jdW1lbnRIYW5kbGU7XG4gICAgdmFyIGlzTGlzdGVuaW5nID0gZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQobW91bnRBdCk7XG4gICAgdmFyIGRlcGVuZGVuY2llcyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVwZW5kZW5jeSA9IGRlcGVuZGVuY2llc1tpXTtcbiAgICAgIGlmICghKGlzTGlzdGVuaW5nLmhhc093blByb3BlcnR5KGRlcGVuZGVuY3kpICYmIGlzTGlzdGVuaW5nW2RlcGVuZGVuY3ldKSkge1xuICAgICAgICBpZiAoZGVwZW5kZW5jeSA9PT0gJ3RvcFdoZWVsJykge1xuICAgICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCd3aGVlbCcpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoJ3RvcFdoZWVsJywgJ3doZWVsJywgbW91bnRBdCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdtb3VzZXdoZWVsJykpIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudCgndG9wV2hlZWwnLCAnbW91c2V3aGVlbCcsIG1vdW50QXQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBGaXJlZm94IG5lZWRzIHRvIGNhcHR1cmUgYSBkaWZmZXJlbnQgbW91c2Ugc2Nyb2xsIGV2ZW50LlxuICAgICAgICAgICAgLy8gQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2RvbS9ldmVudHMvdGVzdHMvc2Nyb2xsLmh0bWxcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudCgndG9wV2hlZWwnLCAnRE9NTW91c2VTY3JvbGwnLCBtb3VudEF0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGVwZW5kZW5jeSA9PT0gJ3RvcFNjcm9sbCcpIHtcbiAgICAgICAgICBpZiAoaXNFdmVudFN1cHBvcnRlZCgnc2Nyb2xsJywgdHJ1ZSkpIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQoJ3RvcFNjcm9sbCcsICdzY3JvbGwnLCBtb3VudEF0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KCd0b3BTY3JvbGwnLCAnc2Nyb2xsJywgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5XSU5ET1dfSEFORExFKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGVwZW5kZW5jeSA9PT0gJ3RvcEZvY3VzJyB8fCBkZXBlbmRlbmN5ID09PSAndG9wQmx1cicpIHtcbiAgICAgICAgICBpZiAoaXNFdmVudFN1cHBvcnRlZCgnZm9jdXMnLCB0cnVlKSkge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudCgndG9wRm9jdXMnLCAnZm9jdXMnLCBtb3VudEF0KTtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQoJ3RvcEJsdXInLCAnYmx1cicsIG1vdW50QXQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNFdmVudFN1cHBvcnRlZCgnZm9jdXNpbicpKSB7XG4gICAgICAgICAgICAvLyBJRSBoYXMgYGZvY3VzaW5gIGFuZCBgZm9jdXNvdXRgIGV2ZW50cyB3aGljaCBidWJibGUuXG4gICAgICAgICAgICAvLyBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDA4LzA0L2RlbGVnYXRpbmdfdGhlLmh0bWxcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudCgndG9wRm9jdXMnLCAnZm9jdXNpbicsIG1vdW50QXQpO1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KCd0b3BCbHVyJywgJ2ZvY3Vzb3V0JywgbW91bnRBdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gdG8gbWFrZSBzdXJlIGJsdXIgYW5kIGZvY3VzIGV2ZW50IGxpc3RlbmVycyBhcmUgb25seSBhdHRhY2hlZCBvbmNlXG4gICAgICAgICAgaXNMaXN0ZW5pbmcudG9wQmx1ciA9IHRydWU7XG4gICAgICAgICAgaXNMaXN0ZW5pbmcudG9wRm9jdXMgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRvcEV2ZW50TWFwcGluZy5oYXNPd25Qcm9wZXJ0eShkZXBlbmRlbmN5KSkge1xuICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChkZXBlbmRlbmN5LCB0b3BFdmVudE1hcHBpbmdbZGVwZW5kZW5jeV0sIG1vdW50QXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaXNMaXN0ZW5pbmdbZGVwZW5kZW5jeV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB0cmFwQnViYmxlZEV2ZW50OiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGhhbmRsZSkge1xuICAgIHJldHVybiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQodG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGhhbmRsZSk7XG4gIH0sXG5cbiAgdHJhcENhcHR1cmVkRXZlbnQ6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgcmV0dXJuIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQodG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGhhbmRsZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFByb3RlY3QgYWdhaW5zdCBkb2N1bWVudC5jcmVhdGVFdmVudCgpIHJldHVybmluZyBudWxsXG4gICAqIFNvbWUgcG9wdXAgYmxvY2tlciBleHRlbnNpb25zIGFwcGVhciB0byBkbyB0aGlzOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzY4ODdcbiAgICovXG4gIHN1cHBvcnRzRXZlbnRQYWdlWFk6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWRvY3VtZW50LmNyZWF0ZUV2ZW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBldiA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50Jyk7XG4gICAgcmV0dXJuIGV2ICE9IG51bGwgJiYgJ3BhZ2VYJyBpbiBldjtcbiAgfSxcblxuICAvKipcbiAgICogTGlzdGVucyB0byB3aW5kb3cgc2Nyb2xsIGFuZCByZXNpemUgZXZlbnRzLiBXZSBjYWNoZSBzY3JvbGwgdmFsdWVzIHNvIHRoYXRcbiAgICogYXBwbGljYXRpb24gY29kZSBjYW4gYWNjZXNzIHRoZW0gd2l0aG91dCB0cmlnZ2VyaW5nIHJlZmxvd3MuXG4gICAqXG4gICAqIFZpZXdwb3J0TWV0cmljcyBpcyBvbmx5IHVzZWQgYnkgU3ludGhldGljTW91c2UvVG91Y2hFdmVudCBhbmQgb25seSB3aGVuXG4gICAqIHBhZ2VYL3BhZ2VZIGlzbid0IHN1cHBvcnRlZCAobGVnYWN5IGJyb3dzZXJzKS5cbiAgICpcbiAgICogTk9URTogU2Nyb2xsIGV2ZW50cyBkbyBub3QgYnViYmxlLlxuICAgKlxuICAgKiBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvZG9tL2V2ZW50cy9zY3JvbGwuaHRtbFxuICAgKi9cbiAgZW5zdXJlU2Nyb2xsVmFsdWVNb25pdG9yaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGhhc0V2ZW50UGFnZVhZID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0V2ZW50UGFnZVhZID0gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnN1cHBvcnRzRXZlbnRQYWdlWFkoKTtcbiAgICB9XG4gICAgaWYgKCFoYXNFdmVudFBhZ2VYWSAmJiAhaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUpIHtcbiAgICAgIHZhciByZWZyZXNoID0gVmlld3BvcnRNZXRyaWNzLnJlZnJlc2hTY3JvbGxWYWx1ZXM7XG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLm1vbml0b3JTY3JvbGxWYWx1ZShyZWZyZXNoKTtcbiAgICAgIGlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljVUlFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVUlFdmVudCcpO1xudmFyIFZpZXdwb3J0TWV0cmljcyA9IHJlcXVpcmUoJy4vVmlld3BvcnRNZXRyaWNzJyk7XG5cbnZhciBnZXRFdmVudE1vZGlmaWVyU3RhdGUgPSByZXF1aXJlKCcuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZScpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgTW91c2VFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBNb3VzZUV2ZW50SW50ZXJmYWNlID0ge1xuICBzY3JlZW5YOiBudWxsLFxuICBzY3JlZW5ZOiBudWxsLFxuICBjbGllbnRYOiBudWxsLFxuICBjbGllbnRZOiBudWxsLFxuICBjdHJsS2V5OiBudWxsLFxuICBzaGlmdEtleTogbnVsbCxcbiAgYWx0S2V5OiBudWxsLFxuICBtZXRhS2V5OiBudWxsLFxuICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gIGJ1dHRvbjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gV2Via2l0LCBGaXJlZm94LCBJRTkrXG4gICAgLy8gd2hpY2g6ICAxIDIgM1xuICAgIC8vIGJ1dHRvbjogMCAxIDIgKHN0YW5kYXJkKVxuICAgIHZhciBidXR0b24gPSBldmVudC5idXR0b247XG4gICAgaWYgKCd3aGljaCcgaW4gZXZlbnQpIHtcbiAgICAgIHJldHVybiBidXR0b247XG4gICAgfVxuICAgIC8vIElFPDlcbiAgICAvLyB3aGljaDogIHVuZGVmaW5lZFxuICAgIC8vIGJ1dHRvbjogMCAwIDBcbiAgICAvLyBidXR0b246IDEgNCAyIChvbm1vdXNldXApXG4gICAgcmV0dXJuIGJ1dHRvbiA9PT0gMiA/IDIgOiBidXR0b24gPT09IDQgPyAxIDogMDtcbiAgfSxcbiAgYnV0dG9uczogbnVsbCxcbiAgcmVsYXRlZFRhcmdldDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgKGV2ZW50LmZyb21FbGVtZW50ID09PSBldmVudC5zcmNFbGVtZW50ID8gZXZlbnQudG9FbGVtZW50IDogZXZlbnQuZnJvbUVsZW1lbnQpO1xuICB9LFxuICAvLyBcIlByb3ByaWV0YXJ5XCIgSW50ZXJmYWNlLlxuICBwYWdlWDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuICdwYWdlWCcgaW4gZXZlbnQgPyBldmVudC5wYWdlWCA6IGV2ZW50LmNsaWVudFggKyBWaWV3cG9ydE1ldHJpY3MuY3VycmVudFNjcm9sbExlZnQ7XG4gIH0sXG4gIHBhZ2VZOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gJ3BhZ2VZJyBpbiBldmVudCA/IGV2ZW50LnBhZ2VZIDogZXZlbnQuY2xpZW50WSArIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsVG9wO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNNb3VzZUV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHJldHVybiBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNNb3VzZUV2ZW50LCBNb3VzZUV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNNb3VzZUV2ZW50LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxudmFyIE9CU0VSVkVEX0VSUk9SID0ge307XG5cbi8qKlxuICogYFRyYW5zYWN0aW9uYCBjcmVhdGVzIGEgYmxhY2sgYm94IHRoYXQgaXMgYWJsZSB0byB3cmFwIGFueSBtZXRob2Qgc3VjaCB0aGF0XG4gKiBjZXJ0YWluIGludmFyaWFudHMgYXJlIG1haW50YWluZWQgYmVmb3JlIGFuZCBhZnRlciB0aGUgbWV0aG9kIGlzIGludm9rZWRcbiAqIChFdmVuIGlmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gd2hpbGUgaW52b2tpbmcgdGhlIHdyYXBwZWQgbWV0aG9kKS4gV2hvZXZlclxuICogaW5zdGFudGlhdGVzIGEgdHJhbnNhY3Rpb24gY2FuIHByb3ZpZGUgZW5mb3JjZXJzIG9mIHRoZSBpbnZhcmlhbnRzIGF0XG4gKiBjcmVhdGlvbiB0aW1lLiBUaGUgYFRyYW5zYWN0aW9uYCBjbGFzcyBpdHNlbGYgd2lsbCBzdXBwbHkgb25lIGFkZGl0aW9uYWxcbiAqIGF1dG9tYXRpYyBpbnZhcmlhbnQgZm9yIHlvdSAtIHRoZSBpbnZhcmlhbnQgdGhhdCBhbnkgdHJhbnNhY3Rpb24gaW5zdGFuY2VcbiAqIHNob3VsZCBub3QgYmUgcnVuIHdoaWxlIGl0IGlzIGFscmVhZHkgYmVpbmcgcnVuLiBZb3Ugd291bGQgdHlwaWNhbGx5IGNyZWF0ZSBhXG4gKiBzaW5nbGUgaW5zdGFuY2Ugb2YgYSBgVHJhbnNhY3Rpb25gIGZvciByZXVzZSBtdWx0aXBsZSB0aW1lcywgdGhhdCBwb3RlbnRpYWxseVxuICogaXMgdXNlZCB0byB3cmFwIHNldmVyYWwgZGlmZmVyZW50IG1ldGhvZHMuIFdyYXBwZXJzIGFyZSBleHRyZW1lbHkgc2ltcGxlIC1cbiAqIHRoZXkgb25seSByZXF1aXJlIGltcGxlbWVudGluZyB0d28gbWV0aG9kcy5cbiAqXG4gKiA8cHJlPlxuICogICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXJzIChpbmplY3RlZCBhdCBjcmVhdGlvbiB0aW1lKVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgICAgICAgICtcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tK1xuICogICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgIHYgICAgICAgIHwgICAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgICAgKy0tLS0tLS0tLS0tLS0tLSsgICB8ICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgICstLXwgICAgd3JhcHBlcjEgICB8LS0tfC0tLS0rICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB8ICArLS0tLS0tLS0tLS0tLS0tKyAgIHYgICAgfCAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgICAgICAgICArLS0tLS0tLS0tLS0tLSsgIHwgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgICstLS0tfCAgIHdyYXBwZXIyICB8LS0tLS0tLS0rICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB8ICAgICB8ICAgICstLS0tLS0tLS0tLS0tKyAgfCAgICAgfCAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgICAgfCAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHYgICAgIHYgICAgICAgICAgICAgICAgICAgICB2ICAgICB2ICAgfCB3cmFwcGVyXG4gKiAgICAgICAgICAgICAgICAgICAgfCArLS0tKyArLS0tKyAgICstLS0tLS0tLS0rICAgKy0tLSsgKy0tLSsgfCBpbnZhcmlhbnRzXG4gKiBwZXJmb3JtKGFueU1ldGhvZCkgfCB8ICAgfCB8ICAgfCAgIHwgICAgICAgICB8ICAgfCAgIHwgfCAgIHwgfCBtYWludGFpbmVkXG4gKiArLS0tLS0tLS0tLS0tLS0tLS0+fC18LS0tfC18LS0tfC0tPnxhbnlNZXRob2R8LS0tfC0tLXwtfC0tLXwtfC0tLS0tLS0tPlxuICogICAgICAgICAgICAgICAgICAgIHwgfCAgIHwgfCAgIHwgICB8ICAgICAgICAgfCAgIHwgICB8IHwgICB8IHxcbiAqICAgICAgICAgICAgICAgICAgICB8IHwgICB8IHwgICB8ICAgfCAgICAgICAgIHwgICB8ICAgfCB8ICAgfCB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCB8ICAgfCB8ICAgfCAgIHwgICAgICAgICB8ICAgfCAgIHwgfCAgIHwgfFxuICogICAgICAgICAgICAgICAgICAgIHwgKy0tLSsgKy0tLSsgICArLS0tLS0tLS0tKyAgICstLS0rICstLS0rIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICBpbml0aWFsaXplICAgICAgICAgICAgICAgICAgICBjbG9zZSAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xuICogPC9wcmU+XG4gKlxuICogVXNlIGNhc2VzOlxuICogLSBQcmVzZXJ2aW5nIHRoZSBpbnB1dCBzZWxlY3Rpb24gcmFuZ2VzIGJlZm9yZS9hZnRlciByZWNvbmNpbGlhdGlvbi5cbiAqICAgUmVzdG9yaW5nIHNlbGVjdGlvbiBldmVuIGluIHRoZSBldmVudCBvZiBhbiB1bmV4cGVjdGVkIGVycm9yLlxuICogLSBEZWFjdGl2YXRpbmcgZXZlbnRzIHdoaWxlIHJlYXJyYW5naW5nIHRoZSBET00sIHByZXZlbnRpbmcgYmx1cnMvZm9jdXNlcyxcbiAqICAgd2hpbGUgZ3VhcmFudGVlaW5nIHRoYXQgYWZ0ZXJ3YXJkcywgdGhlIGV2ZW50IHN5c3RlbSBpcyByZWFjdGl2YXRlZC5cbiAqIC0gRmx1c2hpbmcgYSBxdWV1ZSBvZiBjb2xsZWN0ZWQgRE9NIG11dGF0aW9ucyB0byB0aGUgbWFpbiBVSSB0aHJlYWQgYWZ0ZXIgYVxuICogICByZWNvbmNpbGlhdGlvbiB0YWtlcyBwbGFjZSBpbiBhIHdvcmtlciB0aHJlYWQuXG4gKiAtIEludm9raW5nIGFueSBjb2xsZWN0ZWQgYGNvbXBvbmVudERpZFVwZGF0ZWAgY2FsbGJhY2tzIGFmdGVyIHJlbmRlcmluZyBuZXdcbiAqICAgY29udGVudC5cbiAqIC0gKEZ1dHVyZSB1c2UgY2FzZSk6IFdyYXBwaW5nIHBhcnRpY3VsYXIgZmx1c2hlcyBvZiB0aGUgYFJlYWN0V29ya2VyYCBxdWV1ZVxuICogICB0byBwcmVzZXJ2ZSB0aGUgYHNjcm9sbFRvcGAgKGFuIGF1dG9tYXRpYyBzY3JvbGwgYXdhcmUgRE9NKS5cbiAqIC0gKEZ1dHVyZSB1c2UgY2FzZSk6IExheW91dCBjYWxjdWxhdGlvbnMgYmVmb3JlIGFuZCBhZnRlciBET00gdXBkYXRlcy5cbiAqXG4gKiBUcmFuc2FjdGlvbmFsIHBsdWdpbiBBUEk6XG4gKiAtIEEgbW9kdWxlIHRoYXQgaGFzIGFuIGBpbml0aWFsaXplYCBtZXRob2QgdGhhdCByZXR1cm5zIGFueSBwcmVjb21wdXRhdGlvbi5cbiAqIC0gYW5kIGEgYGNsb3NlYCBtZXRob2QgdGhhdCBhY2NlcHRzIHRoZSBwcmVjb21wdXRhdGlvbi4gYGNsb3NlYCBpcyBpbnZva2VkXG4gKiAgIHdoZW4gdGhlIHdyYXBwZWQgcHJvY2VzcyBpcyBjb21wbGV0ZWQsIG9yIGhhcyBmYWlsZWQuXG4gKlxuICogQHBhcmFtIHtBcnJheTxUcmFuc2FjdGlvbmFsV3JhcHBlcj59IHRyYW5zYWN0aW9uV3JhcHBlciBXcmFwcGVyIG1vZHVsZXNcbiAqIHRoYXQgaW1wbGVtZW50IGBpbml0aWFsaXplYCBhbmQgYGNsb3NlYC5cbiAqIEByZXR1cm4ge1RyYW5zYWN0aW9ufSBTaW5nbGUgdHJhbnNhY3Rpb24gZm9yIHJldXNlIGluIHRocmVhZC5cbiAqXG4gKiBAY2xhc3MgVHJhbnNhY3Rpb25cbiAqL1xudmFyIFRyYW5zYWN0aW9uSW1wbCA9IHtcbiAgLyoqXG4gICAqIFNldHMgdXAgdGhpcyBpbnN0YW5jZSBzbyB0aGF0IGl0IGlzIHByZXBhcmVkIGZvciBjb2xsZWN0aW5nIG1ldHJpY3MuIERvZXNcbiAgICogc28gc3VjaCB0aGF0IHRoaXMgc2V0dXAgbWV0aG9kIG1heSBiZSB1c2VkIG9uIGFuIGluc3RhbmNlIHRoYXQgaXMgYWxyZWFkeVxuICAgKiBpbml0aWFsaXplZCwgaW4gYSB3YXkgdGhhdCBkb2VzIG5vdCBjb25zdW1lIGFkZGl0aW9uYWwgbWVtb3J5IHVwb24gcmV1c2UuXG4gICAqIFRoYXQgY2FuIGJlIHVzZWZ1bCBpZiB5b3UgZGVjaWRlIHRvIG1ha2UgeW91ciBzdWJjbGFzcyBvZiB0aGlzIG1peGluIGFcbiAgICogXCJQb29sZWRDbGFzc1wiLlxuICAgKi9cbiAgcmVpbml0aWFsaXplVHJhbnNhY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnMgPSB0aGlzLmdldFRyYW5zYWN0aW9uV3JhcHBlcnMoKTtcbiAgICBpZiAodGhpcy53cmFwcGVySW5pdERhdGEpIHtcbiAgICAgIHRoaXMud3JhcHBlckluaXREYXRhLmxlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud3JhcHBlckluaXREYXRhID0gW107XG4gICAgfVxuICAgIHRoaXMuX2lzSW5UcmFuc2FjdGlvbiA9IGZhbHNlO1xuICB9LFxuXG4gIF9pc0luVHJhbnNhY3Rpb246IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHJldHVybiB7QXJyYXk8VHJhbnNhY3Rpb25XcmFwcGVyPn0gQXJyYXkgb2YgdHJhbnNhY3Rpb24gd3JhcHBlcnMuXG4gICAqL1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBudWxsLFxuXG4gIGlzSW5UcmFuc2FjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXRoaXMuX2lzSW5UcmFuc2FjdGlvbjtcbiAgfSxcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBzcGFjZS1iZWZvcmUtZnVuY3Rpb24tcGFyZW4gKi9cblxuICAvKipcbiAgICogRXhlY3V0ZXMgdGhlIGZ1bmN0aW9uIHdpdGhpbiBhIHNhZmV0eSB3aW5kb3cuIFVzZSB0aGlzIGZvciB0aGUgdG9wIGxldmVsXG4gICAqIG1ldGhvZHMgdGhhdCByZXN1bHQgaW4gbGFyZ2UgYW1vdW50cyBvZiBjb21wdXRhdGlvbi9tdXRhdGlvbnMgdGhhdCB3b3VsZFxuICAgKiBuZWVkIHRvIGJlIHNhZmV0eSBjaGVja2VkLiBUaGUgb3B0aW9uYWwgYXJndW1lbnRzIGhlbHBzIHByZXZlbnQgdGhlIG5lZWRcbiAgICogdG8gYmluZCBpbiBtYW55IGNhc2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXRob2QgTWVtYmVyIG9mIHNjb3BlIHRvIGNhbGwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzY29wZSBTY29wZSB0byBpbnZva2UgZnJvbS5cbiAgICogQHBhcmFtIHtPYmplY3Q/PX0gYSBBcmd1bWVudCB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAqIEBwYXJhbSB7T2JqZWN0Pz19IGIgQXJndW1lbnQgdG8gcGFzcyB0byB0aGUgbWV0aG9kLlxuICAgKiBAcGFyYW0ge09iamVjdD89fSBjIEFyZ3VtZW50IHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICogQHBhcmFtIHtPYmplY3Q/PX0gZCBBcmd1bWVudCB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAqIEBwYXJhbSB7T2JqZWN0Pz19IGUgQXJndW1lbnQgdG8gcGFzcyB0byB0aGUgbWV0aG9kLlxuICAgKiBAcGFyYW0ge09iamVjdD89fSBmIEFyZ3VtZW50IHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICpcbiAgICogQHJldHVybiB7Kn0gUmV0dXJuIHZhbHVlIGZyb20gYG1ldGhvZGAuXG4gICAqL1xuICBwZXJmb3JtOiBmdW5jdGlvbiAobWV0aG9kLCBzY29wZSwgYSwgYiwgYywgZCwgZSwgZikge1xuICAgIC8qIGVzbGludC1lbmFibGUgc3BhY2UtYmVmb3JlLWZ1bmN0aW9uLXBhcmVuICovXG4gICAgISF0aGlzLmlzSW5UcmFuc2FjdGlvbigpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RyYW5zYWN0aW9uLnBlcmZvcm0oLi4uKTogQ2Fubm90IGluaXRpYWxpemUgYSB0cmFuc2FjdGlvbiB3aGVuIHRoZXJlIGlzIGFscmVhZHkgYW4gb3V0c3RhbmRpbmcgdHJhbnNhY3Rpb24uJykgOiBfcHJvZEludmFyaWFudCgnMjcnKSA6IHZvaWQgMDtcbiAgICB2YXIgZXJyb3JUaHJvd247XG4gICAgdmFyIHJldDtcbiAgICB0cnkge1xuICAgICAgdGhpcy5faXNJblRyYW5zYWN0aW9uID0gdHJ1ZTtcbiAgICAgIC8vIENhdGNoaW5nIGVycm9ycyBtYWtlcyBkZWJ1Z2dpbmcgbW9yZSBkaWZmaWN1bHQsIHNvIHdlIHN0YXJ0IHdpdGhcbiAgICAgIC8vIGVycm9yVGhyb3duIHNldCB0byB0cnVlIGJlZm9yZSBzZXR0aW5nIGl0IHRvIGZhbHNlIGFmdGVyIGNhbGxpbmdcbiAgICAgIC8vIGNsb3NlIC0tIGlmIGl0J3Mgc3RpbGwgc2V0IHRvIHRydWUgaW4gdGhlIGZpbmFsbHkgYmxvY2ssIGl0IG1lYW5zXG4gICAgICAvLyBvbmUgb2YgdGhlc2UgY2FsbHMgdGhyZXcuXG4gICAgICBlcnJvclRocm93biA9IHRydWU7XG4gICAgICB0aGlzLmluaXRpYWxpemVBbGwoMCk7XG4gICAgICByZXQgPSBtZXRob2QuY2FsbChzY29wZSwgYSwgYiwgYywgZCwgZSwgZik7XG4gICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAvLyBJZiBgbWV0aG9kYCB0aHJvd3MsIHByZWZlciB0byBzaG93IHRoYXQgc3RhY2sgdHJhY2Ugb3ZlciBhbnkgdGhyb3duXG4gICAgICAgICAgLy8gYnkgaW52b2tpbmcgYGNsb3NlQWxsYC5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUFsbCgwKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU2luY2UgYG1ldGhvZGAgZGlkbid0IHRocm93LCB3ZSBkb24ndCB3YW50IHRvIHNpbGVuY2UgdGhlIGV4Y2VwdGlvblxuICAgICAgICAgIC8vIGhlcmUuXG4gICAgICAgICAgdGhpcy5jbG9zZUFsbCgwKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy5faXNJblRyYW5zYWN0aW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgaW5pdGlhbGl6ZUFsbDogZnVuY3Rpb24gKHN0YXJ0SW5kZXgpIHtcbiAgICB2YXIgdHJhbnNhY3Rpb25XcmFwcGVycyA9IHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycztcbiAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRyYW5zYWN0aW9uV3JhcHBlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3cmFwcGVyID0gdHJhbnNhY3Rpb25XcmFwcGVyc1tpXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIENhdGNoaW5nIGVycm9ycyBtYWtlcyBkZWJ1Z2dpbmcgbW9yZSBkaWZmaWN1bHQsIHNvIHdlIHN0YXJ0IHdpdGggdGhlXG4gICAgICAgIC8vIE9CU0VSVkVEX0VSUk9SIHN0YXRlIGJlZm9yZSBvdmVyd3JpdGluZyBpdCB3aXRoIHRoZSByZWFsIHJldHVybiB2YWx1ZVxuICAgICAgICAvLyBvZiBpbml0aWFsaXplIC0tIGlmIGl0J3Mgc3RpbGwgc2V0IHRvIE9CU0VSVkVEX0VSUk9SIGluIHRoZSBmaW5hbGx5XG4gICAgICAgIC8vIGJsb2NrLCBpdCBtZWFucyB3cmFwcGVyLmluaXRpYWxpemUgdGhyZXcuXG4gICAgICAgIHRoaXMud3JhcHBlckluaXREYXRhW2ldID0gT0JTRVJWRURfRVJST1I7XG4gICAgICAgIHRoaXMud3JhcHBlckluaXREYXRhW2ldID0gd3JhcHBlci5pbml0aWFsaXplID8gd3JhcHBlci5pbml0aWFsaXplLmNhbGwodGhpcykgOiBudWxsO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKHRoaXMud3JhcHBlckluaXREYXRhW2ldID09PSBPQlNFUlZFRF9FUlJPUikge1xuICAgICAgICAgIC8vIFRoZSBpbml0aWFsaXplciBmb3Igd3JhcHBlciBpIHRocmV3IGFuIGVycm9yOyBpbml0aWFsaXplIHRoZVxuICAgICAgICAgIC8vIHJlbWFpbmluZyB3cmFwcGVycyBidXQgc2lsZW5jZSBhbnkgZXhjZXB0aW9ucyBmcm9tIHRoZW0gdG8gZW5zdXJlXG4gICAgICAgICAgLy8gdGhhdCB0aGUgZmlyc3QgZXJyb3IgaXMgdGhlIG9uZSB0byBidWJibGUgdXAuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZUFsbChpICsgMSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2VzIGVhY2ggb2YgYHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycy5jbG9zZVtpXWAgZnVuY3Rpb25zLCBwYXNzaW5nIGludG9cbiAgICogdGhlbSB0aGUgcmVzcGVjdGl2ZSByZXR1cm4gdmFsdWVzIG9mIGB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnMuaW5pdFtpXWBcbiAgICogKGBjbG9zZWBycyB0aGF0IGNvcnJlc3BvbmQgdG8gaW5pdGlhbGl6ZXJzIHRoYXQgZmFpbGVkIHdpbGwgbm90IGJlXG4gICAqIGludm9rZWQpLlxuICAgKi9cbiAgY2xvc2VBbGw6IGZ1bmN0aW9uIChzdGFydEluZGV4KSB7XG4gICAgIXRoaXMuaXNJblRyYW5zYWN0aW9uKCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVHJhbnNhY3Rpb24uY2xvc2VBbGwoKTogQ2Fubm90IGNsb3NlIHRyYW5zYWN0aW9uIHdoZW4gbm9uZSBhcmUgb3Blbi4nKSA6IF9wcm9kSW52YXJpYW50KCcyOCcpIDogdm9pZCAwO1xuICAgIHZhciB0cmFuc2FjdGlvbldyYXBwZXJzID0gdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzO1xuICAgIGZvciAodmFyIGkgPSBzdGFydEluZGV4OyBpIDwgdHJhbnNhY3Rpb25XcmFwcGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHdyYXBwZXIgPSB0cmFuc2FjdGlvbldyYXBwZXJzW2ldO1xuICAgICAgdmFyIGluaXREYXRhID0gdGhpcy53cmFwcGVySW5pdERhdGFbaV07XG4gICAgICB2YXIgZXJyb3JUaHJvd247XG4gICAgICB0cnkge1xuICAgICAgICAvLyBDYXRjaGluZyBlcnJvcnMgbWFrZXMgZGVidWdnaW5nIG1vcmUgZGlmZmljdWx0LCBzbyB3ZSBzdGFydCB3aXRoXG4gICAgICAgIC8vIGVycm9yVGhyb3duIHNldCB0byB0cnVlIGJlZm9yZSBzZXR0aW5nIGl0IHRvIGZhbHNlIGFmdGVyIGNhbGxpbmdcbiAgICAgICAgLy8gY2xvc2UgLS0gaWYgaXQncyBzdGlsbCBzZXQgdG8gdHJ1ZSBpbiB0aGUgZmluYWxseSBibG9jaywgaXQgbWVhbnNcbiAgICAgICAgLy8gd3JhcHBlci5jbG9zZSB0aHJldy5cbiAgICAgICAgZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICBpZiAoaW5pdERhdGEgIT09IE9CU0VSVkVEX0VSUk9SICYmIHdyYXBwZXIuY2xvc2UpIHtcbiAgICAgICAgICB3cmFwcGVyLmNsb3NlLmNhbGwodGhpcywgaW5pdERhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVycm9yVGhyb3duID0gZmFsc2U7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAvLyBUaGUgY2xvc2VyIGZvciB3cmFwcGVyIGkgdGhyZXcgYW4gZXJyb3I7IGNsb3NlIHRoZSByZW1haW5pbmdcbiAgICAgICAgICAvLyB3cmFwcGVycyBidXQgc2lsZW5jZSBhbnkgZXhjZXB0aW9ucyBmcm9tIHRoZW0gdG8gZW5zdXJlIHRoYXQgdGhlXG4gICAgICAgICAgLy8gZmlyc3QgZXJyb3IgaXMgdGhlIG9uZSB0byBidWJibGUgdXAuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VBbGwoaSArIDEpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy53cmFwcGVySW5pdERhdGEubGVuZ3RoID0gMDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2FjdGlvbkltcGw7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1RyYW5zYWN0aW9uLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBCYXNlZCBvbiB0aGUgZXNjYXBlLWh0bWwgbGlicmFyeSwgd2hpY2ggaXMgdXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgYmVsb3c6XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTMgVEogSG9sb3dheWNodWtcbiAqIENvcHlyaWdodCAoYykgMjAxNSBBbmRyZWFzIEx1YmJlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgVGlhbmNoZW5nIFwiVGltb3RoeVwiIEd1XG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG4gKiBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbiAqICdTb2Z0d2FyZScpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbiAqIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbiAqIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICogcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG4gKiB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4gKiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuXG4gKiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWVxuICogQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCxcbiAqIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4gKiBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBjb2RlIGNvcGllZCBhbmQgbW9kaWZpZWQgZnJvbSBlc2NhcGUtaHRtbFxuLyoqXG4gKiBNb2R1bGUgdmFyaWFibGVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgbWF0Y2hIdG1sUmVnRXhwID0gL1tcIicmPD5dLztcblxuLyoqXG4gKiBFc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIGluIHRoZSBnaXZlbiBzdHJpbmcgb2YgaHRtbC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGVzY2FwZSBmb3IgaW5zZXJ0aW5nIGludG8gSFRNTFxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVzY2FwZUh0bWwoc3RyaW5nKSB7XG4gIHZhciBzdHIgPSAnJyArIHN0cmluZztcbiAgdmFyIG1hdGNoID0gbWF0Y2hIdG1sUmVnRXhwLmV4ZWMoc3RyKTtcblxuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIHZhciBlc2NhcGU7XG4gIHZhciBodG1sID0gJyc7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0SW5kZXggPSAwO1xuXG4gIGZvciAoaW5kZXggPSBtYXRjaC5pbmRleDsgaW5kZXggPCBzdHIubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgc3dpdGNoIChzdHIuY2hhckNvZGVBdChpbmRleCkpIHtcbiAgICAgIGNhc2UgMzQ6XG4gICAgICAgIC8vIFwiXG4gICAgICAgIGVzY2FwZSA9ICcmcXVvdDsnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIC8vICZcbiAgICAgICAgZXNjYXBlID0gJyZhbXA7JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM5OlxuICAgICAgICAvLyAnXG4gICAgICAgIGVzY2FwZSA9ICcmI3gyNzsnOyAvLyBtb2RpZmllZCBmcm9tIGVzY2FwZS1odG1sOyB1c2VkIHRvIGJlICcmIzM5J1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNjA6XG4gICAgICAgIC8vIDxcbiAgICAgICAgZXNjYXBlID0gJyZsdDsnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNjI6XG4gICAgICAgIC8vID5cbiAgICAgICAgZXNjYXBlID0gJyZndDsnO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChsYXN0SW5kZXggIT09IGluZGV4KSB7XG4gICAgICBodG1sICs9IHN0ci5zdWJzdHJpbmcobGFzdEluZGV4LCBpbmRleCk7XG4gICAgfVxuXG4gICAgbGFzdEluZGV4ID0gaW5kZXggKyAxO1xuICAgIGh0bWwgKz0gZXNjYXBlO1xuICB9XG5cbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gaW5kZXggPyBodG1sICsgc3RyLnN1YnN0cmluZyhsYXN0SW5kZXgsIGluZGV4KSA6IGh0bWw7XG59XG4vLyBlbmQgY29kZSBjb3BpZWQgYW5kIG1vZGlmaWVkIGZyb20gZXNjYXBlLWh0bWxcblxuLyoqXG4gKiBFc2NhcGVzIHRleHQgdG8gcHJldmVudCBzY3JpcHRpbmcgYXR0YWNrcy5cbiAqXG4gKiBAcGFyYW0geyp9IHRleHQgVGV4dCB2YWx1ZSB0byBlc2NhcGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEFuIGVzY2FwZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodGV4dCkge1xuICBpZiAodHlwZW9mIHRleHQgPT09ICdib29sZWFuJyB8fCB0eXBlb2YgdGV4dCA9PT0gJ251bWJlcicpIHtcbiAgICAvLyB0aGlzIHNob3J0Y2lyY3VpdCBoZWxwcyBwZXJmIGZvciB0eXBlcyB0aGF0IHdlIGtub3cgd2lsbCBuZXZlciBoYXZlXG4gICAgLy8gc3BlY2lhbCBjaGFyYWN0ZXJzLCBlc3BlY2lhbGx5IGdpdmVuIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyB1c2VkIG9mdGVuXG4gICAgLy8gZm9yIG51bWVyaWMgZG9tIGlkcy5cbiAgICByZXR1cm4gJycgKyB0ZXh0O1xuICB9XG4gIHJldHVybiBlc2NhcGVIdG1sKHRleHQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xudmFyIERPTU5hbWVzcGFjZXMgPSByZXF1aXJlKCcuL0RPTU5hbWVzcGFjZXMnKTtcblxudmFyIFdISVRFU1BBQ0VfVEVTVCA9IC9eWyBcXHJcXG5cXHRcXGZdLztcbnZhciBOT05WSVNJQkxFX1RFU1QgPSAvPCghLS18bGlua3xub3NjcmlwdHxtZXRhfHNjcmlwdHxzdHlsZSlbIFxcclxcblxcdFxcZlxcLz5dLztcblxudmFyIGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24gPSByZXF1aXJlKCcuL2NyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24nKTtcblxuLy8gU1ZHIHRlbXAgY29udGFpbmVyIGZvciBJRSBsYWNraW5nIGlubmVySFRNTFxudmFyIHJldXNhYmxlU1ZHQ29udGFpbmVyO1xuXG4vKipcbiAqIFNldCB0aGUgaW5uZXJIVE1MIHByb3BlcnR5IG9mIGEgbm9kZSwgZW5zdXJpbmcgdGhhdCB3aGl0ZXNwYWNlIGlzIHByZXNlcnZlZFxuICogZXZlbiBpbiBJRTguXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gaHRtbFxuICogQGludGVybmFsXG4gKi9cbnZhciBzZXRJbm5lckhUTUwgPSBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uIChub2RlLCBodG1sKSB7XG4gIC8vIElFIGRvZXMgbm90IGhhdmUgaW5uZXJIVE1MIGZvciBTVkcgbm9kZXMsIHNvIGluc3RlYWQgd2UgaW5qZWN0IHRoZVxuICAvLyBuZXcgbWFya3VwIGluIGEgdGVtcCBub2RlIGFuZCB0aGVuIG1vdmUgdGhlIGNoaWxkIG5vZGVzIGFjcm9zcyBpbnRvXG4gIC8vIHRoZSB0YXJnZXQgbm9kZVxuICBpZiAobm9kZS5uYW1lc3BhY2VVUkkgPT09IERPTU5hbWVzcGFjZXMuc3ZnICYmICEoJ2lubmVySFRNTCcgaW4gbm9kZSkpIHtcbiAgICByZXVzYWJsZVNWR0NvbnRhaW5lciA9IHJldXNhYmxlU1ZHQ29udGFpbmVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHJldXNhYmxlU1ZHQ29udGFpbmVyLmlubmVySFRNTCA9ICc8c3ZnPicgKyBodG1sICsgJzwvc3ZnPic7XG4gICAgdmFyIHN2Z05vZGUgPSByZXVzYWJsZVNWR0NvbnRhaW5lci5maXJzdENoaWxkO1xuICAgIHdoaWxlIChzdmdOb2RlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoc3ZnTm9kZS5maXJzdENoaWxkKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5pbm5lckhUTUwgPSBodG1sO1xuICB9XG59KTtcblxuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAvLyBJRTg6IFdoZW4gdXBkYXRpbmcgYSBqdXN0IGNyZWF0ZWQgbm9kZSB3aXRoIGlubmVySFRNTCBvbmx5IGxlYWRpbmdcbiAgLy8gd2hpdGVzcGFjZSBpcyByZW1vdmVkLiBXaGVuIHVwZGF0aW5nIGFuIGV4aXN0aW5nIG5vZGUgd2l0aCBpbm5lckhUTUxcbiAgLy8gd2hpdGVzcGFjZSBpbiByb290IFRleHROb2RlcyBpcyBhbHNvIGNvbGxhcHNlZC5cbiAgLy8gQHNlZSBxdWlya3Ntb2RlLm9yZy9idWdyZXBvcnRzL2FyY2hpdmVzLzIwMDQvMTEvaW5uZXJodG1sX2FuZF90Lmh0bWxcblxuICAvLyBGZWF0dXJlIGRldGVjdGlvbjsgb25seSBJRTggaXMga25vd24gdG8gYmVoYXZlIGltcHJvcGVybHkgbGlrZSB0aGlzLlxuICB2YXIgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdGVzdEVsZW1lbnQuaW5uZXJIVE1MID0gJyAnO1xuICBpZiAodGVzdEVsZW1lbnQuaW5uZXJIVE1MID09PSAnJykge1xuICAgIHNldElubmVySFRNTCA9IGZ1bmN0aW9uIChub2RlLCBodG1sKSB7XG4gICAgICAvLyBNYWdpYyB0aGVvcnk6IElFOCBzdXBwb3NlZGx5IGRpZmZlcmVudGlhdGVzIGJldHdlZW4gYWRkZWQgYW5kIHVwZGF0ZWRcbiAgICAgIC8vIG5vZGVzIHdoZW4gcHJvY2Vzc2luZyBpbm5lckhUTUwsIGlubmVySFRNTCBvbiB1cGRhdGVkIG5vZGVzIHN1ZmZlcnNcbiAgICAgIC8vIGZyb20gd29yc2Ugd2hpdGVzcGFjZSBiZWhhdmlvci4gUmUtYWRkaW5nIGEgbm9kZSBsaWtlIHRoaXMgdHJpZ2dlcnNcbiAgICAgIC8vIHRoZSBpbml0aWFsIGFuZCBtb3JlIGZhdm9yYWJsZSB3aGl0ZXNwYWNlIGJlaGF2aW9yLlxuICAgICAgLy8gVE9ETzogV2hhdCB0byBkbyBvbiBhIGRldGFjaGVkIG5vZGU/XG4gICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobm9kZSwgbm9kZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdlIGFsc28gaW1wbGVtZW50IGEgd29ya2Fyb3VuZCBmb3Igbm9uLXZpc2libGUgdGFncyBkaXNhcHBlYXJpbmcgaW50b1xuICAgICAgLy8gdGhpbiBhaXIgb24gSUU4LCB0aGlzIG9ubHkgaGFwcGVucyBpZiB0aGVyZSBpcyBubyB2aXNpYmxlIHRleHRcbiAgICAgIC8vIGluLWZyb250IG9mIHRoZSBub24tdmlzaWJsZSB0YWdzLiBQaWdneWJhY2sgb24gdGhlIHdoaXRlc3BhY2UgZml4XG4gICAgICAvLyBhbmQgc2ltcGx5IGNoZWNrIGlmIGFueSBub24tdmlzaWJsZSB0YWdzIGFwcGVhciBpbiB0aGUgc291cmNlLlxuICAgICAgaWYgKFdISVRFU1BBQ0VfVEVTVC50ZXN0KGh0bWwpIHx8IGh0bWxbMF0gPT09ICc8JyAmJiBOT05WSVNJQkxFX1RFU1QudGVzdChodG1sKSkge1xuICAgICAgICAvLyBSZWNvdmVyIGxlYWRpbmcgd2hpdGVzcGFjZSBieSB0ZW1wb3JhcmlseSBwcmVwZW5kaW5nIGFueSBjaGFyYWN0ZXIuXG4gICAgICAgIC8vIFxcdUZFRkYgaGFzIHRoZSBwb3RlbnRpYWwgYWR2YW50YWdlIG9mIGJlaW5nIHplcm8td2lkdGgvaW52aXNpYmxlLlxuICAgICAgICAvLyBVZ2xpZnlKUyBkcm9wcyBVK0ZFRkYgY2hhcnMgd2hlbiBwYXJzaW5nLCBzbyB1c2UgU3RyaW5nLmZyb21DaGFyQ29kZVxuICAgICAgICAvLyBpbiBob3BlcyB0aGF0IHRoaXMgaXMgcHJlc2VydmVkIGV2ZW4gaWYgXCJcXHVGRUZGXCIgaXMgdHJhbnNmb3JtZWQgdG9cbiAgICAgICAgLy8gdGhlIGFjdHVhbCBVbmljb2RlIGNoYXJhY3RlciAoYnkgQmFiZWwsIGZvciBleGFtcGxlKS5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21pc2hvby9VZ2xpZnlKUzIvYmxvYi92Mi40LjIwL2xpYi9wYXJzZS5qcyNMMjE2XG4gICAgICAgIG5vZGUuaW5uZXJIVE1MID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGZlZmYpICsgaHRtbDtcblxuICAgICAgICAvLyBkZWxldGVEYXRhIGxlYXZlcyBhbiBlbXB0eSBgVGV4dE5vZGVgIHdoaWNoIG9mZnNldHMgdGhlIGluZGV4IG9mIGFsbFxuICAgICAgICAvLyBjaGlsZHJlbi4gRGVmaW5pdGVseSB3YW50IHRvIGF2b2lkIHRoaXMuXG4gICAgICAgIHZhciB0ZXh0Tm9kZSA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKHRleHROb2RlLmRhdGEubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgbm9kZS5yZW1vdmVDaGlsZCh0ZXh0Tm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dE5vZGUuZGVsZXRlRGF0YSgwLCAxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgdGVzdEVsZW1lbnQgPSBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldElubmVySFRNTDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvc2V0SW5uZXJIVE1MLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5EZWZpbmVQcm9wZXJ0eSA9IGZhbHNlO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdHJ5IHtcbiAgICAvLyAkRmxvd0ZpeE1lIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICd4JywgeyBnZXQ6IGZ1bmN0aW9uICgpIHt9IH0pO1xuICAgIGNhbkRlZmluZVByb3BlcnR5ID0gdHJ1ZTtcbiAgfSBjYXRjaCAoeCkge1xuICAgIC8vIElFIHdpbGwgZmFpbCBvbiBkZWZpbmVQcm9wZXJ0eVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FuRGVmaW5lUHJvcGVydHk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC9saWIvY2FuRGVmaW5lUHJvcGVydHkuanMiLCJpbXBvcnQgUmVhY3QgIGZyb20gJ3JlYWN0JztcbmltcG9ydCBSYWRpdW0gZnJvbSAncmFkaXVtJztcbmNsYXNzIFRleHQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxwIHN0eWxlPXtbc3R5bGVzLnRleHQsIHRoaXMucHJvcHMuc3R5bGVdfT57dGhpcy5wcm9wcy5jaGlsZHJlbn08L3A+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHRleHQ6IHtcbiAgICBmb250U2l6ZTogJzE2cHgnLFxuICAgIG1heFdpZHRoOiAnNzYwcHgnLFxuICAgIG1hcmdpbjogJ2F1dG8nLFxuICAgIHBhZGRpbmc6ICcyMHB4J1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpdW0oVGV4dCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvY29tcG9uZW50cy9UZXh0LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG4vLyBoZWxwZXIgdG8gY2FwaXRhbGl6ZSBzdHJpbmdzXG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3V0aWxzL2NhcGl0YWxpemVTdHJpbmcuanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHZhbHVlID0gdmFsdWUuam9pbignLCcpO1xuXG4gIHJldHVybiB2YWx1ZS5tYXRjaCgvLXdlYmtpdC18LW1vei18LW1zLS8pICE9PSBudWxsO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3V0aWxzL2lzUHJlZml4ZWRWYWx1ZS5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNzc1J1bGVTZXRUb1N0cmluZztcblxudmFyIF9hcHBlbmRQeElmTmVlZGVkID0gcmVxdWlyZSgnLi9hcHBlbmQtcHgtaWYtbmVlZGVkJyk7XG5cbnZhciBfYXBwZW5kUHhJZk5lZWRlZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hcHBlbmRQeElmTmVlZGVkKTtcblxudmFyIF9jYW1lbENhc2VQcm9wc1RvRGFzaENhc2UgPSByZXF1aXJlKCcuL2NhbWVsLWNhc2UtcHJvcHMtdG8tZGFzaC1jYXNlJyk7XG5cbnZhciBfY2FtZWxDYXNlUHJvcHNUb0Rhc2hDYXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhbWVsQ2FzZVByb3BzVG9EYXNoQ2FzZSk7XG5cbnZhciBfbWFwT2JqZWN0ID0gcmVxdWlyZSgnLi9tYXAtb2JqZWN0Jyk7XG5cbnZhciBfbWFwT2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hcE9iamVjdCk7XG5cbnZhciBfcHJlZml4ZXIgPSByZXF1aXJlKCcuL3ByZWZpeGVyJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGNyZWF0ZU1hcmt1cEZvclN0eWxlcyhzdHlsZSkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoc3R5bGUpLm1hcChmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICByZXR1cm4gcHJvcGVydHkgKyAnOiAnICsgc3R5bGVbcHJvcGVydHldICsgJzsnO1xuICB9KS5qb2luKCdcXG4nKTtcbn1cblxuZnVuY3Rpb24gY3NzUnVsZVNldFRvU3RyaW5nKHNlbGVjdG9yLCBydWxlcywgdXNlckFnZW50KSB7XG4gIGlmICghcnVsZXMpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICB2YXIgcnVsZXNXaXRoUHggPSAoMCwgX21hcE9iamVjdDIuZGVmYXVsdCkocnVsZXMsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgcmV0dXJuICgwLCBfYXBwZW5kUHhJZk5lZWRlZDIuZGVmYXVsdCkoa2V5LCB2YWx1ZSk7XG4gIH0pO1xuICB2YXIgcHJlZml4ZWRSdWxlcyA9ICgwLCBfcHJlZml4ZXIuZ2V0UHJlZml4ZWRTdHlsZSkocnVsZXNXaXRoUHgsIHVzZXJBZ2VudCk7XG4gIHZhciBjc3NQcmVmaXhlZFJ1bGVzID0gKDAsIF9jYW1lbENhc2VQcm9wc1RvRGFzaENhc2UyLmRlZmF1bHQpKHByZWZpeGVkUnVsZXMpO1xuICB2YXIgc2VyaWFsaXplZFJ1bGVzID0gY3JlYXRlTWFya3VwRm9yU3R5bGVzKGNzc1ByZWZpeGVkUnVsZXMpO1xuXG4gIHJldHVybiBzZWxlY3RvciArICd7JyArIHNlcmlhbGl6ZWRSdWxlcyArICd9Jztcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmFkaXVtL2xpYi9jc3MtcnVsZS1zZXQtdG8tc3RyaW5nLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2pzc3R5bGVzL2Nzcy12ZW5kb3IsIGJ1dCB3aXRob3V0IGhhdmluZyB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogY29udmVydCBiZXR3ZWVuIGRpZmZlcmVudCBjYXNlcyBhbGwgdGhlIHRpbWUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxuZXhwb3J0cy5nZXRQcmVmaXhlZEtleWZyYW1lcyA9IGdldFByZWZpeGVkS2V5ZnJhbWVzO1xuZXhwb3J0cy5nZXRQcmVmaXhlZFN0eWxlID0gZ2V0UHJlZml4ZWRTdHlsZTtcblxudmFyIF9pbmxpbmVTdHlsZVByZWZpeGVyID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyJyk7XG5cbnZhciBfaW5saW5lU3R5bGVQcmVmaXhlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmxpbmVTdHlsZVByZWZpeGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gdHJhbnNmb3JtVmFsdWVzKHN0eWxlKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhzdHlsZSkucmVkdWNlKGZ1bmN0aW9uIChuZXdTdHlsZSwga2V5KSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUuam9pbignOycgKyBrZXkgKyAnOicpO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpKSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgbmV3U3R5bGVba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiBuZXdTdHlsZTtcbiAgfSwge30pO1xufVxuXG52YXIgX2hhc1dhcm5lZEFib3V0VXNlckFnZW50ID0gZmFsc2U7XG52YXIgX2xhc3RVc2VyQWdlbnQgPSB2b2lkIDA7XG52YXIgX2NhY2hlZFByZWZpeGVyID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBnZXRQcmVmaXhlcih1c2VyQWdlbnQpIHtcbiAgdmFyIGFjdHVhbFVzZXJBZ2VudCA9IHVzZXJBZ2VudCB8fCBnbG9iYWwgJiYgZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghYWN0dWFsVXNlckFnZW50ICYmICFfaGFzV2FybmVkQWJvdXRVc2VyQWdlbnQpIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgICAgIGNvbnNvbGUud2FybignUmFkaXVtOiB1c2VyQWdlbnQgc2hvdWxkIGJlIHN1cHBsaWVkIGZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuIFNlZSAnICsgJ2h0dHBzOi8vZ2l0aHViLmNvbS9Gb3JtaWRhYmxlTGFicy9yYWRpdW0vdHJlZS9tYXN0ZXIvZG9jcy9hcGkjcmFkaXVtICcgKyAnZm9yIG1vcmUgaW5mb3JtYXRpb24uJyk7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgICAgIF9oYXNXYXJuZWRBYm91dFVzZXJBZ2VudCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFfY2FjaGVkUHJlZml4ZXIgfHwgYWN0dWFsVXNlckFnZW50ICE9PSBfbGFzdFVzZXJBZ2VudCkge1xuICAgIGlmIChhY3R1YWxVc2VyQWdlbnQgPT09ICdhbGwnKSB7XG4gICAgICBfY2FjaGVkUHJlZml4ZXIgPSB7XG4gICAgICAgIHByZWZpeDogX2lubGluZVN0eWxlUHJlZml4ZXIyLmRlZmF1bHQucHJlZml4QWxsLFxuICAgICAgICBwcmVmaXhlZEtleWZyYW1lczogJ2tleWZyYW1lcydcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIF9jYWNoZWRQcmVmaXhlciA9IG5ldyBfaW5saW5lU3R5bGVQcmVmaXhlcjIuZGVmYXVsdCh7IHVzZXJBZ2VudDogYWN0dWFsVXNlckFnZW50IH0pO1xuICAgIH1cbiAgICBfbGFzdFVzZXJBZ2VudCA9IGFjdHVhbFVzZXJBZ2VudDtcbiAgfVxuICByZXR1cm4gX2NhY2hlZFByZWZpeGVyO1xufVxuXG5mdW5jdGlvbiBnZXRQcmVmaXhlZEtleWZyYW1lcyh1c2VyQWdlbnQpIHtcbiAgcmV0dXJuIGdldFByZWZpeGVyKHVzZXJBZ2VudCkucHJlZml4ZWRLZXlmcmFtZXM7XG59XG5cbi8vIFJldHVybnMgYSBuZXcgc3R5bGUgb2JqZWN0IHdpdGggdmVuZG9yIHByZWZpeGVzIGFkZGVkIHRvIHByb3BlcnR5IG5hbWVzXG4vLyBhbmQgdmFsdWVzLlxuZnVuY3Rpb24gZ2V0UHJlZml4ZWRTdHlsZShzdHlsZSwgdXNlckFnZW50KSB7XG4gIHZhciBzdHlsZVdpdGhGYWxsYmFja3MgPSB0cmFuc2Zvcm1WYWx1ZXMoc3R5bGUpO1xuICB2YXIgcHJlZml4ZXIgPSBnZXRQcmVmaXhlcih1c2VyQWdlbnQpO1xuICB2YXIgcHJlZml4ZWRTdHlsZSA9IHByZWZpeGVyLnByZWZpeChzdHlsZVdpdGhGYWxsYmFja3MpO1xuICByZXR1cm4gcHJlZml4ZWRTdHlsZTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JhZGl1bS9saWIvcHJlZml4ZXIuanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBTdHlsZUtlZXBlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVLZWVwZXIodXNlckFnZW50KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlS2VlcGVyKTtcblxuICAgIHRoaXMuX3VzZXJBZ2VudCA9IHVzZXJBZ2VudDtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLl9jc3NTZXQgPSB7fTtcbiAgfVxuXG4gIFN0eWxlS2VlcGVyLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKSA9PT0gLTEpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgLy8gTXVzdCBiZSBmYXQgYXJyb3cgdG8gY2FwdHVyZSBgdGhpc2BcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICB2YXIgbGlzdGVuZXJJbmRleCA9IF90aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICAgIGlmIChsaXN0ZW5lckluZGV4ID4gLTEpIHtcbiAgICAgICAgICBfdGhpcy5fbGlzdGVuZXJzLnNwbGljZShsaXN0ZW5lckluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgU3R5bGVLZWVwZXIucHJvdG90eXBlLmFkZENTUyA9IGZ1bmN0aW9uIGFkZENTUyhjc3MpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIGlmICghdGhpcy5fY3NzU2V0W2Nzc10pIHtcbiAgICAgIHRoaXMuX2Nzc1NldFtjc3NdID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2VtaXRDaGFuZ2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgLy8gTXVzdCBiZSBmYXQgYXJyb3cgdG8gY2FwdHVyZSBgdGhpc2BcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICBkZWxldGUgX3RoaXMyLl9jc3NTZXRbY3NzXTtcbiAgICAgICAgX3RoaXMyLl9lbWl0Q2hhbmdlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBTdHlsZUtlZXBlci5wcm90b3R5cGUuZ2V0Q1NTID0gZnVuY3Rpb24gZ2V0Q1NTKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9jc3NTZXQpLmpvaW4oJ1xcbicpO1xuICB9O1xuXG4gIFN0eWxlS2VlcGVyLnByb3RvdHlwZS5fZW1pdENoYW5nZSA9IGZ1bmN0aW9uIF9lbWl0Q2hhbmdlKCkge1xuICAgIHRoaXMuX2xpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlS2VlcGVyO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTdHlsZUtlZXBlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmFkaXVtL2xpYi9zdHlsZS1rZWVwZXIuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01MYXp5VHJlZSA9IHJlcXVpcmUoJy4vRE9NTGF6eVRyZWUnKTtcbnZhciBEYW5nZXIgPSByZXF1aXJlKCcuL0RhbmdlcicpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG52YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG5cbnZhciBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uID0gcmVxdWlyZSgnLi9jcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uJyk7XG52YXIgc2V0SW5uZXJIVE1MID0gcmVxdWlyZSgnLi9zZXRJbm5lckhUTUwnKTtcbnZhciBzZXRUZXh0Q29udGVudCA9IHJlcXVpcmUoJy4vc2V0VGV4dENvbnRlbnQnKTtcblxuZnVuY3Rpb24gZ2V0Tm9kZUFmdGVyKHBhcmVudE5vZGUsIG5vZGUpIHtcbiAgLy8gU3BlY2lhbCBjYXNlIGZvciB0ZXh0IGNvbXBvbmVudHMsIHdoaWNoIHJldHVybiBbb3BlbiwgY2xvc2VdIGNvbW1lbnRzXG4gIC8vIGZyb20gZ2V0SG9zdE5vZGUuXG4gIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgbm9kZSA9IG5vZGVbMV07XG4gIH1cbiAgcmV0dXJuIG5vZGUgPyBub2RlLm5leHRTaWJsaW5nIDogcGFyZW50Tm9kZS5maXJzdENoaWxkO1xufVxuXG4vKipcbiAqIEluc2VydHMgYGNoaWxkTm9kZWAgYXMgYSBjaGlsZCBvZiBgcGFyZW50Tm9kZWAgYXQgdGhlIGBpbmRleGAuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnROb2RlIFBhcmVudCBub2RlIGluIHdoaWNoIHRvIGluc2VydC5cbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY2hpbGROb2RlIENoaWxkIG5vZGUgdG8gaW5zZXJ0LlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IGF0IHdoaWNoIHRvIGluc2VydCB0aGUgY2hpbGQuXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIGluc2VydENoaWxkQXQgPSBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uIChwYXJlbnROb2RlLCBjaGlsZE5vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgLy8gV2UgcmVseSBleGNsdXNpdmVseSBvbiBgaW5zZXJ0QmVmb3JlKG5vZGUsIG51bGwpYCBpbnN0ZWFkIG9mIGFsc28gdXNpbmdcbiAgLy8gYGFwcGVuZENoaWxkKG5vZGUpYC4gKFVzaW5nIGB1bmRlZmluZWRgIGlzIG5vdCBhbGxvd2VkIGJ5IGFsbCBicm93c2VycyBzb1xuICAvLyB3ZSBhcmUgY2FyZWZ1bCB0byB1c2UgYG51bGxgLilcbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY2hpbGROb2RlLCByZWZlcmVuY2VOb2RlKTtcbn0pO1xuXG5mdW5jdGlvbiBpbnNlcnRMYXp5VHJlZUNoaWxkQXQocGFyZW50Tm9kZSwgY2hpbGRUcmVlLCByZWZlcmVuY2VOb2RlKSB7XG4gIERPTUxhenlUcmVlLmluc2VydFRyZWVCZWZvcmUocGFyZW50Tm9kZSwgY2hpbGRUcmVlLCByZWZlcmVuY2VOb2RlKTtcbn1cblxuZnVuY3Rpb24gbW92ZUNoaWxkKHBhcmVudE5vZGUsIGNoaWxkTm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZE5vZGUpKSB7XG4gICAgbW92ZURlbGltaXRlZFRleHQocGFyZW50Tm9kZSwgY2hpbGROb2RlWzBdLCBjaGlsZE5vZGVbMV0sIHJlZmVyZW5jZU5vZGUpO1xuICB9IGVsc2Uge1xuICAgIGluc2VydENoaWxkQXQocGFyZW50Tm9kZSwgY2hpbGROb2RlLCByZWZlcmVuY2VOb2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZChwYXJlbnROb2RlLCBjaGlsZE5vZGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGROb2RlKSkge1xuICAgIHZhciBjbG9zaW5nQ29tbWVudCA9IGNoaWxkTm9kZVsxXTtcbiAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGVbMF07XG4gICAgcmVtb3ZlRGVsaW1pdGVkVGV4dChwYXJlbnROb2RlLCBjaGlsZE5vZGUsIGNsb3NpbmdDb21tZW50KTtcbiAgICBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb3NpbmdDb21tZW50KTtcbiAgfVxuICBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZSk7XG59XG5cbmZ1bmN0aW9uIG1vdmVEZWxpbWl0ZWRUZXh0KHBhcmVudE5vZGUsIG9wZW5pbmdDb21tZW50LCBjbG9zaW5nQ29tbWVudCwgcmVmZXJlbmNlTm9kZSkge1xuICB2YXIgbm9kZSA9IG9wZW5pbmdDb21tZW50O1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHZhciBuZXh0Tm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgaW5zZXJ0Q2hpbGRBdChwYXJlbnROb2RlLCBub2RlLCByZWZlcmVuY2VOb2RlKTtcbiAgICBpZiAobm9kZSA9PT0gY2xvc2luZ0NvbW1lbnQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBub2RlID0gbmV4dE5vZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlRGVsaW1pdGVkVGV4dChwYXJlbnROb2RlLCBzdGFydE5vZGUsIGNsb3NpbmdDb21tZW50KSB7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgdmFyIG5vZGUgPSBzdGFydE5vZGUubmV4dFNpYmxpbmc7XG4gICAgaWYgKG5vZGUgPT09IGNsb3NpbmdDb21tZW50KSB7XG4gICAgICAvLyBUaGUgY2xvc2luZyBjb21tZW50IGlzIHJlbW92ZWQgYnkgUmVhY3RNdWx0aUNoaWxkLlxuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VEZWxpbWl0ZWRUZXh0KG9wZW5pbmdDb21tZW50LCBjbG9zaW5nQ29tbWVudCwgc3RyaW5nVGV4dCkge1xuICB2YXIgcGFyZW50Tm9kZSA9IG9wZW5pbmdDb21tZW50LnBhcmVudE5vZGU7XG4gIHZhciBub2RlQWZ0ZXJDb21tZW50ID0gb3BlbmluZ0NvbW1lbnQubmV4dFNpYmxpbmc7XG4gIGlmIChub2RlQWZ0ZXJDb21tZW50ID09PSBjbG9zaW5nQ29tbWVudCkge1xuICAgIC8vIFRoZXJlIGFyZSBubyB0ZXh0IG5vZGVzIGJldHdlZW4gdGhlIG9wZW5pbmcgYW5kIGNsb3NpbmcgY29tbWVudHM7IGluc2VydFxuICAgIC8vIGEgbmV3IG9uZSBpZiBzdHJpbmdUZXh0IGlzbid0IGVtcHR5LlxuICAgIGlmIChzdHJpbmdUZXh0KSB7XG4gICAgICBpbnNlcnRDaGlsZEF0KHBhcmVudE5vZGUsIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHN0cmluZ1RleHQpLCBub2RlQWZ0ZXJDb21tZW50KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHN0cmluZ1RleHQpIHtcbiAgICAgIC8vIFNldCB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSBmaXJzdCBub2RlIGFmdGVyIHRoZSBvcGVuaW5nIGNvbW1lbnQsIGFuZFxuICAgICAgLy8gcmVtb3ZlIGFsbCBmb2xsb3dpbmcgbm9kZXMgdXAgdW50aWwgdGhlIGNsb3NpbmcgY29tbWVudC5cbiAgICAgIHNldFRleHRDb250ZW50KG5vZGVBZnRlckNvbW1lbnQsIHN0cmluZ1RleHQpO1xuICAgICAgcmVtb3ZlRGVsaW1pdGVkVGV4dChwYXJlbnROb2RlLCBub2RlQWZ0ZXJDb21tZW50LCBjbG9zaW5nQ29tbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZURlbGltaXRlZFRleHQocGFyZW50Tm9kZSwgb3BlbmluZ0NvbW1lbnQsIGNsb3NpbmdDb21tZW50KTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkhvc3RPcGVyYXRpb24oe1xuICAgICAgaW5zdGFuY2VJRDogUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUob3BlbmluZ0NvbW1lbnQpLl9kZWJ1Z0lELFxuICAgICAgdHlwZTogJ3JlcGxhY2UgdGV4dCcsXG4gICAgICBwYXlsb2FkOiBzdHJpbmdUZXh0XG4gICAgfSk7XG4gIH1cbn1cblxudmFyIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwID0gRGFuZ2VyLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAgPSBmdW5jdGlvbiAob2xkQ2hpbGQsIG1hcmt1cCwgcHJldkluc3RhbmNlKSB7XG4gICAgRGFuZ2VyLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKG9sZENoaWxkLCBtYXJrdXApO1xuICAgIGlmIChwcmV2SW5zdGFuY2UuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkhvc3RPcGVyYXRpb24oe1xuICAgICAgICBpbnN0YW5jZUlEOiBwcmV2SW5zdGFuY2UuX2RlYnVnSUQsXG4gICAgICAgIHR5cGU6ICdyZXBsYWNlIHdpdGgnLFxuICAgICAgICBwYXlsb2FkOiBtYXJrdXAudG9TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBuZXh0SW5zdGFuY2UgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShtYXJrdXAubm9kZSk7XG4gICAgICBpZiAobmV4dEluc3RhbmNlLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkhvc3RPcGVyYXRpb24oe1xuICAgICAgICAgIGluc3RhbmNlSUQ6IG5leHRJbnN0YW5jZS5fZGVidWdJRCxcbiAgICAgICAgICB0eXBlOiAnbW91bnQnLFxuICAgICAgICAgIHBheWxvYWQ6IG1hcmt1cC50b1N0cmluZygpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBPcGVyYXRpb25zIGZvciB1cGRhdGluZyB3aXRoIERPTSBjaGlsZHJlbi5cbiAqL1xudmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucyA9IHtcbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA6IGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwLFxuXG4gIHJlcGxhY2VEZWxpbWl0ZWRUZXh0OiByZXBsYWNlRGVsaW1pdGVkVGV4dCxcblxuICAvKipcbiAgICogVXBkYXRlcyBhIGNvbXBvbmVudCdzIGNoaWxkcmVuIGJ5IHByb2Nlc3NpbmcgYSBzZXJpZXMgb2YgdXBkYXRlcy4gVGhlXG4gICAqIHVwZGF0ZSBjb25maWd1cmF0aW9ucyBhcmUgZWFjaCBleHBlY3RlZCB0byBoYXZlIGEgYHBhcmVudE5vZGVgIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5PG9iamVjdD59IHVwZGF0ZXMgTGlzdCBvZiB1cGRhdGUgY29uZmlndXJhdGlvbnMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHJvY2Vzc1VwZGF0ZXM6IGZ1bmN0aW9uIChwYXJlbnROb2RlLCB1cGRhdGVzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBwYXJlbnROb2RlRGVidWdJRCA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKHBhcmVudE5vZGUpLl9kZWJ1Z0lEO1xuICAgIH1cblxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdXBkYXRlcy5sZW5ndGg7IGsrKykge1xuICAgICAgdmFyIHVwZGF0ZSA9IHVwZGF0ZXNba107XG4gICAgICBzd2l0Y2ggKHVwZGF0ZS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ0lOU0VSVF9NQVJLVVAnOlxuICAgICAgICAgIGluc2VydExhenlUcmVlQ2hpbGRBdChwYXJlbnROb2RlLCB1cGRhdGUuY29udGVudCwgZ2V0Tm9kZUFmdGVyKHBhcmVudE5vZGUsIHVwZGF0ZS5hZnRlck5vZGUpKTtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7XG4gICAgICAgICAgICAgIGluc3RhbmNlSUQ6IHBhcmVudE5vZGVEZWJ1Z0lELFxuICAgICAgICAgICAgICB0eXBlOiAnaW5zZXJ0IGNoaWxkJyxcbiAgICAgICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgICAgIHRvSW5kZXg6IHVwZGF0ZS50b0luZGV4LFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHVwZGF0ZS5jb250ZW50LnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdNT1ZFX0VYSVNUSU5HJzpcbiAgICAgICAgICBtb3ZlQ2hpbGQocGFyZW50Tm9kZSwgdXBkYXRlLmZyb21Ob2RlLCBnZXROb2RlQWZ0ZXIocGFyZW50Tm9kZSwgdXBkYXRlLmFmdGVyTm9kZSkpO1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Ib3N0T3BlcmF0aW9uKHtcbiAgICAgICAgICAgICAgaW5zdGFuY2VJRDogcGFyZW50Tm9kZURlYnVnSUQsXG4gICAgICAgICAgICAgIHR5cGU6ICdtb3ZlIGNoaWxkJyxcbiAgICAgICAgICAgICAgcGF5bG9hZDogeyBmcm9tSW5kZXg6IHVwZGF0ZS5mcm9tSW5kZXgsIHRvSW5kZXg6IHVwZGF0ZS50b0luZGV4IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnU0VUX01BUktVUCc6XG4gICAgICAgICAgc2V0SW5uZXJIVE1MKHBhcmVudE5vZGUsIHVwZGF0ZS5jb250ZW50KTtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7XG4gICAgICAgICAgICAgIGluc3RhbmNlSUQ6IHBhcmVudE5vZGVEZWJ1Z0lELFxuICAgICAgICAgICAgICB0eXBlOiAncmVwbGFjZSBjaGlsZHJlbicsXG4gICAgICAgICAgICAgIHBheWxvYWQ6IHVwZGF0ZS5jb250ZW50LnRvU3RyaW5nKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnVEVYVF9DT05URU5UJzpcbiAgICAgICAgICBzZXRUZXh0Q29udGVudChwYXJlbnROb2RlLCB1cGRhdGUuY29udGVudCk7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkhvc3RPcGVyYXRpb24oe1xuICAgICAgICAgICAgICBpbnN0YW5jZUlEOiBwYXJlbnROb2RlRGVidWdJRCxcbiAgICAgICAgICAgICAgdHlwZTogJ3JlcGxhY2UgdGV4dCcsXG4gICAgICAgICAgICAgIHBheWxvYWQ6IHVwZGF0ZS5jb250ZW50LnRvU3RyaW5nKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnUkVNT1ZFX05PREUnOlxuICAgICAgICAgIHJlbW92ZUNoaWxkKHBhcmVudE5vZGUsIHVwZGF0ZS5mcm9tTm9kZSk7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkhvc3RPcGVyYXRpb24oe1xuICAgICAgICAgICAgICBpbnN0YW5jZUlEOiBwYXJlbnROb2RlRGVidWdJRCxcbiAgICAgICAgICAgICAgdHlwZTogJ3JlbW92ZSBjaGlsZCcsXG4gICAgICAgICAgICAgIHBheWxvYWQ6IHsgZnJvbUluZGV4OiB1cGRhdGUuZnJvbUluZGV4IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NQ2hpbGRyZW5PcGVyYXRpb25zO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9ET01DaGlsZHJlbk9wZXJhdGlvbnMuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01OYW1lc3BhY2VzID0ge1xuICBodG1sOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsXG4gIG1hdGhtbDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnLFxuICBzdmc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zydcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NTmFtZXNwYWNlcztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvRE9NTmFtZXNwYWNlcy5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIFJlYWN0RXJyb3JVdGlscyA9IHJlcXVpcmUoJy4vUmVhY3RFcnJvclV0aWxzJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG4vKipcbiAqIEluamVjdGVkIGRlcGVuZGVuY2llczpcbiAqL1xuXG4vKipcbiAqIC0gYENvbXBvbmVudFRyZWVgOiBbcmVxdWlyZWRdIE1vZHVsZSB0aGF0IGNhbiBjb252ZXJ0IGJldHdlZW4gUmVhY3QgaW5zdGFuY2VzXG4gKiAgIGFuZCBhY3R1YWwgbm9kZSByZWZlcmVuY2VzLlxuICovXG52YXIgQ29tcG9uZW50VHJlZTtcbnZhciBUcmVlVHJhdmVyc2FsO1xudmFyIGluamVjdGlvbiA9IHtcbiAgaW5qZWN0Q29tcG9uZW50VHJlZTogZnVuY3Rpb24gKEluamVjdGVkKSB7XG4gICAgQ29tcG9uZW50VHJlZSA9IEluamVjdGVkO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhJbmplY3RlZCAmJiBJbmplY3RlZC5nZXROb2RlRnJvbUluc3RhbmNlICYmIEluamVjdGVkLmdldEluc3RhbmNlRnJvbU5vZGUsICdFdmVudFBsdWdpblV0aWxzLmluamVjdGlvbi5pbmplY3RDb21wb25lbnRUcmVlKC4uLik6IEluamVjdGVkICcgKyAnbW9kdWxlIGlzIG1pc3NpbmcgZ2V0Tm9kZUZyb21JbnN0YW5jZSBvciBnZXRJbnN0YW5jZUZyb21Ob2RlLicpIDogdm9pZCAwO1xuICAgIH1cbiAgfSxcbiAgaW5qZWN0VHJlZVRyYXZlcnNhbDogZnVuY3Rpb24gKEluamVjdGVkKSB7XG4gICAgVHJlZVRyYXZlcnNhbCA9IEluamVjdGVkO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhJbmplY3RlZCAmJiBJbmplY3RlZC5pc0FuY2VzdG9yICYmIEluamVjdGVkLmdldExvd2VzdENvbW1vbkFuY2VzdG9yLCAnRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24uaW5qZWN0VHJlZVRyYXZlcnNhbCguLi4pOiBJbmplY3RlZCAnICsgJ21vZHVsZSBpcyBtaXNzaW5nIGlzQW5jZXN0b3Igb3IgZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IuJykgOiB2b2lkIDA7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBpc0VuZGlzaCh0b3BMZXZlbFR5cGUpIHtcbiAgcmV0dXJuIHRvcExldmVsVHlwZSA9PT0gJ3RvcE1vdXNlVXAnIHx8IHRvcExldmVsVHlwZSA9PT0gJ3RvcFRvdWNoRW5kJyB8fCB0b3BMZXZlbFR5cGUgPT09ICd0b3BUb3VjaENhbmNlbCc7XG59XG5cbmZ1bmN0aW9uIGlzTW92ZWlzaCh0b3BMZXZlbFR5cGUpIHtcbiAgcmV0dXJuIHRvcExldmVsVHlwZSA9PT0gJ3RvcE1vdXNlTW92ZScgfHwgdG9wTGV2ZWxUeXBlID09PSAndG9wVG91Y2hNb3ZlJztcbn1cbmZ1bmN0aW9uIGlzU3RhcnRpc2godG9wTGV2ZWxUeXBlKSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09ICd0b3BNb3VzZURvd24nIHx8IHRvcExldmVsVHlwZSA9PT0gJ3RvcFRvdWNoU3RhcnQnO1xufVxuXG52YXIgdmFsaWRhdGVFdmVudERpc3BhdGNoZXM7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBkaXNwYXRjaExpc3RlbmVycyA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgICB2YXIgZGlzcGF0Y2hJbnN0YW5jZXMgPSBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXM7XG5cbiAgICB2YXIgbGlzdGVuZXJzSXNBcnIgPSBBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXJzKTtcbiAgICB2YXIgbGlzdGVuZXJzTGVuID0gbGlzdGVuZXJzSXNBcnIgPyBkaXNwYXRjaExpc3RlbmVycy5sZW5ndGggOiBkaXNwYXRjaExpc3RlbmVycyA/IDEgOiAwO1xuXG4gICAgdmFyIGluc3RhbmNlc0lzQXJyID0gQXJyYXkuaXNBcnJheShkaXNwYXRjaEluc3RhbmNlcyk7XG4gICAgdmFyIGluc3RhbmNlc0xlbiA9IGluc3RhbmNlc0lzQXJyID8gZGlzcGF0Y2hJbnN0YW5jZXMubGVuZ3RoIDogZGlzcGF0Y2hJbnN0YW5jZXMgPyAxIDogMDtcblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGluc3RhbmNlc0lzQXJyID09PSBsaXN0ZW5lcnNJc0FyciAmJiBpbnN0YW5jZXNMZW4gPT09IGxpc3RlbmVyc0xlbiwgJ0V2ZW50UGx1Z2luVXRpbHM6IEludmFsaWQgYGV2ZW50YC4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCB0aGUgZXZlbnQgdG8gdGhlIGxpc3RlbmVyLlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgU3ludGhldGljRXZlbnQgdG8gaGFuZGxlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHNpbXVsYXRlZCBJZiB0aGUgZXZlbnQgaXMgc2ltdWxhdGVkIChjaGFuZ2VzIGV4biBiZWhhdmlvcilcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIEFwcGxpY2F0aW9uLWxldmVsIGNhbGxiYWNrXG4gKiBAcGFyYW0geyp9IGluc3QgSW50ZXJuYWwgY29tcG9uZW50IGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGV4ZWN1dGVEaXNwYXRjaChldmVudCwgc2ltdWxhdGVkLCBsaXN0ZW5lciwgaW5zdCkge1xuICB2YXIgdHlwZSA9IGV2ZW50LnR5cGUgfHwgJ3Vua25vd24tZXZlbnQnO1xuICBldmVudC5jdXJyZW50VGFyZ2V0ID0gRXZlbnRQbHVnaW5VdGlscy5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuICBpZiAoc2ltdWxhdGVkKSB7XG4gICAgUmVhY3RFcnJvclV0aWxzLmludm9rZUd1YXJkZWRDYWxsYmFja1dpdGhDYXRjaCh0eXBlLCBsaXN0ZW5lciwgZXZlbnQpO1xuICB9IGVsc2Uge1xuICAgIFJlYWN0RXJyb3JVdGlscy5pbnZva2VHdWFyZGVkQ2FsbGJhY2sodHlwZSwgbGlzdGVuZXIsIGV2ZW50KTtcbiAgfVxuICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbn1cblxuLyoqXG4gKiBTdGFuZGFyZC9zaW1wbGUgaXRlcmF0aW9uIHRocm91Z2ggYW4gZXZlbnQncyBjb2xsZWN0ZWQgZGlzcGF0Y2hlcy5cbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyKGV2ZW50LCBzaW11bGF0ZWQpIHtcbiAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICB2YXIgZGlzcGF0Y2hJbnN0YW5jZXMgPSBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXM7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMoZXZlbnQpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXJzKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gTGlzdGVuZXJzIGFuZCBJbnN0YW5jZXMgYXJlIHR3byBwYXJhbGxlbCBhcnJheXMgdGhhdCBhcmUgYWx3YXlzIGluIHN5bmMuXG4gICAgICBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIHNpbXVsYXRlZCwgZGlzcGF0Y2hMaXN0ZW5lcnNbaV0sIGRpc3BhdGNoSW5zdGFuY2VzW2ldKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGlzcGF0Y2hMaXN0ZW5lcnMpIHtcbiAgICBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIHNpbXVsYXRlZCwgZGlzcGF0Y2hMaXN0ZW5lcnMsIGRpc3BhdGNoSW5zdGFuY2VzKTtcbiAgfVxuICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBudWxsO1xuICBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMgPSBudWxsO1xufVxuXG4vKipcbiAqIFN0YW5kYXJkL3NpbXBsZSBpdGVyYXRpb24gdGhyb3VnaCBhbiBldmVudCdzIGNvbGxlY3RlZCBkaXNwYXRjaGVzLCBidXQgc3RvcHNcbiAqIGF0IHRoZSBmaXJzdCBkaXNwYXRjaCBleGVjdXRpb24gcmV0dXJuaW5nIHRydWUsIGFuZCByZXR1cm5zIHRoYXQgaWQuXG4gKlxuICogQHJldHVybiB7P3N0cmluZ30gaWQgb2YgdGhlIGZpcnN0IGRpc3BhdGNoIGV4ZWN1dGlvbiB3aG8ncyBsaXN0ZW5lciByZXR1cm5zXG4gKiB0cnVlLCBvciBudWxsIGlmIG5vIGxpc3RlbmVyIHJldHVybmVkIHRydWUuXG4gKi9cbmZ1bmN0aW9uIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsKGV2ZW50KSB7XG4gIHZhciBkaXNwYXRjaExpc3RlbmVycyA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgdmFyIGRpc3BhdGNoSW5zdGFuY2VzID0gZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzKGV2ZW50KTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycykpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vIExpc3RlbmVycyBhbmQgSW5zdGFuY2VzIGFyZSB0d28gcGFyYWxsZWwgYXJyYXlzIHRoYXQgYXJlIGFsd2F5cyBpbiBzeW5jLlxuICAgICAgaWYgKGRpc3BhdGNoTGlzdGVuZXJzW2ldKGV2ZW50LCBkaXNwYXRjaEluc3RhbmNlc1tpXSkpIHtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoSW5zdGFuY2VzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChkaXNwYXRjaExpc3RlbmVycykge1xuICAgIGlmIChkaXNwYXRjaExpc3RlbmVycyhldmVudCwgZGlzcGF0Y2hJbnN0YW5jZXMpKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2hJbnN0YW5jZXM7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEBzZWUgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGxcbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZShldmVudCkge1xuICB2YXIgcmV0ID0gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGwoZXZlbnQpO1xuICBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMgPSBudWxsO1xuICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBudWxsO1xuICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIEV4ZWN1dGlvbiBvZiBhIFwiZGlyZWN0XCIgZGlzcGF0Y2ggLSB0aGVyZSBtdXN0IGJlIGF0IG1vc3Qgb25lIGRpc3BhdGNoXG4gKiBhY2N1bXVsYXRlZCBvbiB0aGUgZXZlbnQgb3IgaXQgaXMgY29uc2lkZXJlZCBhbiBlcnJvci4gSXQgZG9lc24ndCByZWFsbHkgbWFrZVxuICogc2Vuc2UgZm9yIGFuIGV2ZW50IHdpdGggbXVsdGlwbGUgZGlzcGF0Y2hlcyAoYnViYmxlZCkgdG8ga2VlcCB0cmFjayBvZiB0aGVcbiAqIHJldHVybiB2YWx1ZXMgYXQgZWFjaCBkaXNwYXRjaCBleGVjdXRpb24sIGJ1dCBpdCBkb2VzIHRlbmQgdG8gbWFrZSBzZW5zZSB3aGVuXG4gKiBkZWFsaW5nIHdpdGggXCJkaXJlY3RcIiBkaXNwYXRjaGVzLlxuICpcbiAqIEByZXR1cm4geyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgZXhlY3V0aW5nIHRoZSBzaW5nbGUgZGlzcGF0Y2guXG4gKi9cbmZ1bmN0aW9uIGV4ZWN1dGVEaXJlY3REaXNwYXRjaChldmVudCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzKGV2ZW50KTtcbiAgfVxuICB2YXIgZGlzcGF0Y2hMaXN0ZW5lciA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgdmFyIGRpc3BhdGNoSW5zdGFuY2UgPSBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXM7XG4gICEhQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVyKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdleGVjdXRlRGlyZWN0RGlzcGF0Y2goLi4uKTogSW52YWxpZCBgZXZlbnRgLicpIDogX3Byb2RJbnZhcmlhbnQoJzEwMycpIDogdm9pZCAwO1xuICBldmVudC5jdXJyZW50VGFyZ2V0ID0gZGlzcGF0Y2hMaXN0ZW5lciA/IEV2ZW50UGx1Z2luVXRpbHMuZ2V0Tm9kZUZyb21JbnN0YW5jZShkaXNwYXRjaEluc3RhbmNlKSA6IG51bGw7XG4gIHZhciByZXMgPSBkaXNwYXRjaExpc3RlbmVyID8gZGlzcGF0Y2hMaXN0ZW5lcihldmVudCkgOiBudWxsO1xuICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbiAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gbnVsbDtcbiAgZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzID0gbnVsbDtcbiAgcmV0dXJuIHJlcztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZmYgbnVtYmVyIG9mIGRpc3BhdGNoZXMgYWNjdW11bGF0ZWQgaXMgZ3JlYXRlciB0aGFuIDAuXG4gKi9cbmZ1bmN0aW9uIGhhc0Rpc3BhdGNoZXMoZXZlbnQpIHtcbiAgcmV0dXJuICEhZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xufVxuXG4vKipcbiAqIEdlbmVyYWwgdXRpbGl0aWVzIHRoYXQgYXJlIHVzZWZ1bCBpbiBjcmVhdGluZyBjdXN0b20gRXZlbnQgUGx1Z2lucy5cbiAqL1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSB7XG4gIGlzRW5kaXNoOiBpc0VuZGlzaCxcbiAgaXNNb3ZlaXNoOiBpc01vdmVpc2gsXG4gIGlzU3RhcnRpc2g6IGlzU3RhcnRpc2gsXG5cbiAgZXhlY3V0ZURpcmVjdERpc3BhdGNoOiBleGVjdXRlRGlyZWN0RGlzcGF0Y2gsXG4gIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcjogZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyLFxuICBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlOiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlLFxuICBoYXNEaXNwYXRjaGVzOiBoYXNEaXNwYXRjaGVzLFxuXG4gIGdldEluc3RhbmNlRnJvbU5vZGU6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShub2RlKTtcbiAgfSxcbiAgZ2V0Tm9kZUZyb21JbnN0YW5jZTogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKG5vZGUpO1xuICB9LFxuICBpc0FuY2VzdG9yOiBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBUcmVlVHJhdmVyc2FsLmlzQW5jZXN0b3IoYSwgYik7XG4gIH0sXG4gIGdldExvd2VzdENvbW1vbkFuY2VzdG9yOiBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBUcmVlVHJhdmVyc2FsLmdldExvd2VzdENvbW1vbkFuY2VzdG9yKGEsIGIpO1xuICB9LFxuICBnZXRQYXJlbnRJbnN0YW5jZTogZnVuY3Rpb24gKGluc3QpIHtcbiAgICByZXR1cm4gVHJlZVRyYXZlcnNhbC5nZXRQYXJlbnRJbnN0YW5jZShpbnN0KTtcbiAgfSxcbiAgdHJhdmVyc2VUd29QaGFzZTogZnVuY3Rpb24gKHRhcmdldCwgZm4sIGFyZykge1xuICAgIHJldHVybiBUcmVlVHJhdmVyc2FsLnRyYXZlcnNlVHdvUGhhc2UodGFyZ2V0LCBmbiwgYXJnKTtcbiAgfSxcbiAgdHJhdmVyc2VFbnRlckxlYXZlOiBmdW5jdGlvbiAoZnJvbSwgdG8sIGZuLCBhcmdGcm9tLCBhcmdUbykge1xuICAgIHJldHVybiBUcmVlVHJhdmVyc2FsLnRyYXZlcnNlRW50ZXJMZWF2ZShmcm9tLCB0bywgZm4sIGFyZ0Zyb20sIGFyZ1RvKTtcbiAgfSxcblxuICBpbmplY3Rpb246IGluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFBsdWdpblV0aWxzO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9FdmVudFBsdWdpblV0aWxzLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRXNjYXBlIGFuZCB3cmFwIGtleSBzbyBpdCBpcyBzYWZlIHRvIHVzZSBhcyBhIHJlYWN0aWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRvIGJlIGVzY2FwZWQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBlc2NhcGVkIGtleS5cbiAqL1xuXG5mdW5jdGlvbiBlc2NhcGUoa2V5KSB7XG4gIHZhciBlc2NhcGVSZWdleCA9IC9bPTpdL2c7XG4gIHZhciBlc2NhcGVyTG9va3VwID0ge1xuICAgICc9JzogJz0wJyxcbiAgICAnOic6ICc9MidcbiAgfTtcbiAgdmFyIGVzY2FwZWRTdHJpbmcgPSAoJycgKyBrZXkpLnJlcGxhY2UoZXNjYXBlUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiBlc2NhcGVyTG9va3VwW21hdGNoXTtcbiAgfSk7XG5cbiAgcmV0dXJuICckJyArIGVzY2FwZWRTdHJpbmc7XG59XG5cbi8qKlxuICogVW5lc2NhcGUgYW5kIHVud3JhcCBrZXkgZm9yIGh1bWFuLXJlYWRhYmxlIGRpc3BsYXlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRvIHVuZXNjYXBlLlxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgdW5lc2NhcGVkIGtleS5cbiAqL1xuZnVuY3Rpb24gdW5lc2NhcGUoa2V5KSB7XG4gIHZhciB1bmVzY2FwZVJlZ2V4ID0gLyg9MHw9MikvZztcbiAgdmFyIHVuZXNjYXBlckxvb2t1cCA9IHtcbiAgICAnPTAnOiAnPScsXG4gICAgJz0yJzogJzonXG4gIH07XG4gIHZhciBrZXlTdWJzdHJpbmcgPSBrZXlbMF0gPT09ICcuJyAmJiBrZXlbMV0gPT09ICckJyA/IGtleS5zdWJzdHJpbmcoMikgOiBrZXkuc3Vic3RyaW5nKDEpO1xuXG4gIHJldHVybiAoJycgKyBrZXlTdWJzdHJpbmcpLnJlcGxhY2UodW5lc2NhcGVSZWdleCwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgcmV0dXJuIHVuZXNjYXBlckxvb2t1cFttYXRjaF07XG4gIH0pO1xufVxuXG52YXIgS2V5RXNjYXBlVXRpbHMgPSB7XG4gIGVzY2FwZTogZXNjYXBlLFxuICB1bmVzY2FwZTogdW5lc2NhcGVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gS2V5RXNjYXBlVXRpbHM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL0tleUVzY2FwZVV0aWxzLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG52YXIgcHJvcFR5cGVzRmFjdG9yeSA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMvZmFjdG9yeScpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3QnKTtcbnZhciBQcm9wVHlwZXMgPSBwcm9wVHlwZXNGYWN0b3J5KFJlYWN0LmlzVmFsaWRFbGVtZW50KTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBoYXNSZWFkT25seVZhbHVlID0ge1xuICBidXR0b246IHRydWUsXG4gIGNoZWNrYm94OiB0cnVlLFxuICBpbWFnZTogdHJ1ZSxcbiAgaGlkZGVuOiB0cnVlLFxuICByYWRpbzogdHJ1ZSxcbiAgcmVzZXQ6IHRydWUsXG4gIHN1Ym1pdDogdHJ1ZVxufTtcblxuZnVuY3Rpb24gX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXRQcm9wcykge1xuICAhKGlucHV0UHJvcHMuY2hlY2tlZExpbmsgPT0gbnVsbCB8fCBpbnB1dFByb3BzLnZhbHVlTGluayA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgcHJvdmlkZSBhIGNoZWNrZWRMaW5rIGFuZCBhIHZhbHVlTGluay4gSWYgeW91IHdhbnQgdG8gdXNlIGNoZWNrZWRMaW5rLCB5b3UgcHJvYmFibHkgZG9uXFwndCB3YW50IHRvIHVzZSB2YWx1ZUxpbmsgYW5kIHZpY2UgdmVyc2EuJykgOiBfcHJvZEludmFyaWFudCgnODcnKSA6IHZvaWQgMDtcbn1cbmZ1bmN0aW9uIF9hc3NlcnRWYWx1ZUxpbmsoaW5wdXRQcm9wcykge1xuICBfYXNzZXJ0U2luZ2xlTGluayhpbnB1dFByb3BzKTtcbiAgIShpbnB1dFByb3BzLnZhbHVlID09IG51bGwgJiYgaW5wdXRQcm9wcy5vbkNoYW5nZSA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgcHJvdmlkZSBhIHZhbHVlTGluayBhbmQgYSB2YWx1ZSBvciBvbkNoYW5nZSBldmVudC4gSWYgeW91IHdhbnQgdG8gdXNlIHZhbHVlIG9yIG9uQ2hhbmdlLCB5b3UgcHJvYmFibHkgZG9uXFwndCB3YW50IHRvIHVzZSB2YWx1ZUxpbmsuJykgOiBfcHJvZEludmFyaWFudCgnODgnKSA6IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gX2Fzc2VydENoZWNrZWRMaW5rKGlucHV0UHJvcHMpIHtcbiAgX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXRQcm9wcyk7XG4gICEoaW5wdXRQcm9wcy5jaGVja2VkID09IG51bGwgJiYgaW5wdXRQcm9wcy5vbkNoYW5nZSA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgcHJvdmlkZSBhIGNoZWNrZWRMaW5rIGFuZCBhIGNoZWNrZWQgcHJvcGVydHkgb3Igb25DaGFuZ2UgZXZlbnQuIElmIHlvdSB3YW50IHRvIHVzZSBjaGVja2VkIG9yIG9uQ2hhbmdlLCB5b3UgcHJvYmFibHkgZG9uXFwndCB3YW50IHRvIHVzZSBjaGVja2VkTGluaycpIDogX3Byb2RJbnZhcmlhbnQoJzg5JykgOiB2b2lkIDA7XG59XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIHZhbHVlOiBmdW5jdGlvbiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAgaWYgKCFwcm9wc1twcm9wTmFtZV0gfHwgaGFzUmVhZE9ubHlWYWx1ZVtwcm9wcy50eXBlXSB8fCBwcm9wcy5vbkNoYW5nZSB8fCBwcm9wcy5yZWFkT25seSB8fCBwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRXJyb3IoJ1lvdSBwcm92aWRlZCBhIGB2YWx1ZWAgcHJvcCB0byBhIGZvcm0gZmllbGQgd2l0aG91dCBhbiAnICsgJ2BvbkNoYW5nZWAgaGFuZGxlci4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gSWYgJyArICd0aGUgZmllbGQgc2hvdWxkIGJlIG11dGFibGUgdXNlIGBkZWZhdWx0VmFsdWVgLiBPdGhlcndpc2UsICcgKyAnc2V0IGVpdGhlciBgb25DaGFuZ2VgIG9yIGByZWFkT25seWAuJyk7XG4gIH0sXG4gIGNoZWNrZWQ6IGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fCBwcm9wcy5vbkNoYW5nZSB8fCBwcm9wcy5yZWFkT25seSB8fCBwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRXJyb3IoJ1lvdSBwcm92aWRlZCBhIGBjaGVja2VkYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuICcgKyAnYG9uQ2hhbmdlYCBoYW5kbGVyLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBJZiAnICsgJ3RoZSBmaWVsZCBzaG91bGQgYmUgbXV0YWJsZSB1c2UgYGRlZmF1bHRDaGVja2VkYC4gT3RoZXJ3aXNlLCAnICsgJ3NldCBlaXRoZXIgYG9uQ2hhbmdlYCBvciBgcmVhZE9ubHlgLicpO1xuICB9LFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmNcbn07XG5cbnZhciBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShvd25lcikge1xuICBpZiAob3duZXIpIHtcbiAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICBpZiAobmFtZSkge1xuICAgICAgcmV0dXJuICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIFByb3ZpZGUgYSBsaW5rZWQgYHZhbHVlYCBhdHRyaWJ1dGUgZm9yIGNvbnRyb2xsZWQgZm9ybXMuIFlvdSBzaG91bGQgbm90IHVzZVxuICogdGhpcyBvdXRzaWRlIG9mIHRoZSBSZWFjdERPTSBjb250cm9sbGVkIGZvcm0gY29tcG9uZW50cy5cbiAqL1xudmFyIExpbmtlZFZhbHVlVXRpbHMgPSB7XG4gIGNoZWNrUHJvcFR5cGVzOiBmdW5jdGlvbiAodGFnTmFtZSwgcHJvcHMsIG93bmVyKSB7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcFR5cGVzKSB7XG4gICAgICBpZiAocHJvcFR5cGVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICB2YXIgZXJyb3IgPSBwcm9wVHlwZXNbcHJvcE5hbWVdKHByb3BzLCBwcm9wTmFtZSwgdGFnTmFtZSwgJ3Byb3AnLCBudWxsLCBSZWFjdFByb3BUeXBlc1NlY3JldCk7XG4gICAgICB9XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcbiAgICAgICAgLy8gc2FtZSBlcnJvci5cbiAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcblxuICAgICAgICB2YXIgYWRkZW5kdW0gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpO1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ZhaWxlZCBmb3JtIHByb3BUeXBlOiAlcyVzJywgZXJyb3IubWVzc2FnZSwgYWRkZW5kdW0pIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGlucHV0UHJvcHMgUHJvcHMgZm9yIGZvcm0gY29tcG9uZW50XG4gICAqIEByZXR1cm4geyp9IGN1cnJlbnQgdmFsdWUgb2YgdGhlIGlucHV0IGVpdGhlciBmcm9tIHZhbHVlIHByb3Agb3IgbGluay5cbiAgICovXG4gIGdldFZhbHVlOiBmdW5jdGlvbiAoaW5wdXRQcm9wcykge1xuICAgIGlmIChpbnB1dFByb3BzLnZhbHVlTGluaykge1xuICAgICAgX2Fzc2VydFZhbHVlTGluayhpbnB1dFByb3BzKTtcbiAgICAgIHJldHVybiBpbnB1dFByb3BzLnZhbHVlTGluay52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0UHJvcHMudmFsdWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dFByb3BzIFByb3BzIGZvciBmb3JtIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHsqfSBjdXJyZW50IGNoZWNrZWQgc3RhdHVzIG9mIHRoZSBpbnB1dCBlaXRoZXIgZnJvbSBjaGVja2VkIHByb3BcbiAgICogICAgICAgICAgICAgb3IgbGluay5cbiAgICovXG4gIGdldENoZWNrZWQ6IGZ1bmN0aW9uIChpbnB1dFByb3BzKSB7XG4gICAgaWYgKGlucHV0UHJvcHMuY2hlY2tlZExpbmspIHtcbiAgICAgIF9hc3NlcnRDaGVja2VkTGluayhpbnB1dFByb3BzKTtcbiAgICAgIHJldHVybiBpbnB1dFByb3BzLmNoZWNrZWRMaW5rLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXRQcm9wcy5jaGVja2VkO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5wdXRQcm9wcyBQcm9wcyBmb3IgZm9ybSBjb21wb25lbnRcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgY2hhbmdlIGV2ZW50IHRvIGhhbmRsZVxuICAgKi9cbiAgZXhlY3V0ZU9uQ2hhbmdlOiBmdW5jdGlvbiAoaW5wdXRQcm9wcywgZXZlbnQpIHtcbiAgICBpZiAoaW5wdXRQcm9wcy52YWx1ZUxpbmspIHtcbiAgICAgIF9hc3NlcnRWYWx1ZUxpbmsoaW5wdXRQcm9wcyk7XG4gICAgICByZXR1cm4gaW5wdXRQcm9wcy52YWx1ZUxpbmsucmVxdWVzdENoYW5nZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoaW5wdXRQcm9wcy5jaGVja2VkTGluaykge1xuICAgICAgX2Fzc2VydENoZWNrZWRMaW5rKGlucHV0UHJvcHMpO1xuICAgICAgcmV0dXJuIGlucHV0UHJvcHMuY2hlY2tlZExpbmsucmVxdWVzdENoYW5nZShldmVudC50YXJnZXQuY2hlY2tlZCk7XG4gICAgfSBlbHNlIGlmIChpbnB1dFByb3BzLm9uQ2hhbmdlKSB7XG4gICAgICByZXR1cm4gaW5wdXRQcm9wcy5vbkNoYW5nZS5jYWxsKHVuZGVmaW5lZCwgZXZlbnQpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaW5rZWRWYWx1ZVV0aWxzO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9MaW5rZWRWYWx1ZVV0aWxzLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxudmFyIGluamVjdGVkID0gZmFsc2U7XG5cbnZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0ge1xuICAvKipcbiAgICogT3B0aW9uYWxseSBpbmplY3RhYmxlIGhvb2sgZm9yIHN3YXBwaW5nIG91dCBtb3VudCBpbWFnZXMgaW4gdGhlIG1pZGRsZSBvZlxuICAgKiB0aGUgdHJlZS5cbiAgICovXG4gIHJlcGxhY2VOb2RlV2l0aE1hcmt1cDogbnVsbCxcblxuICAvKipcbiAgICogT3B0aW9uYWxseSBpbmplY3RhYmxlIGhvb2sgZm9yIHByb2Nlc3NpbmcgYSBxdWV1ZSBvZiBjaGlsZCB1cGRhdGVzLiBXaWxsXG4gICAqIGxhdGVyIG1vdmUgaW50byBNdWx0aUNoaWxkQ29tcG9uZW50cy5cbiAgICovXG4gIHByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6IG51bGwsXG5cbiAgaW5qZWN0aW9uOiB7XG4gICAgaW5qZWN0RW52aXJvbm1lbnQ6IGZ1bmN0aW9uIChlbnZpcm9ubWVudCkge1xuICAgICAgISFpbmplY3RlZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudDogaW5qZWN0RW52aXJvbm1lbnQoKSBjYW4gb25seSBiZSBjYWxsZWQgb25jZS4nKSA6IF9wcm9kSW52YXJpYW50KCcxMDQnKSA6IHZvaWQgMDtcbiAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucmVwbGFjZU5vZGVXaXRoTWFya3VwID0gZW52aXJvbm1lbnQucmVwbGFjZU5vZGVXaXRoTWFya3VwO1xuICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5wcm9jZXNzQ2hpbGRyZW5VcGRhdGVzID0gZW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcztcbiAgICAgIGluamVjdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2F1Z2h0RXJyb3IgPSBudWxsO1xuXG4vKipcbiAqIENhbGwgYSBmdW5jdGlvbiB3aGlsZSBndWFyZGluZyBhZ2FpbnN0IGVycm9ycyB0aGF0IGhhcHBlbnMgd2l0aGluIGl0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9mIHRoZSBndWFyZCB0byB1c2UgZm9yIGxvZ2dpbmcgb3IgZGVidWdnaW5nXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2VcbiAqIEBwYXJhbSB7Kn0gYSBGaXJzdCBhcmd1bWVudFxuICogQHBhcmFtIHsqfSBiIFNlY29uZCBhcmd1bWVudFxuICovXG5mdW5jdGlvbiBpbnZva2VHdWFyZGVkQ2FsbGJhY2sobmFtZSwgZnVuYywgYSkge1xuICB0cnkge1xuICAgIGZ1bmMoYSk7XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICBpZiAoY2F1Z2h0RXJyb3IgPT09IG51bGwpIHtcbiAgICAgIGNhdWdodEVycm9yID0geDtcbiAgICB9XG4gIH1cbn1cblxudmFyIFJlYWN0RXJyb3JVdGlscyA9IHtcbiAgaW52b2tlR3VhcmRlZENhbGxiYWNrOiBpbnZva2VHdWFyZGVkQ2FsbGJhY2ssXG5cbiAgLyoqXG4gICAqIEludm9rZWQgYnkgUmVhY3RUZXN0VXRpbHMuU2ltdWxhdGUgc28gdGhhdCBhbnkgZXJyb3JzIHRocm93biBieSB0aGUgZXZlbnRcbiAgICogaGFuZGxlciBhcmUgc3VyZSB0byBiZSByZXRocm93biBieSByZXRocm93Q2F1Z2h0RXJyb3IuXG4gICAqL1xuICBpbnZva2VHdWFyZGVkQ2FsbGJhY2tXaXRoQ2F0Y2g6IGludm9rZUd1YXJkZWRDYWxsYmFjayxcblxuICAvKipcbiAgICogRHVyaW5nIGV4ZWN1dGlvbiBvZiBndWFyZGVkIGZ1bmN0aW9ucyB3ZSB3aWxsIGNhcHR1cmUgdGhlIGZpcnN0IGVycm9yIHdoaWNoXG4gICAqIHdlIHdpbGwgcmV0aHJvdyB0byBiZSBoYW5kbGVkIGJ5IHRoZSB0b3AgbGV2ZWwgZXJyb3IgaGFuZGxlci5cbiAgICovXG4gIHJldGhyb3dDYXVnaHRFcnJvcjogZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYXVnaHRFcnJvcikge1xuICAgICAgdmFyIGVycm9yID0gY2F1Z2h0RXJyb3I7XG4gICAgICBjYXVnaHRFcnJvciA9IG51bGw7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8qKlxuICAgKiBUbyBoZWxwIGRldmVsb3BtZW50IHdlIGNhbiBnZXQgYmV0dGVyIGRldnRvb2xzIGludGVncmF0aW9uIGJ5IHNpbXVsYXRpbmcgYVxuICAgKiByZWFsIGJyb3dzZXIgZXZlbnQuXG4gICAqL1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kaXNwYXRjaEV2ZW50ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGZha2VOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncmVhY3QnKTtcbiAgICBSZWFjdEVycm9yVXRpbHMuaW52b2tlR3VhcmRlZENhbGxiYWNrID0gZnVuY3Rpb24gKG5hbWUsIGZ1bmMsIGEpIHtcbiAgICAgIHZhciBib3VuZEZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmMoYSk7XG4gICAgICB9O1xuICAgICAgdmFyIGV2dFR5cGUgPSAncmVhY3QtJyArIG5hbWU7XG4gICAgICBmYWtlTm9kZS5hZGRFdmVudExpc3RlbmVyKGV2dFR5cGUsIGJvdW5kRnVuYywgZmFsc2UpO1xuICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgICAgZXZ0LmluaXRFdmVudChldnRUeXBlLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgZmFrZU5vZGUuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgZmFrZU5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBib3VuZEZ1bmMsIGZhbHNlKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFcnJvclV0aWxzO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdEVycm9yVXRpbHMuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9SZWFjdEN1cnJlbnRPd25lcicpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VNYXAnKTtcbnZhciBSZWFjdEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0cnVtZW50YXRpb24nKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKSB7XG4gIFJlYWN0VXBkYXRlcy5lbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbmV4cGVjdGVkQXJndW1lbnQoYXJnKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGFyZztcbiAgaWYgKHR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cbiAgdmFyIGRpc3BsYXlOYW1lID0gYXJnLmNvbnN0cnVjdG9yICYmIGFyZy5jb25zdHJ1Y3Rvci5uYW1lIHx8IHR5cGU7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYXJnKTtcbiAgaWYgKGtleXMubGVuZ3RoID4gMCAmJiBrZXlzLmxlbmd0aCA8IDIwKSB7XG4gICAgcmV0dXJuIGRpc3BsYXlOYW1lICsgJyAoa2V5czogJyArIGtleXMuam9pbignLCAnKSArICcpJztcbiAgfVxuICByZXR1cm4gZGlzcGxheU5hbWU7XG59XG5cbmZ1bmN0aW9uIGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShwdWJsaWNJbnN0YW5jZSwgY2FsbGVyTmFtZSkge1xuICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IFJlYWN0SW5zdGFuY2VNYXAuZ2V0KHB1YmxpY0luc3RhbmNlKTtcbiAgaWYgKCFpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBjdG9yID0gcHVibGljSW5zdGFuY2UuY29uc3RydWN0b3I7XG4gICAgICAvLyBPbmx5IHdhcm4gd2hlbiB3ZSBoYXZlIGEgY2FsbGVyTmFtZS4gT3RoZXJ3aXNlIHdlIHNob3VsZCBiZSBzaWxlbnQuXG4gICAgICAvLyBXZSdyZSBwcm9iYWJseSBjYWxsaW5nIGZyb20gZW5xdWV1ZUNhbGxiYWNrLiBXZSBkb24ndCB3YW50IHRvIHdhcm5cbiAgICAgIC8vIHRoZXJlIGJlY2F1c2Ugd2UgYWxyZWFkeSB3YXJuZWQgZm9yIHRoZSBjb3JyZXNwb25kaW5nIGxpZmVjeWNsZSBtZXRob2QuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghY2FsbGVyTmFtZSwgJyVzKC4uLik6IENhbiBvbmx5IHVwZGF0ZSBhIG1vdW50ZWQgb3IgbW91bnRpbmcgY29tcG9uZW50LiAnICsgJ1RoaXMgdXN1YWxseSBtZWFucyB5b3UgY2FsbGVkICVzKCkgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4gJyArICdUaGlzIGlzIGEgbm8tb3AuIFBsZWFzZSBjaGVjayB0aGUgY29kZSBmb3IgdGhlICVzIGNvbXBvbmVudC4nLCBjYWxsZXJOYW1lLCBjYWxsZXJOYW1lLCBjdG9yICYmIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgfHwgJ1JlYWN0Q2xhc3MnKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCwgJyVzKC4uLik6IENhbm5vdCB1cGRhdGUgZHVyaW5nIGFuIGV4aXN0aW5nIHN0YXRlIHRyYW5zaXRpb24gKHN1Y2ggYXMgJyArIFwid2l0aGluIGByZW5kZXJgIG9yIGFub3RoZXIgY29tcG9uZW50J3MgY29uc3RydWN0b3IpLiBSZW5kZXIgbWV0aG9kcyBcIiArICdzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uIG9mIHByb3BzIGFuZCBzdGF0ZTsgY29uc3RydWN0b3IgJyArICdzaWRlLWVmZmVjdHMgYXJlIGFuIGFudGktcGF0dGVybiwgYnV0IGNhbiBiZSBtb3ZlZCB0byAnICsgJ2Bjb21wb25lbnRXaWxsTW91bnRgLicsIGNhbGxlck5hbWUpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIGludGVybmFsSW5zdGFuY2U7XG59XG5cbi8qKlxuICogUmVhY3RVcGRhdGVRdWV1ZSBhbGxvd3MgZm9yIHN0YXRlIHVwZGF0ZXMgdG8gYmUgc2NoZWR1bGVkIGludG8gYSBsYXRlclxuICogcmVjb25jaWxpYXRpb24gc3RlcC5cbiAqL1xudmFyIFJlYWN0VXBkYXRlUXVldWUgPSB7XG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgdGhpcyBjb21wb3NpdGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHdlIHdhbnQgdG8gdGVzdC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBtb3VudGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQGZpbmFsXG4gICAqL1xuICBpc01vdW50ZWQ6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICAgICAgaWYgKG93bmVyICE9PSBudWxsKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKG93bmVyLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciwgJyVzIGlzIGFjY2Vzc2luZyBpc01vdW50ZWQgaW5zaWRlIGl0cyByZW5kZXIoKSBmdW5jdGlvbi4gJyArICdyZW5kZXIoKSBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uIG9mIHByb3BzIGFuZCBzdGF0ZS4gSXQgc2hvdWxkICcgKyAnbmV2ZXIgYWNjZXNzIHNvbWV0aGluZyB0aGF0IHJlcXVpcmVzIHN0YWxlIGRhdGEgZnJvbSB0aGUgcHJldmlvdXMgJyArICdyZW5kZXIsIHN1Y2ggYXMgcmVmcy4gTW92ZSB0aGlzIGxvZ2ljIHRvIGNvbXBvbmVudERpZE1vdW50IGFuZCAnICsgJ2NvbXBvbmVudERpZFVwZGF0ZSBpbnN0ZWFkLicsIG93bmVyLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgICAgb3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBSZWFjdEluc3RhbmNlTWFwLmdldChwdWJsaWNJbnN0YW5jZSk7XG4gICAgaWYgKGludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIC8vIER1cmluZyBjb21wb25lbnRXaWxsTW91bnQgYW5kIHJlbmRlciB0aGlzIHdpbGwgc3RpbGwgYmUgbnVsbCBidXQgYWZ0ZXJcbiAgICAgIC8vIHRoYXQgd2lsbCBhbHdheXMgcmVuZGVyIHRvIHNvbWV0aGluZy4gQXQgbGVhc3QgZm9yIG5vdy4gU28gd2UgY2FuIHVzZVxuICAgICAgLy8gdGhpcyBoYWNrLlxuICAgICAgcmV0dXJuICEhaW50ZXJuYWxJbnN0YW5jZS5fcmVuZGVyZWRDb21wb25lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEVucXVldWUgYSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYWZ0ZXIgYWxsIHRoZSBwZW5kaW5nIHVwZGF0ZXNcbiAgICogaGF2ZSBwcm9jZXNzZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRvIHVzZSBhcyBgdGhpc2AgY29udGV4dC5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBzdGF0ZSBpcyB1cGRhdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2FsbGVyTmFtZSBOYW1lIG9mIHRoZSBjYWxsaW5nIGZ1bmN0aW9uIGluIHRoZSBwdWJsaWMgQVBJLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVDYWxsYmFjazogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjYWxsYmFjaywgY2FsbGVyTmFtZSkge1xuICAgIFJlYWN0VXBkYXRlUXVldWUudmFsaWRhdGVDYWxsYmFjayhjYWxsYmFjaywgY2FsbGVyTmFtZSk7XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UpO1xuXG4gICAgLy8gUHJldmlvdXNseSB3ZSB3b3VsZCB0aHJvdyBhbiBlcnJvciBpZiB3ZSBkaWRuJ3QgaGF2ZSBhbiBpbnRlcm5hbFxuICAgIC8vIGluc3RhbmNlLiBTaW5jZSB3ZSB3YW50IHRvIG1ha2UgaXQgYSBuby1vcCBpbnN0ZWFkLCB3ZSBtaXJyb3IgdGhlIHNhbWVcbiAgICAvLyBiZWhhdmlvciB3ZSBoYXZlIGluIG90aGVyIGVucXVldWUqIG1ldGhvZHMuXG4gICAgLy8gV2UgYWxzbyBuZWVkIHRvIGlnbm9yZSBjYWxsYmFja3MgaW4gY29tcG9uZW50V2lsbE1vdW50LiBTZWVcbiAgICAvLyBlbnF1ZXVlVXBkYXRlcy5cbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzKSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzID0gW2NhbGxiYWNrXTtcbiAgICB9XG4gICAgLy8gVE9ETzogVGhlIGNhbGxiYWNrIGhlcmUgaXMgaWdub3JlZCB3aGVuIHNldFN0YXRlIGlzIGNhbGxlZCBmcm9tXG4gICAgLy8gY29tcG9uZW50V2lsbE1vdW50LiBFaXRoZXIgZml4IGl0IG9yIGRpc2FsbG93IGRvaW5nIHNvIGNvbXBsZXRlbHkgaW5cbiAgICAvLyBmYXZvciBvZiBnZXRJbml0aWFsU3RhdGUuIEFsdGVybmF0aXZlbHksIHdlIGNhbiBkaXNhbGxvd1xuICAgIC8vIGNvbXBvbmVudFdpbGxNb3VudCBkdXJpbmcgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgZW5xdWV1ZUNhbGxiYWNrSW50ZXJuYWw6IGZ1bmN0aW9uIChpbnRlcm5hbEluc3RhbmNlLCBjYWxsYmFjaykge1xuICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzKSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzID0gW2NhbGxiYWNrXTtcbiAgICB9XG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfSxcblxuICAvKipcbiAgICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICAgKiBjZXJ0YWludHkgdGhhdCB3ZSBhcmUgKipub3QqKiBpbiBhIERPTSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICAgKiBjb21wb25lbnQncyBzdGF0ZSBoYXMgY2hhbmdlZCBidXQgYHNldFN0YXRlYCB3YXMgbm90IGNhbGxlZC5cbiAgICpcbiAgICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICAgKiBgY29tcG9uZW50V2lsbFVwZGF0ZWAgYW5kIGBjb21wb25lbnREaWRVcGRhdGVgLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSkge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLCAnZm9yY2VVcGRhdGUnKTtcblxuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IHRydWU7XG5cbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgb3IgYHNldFN0YXRlYCB0byBtdXRhdGUgc3RhdGUuXG4gICAqIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAgICpcbiAgICogVGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgYHRoaXMuc3RhdGVgIHdpbGwgYmUgaW1tZWRpYXRlbHkgdXBkYXRlZCwgc29cbiAgICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wbGV0ZVN0YXRlIE5leHQgc3RhdGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlLCBjYWxsYmFjaykge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLCAncmVwbGFjZVN0YXRlJyk7XG5cbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IFtjb21wbGV0ZVN0YXRlXTtcbiAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nUmVwbGFjZVN0YXRlID0gdHJ1ZTtcblxuICAgIC8vIEZ1dHVyZS1wcm9vZiAxNS41XG4gICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQgJiYgY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIFJlYWN0VXBkYXRlUXVldWUudmFsaWRhdGVDYWxsYmFjayhjYWxsYmFjaywgJ3JlcGxhY2VTdGF0ZScpO1xuICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MpIHtcbiAgICAgICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MgPSBbY2FsbGJhY2tdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBUaGlzIG9ubHkgZXhpc3RzIGJlY2F1c2UgX3BlbmRpbmdTdGF0ZSBpc1xuICAgKiBpbnRlcm5hbC4gVGhpcyBwcm92aWRlcyBhIG1lcmdpbmcgc3RyYXRlZ3kgdGhhdCBpcyBub3QgYXZhaWxhYmxlIHRvIGRlZXBcbiAgICogcHJvcGVydGllcyB3aGljaCBpcyBjb25mdXNpbmcuIFRPRE86IEV4cG9zZSBwZW5kaW5nU3RhdGUgb3IgZG9uJ3QgdXNlIGl0XG4gICAqIGR1cmluZyB0aGUgbWVyZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBzdGF0ZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgcGFydGlhbFN0YXRlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldFN0YXRlKCk7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwYXJ0aWFsU3RhdGUgIT0gbnVsbCwgJ3NldFN0YXRlKC4uLik6IFlvdSBwYXNzZWQgYW4gdW5kZWZpbmVkIG9yIG51bGwgc3RhdGUgb2JqZWN0OyAnICsgJ2luc3RlYWQsIHVzZSBmb3JjZVVwZGF0ZSgpLicpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLCAnc2V0U3RhdGUnKTtcblxuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBxdWV1ZSA9IGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdTdGF0ZVF1ZXVlIHx8IChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IFtdKTtcbiAgICBxdWV1ZS5wdXNoKHBhcnRpYWxTdGF0ZSk7XG5cbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9LFxuXG4gIGVucXVldWVFbGVtZW50SW50ZXJuYWw6IGZ1bmN0aW9uIChpbnRlcm5hbEluc3RhbmNlLCBuZXh0RWxlbWVudCwgbmV4dENvbnRleHQpIHtcbiAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nRWxlbWVudCA9IG5leHRFbGVtZW50O1xuICAgIC8vIFRPRE86IGludHJvZHVjZSBfcGVuZGluZ0NvbnRleHQgaW5zdGVhZCBvZiBzZXR0aW5nIGl0IGRpcmVjdGx5LlxuICAgIGludGVybmFsSW5zdGFuY2UuX2NvbnRleHQgPSBuZXh0Q29udGV4dDtcbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9LFxuXG4gIHZhbGlkYXRlQ2FsbGJhY2s6IGZ1bmN0aW9uIChjYWxsYmFjaywgY2FsbGVyTmFtZSkge1xuICAgICEoIWNhbGxiYWNrIHx8IHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMoLi4uKTogRXhwZWN0ZWQgdGhlIGxhc3Qgb3B0aW9uYWwgYGNhbGxiYWNrYCBhcmd1bWVudCB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkIHJlY2VpdmVkOiAlcy4nLCBjYWxsZXJOYW1lLCBmb3JtYXRVbmV4cGVjdGVkQXJndW1lbnQoY2FsbGJhY2spKSA6IF9wcm9kSW52YXJpYW50KCcxMjInLCBjYWxsZXJOYW1lLCBmb3JtYXRVbmV4cGVjdGVkQXJndW1lbnQoY2FsbGJhY2spKSA6IHZvaWQgMDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFVwZGF0ZVF1ZXVlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdFVwZGF0ZVF1ZXVlLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuLyogZ2xvYmFscyBNU0FwcCAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlIGEgZnVuY3Rpb24gd2hpY2ggaGFzICd1bnNhZmUnIHByaXZpbGVnZXMgKHJlcXVpcmVkIGJ5IHdpbmRvd3M4IGFwcHMpXG4gKi9cblxudmFyIGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24gPSBmdW5jdGlvbiAoZnVuYykge1xuICBpZiAodHlwZW9mIE1TQXBwICE9PSAndW5kZWZpbmVkJyAmJiBNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnMCwgYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZnVuYyhhcmcwLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbi5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBgY2hhckNvZGVgIHJlcHJlc2VudHMgdGhlIGFjdHVhbCBcImNoYXJhY3RlciBjb2RlXCIgYW5kIGlzIHNhZmUgdG8gdXNlIHdpdGhcbiAqIGBTdHJpbmcuZnJvbUNoYXJDb2RlYC4gQXMgc3VjaCwgb25seSBrZXlzIHRoYXQgY29ycmVzcG9uZCB0byBwcmludGFibGVcbiAqIGNoYXJhY3RlcnMgcHJvZHVjZSBhIHZhbGlkIGBjaGFyQ29kZWAsIHRoZSBvbmx5IGV4Y2VwdGlvbiB0byB0aGlzIGlzIEVudGVyLlxuICogVGhlIFRhYi1rZXkgaXMgY29uc2lkZXJlZCBub24tcHJpbnRhYmxlIGFuZCBkb2VzIG5vdCBoYXZlIGEgYGNoYXJDb2RlYCxcbiAqIHByZXN1bWFibHkgYmVjYXVzZSBpdCBkb2VzIG5vdCBwcm9kdWNlIGEgdGFiLWNoYXJhY3RlciBpbiBicm93c2Vycy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IE5vcm1hbGl6ZWQgYGNoYXJDb2RlYCBwcm9wZXJ0eS5cbiAqL1xuXG5mdW5jdGlvbiBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBjaGFyQ29kZTtcbiAgdmFyIGtleUNvZGUgPSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuXG4gIGlmICgnY2hhckNvZGUnIGluIG5hdGl2ZUV2ZW50KSB7XG4gICAgY2hhckNvZGUgPSBuYXRpdmVFdmVudC5jaGFyQ29kZTtcblxuICAgIC8vIEZGIGRvZXMgbm90IHNldCBgY2hhckNvZGVgIGZvciB0aGUgRW50ZXIta2V5LCBjaGVjayBhZ2FpbnN0IGBrZXlDb2RlYC5cbiAgICBpZiAoY2hhckNvZGUgPT09IDAgJiYga2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgIGNoYXJDb2RlID0gMTM7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIElFOCBkb2VzIG5vdCBpbXBsZW1lbnQgYGNoYXJDb2RlYCwgYnV0IGBrZXlDb2RlYCBoYXMgdGhlIGNvcnJlY3QgdmFsdWUuXG4gICAgY2hhckNvZGUgPSBrZXlDb2RlO1xuICB9XG5cbiAgLy8gU29tZSBub24tcHJpbnRhYmxlIGtleXMgYXJlIHJlcG9ydGVkIGluIGBjaGFyQ29kZWAvYGtleUNvZGVgLCBkaXNjYXJkIHRoZW0uXG4gIC8vIE11c3Qgbm90IGRpc2NhcmQgdGhlIChub24tKXByaW50YWJsZSBFbnRlci1rZXkuXG4gIGlmIChjaGFyQ29kZSA+PSAzMiB8fCBjaGFyQ29kZSA9PT0gMTMpIHtcbiAgICByZXR1cm4gY2hhckNvZGU7XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudENoYXJDb2RlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9nZXRFdmVudENoYXJDb2RlLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFRyYW5zbGF0aW9uIGZyb20gbW9kaWZpZXIga2V5IHRvIHRoZSBhc3NvY2lhdGVkIHByb3BlcnR5IGluIHRoZSBldmVudC5cbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNrZXlzLU1vZGlmaWVyc1xuICovXG5cbnZhciBtb2RpZmllcktleVRvUHJvcCA9IHtcbiAgQWx0OiAnYWx0S2V5JyxcbiAgQ29udHJvbDogJ2N0cmxLZXknLFxuICBNZXRhOiAnbWV0YUtleScsXG4gIFNoaWZ0OiAnc2hpZnRLZXknXG59O1xuXG4vLyBJRTggZG9lcyBub3QgaW1wbGVtZW50IGdldE1vZGlmaWVyU3RhdGUgc28gd2Ugc2ltcGx5IG1hcCBpdCB0byB0aGUgb25seVxuLy8gbW9kaWZpZXIga2V5cyBleHBvc2VkIGJ5IHRoZSBldmVudCBpdHNlbGYsIGRvZXMgbm90IHN1cHBvcnQgTG9jay1rZXlzLlxuLy8gQ3VycmVudGx5LCBhbGwgbWFqb3IgYnJvd3NlcnMgZXhjZXB0IENocm9tZSBzZWVtcyB0byBzdXBwb3J0IExvY2sta2V5cy5cbmZ1bmN0aW9uIG1vZGlmaWVyU3RhdGVHZXR0ZXIoa2V5QXJnKSB7XG4gIHZhciBzeW50aGV0aWNFdmVudCA9IHRoaXM7XG4gIHZhciBuYXRpdmVFdmVudCA9IHN5bnRoZXRpY0V2ZW50Lm5hdGl2ZUV2ZW50O1xuICBpZiAobmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZSkge1xuICAgIHJldHVybiBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKGtleUFyZyk7XG4gIH1cbiAgdmFyIGtleVByb3AgPSBtb2RpZmllcktleVRvUHJvcFtrZXlBcmddO1xuICByZXR1cm4ga2V5UHJvcCA/ICEhbmF0aXZlRXZlbnRba2V5UHJvcF0gOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0RXZlbnRNb2RpZmllclN0YXRlKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiBtb2RpZmllclN0YXRlR2V0dGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50TW9kaWZpZXJTdGF0ZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvZ2V0RXZlbnRNb2RpZmllclN0YXRlLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEdldHMgdGhlIHRhcmdldCBub2RlIGZyb20gYSBuYXRpdmUgYnJvd3NlciBldmVudCBieSBhY2NvdW50aW5nIGZvclxuICogaW5jb25zaXN0ZW5jaWVzIGluIGJyb3dzZXIgRE9NIEFQSXMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7RE9NRXZlbnRUYXJnZXR9IFRhcmdldCBub2RlLlxuICovXG5cbmZ1bmN0aW9uIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSBuYXRpdmVFdmVudC50YXJnZXQgfHwgbmF0aXZlRXZlbnQuc3JjRWxlbWVudCB8fCB3aW5kb3c7XG5cbiAgLy8gTm9ybWFsaXplIFNWRyA8dXNlPiBlbGVtZW50IGV2ZW50cyAjNDk2M1xuICBpZiAodGFyZ2V0LmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KSB7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0LmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50O1xuICB9XG5cbiAgLy8gU2FmYXJpIG1heSBmaXJlIGV2ZW50cyBvbiB0ZXh0IG5vZGVzIChOb2RlLlRFWFRfTk9ERSBpcyAzKS5cbiAgLy8gQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2pzL2V2ZW50c19wcm9wZXJ0aWVzLmh0bWxcbiAgcmV0dXJuIHRhcmdldC5ub2RlVHlwZSA9PT0gMyA/IHRhcmdldC5wYXJlbnROb2RlIDogdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50VGFyZ2V0O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9nZXRFdmVudFRhcmdldC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKSxcbiAgICBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50Jyk7XG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbXB0eUNvbXBvbmVudCcpO1xudmFyIFJlYWN0SG9zdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RIb3N0Q29tcG9uZW50Jyk7XG5cbnZhciBnZXROZXh0RGVidWdJRCA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9nZXROZXh0RGVidWdJRCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8vIFRvIGF2b2lkIGEgY3ljbGljIGRlcGVuZGVuY3ksIHdlIGNyZWF0ZSB0aGUgZmluYWwgY2xhc3MgaW4gdGhpcyBtb2R1bGVcbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFdyYXBwZXIgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICB0aGlzLmNvbnN0cnVjdChlbGVtZW50KTtcbn07XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShvd25lcikge1xuICBpZiAob3duZXIpIHtcbiAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICBpZiAobmFtZSkge1xuICAgICAgcmV0dXJuICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSB0eXBlIHJlZmVyZW5jZSBpcyBhIGtub3duIGludGVybmFsIHR5cGUuIEkuZS4gbm90IGEgdXNlclxuICogcHJvdmlkZWQgY29tcG9zaXRlIHR5cGUuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gdHlwZVxuICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoaXMgaXMgYSB2YWxpZCBpbnRlcm5hbCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc0ludGVybmFsQ29tcG9uZW50VHlwZSh0eXBlKSB7XG4gIHJldHVybiB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdHlwZS5wcm90b3R5cGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0eXBlLnByb3RvdHlwZS5tb3VudENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdHlwZS5wcm90b3R5cGUucmVjZWl2ZUNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyoqXG4gKiBHaXZlbiBhIFJlYWN0Tm9kZSwgY3JlYXRlIGFuIGluc3RhbmNlIHRoYXQgd2lsbCBhY3R1YWxseSBiZSBtb3VudGVkLlxuICpcbiAqIEBwYXJhbSB7UmVhY3ROb2RlfSBub2RlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHNob3VsZEhhdmVEZWJ1Z0lEXG4gKiBAcmV0dXJuIHtvYmplY3R9IEEgbmV3IGluc3RhbmNlIG9mIHRoZSBlbGVtZW50J3MgY29uc3RydWN0b3IuXG4gKiBAcHJvdGVjdGVkXG4gKi9cbmZ1bmN0aW9uIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQobm9kZSwgc2hvdWxkSGF2ZURlYnVnSUQpIHtcbiAgdmFyIGluc3RhbmNlO1xuXG4gIGlmIChub2RlID09PSBudWxsIHx8IG5vZGUgPT09IGZhbHNlKSB7XG4gICAgaW5zdGFuY2UgPSBSZWFjdEVtcHR5Q29tcG9uZW50LmNyZWF0ZShpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgZWxlbWVudCA9IG5vZGU7XG4gICAgdmFyIHR5cGUgPSBlbGVtZW50LnR5cGU7XG4gICAgaWYgKHR5cGVvZiB0eXBlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB0eXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgdmFyIGluZm8gPSAnJztcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0eXBlID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwgJiYgT2JqZWN0LmtleXModHlwZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaW5mbyArPSAnIFlvdSBsaWtlbHkgZm9yZ290IHRvIGV4cG9ydCB5b3VyIGNvbXBvbmVudCBmcm9tIHRoZSBmaWxlICcgKyBcIml0J3MgZGVmaW5lZCBpbi5cIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaW5mbyArPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oZWxlbWVudC5fb3duZXIpO1xuICAgICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0VsZW1lbnQgdHlwZSBpcyBpbnZhbGlkOiBleHBlY3RlZCBhIHN0cmluZyAoZm9yIGJ1aWx0LWluIGNvbXBvbmVudHMpIG9yIGEgY2xhc3MvZnVuY3Rpb24gKGZvciBjb21wb3NpdGUgY29tcG9uZW50cykgYnV0IGdvdDogJXMuJXMnLCB0eXBlID09IG51bGwgPyB0eXBlIDogdHlwZW9mIHR5cGUsIGluZm8pIDogX3Byb2RJbnZhcmlhbnQoJzEzMCcsIHR5cGUgPT0gbnVsbCA/IHR5cGUgOiB0eXBlb2YgdHlwZSwgaW5mbykgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHN0cmluZyB2YWx1ZXNcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGluc3RhbmNlID0gUmVhY3RIb3N0Q29tcG9uZW50LmNyZWF0ZUludGVybmFsQ29tcG9uZW50KGVsZW1lbnQpO1xuICAgIH0gZWxzZSBpZiAoaXNJbnRlcm5hbENvbXBvbmVudFR5cGUoZWxlbWVudC50eXBlKSkge1xuICAgICAgLy8gVGhpcyBpcyB0ZW1wb3JhcmlseSBhdmFpbGFibGUgZm9yIGN1c3RvbSBjb21wb25lbnRzIHRoYXQgYXJlIG5vdCBzdHJpbmdcbiAgICAgIC8vIHJlcHJlc2VudGF0aW9ucy4gSS5lLiBBUlQuIE9uY2UgdGhvc2UgYXJlIHVwZGF0ZWQgdG8gdXNlIHRoZSBzdHJpbmdcbiAgICAgIC8vIHJlcHJlc2VudGF0aW9uLCB3ZSBjYW4gZHJvcCB0aGlzIGNvZGUgcGF0aC5cbiAgICAgIGluc3RhbmNlID0gbmV3IGVsZW1lbnQudHlwZShlbGVtZW50KTtcblxuICAgICAgLy8gV2UgcmVuYW1lZCB0aGlzLiBBbGxvdyB0aGUgb2xkIG5hbWUgZm9yIGNvbXBhdC4gOihcbiAgICAgIGlmICghaW5zdGFuY2UuZ2V0SG9zdE5vZGUpIHtcbiAgICAgICAgaW5zdGFuY2UuZ2V0SG9zdE5vZGUgPSBpbnN0YW5jZS5nZXROYXRpdmVOb2RlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZSA9IG5ldyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFdyYXBwZXIoZWxlbWVudCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBub2RlID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygbm9kZSA9PT0gJ251bWJlcicpIHtcbiAgICBpbnN0YW5jZSA9IFJlYWN0SG9zdENvbXBvbmVudC5jcmVhdGVJbnN0YW5jZUZvclRleHQobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0VuY291bnRlcmVkIGludmFsaWQgUmVhY3Qgbm9kZSBvZiB0eXBlICVzJywgdHlwZW9mIG5vZGUpIDogX3Byb2RJbnZhcmlhbnQoJzEzMScsIHR5cGVvZiBub2RlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodHlwZW9mIGluc3RhbmNlLm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnN0YW5jZS5yZWNlaXZlQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnN0YW5jZS5nZXRIb3N0Tm9kZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgaW5zdGFuY2UudW5tb3VudENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJywgJ09ubHkgUmVhY3QgQ29tcG9uZW50cyBjYW4gYmUgbW91bnRlZC4nKSA6IHZvaWQgMDtcbiAgfVxuXG4gIC8vIFRoZXNlIHR3byBmaWVsZHMgYXJlIHVzZWQgYnkgdGhlIERPTSBhbmQgQVJUIGRpZmZpbmcgYWxnb3JpdGhtc1xuICAvLyByZXNwZWN0aXZlbHkuIEluc3RlYWQgb2YgdXNpbmcgZXhwYW5kb3Mgb24gY29tcG9uZW50cywgd2Ugc2hvdWxkIGJlXG4gIC8vIHN0b3JpbmcgdGhlIHN0YXRlIG5lZWRlZCBieSB0aGUgZGlmZmluZyBhbGdvcml0aG1zIGVsc2V3aGVyZS5cbiAgaW5zdGFuY2UuX21vdW50SW5kZXggPSAwO1xuICBpbnN0YW5jZS5fbW91bnRJbWFnZSA9IG51bGw7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpbnN0YW5jZS5fZGVidWdJRCA9IHNob3VsZEhhdmVEZWJ1Z0lEID8gZ2V0TmV4dERlYnVnSUQoKSA6IDA7XG4gIH1cblxuICAvLyBJbnRlcm5hbCBpbnN0YW5jZXMgc2hvdWxkIGZ1bGx5IGNvbnN0cnVjdGVkIGF0IHRoaXMgcG9pbnQsIHNvIHRoZXkgc2hvdWxkXG4gIC8vIG5vdCBnZXQgYW55IG5ldyBmaWVsZHMgYWRkZWQgdG8gdGhlbSBhdCB0aGlzIHBvaW50LlxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChPYmplY3QucHJldmVudEV4dGVuc2lvbnMpIHtcbiAgICAgIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhpbnN0YW5jZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG5fYXNzaWduKFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlci5wcm90b3R5cGUsIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50LCB7XG4gIF9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50OiBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgdXNlSGFzRmVhdHVyZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgdXNlSGFzRmVhdHVyZSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uICYmIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUgJiZcbiAgLy8gYWx3YXlzIHJldHVybnMgdHJ1ZSBpbiBuZXdlciBicm93c2VycyBhcyBwZXIgdGhlIHN0YW5kYXJkLlxuICAvLyBAc2VlIGh0dHA6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZG9taW1wbGVtZW50YXRpb24taGFzZmVhdHVyZVxuICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCcnLCAnJykgIT09IHRydWU7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGFuIGV2ZW50IGlzIHN1cHBvcnRlZCBpbiB0aGUgY3VycmVudCBleGVjdXRpb24gZW52aXJvbm1lbnQuXG4gKlxuICogTk9URTogVGhpcyB3aWxsIG5vdCB3b3JrIGNvcnJlY3RseSBmb3Igbm9uLWdlbmVyaWMgZXZlbnRzIHN1Y2ggYXMgYGNoYW5nZWAsXG4gKiBgcmVzZXRgLCBgbG9hZGAsIGBlcnJvcmAsIGFuZCBgc2VsZWN0YC5cbiAqXG4gKiBCb3Jyb3dzIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVTdWZmaXggRXZlbnQgbmFtZSwgZS5nLiBcImNsaWNrXCIuXG4gKiBAcGFyYW0gez9ib29sZWFufSBjYXB0dXJlIENoZWNrIGlmIHRoZSBjYXB0dXJlIHBoYXNlIGlzIHN1cHBvcnRlZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV2ZW50IGlzIHN1cHBvcnRlZC5cbiAqIEBpbnRlcm5hbFxuICogQGxpY2Vuc2UgTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4gKi9cbmZ1bmN0aW9uIGlzRXZlbnRTdXBwb3J0ZWQoZXZlbnROYW1lU3VmZml4LCBjYXB0dXJlKSB7XG4gIGlmICghRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NIHx8IGNhcHR1cmUgJiYgISgnYWRkRXZlbnRMaXN0ZW5lcicgaW4gZG9jdW1lbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGV2ZW50TmFtZSA9ICdvbicgKyBldmVudE5hbWVTdWZmaXg7XG4gIHZhciBpc1N1cHBvcnRlZCA9IGV2ZW50TmFtZSBpbiBkb2N1bWVudDtcblxuICBpZiAoIWlzU3VwcG9ydGVkKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShldmVudE5hbWUsICdyZXR1cm47Jyk7XG4gICAgaXNTdXBwb3J0ZWQgPSB0eXBlb2YgZWxlbWVudFtldmVudE5hbWVdID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCAmJiB1c2VIYXNGZWF0dXJlICYmIGV2ZW50TmFtZVN1ZmZpeCA9PT0gJ3doZWVsJykge1xuICAgIC8vIFRoaXMgaXMgdGhlIG9ubHkgd2F5IHRvIHRlc3Qgc3VwcG9ydCBmb3IgdGhlIGB3aGVlbGAgZXZlbnQgaW4gSUU5Ky5cbiAgICBpc1N1cHBvcnRlZCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJ0V2ZW50cy53aGVlbCcsICczLjAnKTtcbiAgfVxuXG4gIHJldHVybiBpc1N1cHBvcnRlZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0V2ZW50U3VwcG9ydGVkO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9pc0V2ZW50U3VwcG9ydGVkLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEdpdmVuIGEgYHByZXZFbGVtZW50YCBhbmQgYG5leHRFbGVtZW50YCwgZGV0ZXJtaW5lcyBpZiB0aGUgZXhpc3RpbmdcbiAqIGluc3RhbmNlIHNob3VsZCBiZSB1cGRhdGVkIGFzIG9wcG9zZWQgdG8gYmVpbmcgZGVzdHJveWVkIG9yIHJlcGxhY2VkIGJ5IGEgbmV3XG4gKiBpbnN0YW5jZS4gQm90aCBhcmd1bWVudHMgYXJlIGVsZW1lbnRzLiBUaGlzIGVuc3VyZXMgdGhhdCB0aGlzIGxvZ2ljIGNhblxuICogb3BlcmF0ZSBvbiBzdGF0ZWxlc3MgdHJlZXMgd2l0aG91dCBhbnkgYmFja2luZyBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IHByZXZFbGVtZW50XG4gKiBAcGFyYW0gez9vYmplY3R9IG5leHRFbGVtZW50XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBleGlzdGluZyBpbnN0YW5jZSBzaG91bGQgYmUgdXBkYXRlZC5cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpIHtcbiAgdmFyIHByZXZFbXB0eSA9IHByZXZFbGVtZW50ID09PSBudWxsIHx8IHByZXZFbGVtZW50ID09PSBmYWxzZTtcbiAgdmFyIG5leHRFbXB0eSA9IG5leHRFbGVtZW50ID09PSBudWxsIHx8IG5leHRFbGVtZW50ID09PSBmYWxzZTtcbiAgaWYgKHByZXZFbXB0eSB8fCBuZXh0RW1wdHkpIHtcbiAgICByZXR1cm4gcHJldkVtcHR5ID09PSBuZXh0RW1wdHk7XG4gIH1cblxuICB2YXIgcHJldlR5cGUgPSB0eXBlb2YgcHJldkVsZW1lbnQ7XG4gIHZhciBuZXh0VHlwZSA9IHR5cGVvZiBuZXh0RWxlbWVudDtcbiAgaWYgKHByZXZUeXBlID09PSAnc3RyaW5nJyB8fCBwcmV2VHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbmV4dFR5cGUgPT09ICdzdHJpbmcnIHx8IG5leHRUeXBlID09PSAnbnVtYmVyJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV4dFR5cGUgPT09ICdvYmplY3QnICYmIHByZXZFbGVtZW50LnR5cGUgPT09IG5leHRFbGVtZW50LnR5cGUgJiYgcHJldkVsZW1lbnQua2V5ID09PSBuZXh0RWxlbWVudC5rZXk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgdmFsaWRhdGVET01OZXN0aW5nID0gZW1wdHlGdW5jdGlvbjtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gVGhpcyB2YWxpZGF0aW9uIGNvZGUgd2FzIHdyaXR0ZW4gYmFzZWQgb24gdGhlIEhUTUw1IHBhcnNpbmcgc3BlYzpcbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjaGFzLWFuLWVsZW1lbnQtaW4tc2NvcGVcbiAgLy9cbiAgLy8gTm90ZTogdGhpcyBkb2VzIG5vdCBjYXRjaCBhbGwgaW52YWxpZCBuZXN0aW5nLCBub3IgZG9lcyBpdCB0cnkgdG8gKGFzIGl0J3NcbiAgLy8gbm90IGNsZWFyIHdoYXQgcHJhY3RpY2FsIGJlbmVmaXQgZG9pbmcgc28gcHJvdmlkZXMpOyBpbnN0ZWFkLCB3ZSB3YXJuIG9ubHlcbiAgLy8gZm9yIGNhc2VzIHdoZXJlIHRoZSBwYXJzZXIgd2lsbCBnaXZlIGEgcGFyc2UgdHJlZSBkaWZmZXJpbmcgZnJvbSB3aGF0IFJlYWN0XG4gIC8vIGludGVuZGVkLiBGb3IgZXhhbXBsZSwgPGI+PGRpdj48L2Rpdj48L2I+IGlzIGludmFsaWQgYnV0IHdlIGRvbid0IHdhcm5cbiAgLy8gYmVjYXVzZSBpdCBzdGlsbCBwYXJzZXMgY29ycmVjdGx5OyB3ZSBkbyB3YXJuIGZvciBvdGhlciBjYXNlcyBsaWtlIG5lc3RlZFxuICAvLyA8cD4gdGFncyB3aGVyZSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzZWNvbmQgZWxlbWVudCBpbXBsaWNpdGx5IGNsb3NlcyB0aGVcbiAgLy8gZmlyc3QsIGNhdXNpbmcgYSBjb25mdXNpbmcgbWVzcy5cblxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNzcGVjaWFsXG4gIHZhciBzcGVjaWFsVGFncyA9IFsnYWRkcmVzcycsICdhcHBsZXQnLCAnYXJlYScsICdhcnRpY2xlJywgJ2FzaWRlJywgJ2Jhc2UnLCAnYmFzZWZvbnQnLCAnYmdzb3VuZCcsICdibG9ja3F1b3RlJywgJ2JvZHknLCAnYnInLCAnYnV0dG9uJywgJ2NhcHRpb24nLCAnY2VudGVyJywgJ2NvbCcsICdjb2xncm91cCcsICdkZCcsICdkZXRhaWxzJywgJ2RpcicsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnZnJhbWUnLCAnZnJhbWVzZXQnLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaWZyYW1lJywgJ2ltZycsICdpbnB1dCcsICdpc2luZGV4JywgJ2xpJywgJ2xpbmsnLCAnbGlzdGluZycsICdtYWluJywgJ21hcnF1ZWUnLCAnbWVudScsICdtZW51aXRlbScsICdtZXRhJywgJ25hdicsICdub2VtYmVkJywgJ25vZnJhbWVzJywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdwJywgJ3BhcmFtJywgJ3BsYWludGV4dCcsICdwcmUnLCAnc2NyaXB0JywgJ3NlY3Rpb24nLCAnc2VsZWN0JywgJ3NvdXJjZScsICdzdHlsZScsICdzdW1tYXJ5JywgJ3RhYmxlJywgJ3Rib2R5JywgJ3RkJywgJ3RlbXBsYXRlJywgJ3RleHRhcmVhJywgJ3Rmb290JywgJ3RoJywgJ3RoZWFkJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3VsJywgJ3dicicsICd4bXAnXTtcblxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNoYXMtYW4tZWxlbWVudC1pbi1zY29wZVxuICB2YXIgaW5TY29wZVRhZ3MgPSBbJ2FwcGxldCcsICdjYXB0aW9uJywgJ2h0bWwnLCAndGFibGUnLCAndGQnLCAndGgnLCAnbWFycXVlZScsICdvYmplY3QnLCAndGVtcGxhdGUnLFxuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2h0bWwtaW50ZWdyYXRpb24tcG9pbnRcbiAgLy8gVE9ETzogRGlzdGluZ3Vpc2ggYnkgbmFtZXNwYWNlIGhlcmUgLS0gZm9yIDx0aXRsZT4sIGluY2x1ZGluZyBpdCBoZXJlXG4gIC8vIGVycnMgb24gdGhlIHNpZGUgb2YgZmV3ZXIgd2FybmluZ3NcbiAgJ2ZvcmVpZ25PYmplY3QnLCAnZGVzYycsICd0aXRsZSddO1xuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2hhcy1hbi1lbGVtZW50LWluLWJ1dHRvbi1zY29wZVxuICB2YXIgYnV0dG9uU2NvcGVUYWdzID0gaW5TY29wZVRhZ3MuY29uY2F0KFsnYnV0dG9uJ10pO1xuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2dlbmVyYXRlLWltcGxpZWQtZW5kLXRhZ3NcbiAgdmFyIGltcGxpZWRFbmRUYWdzID0gWydkZCcsICdkdCcsICdsaScsICdvcHRpb24nLCAnb3B0Z3JvdXAnLCAncCcsICdycCcsICdydCddO1xuXG4gIHZhciBlbXB0eUFuY2VzdG9ySW5mbyA9IHtcbiAgICBjdXJyZW50OiBudWxsLFxuXG4gICAgZm9ybVRhZzogbnVsbCxcbiAgICBhVGFnSW5TY29wZTogbnVsbCxcbiAgICBidXR0b25UYWdJblNjb3BlOiBudWxsLFxuICAgIG5vYnJUYWdJblNjb3BlOiBudWxsLFxuICAgIHBUYWdJbkJ1dHRvblNjb3BlOiBudWxsLFxuXG4gICAgbGlzdEl0ZW1UYWdBdXRvY2xvc2luZzogbnVsbCxcbiAgICBkbEl0ZW1UYWdBdXRvY2xvc2luZzogbnVsbFxuICB9O1xuXG4gIHZhciB1cGRhdGVkQW5jZXN0b3JJbmZvID0gZnVuY3Rpb24gKG9sZEluZm8sIHRhZywgaW5zdGFuY2UpIHtcbiAgICB2YXIgYW5jZXN0b3JJbmZvID0gX2Fzc2lnbih7fSwgb2xkSW5mbyB8fCBlbXB0eUFuY2VzdG9ySW5mbyk7XG4gICAgdmFyIGluZm8gPSB7IHRhZzogdGFnLCBpbnN0YW5jZTogaW5zdGFuY2UgfTtcblxuICAgIGlmIChpblNjb3BlVGFncy5pbmRleE9mKHRhZykgIT09IC0xKSB7XG4gICAgICBhbmNlc3RvckluZm8uYVRhZ0luU2NvcGUgPSBudWxsO1xuICAgICAgYW5jZXN0b3JJbmZvLmJ1dHRvblRhZ0luU2NvcGUgPSBudWxsO1xuICAgICAgYW5jZXN0b3JJbmZvLm5vYnJUYWdJblNjb3BlID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGJ1dHRvblNjb3BlVGFncy5pbmRleE9mKHRhZykgIT09IC0xKSB7XG4gICAgICBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGUgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlZSBydWxlcyBmb3IgJ2xpJywgJ2RkJywgJ2R0JyBzdGFydCB0YWdzIGluXG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluYm9keVxuICAgIGlmIChzcGVjaWFsVGFncy5pbmRleE9mKHRhZykgIT09IC0xICYmIHRhZyAhPT0gJ2FkZHJlc3MnICYmIHRhZyAhPT0gJ2RpdicgJiYgdGFnICE9PSAncCcpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5saXN0SXRlbVRhZ0F1dG9jbG9zaW5nID0gbnVsbDtcbiAgICAgIGFuY2VzdG9ySW5mby5kbEl0ZW1UYWdBdXRvY2xvc2luZyA9IG51bGw7XG4gICAgfVxuXG4gICAgYW5jZXN0b3JJbmZvLmN1cnJlbnQgPSBpbmZvO1xuXG4gICAgaWYgKHRhZyA9PT0gJ2Zvcm0nKSB7XG4gICAgICBhbmNlc3RvckluZm8uZm9ybVRhZyA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdhJykge1xuICAgICAgYW5jZXN0b3JJbmZvLmFUYWdJblNjb3BlID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ2J1dHRvbicpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5idXR0b25UYWdJblNjb3BlID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ25vYnInKSB7XG4gICAgICBhbmNlc3RvckluZm8ubm9iclRhZ0luU2NvcGUgPSBpbmZvO1xuICAgIH1cbiAgICBpZiAodGFnID09PSAncCcpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5wVGFnSW5CdXR0b25TY29wZSA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdsaScpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5saXN0SXRlbVRhZ0F1dG9jbG9zaW5nID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ2RkJyB8fCB0YWcgPT09ICdkdCcpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5kbEl0ZW1UYWdBdXRvY2xvc2luZyA9IGluZm87XG4gICAgfVxuXG4gICAgcmV0dXJuIGFuY2VzdG9ySW5mbztcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyXG4gICAqL1xuICB2YXIgaXNUYWdWYWxpZFdpdGhQYXJlbnQgPSBmdW5jdGlvbiAodGFnLCBwYXJlbnRUYWcpIHtcbiAgICAvLyBGaXJzdCwgbGV0J3MgY2hlY2sgaWYgd2UncmUgaW4gYW4gdW51c3VhbCBwYXJzaW5nIG1vZGUuLi5cbiAgICBzd2l0Y2ggKHBhcmVudFRhZykge1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluc2VsZWN0XG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnb3B0aW9uJyB8fCB0YWcgPT09ICdvcHRncm91cCcgfHwgdGFnID09PSAnI3RleHQnO1xuICAgICAgY2FzZSAnb3B0Z3JvdXAnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnb3B0aW9uJyB8fCB0YWcgPT09ICcjdGV4dCc7XG4gICAgICAvLyBTdHJpY3RseSBzcGVha2luZywgc2VlaW5nIGFuIDxvcHRpb24+IGRvZXNuJ3QgbWVhbiB3ZSdyZSBpbiBhIDxzZWxlY3Q+XG4gICAgICAvLyBidXRcbiAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICcjdGV4dCc7XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW50ZFxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluY2FwdGlvblxuICAgICAgLy8gTm8gc3BlY2lhbCBiZWhhdmlvciBzaW5jZSB0aGVzZSBydWxlcyBmYWxsIGJhY2sgdG8gXCJpbiBib2R5XCIgbW9kZSBmb3JcbiAgICAgIC8vIGFsbCBleGNlcHQgc3BlY2lhbCB0YWJsZSBub2RlcyB3aGljaCBjYXVzZSBiYWQgcGFyc2luZyBiZWhhdmlvciBhbnl3YXkuXG5cbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbnRyXG4gICAgICBjYXNlICd0cic6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICd0aCcgfHwgdGFnID09PSAndGQnIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbnRib2R5XG4gICAgICBjYXNlICd0Ym9keSc6XG4gICAgICBjYXNlICd0aGVhZCc6XG4gICAgICBjYXNlICd0Zm9vdCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICd0cicgfHwgdGFnID09PSAnc3R5bGUnIHx8IHRhZyA9PT0gJ3NjcmlwdCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluY29sZ3JvdXBcbiAgICAgIGNhc2UgJ2NvbGdyb3VwJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2NvbCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWludGFibGVcbiAgICAgIGNhc2UgJ3RhYmxlJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2NhcHRpb24nIHx8IHRhZyA9PT0gJ2NvbGdyb3VwJyB8fCB0YWcgPT09ICd0Ym9keScgfHwgdGFnID09PSAndGZvb3QnIHx8IHRhZyA9PT0gJ3RoZWFkJyB8fCB0YWcgPT09ICdzdHlsZScgfHwgdGFnID09PSAnc2NyaXB0JyB8fCB0YWcgPT09ICd0ZW1wbGF0ZSc7XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW5oZWFkXG4gICAgICBjYXNlICdoZWFkJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2Jhc2UnIHx8IHRhZyA9PT0gJ2Jhc2Vmb250JyB8fCB0YWcgPT09ICdiZ3NvdW5kJyB8fCB0YWcgPT09ICdsaW5rJyB8fCB0YWcgPT09ICdtZXRhJyB8fCB0YWcgPT09ICd0aXRsZScgfHwgdGFnID09PSAnbm9zY3JpcHQnIHx8IHRhZyA9PT0gJ25vZnJhbWVzJyB8fCB0YWcgPT09ICdzdHlsZScgfHwgdGFnID09PSAnc2NyaXB0JyB8fCB0YWcgPT09ICd0ZW1wbGF0ZSc7XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zZW1hbnRpY3MuaHRtbCN0aGUtaHRtbC1lbGVtZW50XG4gICAgICBjYXNlICdodG1sJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2hlYWQnIHx8IHRhZyA9PT0gJ2JvZHknO1xuICAgICAgY2FzZSAnI2RvY3VtZW50JzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2h0bWwnO1xuICAgIH1cblxuICAgIC8vIFByb2JhYmx5IGluIHRoZSBcImluIGJvZHlcIiBwYXJzaW5nIG1vZGUsIHNvIHdlIG91dGxhdyBvbmx5IHRhZyBjb21ib3NcbiAgICAvLyB3aGVyZSB0aGUgcGFyc2luZyBydWxlcyBjYXVzZSBpbXBsaWNpdCBvcGVucyBvciBjbG9zZXMgdG8gYmUgYWRkZWQuXG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluYm9keVxuICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICBjYXNlICdoMSc6XG4gICAgICBjYXNlICdoMic6XG4gICAgICBjYXNlICdoMyc6XG4gICAgICBjYXNlICdoNCc6XG4gICAgICBjYXNlICdoNSc6XG4gICAgICBjYXNlICdoNic6XG4gICAgICAgIHJldHVybiBwYXJlbnRUYWcgIT09ICdoMScgJiYgcGFyZW50VGFnICE9PSAnaDInICYmIHBhcmVudFRhZyAhPT0gJ2gzJyAmJiBwYXJlbnRUYWcgIT09ICdoNCcgJiYgcGFyZW50VGFnICE9PSAnaDUnICYmIHBhcmVudFRhZyAhPT0gJ2g2JztcblxuICAgICAgY2FzZSAncnAnOlxuICAgICAgY2FzZSAncnQnOlxuICAgICAgICByZXR1cm4gaW1wbGllZEVuZFRhZ3MuaW5kZXhPZihwYXJlbnRUYWcpID09PSAtMTtcblxuICAgICAgY2FzZSAnYm9keSc6XG4gICAgICBjYXNlICdjYXB0aW9uJzpcbiAgICAgIGNhc2UgJ2NvbCc6XG4gICAgICBjYXNlICdjb2xncm91cCc6XG4gICAgICBjYXNlICdmcmFtZSc6XG4gICAgICBjYXNlICdoZWFkJzpcbiAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgY2FzZSAndGJvZHknOlxuICAgICAgY2FzZSAndGQnOlxuICAgICAgY2FzZSAndGZvb3QnOlxuICAgICAgY2FzZSAndGgnOlxuICAgICAgY2FzZSAndGhlYWQnOlxuICAgICAgY2FzZSAndHInOlxuICAgICAgICAvLyBUaGVzZSB0YWdzIGFyZSBvbmx5IHZhbGlkIHdpdGggYSBmZXcgcGFyZW50cyB0aGF0IGhhdmUgc3BlY2lhbCBjaGlsZFxuICAgICAgICAvLyBwYXJzaW5nIHJ1bGVzIC0tIGlmIHdlJ3JlIGRvd24gaGVyZSwgdGhlbiBub25lIG9mIHRob3NlIG1hdGNoZWQgYW5kXG4gICAgICAgIC8vIHNvIHdlIGFsbG93IGl0IG9ubHkgaWYgd2UgZG9uJ3Qga25vdyB3aGF0IHRoZSBwYXJlbnQgaXMsIGFzIGFsbCBvdGhlclxuICAgICAgICAvLyBjYXNlcyBhcmUgaW52YWxpZC5cbiAgICAgICAgcmV0dXJuIHBhcmVudFRhZyA9PSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXJcbiAgICovXG4gIHZhciBmaW5kSW52YWxpZEFuY2VzdG9yRm9yVGFnID0gZnVuY3Rpb24gKHRhZywgYW5jZXN0b3JJbmZvKSB7XG4gICAgc3dpdGNoICh0YWcpIHtcbiAgICAgIGNhc2UgJ2FkZHJlc3MnOlxuICAgICAgY2FzZSAnYXJ0aWNsZSc6XG4gICAgICBjYXNlICdhc2lkZSc6XG4gICAgICBjYXNlICdibG9ja3F1b3RlJzpcbiAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICBjYXNlICdkZXRhaWxzJzpcbiAgICAgIGNhc2UgJ2RpYWxvZyc6XG4gICAgICBjYXNlICdkaXInOlxuICAgICAgY2FzZSAnZGl2JzpcbiAgICAgIGNhc2UgJ2RsJzpcbiAgICAgIGNhc2UgJ2ZpZWxkc2V0JzpcbiAgICAgIGNhc2UgJ2ZpZ2NhcHRpb24nOlxuICAgICAgY2FzZSAnZmlndXJlJzpcbiAgICAgIGNhc2UgJ2Zvb3Rlcic6XG4gICAgICBjYXNlICdoZWFkZXInOlxuICAgICAgY2FzZSAnaGdyb3VwJzpcbiAgICAgIGNhc2UgJ21haW4nOlxuICAgICAgY2FzZSAnbWVudSc6XG4gICAgICBjYXNlICduYXYnOlxuICAgICAgY2FzZSAnb2wnOlxuICAgICAgY2FzZSAncCc6XG4gICAgICBjYXNlICdzZWN0aW9uJzpcbiAgICAgIGNhc2UgJ3N1bW1hcnknOlxuICAgICAgY2FzZSAndWwnOlxuICAgICAgY2FzZSAncHJlJzpcbiAgICAgIGNhc2UgJ2xpc3RpbmcnOlxuICAgICAgY2FzZSAndGFibGUnOlxuICAgICAgY2FzZSAnaHInOlxuICAgICAgY2FzZSAneG1wJzpcbiAgICAgIGNhc2UgJ2gxJzpcbiAgICAgIGNhc2UgJ2gyJzpcbiAgICAgIGNhc2UgJ2gzJzpcbiAgICAgIGNhc2UgJ2g0JzpcbiAgICAgIGNhc2UgJ2g1JzpcbiAgICAgIGNhc2UgJ2g2JzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5wVGFnSW5CdXR0b25TY29wZTtcblxuICAgICAgY2FzZSAnZm9ybSc6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uZm9ybVRhZyB8fCBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGU7XG5cbiAgICAgIGNhc2UgJ2xpJzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5saXN0SXRlbVRhZ0F1dG9jbG9zaW5nO1xuXG4gICAgICBjYXNlICdkZCc6XG4gICAgICBjYXNlICdkdCc6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uZGxJdGVtVGFnQXV0b2Nsb3Npbmc7XG5cbiAgICAgIGNhc2UgJ2J1dHRvbic6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uYnV0dG9uVGFnSW5TY29wZTtcblxuICAgICAgY2FzZSAnYSc6XG4gICAgICAgIC8vIFNwZWMgc2F5cyBzb21ldGhpbmcgYWJvdXQgc3RvcmluZyBhIGxpc3Qgb2YgbWFya2VycywgYnV0IGl0IHNvdW5kc1xuICAgICAgICAvLyBlcXVpdmFsZW50IHRvIHRoaXMgY2hlY2suXG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uYVRhZ0luU2NvcGU7XG5cbiAgICAgIGNhc2UgJ25vYnInOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLm5vYnJUYWdJblNjb3BlO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHaXZlbiBhIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50IGluc3RhbmNlLCByZXR1cm4gYSBsaXN0IG9mIGl0cyByZWN1cnNpdmVcbiAgICogb3duZXJzLCBzdGFydGluZyBhdCB0aGUgcm9vdCBhbmQgZW5kaW5nIHdpdGggdGhlIGluc3RhbmNlIGl0c2VsZi5cbiAgICovXG4gIHZhciBmaW5kT3duZXJTdGFjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIGlmICghaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICBkbyB7XG4gICAgICBzdGFjay5wdXNoKGluc3RhbmNlKTtcbiAgICB9IHdoaWxlIChpbnN0YW5jZSA9IGluc3RhbmNlLl9jdXJyZW50RWxlbWVudC5fb3duZXIpO1xuICAgIHN0YWNrLnJldmVyc2UoKTtcbiAgICByZXR1cm4gc3RhY2s7XG4gIH07XG5cbiAgdmFyIGRpZFdhcm4gPSB7fTtcblxuICB2YWxpZGF0ZURPTU5lc3RpbmcgPSBmdW5jdGlvbiAoY2hpbGRUYWcsIGNoaWxkVGV4dCwgY2hpbGRJbnN0YW5jZSwgYW5jZXN0b3JJbmZvKSB7XG4gICAgYW5jZXN0b3JJbmZvID0gYW5jZXN0b3JJbmZvIHx8IGVtcHR5QW5jZXN0b3JJbmZvO1xuICAgIHZhciBwYXJlbnRJbmZvID0gYW5jZXN0b3JJbmZvLmN1cnJlbnQ7XG4gICAgdmFyIHBhcmVudFRhZyA9IHBhcmVudEluZm8gJiYgcGFyZW50SW5mby50YWc7XG5cbiAgICBpZiAoY2hpbGRUZXh0ICE9IG51bGwpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGNoaWxkVGFnID09IG51bGwsICd2YWxpZGF0ZURPTU5lc3Rpbmc6IHdoZW4gY2hpbGRUZXh0IGlzIHBhc3NlZCwgY2hpbGRUYWcgc2hvdWxkIGJlIG51bGwnKSA6IHZvaWQgMDtcbiAgICAgIGNoaWxkVGFnID0gJyN0ZXh0JztcbiAgICB9XG5cbiAgICB2YXIgaW52YWxpZFBhcmVudCA9IGlzVGFnVmFsaWRXaXRoUGFyZW50KGNoaWxkVGFnLCBwYXJlbnRUYWcpID8gbnVsbCA6IHBhcmVudEluZm87XG4gICAgdmFyIGludmFsaWRBbmNlc3RvciA9IGludmFsaWRQYXJlbnQgPyBudWxsIDogZmluZEludmFsaWRBbmNlc3RvckZvclRhZyhjaGlsZFRhZywgYW5jZXN0b3JJbmZvKTtcbiAgICB2YXIgcHJvYmxlbWF0aWMgPSBpbnZhbGlkUGFyZW50IHx8IGludmFsaWRBbmNlc3RvcjtcblxuICAgIGlmIChwcm9ibGVtYXRpYykge1xuICAgICAgdmFyIGFuY2VzdG9yVGFnID0gcHJvYmxlbWF0aWMudGFnO1xuICAgICAgdmFyIGFuY2VzdG9ySW5zdGFuY2UgPSBwcm9ibGVtYXRpYy5pbnN0YW5jZTtcblxuICAgICAgdmFyIGNoaWxkT3duZXIgPSBjaGlsZEluc3RhbmNlICYmIGNoaWxkSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICAgIHZhciBhbmNlc3Rvck93bmVyID0gYW5jZXN0b3JJbnN0YW5jZSAmJiBhbmNlc3Rvckluc3RhbmNlLl9jdXJyZW50RWxlbWVudC5fb3duZXI7XG5cbiAgICAgIHZhciBjaGlsZE93bmVycyA9IGZpbmRPd25lclN0YWNrKGNoaWxkT3duZXIpO1xuICAgICAgdmFyIGFuY2VzdG9yT3duZXJzID0gZmluZE93bmVyU3RhY2soYW5jZXN0b3JPd25lcik7XG5cbiAgICAgIHZhciBtaW5TdGFja0xlbiA9IE1hdGgubWluKGNoaWxkT3duZXJzLmxlbmd0aCwgYW5jZXN0b3JPd25lcnMubGVuZ3RoKTtcbiAgICAgIHZhciBpO1xuXG4gICAgICB2YXIgZGVlcGVzdENvbW1vbiA9IC0xO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG1pblN0YWNrTGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGNoaWxkT3duZXJzW2ldID09PSBhbmNlc3Rvck93bmVyc1tpXSkge1xuICAgICAgICAgIGRlZXBlc3RDb21tb24gPSBpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBVTktOT1dOID0gJyh1bmtub3duKSc7XG4gICAgICB2YXIgY2hpbGRPd25lck5hbWVzID0gY2hpbGRPd25lcnMuc2xpY2UoZGVlcGVzdENvbW1vbiArIDEpLm1hcChmdW5jdGlvbiAoaW5zdCkge1xuICAgICAgICByZXR1cm4gaW5zdC5nZXROYW1lKCkgfHwgVU5LTk9XTjtcbiAgICAgIH0pO1xuICAgICAgdmFyIGFuY2VzdG9yT3duZXJOYW1lcyA9IGFuY2VzdG9yT3duZXJzLnNsaWNlKGRlZXBlc3RDb21tb24gKyAxKS5tYXAoZnVuY3Rpb24gKGluc3QpIHtcbiAgICAgICAgcmV0dXJuIGluc3QuZ2V0TmFtZSgpIHx8IFVOS05PV047XG4gICAgICB9KTtcbiAgICAgIHZhciBvd25lckluZm8gPSBbXS5jb25jYXQoXG4gICAgICAvLyBJZiB0aGUgcGFyZW50IGFuZCBjaGlsZCBpbnN0YW5jZXMgaGF2ZSBhIGNvbW1vbiBvd25lciBhbmNlc3Rvciwgc3RhcnRcbiAgICAgIC8vIHdpdGggdGhhdCAtLSBvdGhlcndpc2Ugd2UganVzdCBzdGFydCB3aXRoIHRoZSBwYXJlbnQncyBvd25lcnMuXG4gICAgICBkZWVwZXN0Q29tbW9uICE9PSAtMSA/IGNoaWxkT3duZXJzW2RlZXBlc3RDb21tb25dLmdldE5hbWUoKSB8fCBVTktOT1dOIDogW10sIGFuY2VzdG9yT3duZXJOYW1lcywgYW5jZXN0b3JUYWcsXG4gICAgICAvLyBJZiB3ZSdyZSB3YXJuaW5nIGFib3V0IGFuIGludmFsaWQgKG5vbi1wYXJlbnQpIGFuY2VzdHJ5LCBhZGQgJy4uLidcbiAgICAgIGludmFsaWRBbmNlc3RvciA/IFsnLi4uJ10gOiBbXSwgY2hpbGRPd25lck5hbWVzLCBjaGlsZFRhZykuam9pbignID4gJyk7XG5cbiAgICAgIHZhciB3YXJuS2V5ID0gISFpbnZhbGlkUGFyZW50ICsgJ3wnICsgY2hpbGRUYWcgKyAnfCcgKyBhbmNlc3RvclRhZyArICd8JyArIG93bmVySW5mbztcbiAgICAgIGlmIChkaWRXYXJuW3dhcm5LZXldKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRpZFdhcm5bd2FybktleV0gPSB0cnVlO1xuXG4gICAgICB2YXIgdGFnRGlzcGxheU5hbWUgPSBjaGlsZFRhZztcbiAgICAgIHZhciB3aGl0ZXNwYWNlSW5mbyA9ICcnO1xuICAgICAgaWYgKGNoaWxkVGFnID09PSAnI3RleHQnKSB7XG4gICAgICAgIGlmICgvXFxTLy50ZXN0KGNoaWxkVGV4dCkpIHtcbiAgICAgICAgICB0YWdEaXNwbGF5TmFtZSA9ICdUZXh0IG5vZGVzJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YWdEaXNwbGF5TmFtZSA9ICdXaGl0ZXNwYWNlIHRleHQgbm9kZXMnO1xuICAgICAgICAgIHdoaXRlc3BhY2VJbmZvID0gXCIgTWFrZSBzdXJlIHlvdSBkb24ndCBoYXZlIGFueSBleHRyYSB3aGl0ZXNwYWNlIGJldHdlZW4gdGFncyBvbiBcIiArICdlYWNoIGxpbmUgb2YgeW91ciBzb3VyY2UgY29kZS4nO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YWdEaXNwbGF5TmFtZSA9ICc8JyArIGNoaWxkVGFnICsgJz4nO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW52YWxpZFBhcmVudCkge1xuICAgICAgICB2YXIgaW5mbyA9ICcnO1xuICAgICAgICBpZiAoYW5jZXN0b3JUYWcgPT09ICd0YWJsZScgJiYgY2hpbGRUYWcgPT09ICd0cicpIHtcbiAgICAgICAgICBpbmZvICs9ICcgQWRkIGEgPHRib2R5PiB0byB5b3VyIGNvZGUgdG8gbWF0Y2ggdGhlIERPTSB0cmVlIGdlbmVyYXRlZCBieSAnICsgJ3RoZSBicm93c2VyLic7XG4gICAgICAgIH1cbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICd2YWxpZGF0ZURPTU5lc3RpbmcoLi4uKTogJXMgY2Fubm90IGFwcGVhciBhcyBhIGNoaWxkIG9mIDwlcz4uJXMgJyArICdTZWUgJXMuJXMnLCB0YWdEaXNwbGF5TmFtZSwgYW5jZXN0b3JUYWcsIHdoaXRlc3BhY2VJbmZvLCBvd25lckluZm8sIGluZm8pIDogdm9pZCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICd2YWxpZGF0ZURPTU5lc3RpbmcoLi4uKTogJXMgY2Fubm90IGFwcGVhciBhcyBhIGRlc2NlbmRhbnQgb2YgJyArICc8JXM+LiBTZWUgJXMuJywgdGFnRGlzcGxheU5hbWUsIGFuY2VzdG9yVGFnLCBvd25lckluZm8pIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YWxpZGF0ZURPTU5lc3RpbmcudXBkYXRlZEFuY2VzdG9ySW5mbyA9IHVwZGF0ZWRBbmNlc3RvckluZm87XG5cbiAgLy8gRm9yIHRlc3RpbmdcbiAgdmFsaWRhdGVET01OZXN0aW5nLmlzVGFnVmFsaWRJbkNvbnRleHQgPSBmdW5jdGlvbiAodGFnLCBhbmNlc3RvckluZm8pIHtcbiAgICBhbmNlc3RvckluZm8gPSBhbmNlc3RvckluZm8gfHwgZW1wdHlBbmNlc3RvckluZm87XG4gICAgdmFyIHBhcmVudEluZm8gPSBhbmNlc3RvckluZm8uY3VycmVudDtcbiAgICB2YXIgcGFyZW50VGFnID0gcGFyZW50SW5mbyAmJiBwYXJlbnRJbmZvLnRhZztcbiAgICByZXR1cm4gaXNUYWdWYWxpZFdpdGhQYXJlbnQodGFnLCBwYXJlbnRUYWcpICYmICFmaW5kSW52YWxpZEFuY2VzdG9yRm9yVGFnKHRhZywgYW5jZXN0b3JJbmZvKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2YWxpZGF0ZURPTU5lc3Rpbmc7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL3ZhbGlkYXRlRE9NTmVzdGluZy5qcyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUm91dGVyIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvUm91dGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LXJvdXRlci1kb20vZXMvUm91dGVyLmpzIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICByb3V0ZToge1xuICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IHRoaXMuc3RhdGUubWF0Y2hcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBoaXN0b3J5ID0gX3Byb3BzLmhpc3Rvcnk7XG5cblxuICAgIGludmFyaWFudChjaGlsZHJlbiA9PSBudWxsIHx8IFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMSwgXCJBIDxSb3V0ZXI+IG1heSBoYXZlIG9ubHkgb25lIGNoaWxkIGVsZW1lbnRcIik7XG5cbiAgICAvLyBEbyB0aGlzIGhlcmUgc28gd2UgY2FuIHNldFN0YXRlIHdoZW4gYSA8UmVkaXJlY3Q+IGNoYW5nZXMgdGhlXG4gICAgLy8gbG9jYXRpb24gaW4gY29tcG9uZW50V2lsbE1vdW50LiBUaGlzIGhhcHBlbnMgZS5nLiB3aGVuIGRvaW5nXG4gICAgLy8gc2VydmVyIHJlbmRlcmluZyB1c2luZyBhIDxTdGF0aWNSb3V0ZXI+LlxuICAgIHRoaXMudW5saXN0ZW4gPSBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICBtYXRjaDogX3RoaXMyLmNvbXB1dGVNYXRjaChoaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB3YXJuaW5nKHRoaXMucHJvcHMuaGlzdG9yeSA9PT0gbmV4dFByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICByZXR1cm4gY2hpbGRyZW4gPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5Sb3V0ZXIuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LXJvdXRlci9lcy9Sb3V0ZXIuanMiLCJpbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gXCJwYXRoLXRvLXJlZ2V4cFwiO1xuXG52YXIgcGF0dGVybkNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG52YXIgY29tcGlsZVBhdGggPSBmdW5jdGlvbiBjb21waWxlUGF0aChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlID0gcGF0aFRvUmVnZXhwKHBhdHRlcm4sIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgY29tcGlsZWRQYXR0ZXJuID0geyByZTogcmUsIGtleXM6IGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkUGF0dGVybjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRQYXR0ZXJuO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGggcGF0dGVybi5cbiAqL1xudmFyIG1hdGNoUGF0aCA9IGZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBwYXJlbnQgPSBhcmd1bWVudHNbMl07XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSBvcHRpb25zID0geyBwYXRoOiBvcHRpb25zIH07XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcblxuXG4gIGlmIChwYXRoID09IG51bGwpIHJldHVybiBwYXJlbnQ7XG5cbiAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoKHBhdGgsIHsgZW5kOiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pLFxuICAgICAgcmUgPSBfY29tcGlsZVBhdGgucmUsXG4gICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgdmFyIG1hdGNoID0gcmUuZXhlYyhwYXRobmFtZSk7XG5cbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG5cbiAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuXG4gIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLCAvLyB0aGUgcGF0aCBwYXR0ZXJuIHVzZWQgdG8gbWF0Y2hcbiAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLCAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICBpc0V4YWN0OiBpc0V4YWN0LCAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCB7fSlcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGguanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRm9ya2VkIGZyb20gZmJqcy93YXJuaW5nOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9lNjZiYTIwYWQ1YmU0MzNlYjU0NDIzZjJiMDk3ZDgyOTMyNGQ5ZGU2L3BhY2thZ2VzL2ZianMvc3JjL19fZm9ya3NfXy93YXJuaW5nLmpzXG4gKlxuICogT25seSBjaGFuZ2UgaXMgd2UgdXNlIGNvbnNvbGUud2FybiBpbnN0ZWFkIG9mIGNvbnNvbGUuZXJyb3IsXG4gKiBhbmQgZG8gbm90aGluZyB3aGVuICdjb25zb2xlJyBpcyBub3Qgc3VwcG9ydGVkLlxuICogVGhpcyByZWFsbHkgc2ltcGxpZmllcyB0aGUgY29kZS5cbiAqIC0tLVxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBsb3dQcmlvcml0eVdhcm5pbmcgPSBmdW5jdGlvbiAoKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG5cbiAgbG93UHJpb3JpdHlXYXJuaW5nID0gZnVuY3Rpb24gKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgKyAnbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIgPiAyID8gX2xlbjIgLSAyIDogMCksIF9rZXkyID0gMjsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyIC0gMl0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBwcmludFdhcm5pbmcuYXBwbHkodW5kZWZpbmVkLCBbZm9ybWF0XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsb3dQcmlvcml0eVdhcm5pbmc7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC9saWIvbG93UHJpb3JpdHlXYXJuaW5nLmpzIiwiaW1wb3J0IFJlYWN0ICAgICAgICAgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJhZGl1bSAgICAgICAgZnJvbSAncmFkaXVtJztcblxuaW1wb3J0IExheW91dCAgICAgICAgZnJvbSAnLi9MYXlvdXQnO1xuXG5pbXBvcnQgcm91dGVzICAgICAgICBmcm9tICcuLi9yb3V0ZXMuanMnO1xuXG5jbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgbGV0IFN0eWxlUm9vdCA9IFJhZGl1bS5TdHlsZVJvb3Q7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFN0eWxlUm9vdD5cbiAgICAgICAgPExheW91dD57cm91dGVzKHRoaXMucHJvcHMuY29uZmlnKX08L0xheW91dD5cbiAgICAgIDwvU3R5bGVSb290PlxuICAgICk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFJhZGl1bShBcHApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbXBvbmVudHMvQXBwLmpzIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvaW5kZXguanMiLCJpbXBvcnQgUmVhY3QgIGZyb20gJ3JlYWN0JztcbmltcG9ydCBSYWRpdW0gZnJvbSAncmFkaXVtJztcblxuaW1wb3J0IGF4aW9zICBmcm9tICdheGlvcyc7XG5pbXBvcnQge0xpbmt9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5pbXBvcnQgVGV4dCAgIGZyb20gJy4vVGV4dCc7XG5pbXBvcnQgSW5wdXQgIGZyb20gJy4vSW5wdXQnO1xuXG5jbGFzcyBEZXRhaWxzSW5wdXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBmaXJzdDogJycsXG4gICAgICBsYXN0OiAnJyxcbiAgICAgIGVtYWlsOiAnJyxcbiAgICAgIG1vZGU6ICdpbml0JyxcbiAgICAgIG1lc3NhZ2U6ICcnLFxuICAgICAgZGV2aWNlOiAnJ1xuICAgIH1cbiAgfVxuICBmaXJzdENoYW5nZShldmVudCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe2ZpcnN0OiBldmVudC50YXJnZXQudmFsdWV9KTtcbiAgfVxuICBsYXN0Q2hhbmdlKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7bGFzdDogZXZlbnQudGFyZ2V0LnZhbHVlfSk7XG4gIH1cbiAgZW1haWxDaGFuZ2UoZXZlbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtlbWFpbDogZXZlbnQudGFyZ2V0LnZhbHVlfSk7XG4gIH1cbiAgZGV2aWNlQ2hhbmdlKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7ZGV2aWNlOiBldmVudC50YXJnZXQudmFsdWV9KVxuICB9XG4gIGhhbmRsZVN1Ym1pdChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5zaWdudXApIHtcbiAgICAgIGNvbnN0IHtmaXJzdCwgbGFzdCwgZW1haWx9ID0gdGhpcy5zdGF0ZTtcblxuICAgICAgYXhpb3MucG9zdCgnYXBpL3N1YnNjcmliZScsIHtcbiAgICAgICAgXCJGaXJzdCBOYW1lXCI6IGZpcnN0LFxuICAgICAgICBcIkxhc3QgTmFtZVwiIDogbGFzdCxcbiAgICAgICAgXCJFbWFpbFwiOiAgICAgIGVtYWlsXG4gICAgICB9KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gcmVzLmRhdGEuc3RhdHVzO1xuICAgICAgICBjb25zb2xlLmxvZyhyZXMuZGF0YSk7XG4gICAgICAgIGlmIChzdGF0dXM9PT1cInN1Y2NlZWRlZFwiKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7bW9kZTogJ3N1Y2Nlc3MnLCBtZXNzYWdlOiAnVGhhbmtzIGZvciBzaWduaW5nIHVwISBXZVxcJ2xsIGJlIGluIHRvdWNoIHNvb24hJ30pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IG1lc3NhZ2U7XG5cbiAgICAgICAgICBpZiAoISFyZXMuZGF0YS5lcnIgJiYgISFyZXMuZGF0YS5lcnIuY29kZSkge1xuICAgICAgICAgICAgc3dpdGNoIChyZXMuZGF0YS5lcnIuY29kZSkge1xuICAgICAgICAgICAgICBjYXNlIDIxNDpcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJZb3UncmUgYWxyZWFkeSBvbiBvdXIgbGlzdCFcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAtMTAwOlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIllvdSBkaWRuJ3QgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBTb21ldGhpbmcgd2VudCB3cm9uZyAtIGVycm9yIGNvZGUgJHtyZXMuZGF0YS5lcnIuY29kZX1gXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkFuIHVua25vd24gZXJyb3Igb2NjdXJyZWRcIlxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIG1vZGU6ICdlcnJvcicsXG4gICAgICAgICAgICBtZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7Zmlyc3QsIGxhc3QsIGVtYWlsLCBkZXZpY2V9ID0gdGhpcy5zdGF0ZTtcblxuICAgICAgYXhpb3MucG9zdCgnaHR0cHM6Ly9mb3Jtc3ByZWUuaW8vc3VwcG9ydEBhcnJvZS5jbycsIHtcbiAgICAgICAgXCJGaXJzdCBOYW1lXCI6IGZpcnN0LFxuICAgICAgICBcIkxhc3QgTmFtZVwiIDogbGFzdCxcbiAgICAgICAgXCJFbWFpbFwiOiAgICAgIGVtYWlsLFxuICAgICAgICBcIkRldmljZVwiOiAgICAgZGV2aWNlLFxuICAgICAgICBcIl9yZXBseXRvXCI6ICAgZW1haWxcbiAgICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHttb2RlOiAnc3VjY2VzcycsIG1lc3NhZ2U6ICdUaGFua3MgZm9yIHlvdXIgbWVzc2FnZSwgd2VcXCdsbCByZXNwb25kIHNvb24nfSlcbiAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7bW9kZTogJ2Vycm9yJywgbWVzc2FnZTogJ1NvbWV0aGluZyB3ZW50IHdyb25nIHN1Ym1pdHRpbmcgeW91ciBmb3JtJ30pXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmVuZGVySW5pdCgpIHtcbiAgICBjb25zdCB7ZGV2aWNlcywgc2lnbnVwfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxmb3JtIHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLm5hbWVIb2xkZXJ9PlxuICAgICAgICAgIDxJbnB1dCBuYW1lPVwiRmlyc3QgTmFtZVwiIHBsYWNlaG9sZGVyPVwiRmlyc3QgTmFtZVwiIHN0eWxlPXtbc3R5bGVzLm5hbWUsIHN0eWxlcy5pbnB1dF19IHZhbHVlPXt0aGlzLnN0YXRlLmZpcnN0fSBvbkNoYW5nZT17dGhpcy5maXJzdENoYW5nZS5iaW5kKHRoaXMpfSAvPlxuICAgICAgICAgIDxJbnB1dCBuYW1lPVwiTGFzdCBOYW1lXCIgcGxhY2Vob2xkZXI9XCJMYXN0IE5hbWVcIiBzdHlsZT17W3N0eWxlcy5uYW1lLCBzdHlsZXMuaW5wdXRdfSB2YWx1ZT17dGhpcy5zdGF0ZS5sYXN0fSBvbkNoYW5nZT17dGhpcy5sYXN0Q2hhbmdlLmJpbmQodGhpcyl9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8SW5wdXQgbmFtZT1cIkVtYWlsXCIgcGxhY2Vob2xkZXI9XCJFbWFpbCBBZGRyZXNzXCIgc3R5bGU9e1tzdHlsZXMuZW1haWwsIHN0eWxlcy5pbnB1dF19IHZhbHVlPXt0aGlzLnN0YXRlLmVtYWlsfSBvbkNoYW5nZT17dGhpcy5lbWFpbENoYW5nZS5iaW5kKHRoaXMpfSAvPlxuICAgICAgICB7XG4gICAgICAgICAgc2lnbnVwID8gKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGEgc3R5bGU9e3N0eWxlcy5saW5rfSBocmVmPVwiI1wiIG9uQ2xpY2s9e3RoaXMuaGFuZGxlU3VibWl0LmJpbmQodGhpcyl9PlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5ib3h9PlNpZ24gVXA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLnNtYWxsfT5CeSBzaWduaW5nIHVwIHlvdSBhZ3JlZSB0byBvdXIgPExpbmsgdG89XCIvcHJpdmFjeVwiPlByaXZhY3kgUG9saWN5LjwvTGluaz48L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPElucHV0IG5hbWU9XCJ1c2VyLWRldmljZVwiIHN0eWxlPXtbc3R5bGVzLmVtYWlsLCBzdHlsZXMuaW5wdXRdfSBwbGFjZWhvbGRlcj1cIkVudGVyIHlvdXIgZGV2aWNlIGluZm9ybWF0aW9uXCIgdmFsdWU9e3RoaXMuc3RhdGUuZGV2aWNlfSBvbkNoYW5nZT17dGhpcy5kZXZpY2VDaGFuZ2UuYmluZCh0aGlzKX0gLz5cbiAgICAgICAgICAgICAgPGEgc3R5bGU9e3N0eWxlcy5saW5rfSBocmVmPVwiI1wiIG9uQ2xpY2s9e3RoaXMuaGFuZGxlU3VibWl0LmJpbmQodGhpcyl9PlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e1tzdHlsZXMuYm94LCBzdHlsZXMubGlnaHRdfT5TZW5kPC9kaXY+XG4gICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgPC9mb3JtPlxuICAgICk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHN3aXRjaCAodGhpcy5zdGF0ZS5tb2RlKSB7XG4gICAgICBjYXNlICdpbml0JzpcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVySW5pdCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgICAgIDxwPnt0aGlzLnN0YXRlLm1lc3NhZ2V9PC9wPlxuICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBvbkNsaWNrPXsoZSkgPT4ge2UucHJldmVudERlZmF1bHQoKTsgdGhpcy5zZXRTdGF0ZSh7bW9kZTogJ2luaXQnfSl9fT4gVHJ5IGFnYWluIDwvYT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgICAgY2FzZSAnc3VjY2Vzcyc6XG4gICAgICAgIHJldHVybiAoPGRpdiBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICAgICAgPGltZyBzcmM9XCJpbWcvdGljay1pY29uLnN2Z1wiIHN0eWxlPXtzdHlsZXMuc3VjY2Vzc30vPlxuICAgICAgICAgIDxoMz57dGhpcy5zdGF0ZS5tZXNzYWdlfTwvaDM+XG4gICAgICAgIDwvZGl2PilcbiAgICB9XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICBjb250YWluZXI6IHtcbiAgICBtYXhXaWR0aDogJzUwMHB4JyxcbiAgICBtYXJnaW46ICcwcHggYXV0bycsXG4gICAgbWluSGVpZ2h0OiAnMTUwcHgnLFxuICAgIHBhZGRpbmc6ICcwcHgnXG4gIH0sXG4gIG5hbWU6IHtcbiAgICB3aWR0aDogJzQ5JScsXG4gIH0sXG4gIGlucHV0OiB7XG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfVxuICB9LFxuICB0aWNrOiB7XG4gICAgaGVpZ2h0OiAnMTVweCcsXG4gICAgbWFyZ2luUmlnaHQ6ICcxMHB4J1xuICB9LFxuICBlbWFpbDoge1xuICAgIHdpZHRoOiAnMTAwJSdcbiAgfSxcbiAgc3VjY2Vzczoge1xuICAgIHdpZHRoOiAnNjBweCdcbiAgfSxcbiAgbmFtZUhvbGRlcjoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbidcbiAgICB9XG4gIH0sXG4gIHNtYWxsOiB7XG4gICAgZm9udFNpemU6ICcxMnB4J1xuICB9LFxuICBib3g6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMWUxZTFlJyxcbiAgICBib3JkZXJSYWRpdXM6ICc1cHgnLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgd2lkdGg6ICcxMjBweCcsXG4gICAgbWFyZ2luOiAnYXV0bycsXG4gICAgY29sb3I6ICd3aGl0ZScsXG4gICAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbiAgfSxcbiAgbGlnaHQ6IHtcbiAgICBjb2xvcjogJyMxZTFlMWUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmZmZmYnXG4gIH0sXG4gIGxpbms6IHtcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGl1bShEZXRhaWxzSW5wdXQpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbXBvbmVudHMvRGV0YWlsc0lucHV0LmpzIiwiaW1wb3J0IFJlYWN0ICBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmFkaXVtIGZyb20gJ3JhZGl1bSc7XG5cbmNsYXNzIElucHV0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHt2YWx1ZSwgb25DaGFuZ2UsIHBsYWNlaG9sZGVyLCBuYW1lLCBzdHlsZX0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IHN0eWxlPXtbc3R5bGVzLmlucHV0SG9sZGVyLCBzdHlsZV19PlxuICAgICAgICA8aW5wdXQga2V5PXtuYW1lfSB2YWx1ZT17dmFsdWV9IG9uQ2hhbmdlPXtvbkNoYW5nZX0gc3R5bGU9e3N0eWxlcy5pbnB1dH0gcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfS8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgaW5wdXRIb2xkZXI6IHtcbiAgICBwYWRkaW5nOiAnMCcsXG4gICAgbWFyZ2luOiAnMCAwIDEwcHggMCcsXG4gICAgYm9yZGVyOiAnMXB4IHNvbGlkICNjY2NjY2MnLFxuICAgIHdpZHRoOiAnNDklJyxcbiAgICBib3JkZXJSYWRpdXM6ICczcHgnLFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBtYXJnaW5Cb3R0b206ICcxMHB4J1xuICAgIH0sXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCdcbiAgfSxcbiAgaW5wdXQ6IHtcbiAgICBwYWRkaW5nOiAnNXB4IDhweCcsXG4gICAgd2lkdGg6ICcxMzAlJyxcbiAgICBoZWlnaHQ6ICczOHB4JyxcbiAgICBib3JkZXI6ICdub25lJyxcbiAgICBib3hTaGFkb3c6ICdub25lJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgYmFja2dyb3VuZEltYWdlOiAnbm9uZScsXG4gICAgYXBwZWFyZW5jZTogJ25vbmUnLFxuICAgICc6Zm9jdXMnOiB7XG4gICAgICBvdXRsaW5lOiAnbm9uZSdcbiAgICB9LFxuICAgIGZvbnRTaXplOiAnMTRweCdcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGl1bShJbnB1dCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvY29tcG9uZW50cy9JbnB1dC5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNsYXNzIExheW91dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGF5b3V0O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbXBvbmVudHMvTGF5b3V0LmpzIiwiaW1wb3J0IFJlYWN0ICBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmFkaXVtIGZyb20gJ3JhZGl1bSc7XG5jbGFzcyBQZXJzb24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgICA8ZGl2IHN0eWxlPXtbc3R5bGVzLnBpY3R1cmUsIHtiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHt0aGlzLnByb3BzLnBpY3R1cmV9KWB9XX0gLz5cbiAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5uYW1lfT57dGhpcy5wcm9wcy5uYW1lfTwvcD5cbiAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy50aXRsZX0+e3RoaXMucHJvcHMudGl0bGV9PC9wPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGNvbnRhaW5lcjoge1xuICAgIHdpZHRoOiAnMTYwcHgnLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgbWFyZ2luOiAnMTBweCcsXG4gICAgaGVpZ2h0OiAnMjIwcHgnLFxuICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnXG4gIH0sXG4gIHBpY3R1cmU6IHtcbiAgICBoZWlnaHQ6ICcxNjBweCcsXG4gICAgd2lkdGg6ICcxNjBweCcsXG4gICAgYmFja2dyb3VuZFNpemU6ICdjb3ZlcicsXG4gICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICdjZW50ZXInLFxuICAgIG1hcmdpbkJvdHRvbTogJzEwcHgnXG4gIH0sXG4gIG5hbWU6IHtcbiAgICBmb250U2l6ZTogJzE2cHgnLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICBtYXJnaW46ICcwcHgnXG4gIH0sXG4gIHRpdGxlOiB7XG4gICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICBtYXJnaW46ICcwcHgnLFxuICAgIGRpc3BsYXk6ICdibG9jaydcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmFkaXVtKFBlcnNvbik7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvY29tcG9uZW50cy9QZXJzb24uanMiLCJpbXBvcnQgUmVhY3QgIGZyb20gJ3JlYWN0JztcbmltcG9ydCBSYWRpdW0gZnJvbSAncmFkaXVtJztcblxuY2xhc3MgWW91dHViZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICB2YXIgdmlkZW9TcmMgPSBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL1wiICtcbiAgICAgICAgdGhpcy5wcm9wcy52aWRlb0lkICsgXCI/YXV0b3BsYXk9XCIgK1xuICAgICAgICB0aGlzLnByb3BzLmF1dG9wbGF5ICsgXCImcmVsPVwiICtcbiAgICAgICAgdGhpcy5wcm9wcy5yZWwgKyBcIiZtb2Rlc3RicmFuZGluZz1cIiArXG4gICAgICAgIHRoaXMucHJvcHMubW9kZXN0ICsgXCImY29udHJvbHM9XCIgK1xuICAgICAgICB0aGlzLnByb3BzLmNvbnRyb2xzICsgXCImc2hvd2luZm89XCIgK1xuICAgICAgICB0aGlzLnByb3BzLnNob3dpbmZvXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgc3R5bGU9e1tzdHlsZXMuY29udGFpbmVyLCB0aGlzLnByb3BzLnN0eWxlXX0+XG4gICAgICAgIDxpZnJhbWUgY2xhc3NOYW1lPVwicGxheWVyXCIgdHlwZT1cInRleHQvaHRtbFwiIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiBzcmM9e3ZpZGVvU3JjfSBmcmFtZUJvcmRlcj1cIjBcIi8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgY29udGFpbmVyOiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMDAlJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpdW0oWW91dHViZSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvY29tcG9uZW50cy9Zb3VUdWJlLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcbnZhciBidG9hID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5idG9hICYmIHdpbmRvdy5idG9hLmJpbmQod2luZG93KSkgfHwgcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J0b2EnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgbG9hZEV2ZW50ID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG4gICAgdmFyIHhEb21haW4gPSBmYWxzZTtcblxuICAgIC8vIEZvciBJRSA4LzkgQ09SUyBzdXBwb3J0XG4gICAgLy8gT25seSBzdXBwb3J0cyBQT1NUIGFuZCBHRVQgY2FsbHMgYW5kIGRvZXNuJ3QgcmV0dXJucyB0aGUgcmVzcG9uc2UgaGVhZGVycy5cbiAgICAvLyBET04nVCBkbyB0aGlzIGZvciB0ZXN0aW5nIGIvYyBYTUxIdHRwUmVxdWVzdCBpcyBtb2NrZWQsIG5vdCBYRG9tYWluUmVxdWVzdC5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgISgnd2l0aENyZWRlbnRpYWxzJyBpbiByZXF1ZXN0KSAmJlxuICAgICAgICAhaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSB7XG4gICAgICByZXF1ZXN0ID0gbmV3IHdpbmRvdy5YRG9tYWluUmVxdWVzdCgpO1xuICAgICAgbG9hZEV2ZW50ID0gJ29ubG9hZCc7XG4gICAgICB4RG9tYWluID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uIGhhbmRsZVByb2dyZXNzKCkge307XG4gICAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7fTtcbiAgICB9XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0W2xvYWRFdmVudF0gPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQgJiYgIXhEb21haW4pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIC8vIElFIHNlbmRzIDEyMjMgaW5zdGVhZCBvZiAyMDQgKGh0dHBzOi8vZ2l0aHViLmNvbS9temFicmlza2llL2F4aW9zL2lzc3Vlcy8yMDEpXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAnTm8gQ29udGVudCcgOiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG4vKipcbiAqIFVwc3RyZWFtIHZlcnNpb24gb2YgZXZlbnQgbGlzdGVuZXIuIERvZXMgbm90IHRha2UgaW50byBhY2NvdW50IHNwZWNpZmljXG4gKiBuYXR1cmUgb2YgcGxhdGZvcm0uXG4gKi9cbnZhciBFdmVudExpc3RlbmVyID0ge1xuICAvKipcbiAgICogTGlzdGVuIHRvIERPTSBldmVudHMgZHVyaW5nIHRoZSBidWJibGUgcGhhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuICAgKi9cbiAgbGlzdGVuOiBmdW5jdGlvbiBsaXN0ZW4odGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0YXJnZXQuYXR0YWNoRXZlbnQpIHtcbiAgICAgIHRhcmdldC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICB0YXJnZXQuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogTGlzdGVuIHRvIERPTSBldmVudHMgZHVyaW5nIHRoZSBjYXB0dXJlIHBoYXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0YXJnZXQgRE9NIGVsZW1lbnQgdG8gcmVnaXN0ZXIgbGlzdGVuZXIgb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgRXZlbnQgdHlwZSwgZS5nLiAnY2xpY2snIG9yICdtb3VzZW92ZXInLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbi5cbiAgICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgd2l0aCBhIGByZW1vdmVgIG1ldGhvZC5cbiAgICovXG4gIGNhcHR1cmU6IGZ1bmN0aW9uIGNhcHR1cmUodGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdBdHRlbXB0ZWQgdG8gbGlzdGVuIHRvIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2Ugb24gYSAnICsgJ2Jyb3dzZXIgdGhhdCBkb2VzIG5vdCBzdXBwb3J0IHRoZSBjYXB0dXJlIHBoYXNlLiBZb3VyIGFwcGxpY2F0aW9uICcgKyAnd2lsbCBub3QgcmVjZWl2ZSBzb21lIGV2ZW50cy4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZW1wdHlGdW5jdGlvblxuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgcmVnaXN0ZXJEZWZhdWx0OiBmdW5jdGlvbiByZWdpc3RlckRlZmF1bHQoKSB7fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudExpc3RlbmVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZmJqcy9saWIvRXZlbnRMaXN0ZW5lci5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgaW5wdXQvdGV4dGFyZWEgdG8gZm9jdXNcbiAqL1xuXG5mdW5jdGlvbiBmb2N1c05vZGUobm9kZSkge1xuICAvLyBJRTggY2FuIHRocm93IFwiQ2FuJ3QgbW92ZSBmb2N1cyB0byB0aGUgY29udHJvbCBiZWNhdXNlIGl0IGlzIGludmlzaWJsZSxcbiAgLy8gbm90IGVuYWJsZWQsIG9yIG9mIGEgdHlwZSB0aGF0IGRvZXMgbm90IGFjY2VwdCB0aGUgZm9jdXMuXCIgZm9yIGFsbCBraW5kcyBvZlxuICAvLyByZWFzb25zIHRoYXQgYXJlIHRvbyBleHBlbnNpdmUgYW5kIGZyYWdpbGUgdG8gdGVzdC5cbiAgdHJ5IHtcbiAgICBub2RlLmZvY3VzKCk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZm9jdXNOb2RlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZmJqcy9saWIvZm9jdXNOb2RlLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P0RPTURvY3VtZW50fSBkb2MgRGVmYXVsdHMgdG8gY3VycmVudCBkb2N1bWVudC5cbiAqIEByZXR1cm4gez9ET01FbGVtZW50fVxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykgLyo/RE9NRWxlbWVudCove1xuICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG4gIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWN0aXZlRWxlbWVudDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQuanMiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby12YXIsIHByZWZlci10ZW1wbGF0ZSAqL1xudmFyIHVwcGVyY2FzZVBhdHRlcm4gPSAvW0EtWl0vZ1xudmFyIG1zUGF0dGVybiA9IC9ebXMtL1xudmFyIGNhY2hlID0ge31cblxuZnVuY3Rpb24gdG9IeXBoZW5Mb3dlcihtYXRjaCkge1xuICByZXR1cm4gJy0nICsgbWF0Y2gudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUobmFtZSkge1xuICBpZiAoY2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICByZXR1cm4gY2FjaGVbbmFtZV1cbiAgfVxuXG4gIHZhciBoTmFtZSA9IG5hbWUucmVwbGFjZSh1cHBlcmNhc2VQYXR0ZXJuLCB0b0h5cGhlbkxvd2VyKVxuICByZXR1cm4gKGNhY2hlW25hbWVdID0gbXNQYXR0ZXJuLnRlc3QoaE5hbWUpID8gJy0nICsgaE5hbWUgOiBoTmFtZSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgaHlwaGVuYXRlU3R5bGVOYW1lXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2h5cGhlbmF0ZS1zdHlsZS1uYW1lL2luZGV4LmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7IFwiV2Via2l0XCI6IHsgXCJ0cmFuc2Zvcm1cIjogdHJ1ZSwgXCJ0cmFuc2Zvcm1PcmlnaW5cIjogdHJ1ZSwgXCJ0cmFuc2Zvcm1PcmlnaW5YXCI6IHRydWUsIFwidHJhbnNmb3JtT3JpZ2luWVwiOiB0cnVlLCBcImJhY2tmYWNlVmlzaWJpbGl0eVwiOiB0cnVlLCBcInBlcnNwZWN0aXZlXCI6IHRydWUsIFwicGVyc3BlY3RpdmVPcmlnaW5cIjogdHJ1ZSwgXCJ0cmFuc2Zvcm1TdHlsZVwiOiB0cnVlLCBcInRyYW5zZm9ybU9yaWdpblpcIjogdHJ1ZSwgXCJhbmltYXRpb25cIjogdHJ1ZSwgXCJhbmltYXRpb25EZWxheVwiOiB0cnVlLCBcImFuaW1hdGlvbkRpcmVjdGlvblwiOiB0cnVlLCBcImFuaW1hdGlvbkZpbGxNb2RlXCI6IHRydWUsIFwiYW5pbWF0aW9uRHVyYXRpb25cIjogdHJ1ZSwgXCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLCBcImFuaW1hdGlvbk5hbWVcIjogdHJ1ZSwgXCJhbmltYXRpb25QbGF5U3RhdGVcIjogdHJ1ZSwgXCJhbmltYXRpb25UaW1pbmdGdW5jdGlvblwiOiB0cnVlLCBcImFwcGVhcmFuY2VcIjogdHJ1ZSwgXCJ1c2VyU2VsZWN0XCI6IHRydWUsIFwiZm9udEtlcm5pbmdcIjogdHJ1ZSwgXCJ0ZXh0RW1waGFzaXNQb3NpdGlvblwiOiB0cnVlLCBcInRleHRFbXBoYXNpc1wiOiB0cnVlLCBcInRleHRFbXBoYXNpc1N0eWxlXCI6IHRydWUsIFwidGV4dEVtcGhhc2lzQ29sb3JcIjogdHJ1ZSwgXCJib3hEZWNvcmF0aW9uQnJlYWtcIjogdHJ1ZSwgXCJjbGlwUGF0aFwiOiB0cnVlLCBcIm1hc2tJbWFnZVwiOiB0cnVlLCBcIm1hc2tNb2RlXCI6IHRydWUsIFwibWFza1JlcGVhdFwiOiB0cnVlLCBcIm1hc2tQb3NpdGlvblwiOiB0cnVlLCBcIm1hc2tDbGlwXCI6IHRydWUsIFwibWFza09yaWdpblwiOiB0cnVlLCBcIm1hc2tTaXplXCI6IHRydWUsIFwibWFza0NvbXBvc2l0ZVwiOiB0cnVlLCBcIm1hc2tcIjogdHJ1ZSwgXCJtYXNrQm9yZGVyU291cmNlXCI6IHRydWUsIFwibWFza0JvcmRlck1vZGVcIjogdHJ1ZSwgXCJtYXNrQm9yZGVyU2xpY2VcIjogdHJ1ZSwgXCJtYXNrQm9yZGVyV2lkdGhcIjogdHJ1ZSwgXCJtYXNrQm9yZGVyT3V0c2V0XCI6IHRydWUsIFwibWFza0JvcmRlclJlcGVhdFwiOiB0cnVlLCBcIm1hc2tCb3JkZXJcIjogdHJ1ZSwgXCJtYXNrVHlwZVwiOiB0cnVlLCBcInRleHREZWNvcmF0aW9uU3R5bGVcIjogdHJ1ZSwgXCJ0ZXh0RGVjb3JhdGlvblNraXBcIjogdHJ1ZSwgXCJ0ZXh0RGVjb3JhdGlvbkxpbmVcIjogdHJ1ZSwgXCJ0ZXh0RGVjb3JhdGlvbkNvbG9yXCI6IHRydWUsIFwiZmlsdGVyXCI6IHRydWUsIFwiZm9udEZlYXR1cmVTZXR0aW5nc1wiOiB0cnVlLCBcImJyZWFrQWZ0ZXJcIjogdHJ1ZSwgXCJicmVha0JlZm9yZVwiOiB0cnVlLCBcImJyZWFrSW5zaWRlXCI6IHRydWUsIFwiY29sdW1uQ291bnRcIjogdHJ1ZSwgXCJjb2x1bW5GaWxsXCI6IHRydWUsIFwiY29sdW1uR2FwXCI6IHRydWUsIFwiY29sdW1uUnVsZVwiOiB0cnVlLCBcImNvbHVtblJ1bGVDb2xvclwiOiB0cnVlLCBcImNvbHVtblJ1bGVTdHlsZVwiOiB0cnVlLCBcImNvbHVtblJ1bGVXaWR0aFwiOiB0cnVlLCBcImNvbHVtbnNcIjogdHJ1ZSwgXCJjb2x1bW5TcGFuXCI6IHRydWUsIFwiY29sdW1uV2lkdGhcIjogdHJ1ZSwgXCJmbGV4XCI6IHRydWUsIFwiZmxleEJhc2lzXCI6IHRydWUsIFwiZmxleERpcmVjdGlvblwiOiB0cnVlLCBcImZsZXhHcm93XCI6IHRydWUsIFwiZmxleEZsb3dcIjogdHJ1ZSwgXCJmbGV4U2hyaW5rXCI6IHRydWUsIFwiZmxleFdyYXBcIjogdHJ1ZSwgXCJhbGlnbkNvbnRlbnRcIjogdHJ1ZSwgXCJhbGlnbkl0ZW1zXCI6IHRydWUsIFwiYWxpZ25TZWxmXCI6IHRydWUsIFwianVzdGlmeUNvbnRlbnRcIjogdHJ1ZSwgXCJvcmRlclwiOiB0cnVlLCBcInRyYW5zaXRpb25cIjogdHJ1ZSwgXCJ0cmFuc2l0aW9uRGVsYXlcIjogdHJ1ZSwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIjogdHJ1ZSwgXCJ0cmFuc2l0aW9uUHJvcGVydHlcIjogdHJ1ZSwgXCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cIjogdHJ1ZSwgXCJiYWNrZHJvcEZpbHRlclwiOiB0cnVlLCBcInNjcm9sbFNuYXBUeXBlXCI6IHRydWUsIFwic2Nyb2xsU25hcFBvaW50c1hcIjogdHJ1ZSwgXCJzY3JvbGxTbmFwUG9pbnRzWVwiOiB0cnVlLCBcInNjcm9sbFNuYXBEZXN0aW5hdGlvblwiOiB0cnVlLCBcInNjcm9sbFNuYXBDb29yZGluYXRlXCI6IHRydWUsIFwic2hhcGVJbWFnZVRocmVzaG9sZFwiOiB0cnVlLCBcInNoYXBlSW1hZ2VNYXJnaW5cIjogdHJ1ZSwgXCJzaGFwZUltYWdlT3V0c2lkZVwiOiB0cnVlLCBcImh5cGhlbnNcIjogdHJ1ZSwgXCJmbG93SW50b1wiOiB0cnVlLCBcImZsb3dGcm9tXCI6IHRydWUsIFwicmVnaW9uRnJhZ21lbnRcIjogdHJ1ZSwgXCJ0ZXh0U2l6ZUFkanVzdFwiOiB0cnVlIH0sIFwiTW96XCI6IHsgXCJhcHBlYXJhbmNlXCI6IHRydWUsIFwidXNlclNlbGVjdFwiOiB0cnVlLCBcImJveFNpemluZ1wiOiB0cnVlLCBcInRleHRBbGlnbkxhc3RcIjogdHJ1ZSwgXCJ0ZXh0RGVjb3JhdGlvblN0eWxlXCI6IHRydWUsIFwidGV4dERlY29yYXRpb25Ta2lwXCI6IHRydWUsIFwidGV4dERlY29yYXRpb25MaW5lXCI6IHRydWUsIFwidGV4dERlY29yYXRpb25Db2xvclwiOiB0cnVlLCBcInRhYlNpemVcIjogdHJ1ZSwgXCJoeXBoZW5zXCI6IHRydWUsIFwiZm9udEZlYXR1cmVTZXR0aW5nc1wiOiB0cnVlLCBcImJyZWFrQWZ0ZXJcIjogdHJ1ZSwgXCJicmVha0JlZm9yZVwiOiB0cnVlLCBcImJyZWFrSW5zaWRlXCI6IHRydWUsIFwiY29sdW1uQ291bnRcIjogdHJ1ZSwgXCJjb2x1bW5GaWxsXCI6IHRydWUsIFwiY29sdW1uR2FwXCI6IHRydWUsIFwiY29sdW1uUnVsZVwiOiB0cnVlLCBcImNvbHVtblJ1bGVDb2xvclwiOiB0cnVlLCBcImNvbHVtblJ1bGVTdHlsZVwiOiB0cnVlLCBcImNvbHVtblJ1bGVXaWR0aFwiOiB0cnVlLCBcImNvbHVtbnNcIjogdHJ1ZSwgXCJjb2x1bW5TcGFuXCI6IHRydWUsIFwiY29sdW1uV2lkdGhcIjogdHJ1ZSB9LCBcIm1zXCI6IHsgXCJmbGV4XCI6IHRydWUsIFwiZmxleEJhc2lzXCI6IGZhbHNlLCBcImZsZXhEaXJlY3Rpb25cIjogdHJ1ZSwgXCJmbGV4R3Jvd1wiOiBmYWxzZSwgXCJmbGV4Rmxvd1wiOiB0cnVlLCBcImZsZXhTaHJpbmtcIjogZmFsc2UsIFwiZmxleFdyYXBcIjogdHJ1ZSwgXCJhbGlnbkNvbnRlbnRcIjogZmFsc2UsIFwiYWxpZ25JdGVtc1wiOiBmYWxzZSwgXCJhbGlnblNlbGZcIjogZmFsc2UsIFwianVzdGlmeUNvbnRlbnRcIjogZmFsc2UsIFwib3JkZXJcIjogZmFsc2UsIFwidHJhbnNmb3JtXCI6IHRydWUsIFwidHJhbnNmb3JtT3JpZ2luXCI6IHRydWUsIFwidHJhbnNmb3JtT3JpZ2luWFwiOiB0cnVlLCBcInRyYW5zZm9ybU9yaWdpbllcIjogdHJ1ZSwgXCJ1c2VyU2VsZWN0XCI6IHRydWUsIFwid3JhcEZsb3dcIjogdHJ1ZSwgXCJ3cmFwVGhyb3VnaFwiOiB0cnVlLCBcIndyYXBNYXJnaW5cIjogdHJ1ZSwgXCJzY3JvbGxTbmFwVHlwZVwiOiB0cnVlLCBcInNjcm9sbFNuYXBQb2ludHNYXCI6IHRydWUsIFwic2Nyb2xsU25hcFBvaW50c1lcIjogdHJ1ZSwgXCJzY3JvbGxTbmFwRGVzdGluYXRpb25cIjogdHJ1ZSwgXCJzY3JvbGxTbmFwQ29vcmRpbmF0ZVwiOiB0cnVlLCBcInRvdWNoQWN0aW9uXCI6IHRydWUsIFwiaHlwaGVuc1wiOiB0cnVlLCBcImZsb3dJbnRvXCI6IHRydWUsIFwiZmxvd0Zyb21cIjogdHJ1ZSwgXCJicmVha0JlZm9yZVwiOiB0cnVlLCBcImJyZWFrQWZ0ZXJcIjogdHJ1ZSwgXCJicmVha0luc2lkZVwiOiB0cnVlLCBcInJlZ2lvbkZyYWdtZW50XCI6IHRydWUsIFwiZ3JpZFRlbXBsYXRlQ29sdW1uc1wiOiB0cnVlLCBcImdyaWRUZW1wbGF0ZVJvd3NcIjogdHJ1ZSwgXCJncmlkVGVtcGxhdGVBcmVhc1wiOiB0cnVlLCBcImdyaWRUZW1wbGF0ZVwiOiB0cnVlLCBcImdyaWRBdXRvQ29sdW1uc1wiOiB0cnVlLCBcImdyaWRBdXRvUm93c1wiOiB0cnVlLCBcImdyaWRBdXRvRmxvd1wiOiB0cnVlLCBcImdyaWRcIjogdHJ1ZSwgXCJncmlkUm93U3RhcnRcIjogdHJ1ZSwgXCJncmlkQ29sdW1uU3RhcnRcIjogdHJ1ZSwgXCJncmlkUm93RW5kXCI6IHRydWUsIFwiZ3JpZFJvd1wiOiB0cnVlLCBcImdyaWRDb2x1bW5cIjogdHJ1ZSwgXCJncmlkQ29sdW1uRW5kXCI6IHRydWUsIFwiZ3JpZENvbHVtbkdhcFwiOiB0cnVlLCBcImdyaWRSb3dHYXBcIjogdHJ1ZSwgXCJncmlkQXJlYVwiOiB0cnVlLCBcImdyaWRHYXBcIjogdHJ1ZSwgXCJ0ZXh0U2l6ZUFkanVzdFwiOiB0cnVlIH0gfTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3N0YXRpYy9wcmVmaXhQcm9wcy5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNvcnRQcmVmaXhlZFN0eWxlO1xuXG52YXIgX2lzUHJlZml4ZWRQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vaXNQcmVmaXhlZFByb3BlcnR5Jyk7XG5cbnZhciBfaXNQcmVmaXhlZFByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzUHJlZml4ZWRQcm9wZXJ0eSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHNvcnRQcmVmaXhlZFN0eWxlKHN0eWxlKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhzdHlsZSkuc29ydChmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAoKDAsIF9pc1ByZWZpeGVkUHJvcGVydHkyLmRlZmF1bHQpKGxlZnQpICYmICEoMCwgX2lzUHJlZml4ZWRQcm9wZXJ0eTIuZGVmYXVsdCkocmlnaHQpKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfSBlbHNlIGlmICghKDAsIF9pc1ByZWZpeGVkUHJvcGVydHkyLmRlZmF1bHQpKGxlZnQpICYmICgwLCBfaXNQcmVmaXhlZFByb3BlcnR5Mi5kZWZhdWx0KShyaWdodCkpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfSkucmVkdWNlKGZ1bmN0aW9uIChzb3J0ZWRTdHlsZSwgcHJvcCkge1xuICAgIHNvcnRlZFN0eWxlW3Byb3BdID0gc3R5bGVbcHJvcF07XG4gICAgcmV0dXJuIHNvcnRlZFN0eWxlO1xuICB9LCB7fSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvdXRpbHMvc29ydFByZWZpeGVkU3R5bGUuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gUmVhY3QgMTUuNSByZWZlcmVuY2VzIHRoaXMgbW9kdWxlLCBhbmQgYXNzdW1lcyBQcm9wVHlwZXMgYXJlIHN0aWxsIGNhbGxhYmxlIGluIHByb2R1Y3Rpb24uXG4vLyBUaGVyZWZvcmUgd2UgcmUtZXhwb3J0IGRldmVsb3BtZW50LW9ubHkgdmVyc2lvbiB3aXRoIGFsbCB0aGUgUHJvcFR5cGVzIGNoZWNrcyBoZXJlLlxuLy8gSG93ZXZlciBpZiBvbmUgaXMgbWlncmF0aW5nIHRvIHRoZSBgcHJvcC10eXBlc2AgbnBtIGxpYnJhcnksIHRoZXkgd2lsbCBnbyB0aHJvdWdoIHRoZVxuLy8gYGluZGV4LmpzYCBlbnRyeSBwb2ludCwgYW5kIGl0IHdpbGwgYnJhbmNoIGRlcGVuZGluZyBvbiB0aGUgZW52aXJvbm1lbnQuXG52YXIgZmFjdG9yeSA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXNWYWxpZEVsZW1lbnQpIHtcbiAgLy8gSXQgaXMgc3RpbGwgYWxsb3dlZCBpbiAxNS41LlxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IGZhbHNlO1xuICByZXR1cm4gZmFjdG9yeShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9wcm9wLXR5cGVzL2ZhY3RvcnkuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcbnZhciBjaGVja1Byb3BUeXBlcyA9IHJlcXVpcmUoJy4vY2hlY2tQcm9wVHlwZXMnKTtcblxudmFyIGhhcyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbnZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcmludFdhcm5pbmcgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIHRleHQ7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcbn1cblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpIHtcbiAgLyogZ2xvYmFsIFN5bWJvbCAqL1xuICB2YXIgSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG4gIHZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJzsgLy8gQmVmb3JlIFN5bWJvbCBzcGVjLlxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpdGVyYXRvciBtZXRob2QgZnVuY3Rpb24gY29udGFpbmVkIG9uIHRoZSBpdGVyYWJsZSBvYmplY3QuXG4gICAqXG4gICAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICAgKlxuICAgKiAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG15SXRlcmFibGUpO1xuICAgKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICogICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG15SXRlcmFibGUpO1xuICAgKiAgICAgICAuLi5cbiAgICogICAgIH1cbiAgICpcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBtYXliZUl0ZXJhYmxlXG4gICAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAgICovXG4gIGZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICAgIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXSk7XG4gICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JGbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29sbGVjdGlvbiBvZiBtZXRob2RzIHRoYXQgYWxsb3cgZGVjbGFyYXRpb24gYW5kIHZhbGlkYXRpb24gb2YgcHJvcHMgdGhhdCBhcmVcbiAgICogc3VwcGxpZWQgdG8gUmVhY3QgY29tcG9uZW50cy4gRXhhbXBsZSB1c2FnZTpcbiAgICpcbiAgICogICB2YXIgUHJvcHMgPSByZXF1aXJlKCdSZWFjdFByb3BUeXBlcycpO1xuICAgKiAgIHZhciBNeUFydGljbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAqICAgICBwcm9wVHlwZXM6IHtcbiAgICogICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIHByb3AgbmFtZWQgXCJkZXNjcmlwdGlvblwiLlxuICAgKiAgICAgICBkZXNjcmlwdGlvbjogUHJvcHMuc3RyaW5nLFxuICAgKlxuICAgKiAgICAgICAvLyBBIHJlcXVpcmVkIGVudW0gcHJvcCBuYW1lZCBcImNhdGVnb3J5XCIuXG4gICAqICAgICAgIGNhdGVnb3J5OiBQcm9wcy5vbmVPZihbJ05ld3MnLCdQaG90b3MnXSkuaXNSZXF1aXJlZCxcbiAgICpcbiAgICogICAgICAgLy8gQSBwcm9wIG5hbWVkIFwiZGlhbG9nXCIgdGhhdCByZXF1aXJlcyBhbiBpbnN0YW5jZSBvZiBEaWFsb2cuXG4gICAqICAgICAgIGRpYWxvZzogUHJvcHMuaW5zdGFuY2VPZihEaWFsb2cpLmlzUmVxdWlyZWRcbiAgICogICAgIH0sXG4gICAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgeyAuLi4gfVxuICAgKiAgIH0pO1xuICAgKlxuICAgKiBBIG1vcmUgZm9ybWFsIHNwZWNpZmljYXRpb24gb2YgaG93IHRoZXNlIG1ldGhvZHMgYXJlIHVzZWQ6XG4gICAqXG4gICAqICAgdHlwZSA6PSBhcnJheXxib29sfGZ1bmN8b2JqZWN0fG51bWJlcnxzdHJpbmd8b25lT2YoWy4uLl0pfGluc3RhbmNlT2YoLi4uKVxuICAgKiAgIGRlY2wgOj0gUmVhY3RQcm9wVHlwZXMue3R5cGV9KC5pc1JlcXVpcmVkKT9cbiAgICpcbiAgICogRWFjaCBhbmQgZXZlcnkgZGVjbGFyYXRpb24gcHJvZHVjZXMgYSBmdW5jdGlvbiB3aXRoIHRoZSBzYW1lIHNpZ25hdHVyZS4gVGhpc1xuICAgKiBhbGxvd3MgdGhlIGNyZWF0aW9uIG9mIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqICB2YXIgTXlMaW5rID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICBwcm9wVHlwZXM6IHtcbiAgICogICAgICAvLyBBbiBvcHRpb25hbCBzdHJpbmcgb3IgVVJJIHByb3AgbmFtZWQgXCJocmVmXCIuXG4gICAqICAgICAgaHJlZjogZnVuY3Rpb24ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAqICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgKiAgICAgICAgaWYgKHByb3BWYWx1ZSAhPSBudWxsICYmIHR5cGVvZiBwcm9wVmFsdWUgIT09ICdzdHJpbmcnICYmXG4gICAqICAgICAgICAgICAgIShwcm9wVmFsdWUgaW5zdGFuY2VvZiBVUkkpKSB7XG4gICAqICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAqICAgICAgICAgICAgJ0V4cGVjdGVkIGEgc3RyaW5nIG9yIGFuIFVSSSBmb3IgJyArIHByb3BOYW1lICsgJyBpbiAnICtcbiAgICogICAgICAgICAgICBjb21wb25lbnROYW1lXG4gICAqICAgICAgICAgICk7XG4gICAqICAgICAgICB9XG4gICAqICAgICAgfVxuICAgKiAgICB9LFxuICAgKiAgICByZW5kZXI6IGZ1bmN0aW9uKCkgey4uLn1cbiAgICogIH0pO1xuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cbiAgdmFyIEFOT05ZTU9VUyA9ICc8PGFub255bW91cz4+JztcblxuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYXJyYXknKSxcbiAgICBib29sOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYm9vbGVhbicpLFxuICAgIGZ1bmM6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdmdW5jdGlvbicpLFxuICAgIG51bWJlcjogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ251bWJlcicpLFxuICAgIG9iamVjdDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ29iamVjdCcpLFxuICAgIHN0cmluZzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N0cmluZycpLFxuICAgIHN5bWJvbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N5bWJvbCcpLFxuXG4gICAgYW55OiBjcmVhdGVBbnlUeXBlQ2hlY2tlcigpLFxuICAgIGFycmF5T2Y6IGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixcbiAgICBlbGVtZW50OiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSxcbiAgICBlbGVtZW50VHlwZTogY3JlYXRlRWxlbWVudFR5cGVUeXBlQ2hlY2tlcigpLFxuICAgIGluc3RhbmNlT2Y6IGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIsXG4gICAgbm9kZTogY3JlYXRlTm9kZUNoZWNrZXIoKSxcbiAgICBvYmplY3RPZjogY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcixcbiAgICBvbmVPZjogY3JlYXRlRW51bVR5cGVDaGVja2VyLFxuICAgIG9uZU9mVHlwZTogY3JlYXRlVW5pb25UeXBlQ2hlY2tlcixcbiAgICBzaGFwZTogY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcixcbiAgICBleGFjdDogY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcixcbiAgfTtcblxuICAvKipcbiAgICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAgICovXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlKi9cbiAgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAgIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgICBpZiAoeCA9PT0geSkge1xuICAgICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgICB9XG4gIH1cbiAgLyplc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSovXG5cbiAgLyoqXG4gICAqIFdlIHVzZSBhbiBFcnJvci1saWtlIG9iamVjdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBhcyBwZW9wbGUgbWF5IGNhbGxcbiAgICogUHJvcFR5cGVzIGRpcmVjdGx5IGFuZCBpbnNwZWN0IHRoZWlyIG91dHB1dC4gSG93ZXZlciwgd2UgZG9uJ3QgdXNlIHJlYWxcbiAgICogRXJyb3JzIGFueW1vcmUuIFdlIGRvbid0IGluc3BlY3QgdGhlaXIgc3RhY2sgYW55d2F5LCBhbmQgY3JlYXRpbmcgdGhlbVxuICAgKiBpcyBwcm9oaWJpdGl2ZWx5IGV4cGVuc2l2ZSBpZiB0aGV5IGFyZSBjcmVhdGVkIHRvbyBvZnRlbiwgc3VjaCBhcyB3aGF0XG4gICAqIGhhcHBlbnMgaW4gb25lT2ZUeXBlKCkgZm9yIGFueSB0eXBlIGJlZm9yZSB0aGUgb25lIHRoYXQgbWF0Y2hlZC5cbiAgICovXG4gIGZ1bmN0aW9uIFByb3BUeXBlRXJyb3IobWVzc2FnZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5zdGFjayA9ICcnO1xuICB9XG4gIC8vIE1ha2UgYGluc3RhbmNlb2YgRXJyb3JgIHN0aWxsIHdvcmsgZm9yIHJldHVybmVkIGVycm9ycy5cbiAgUHJvcFR5cGVFcnJvci5wcm90b3R5cGUgPSBFcnJvci5wcm90b3R5cGU7XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIG1hbnVhbFByb3BUeXBlQ2FsbENhY2hlID0ge307XG4gICAgICB2YXIgbWFudWFsUHJvcFR5cGVXYXJuaW5nQ291bnQgPSAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjaGVja1R5cGUoaXNSZXF1aXJlZCwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICAgIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgIHByb3BGdWxsTmFtZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcblxuICAgICAgaWYgKHNlY3JldCAhPT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgICAgaWYgKHRocm93T25EaXJlY3RBY2Nlc3MpIHtcbiAgICAgICAgICAvLyBOZXcgYmVoYXZpb3Igb25seSBmb3IgdXNlcnMgb2YgYHByb3AtdHlwZXNgIHBhY2thZ2VcbiAgICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgICAgICAgJ1VzZSBgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKClgIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAgICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICAgICAgICApO1xuICAgICAgICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIC8vIE9sZCBiZWhhdmlvciBmb3IgcGVvcGxlIHVzaW5nIFJlYWN0LlByb3BUeXBlc1xuICAgICAgICAgIHZhciBjYWNoZUtleSA9IGNvbXBvbmVudE5hbWUgKyAnOicgKyBwcm9wTmFtZTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGVbY2FjaGVLZXldICYmXG4gICAgICAgICAgICAvLyBBdm9pZCBzcGFtbWluZyB0aGUgY29uc29sZSBiZWNhdXNlIHRoZXkgYXJlIG9mdGVuIG5vdCBhY3Rpb25hYmxlIGV4Y2VwdCBmb3IgbGliIGF1dGhvcnNcbiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50IDwgM1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgICAnWW91IGFyZSBtYW51YWxseSBjYWxsaW5nIGEgUmVhY3QuUHJvcFR5cGVzIHZhbGlkYXRpb24gJyArXG4gICAgICAgICAgICAgICdmdW5jdGlvbiBmb3IgdGhlIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgcHJvcCBvbiBgJyArIGNvbXBvbmVudE5hbWUgICsgJ2AuIFRoaXMgaXMgZGVwcmVjYXRlZCAnICtcbiAgICAgICAgICAgICAgJ2FuZCB3aWxsIHRocm93IGluIHRoZSBzdGFuZGFsb25lIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICAgICAgICAgJ1lvdSBtYXkgYmUgc2VlaW5nIHRoaXMgd2FybmluZyBkdWUgdG8gYSB0aGlyZC1wYXJ0eSBQcm9wVHlwZXMgJyArXG4gICAgICAgICAgICAgICdsaWJyYXJ5LiBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWRvbnQtY2FsbC1wcm9wdHlwZXMgJyArICdmb3IgZGV0YWlscy4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGVbY2FjaGVLZXldID0gdHJ1ZTtcbiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgaXMgbWFya2VkIGFzIHJlcXVpcmVkICcgKyAoJ2luIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBidXQgaXRzIHZhbHVlIGlzIGBudWxsYC4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignVGhlICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgaW4gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGJ1dCBpdHMgdmFsdWUgaXMgYHVuZGVmaW5lZGAuJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNoYWluZWRDaGVja1R5cGUgPSBjaGVja1R5cGUuYmluZChudWxsLCBmYWxzZSk7XG4gICAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG5cbiAgICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKGV4cGVjdGVkVHlwZSkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gZXhwZWN0ZWRUeXBlKSB7XG4gICAgICAgIC8vIGBwcm9wVmFsdWVgIGJlaW5nIGluc3RhbmNlIG9mLCBzYXksIGRhdGUvcmVnZXhwLCBwYXNzIHRoZSAnb2JqZWN0J1xuICAgICAgICAvLyBjaGVjaywgYnV0IHdlIGNhbiBvZmZlciBhIG1vcmUgcHJlY2lzZSBlcnJvciBtZXNzYWdlIGhlcmUgcmF0aGVyIHRoYW5cbiAgICAgICAgLy8gJ29mIHR5cGUgYG9iamVjdGAnLlxuICAgICAgICB2YXIgcHJlY2lzZVR5cGUgPSBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByZWNpc2VUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkICcpICsgKCdgJyArIGV4cGVjdGVkVHlwZSArICdgLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQW55VHlwZUNoZWNrZXIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGwpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyKHR5cGVDaGVja2VyKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBpZiAodHlwZW9mIHR5cGVDaGVja2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignUHJvcGVydHkgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiBjb21wb25lbnQgYCcgKyBjb21wb25lbnROYW1lICsgJ2AgaGFzIGludmFsaWQgUHJvcFR5cGUgbm90YXRpb24gaW5zaWRlIGFycmF5T2YuJyk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gYXJyYXkuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGVycm9yID0gdHlwZUNoZWNrZXIocHJvcFZhbHVlLCBpLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJ1snICsgaSArICddJywgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgaWYgKCFpc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgc2luZ2xlIFJlYWN0RWxlbWVudC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRUeXBlVHlwZUNoZWNrZXIoKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgaWYgKCFSZWFjdElzLmlzVmFsaWRFbGVtZW50VHlwZShwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgc2luZ2xlIFJlYWN0RWxlbWVudCB0eXBlLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VUeXBlQ2hlY2tlcihleHBlY3RlZENsYXNzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBpZiAoIShwcm9wc1twcm9wTmFtZV0gaW5zdGFuY2VvZiBleHBlY3RlZENsYXNzKSkge1xuICAgICAgICB2YXIgZXhwZWN0ZWRDbGFzc05hbWUgPSBleHBlY3RlZENsYXNzLm5hbWUgfHwgQU5PTllNT1VTO1xuICAgICAgICB2YXIgYWN0dWFsQ2xhc3NOYW1lID0gZ2V0Q2xhc3NOYW1lKHByb3BzW3Byb3BOYW1lXSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIGFjdHVhbENsYXNzTmFtZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnaW5zdGFuY2Ugb2YgYCcgKyBleHBlY3RlZENsYXNzTmFtZSArICdgLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRW51bVR5cGVDaGVja2VyKGV4cGVjdGVkVmFsdWVzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVmFsdWVzKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgJ0ludmFsaWQgYXJndW1lbnRzIHN1cHBsaWVkIHRvIG9uZU9mLCBleHBlY3RlZCBhbiBhcnJheSwgZ290ICcgKyBhcmd1bWVudHMubGVuZ3RoICsgJyBhcmd1bWVudHMuICcgK1xuICAgICAgICAgICAgJ0EgY29tbW9uIG1pc3Rha2UgaXMgdG8gd3JpdGUgb25lT2YoeCwgeSwgeikgaW5zdGVhZCBvZiBvbmVPZihbeCwgeSwgel0pLidcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByaW50V2FybmluZygnSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gYXJyYXkuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwZWN0ZWRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlzKHByb3BWYWx1ZSwgZXhwZWN0ZWRWYWx1ZXNbaV0pKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlc1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGV4cGVjdGVkVmFsdWVzLCBmdW5jdGlvbiByZXBsYWNlcihrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciB0eXBlID0gZ2V0UHJlY2lzZVR5cGUodmFsdWUpO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdmFsdWUgYCcgKyBTdHJpbmcocHJvcFZhbHVlKSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBvbmUgb2YgJyArIHZhbHVlc1N0cmluZyArICcuJykpO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBvYmplY3RPZi4nKTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBvYmplY3QuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHByb3BWYWx1ZSkge1xuICAgICAgICBpZiAoaGFzKHByb3BWYWx1ZSwga2V5KSkge1xuICAgICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJy4nICsga2V5LCBSZWFjdFByb3BUeXBlc1NlY3JldCk7XG4gICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlVW5pb25UeXBlQ2hlY2tlcihhcnJheU9mVHlwZUNoZWNrZXJzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5T2ZUeXBlQ2hlY2tlcnMpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gcHJpbnRXYXJuaW5nKCdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZSwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuJykgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5T2ZUeXBlQ2hlY2tlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjaGVja2VyID0gYXJyYXlPZlR5cGVDaGVja2Vyc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgY2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcmludFdhcm5pbmcoXG4gICAgICAgICAgJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2ZUeXBlLiBFeHBlY3RlZCBhbiBhcnJheSBvZiBjaGVjayBmdW5jdGlvbnMsIGJ1dCAnICtcbiAgICAgICAgICAncmVjZWl2ZWQgJyArIGdldFBvc3RmaXhGb3JUeXBlV2FybmluZyhjaGVja2VyKSArICcgYXQgaW5kZXggJyArIGkgKyAnLidcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5T2ZUeXBlQ2hlY2tlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoZWNrZXIgPSBhcnJheU9mVHlwZUNoZWNrZXJzW2ldO1xuICAgICAgICBpZiAoY2hlY2tlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KSA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nKSk7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVOb2RlQ2hlY2tlcigpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGlmICghaXNOb2RlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYSBSZWFjdE5vZGUuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyKHNoYXBlVHlwZXMpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgYCcgKyBwcm9wVHlwZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBgb2JqZWN0YC4nKSk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc2hhcGVUeXBlcykge1xuICAgICAgICB2YXIgY2hlY2tlciA9IHNoYXBlVHlwZXNba2V5XTtcbiAgICAgICAgaWYgKCFjaGVja2VyKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIGAnICsgcHJvcFR5cGUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO1xuICAgICAgfVxuICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBhbGwga2V5cyBpbiBjYXNlIHNvbWUgYXJlIHJlcXVpcmVkIGJ1dCBtaXNzaW5nIGZyb21cbiAgICAgIC8vIHByb3BzLlxuICAgICAgdmFyIGFsbEtleXMgPSBhc3NpZ24oe30sIHByb3BzW3Byb3BOYW1lXSwgc2hhcGVUeXBlcyk7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gYWxsS2V5cykge1xuICAgICAgICB2YXIgY2hlY2tlciA9IHNoYXBlVHlwZXNba2V5XTtcbiAgICAgICAgaWYgKCFjaGVja2VyKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKFxuICAgICAgICAgICAgJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIGtleSBgJyArIGtleSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLicgK1xuICAgICAgICAgICAgJ1xcbkJhZCBvYmplY3Q6ICcgKyBKU09OLnN0cmluZ2lmeShwcm9wc1twcm9wTmFtZV0sIG51bGwsICcgICcpICtcbiAgICAgICAgICAgICdcXG5WYWxpZCBrZXlzOiAnICsgIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKHNoYXBlVHlwZXMpLCBudWxsLCAnICAnKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc05vZGUocHJvcFZhbHVlKSB7XG4gICAgc3dpdGNoICh0eXBlb2YgcHJvcFZhbHVlKSB7XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIHJldHVybiAhcHJvcFZhbHVlO1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBwcm9wVmFsdWUuZXZlcnkoaXNOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcFZhbHVlID09PSBudWxsIHx8IGlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihwcm9wVmFsdWUpO1xuICAgICAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChwcm9wVmFsdWUpO1xuICAgICAgICAgIHZhciBzdGVwO1xuICAgICAgICAgIGlmIChpdGVyYXRvckZuICE9PSBwcm9wVmFsdWUuZW50cmllcykge1xuICAgICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgICBpZiAoIWlzTm9kZShzdGVwLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJdGVyYXRvciB3aWxsIHByb3ZpZGUgZW50cnkgW2ssdl0gdHVwbGVzIHJhdGhlciB0aGFuIHZhbHVlcy5cbiAgICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05vZGUoZW50cnlbMV0pKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpIHtcbiAgICAvLyBOYXRpdmUgU3ltYm9sLlxuICAgIGlmIChwcm9wVHlwZSA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIGZhbHN5IHZhbHVlIGNhbid0IGJlIGEgU3ltYm9sXG4gICAgaWYgKCFwcm9wVmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddID09PSAnU3ltYm9sJ1xuICAgIGlmIChwcm9wVmFsdWVbJ0BAdG9TdHJpbmdUYWcnXSA9PT0gJ1N5bWJvbCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIEZhbGxiYWNrIGZvciBub24tc3BlYyBjb21wbGlhbnQgU3ltYm9scyB3aGljaCBhcmUgcG9seWZpbGxlZC5cbiAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBwcm9wVmFsdWUgaW5zdGFuY2VvZiBTeW1ib2wpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIEVxdWl2YWxlbnQgb2YgYHR5cGVvZmAgYnV0IHdpdGggc3BlY2lhbCBoYW5kbGluZyBmb3IgYXJyYXkgYW5kIHJlZ2V4cC5cbiAgZnVuY3Rpb24gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKSB7XG4gICAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gJ2FycmF5JztcbiAgICB9XG4gICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgLy8gT2xkIHdlYmtpdHMgKGF0IGxlYXN0IHVudGlsIEFuZHJvaWQgNC4wKSByZXR1cm4gJ2Z1bmN0aW9uJyByYXRoZXIgdGhhblxuICAgICAgLy8gJ29iamVjdCcgZm9yIHR5cGVvZiBhIFJlZ0V4cC4gV2UnbGwgbm9ybWFsaXplIHRoaXMgaGVyZSBzbyB0aGF0IC9ibGEvXG4gICAgICAvLyBwYXNzZXMgUHJvcFR5cGVzLm9iamVjdC5cbiAgICAgIHJldHVybiAnb2JqZWN0JztcbiAgICB9XG4gICAgaWYgKGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gJ3N5bWJvbCc7XG4gICAgfVxuICAgIHJldHVybiBwcm9wVHlwZTtcbiAgfVxuXG4gIC8vIFRoaXMgaGFuZGxlcyBtb3JlIHR5cGVzIHRoYW4gYGdldFByb3BUeXBlYC4gT25seSB1c2VkIGZvciBlcnJvciBtZXNzYWdlcy5cbiAgLy8gU2VlIGBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcmAuXG4gIGZ1bmN0aW9uIGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSkge1xuICAgIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAndW5kZWZpbmVkJyB8fCBwcm9wVmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJyArIHByb3BWYWx1ZTtcbiAgICB9XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gJ2RhdGUnO1xuICAgICAgfSBlbHNlIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgcmV0dXJuICdyZWdleHAnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcFR5cGU7XG4gIH1cblxuICAvLyBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgaXMgcG9zdGZpeGVkIHRvIGEgd2FybmluZyBhYm91dCBhbiBpbnZhbGlkIHR5cGUuXG4gIC8vIEZvciBleGFtcGxlLCBcInVuZGVmaW5lZFwiIG9yIFwib2YgdHlwZSBhcnJheVwiXG4gIGZ1bmN0aW9uIGdldFBvc3RmaXhGb3JUeXBlV2FybmluZyh2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gZ2V0UHJlY2lzZVR5cGUodmFsdWUpO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnYXJyYXknOlxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgcmV0dXJuICdhbiAnICsgdHlwZTtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICBjYXNlICdyZWdleHAnOlxuICAgICAgICByZXR1cm4gJ2EgJyArIHR5cGU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG4gIH1cblxuICAvLyBSZXR1cm5zIGNsYXNzIG5hbWUgb2YgdGhlIG9iamVjdCwgaWYgYW55LlxuICBmdW5jdGlvbiBnZXRDbGFzc05hbWUocHJvcFZhbHVlKSB7XG4gICAgaWYgKCFwcm9wVmFsdWUuY29uc3RydWN0b3IgfHwgIXByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lKSB7XG4gICAgICByZXR1cm4gQU5PTllNT1VTO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWU7XG4gIH1cblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGNoZWNrUHJvcFR5cGVzO1xuICBSZWFjdFByb3BUeXBlcy5yZXNldFdhcm5pbmdDYWNoZSA9IGNoZWNrUHJvcFR5cGVzLnJlc2V0V2FybmluZ0NhY2hlO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYXBwZW5kUHhJZk5lZWRlZDtcblxuXG4vLyBDb3BpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9cbi8vIDEwMmNkMjkxODk5Zjk5NDJhNzZjNDBhMGU3ODkyMGE2ZmU1NDRkYzEvXG4vLyBzcmMvcmVuZGVyZXJzL2RvbS9zaGFyZWQvQ1NTUHJvcGVydHkuanNcbnZhciBpc1VuaXRsZXNzTnVtYmVyID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogdHJ1ZSxcbiAgYm94RmxleDogdHJ1ZSxcbiAgYm94RmxleEdyb3VwOiB0cnVlLFxuICBib3hPcmRpbmFsR3JvdXA6IHRydWUsXG4gIGNvbHVtbkNvdW50OiB0cnVlLFxuICBmbGV4OiB0cnVlLFxuICBmbGV4R3JvdzogdHJ1ZSxcbiAgZmxleFBvc2l0aXZlOiB0cnVlLFxuICBmbGV4U2hyaW5rOiB0cnVlLFxuICBmbGV4TmVnYXRpdmU6IHRydWUsXG4gIGZsZXhPcmRlcjogdHJ1ZSxcbiAgZ3JpZFJvdzogdHJ1ZSxcbiAgZ3JpZENvbHVtbjogdHJ1ZSxcbiAgZm9udFdlaWdodDogdHJ1ZSxcbiAgbGluZUNsYW1wOiB0cnVlLFxuICBsaW5lSGVpZ2h0OiB0cnVlLFxuICBvcGFjaXR5OiB0cnVlLFxuICBvcmRlcjogdHJ1ZSxcbiAgb3JwaGFuczogdHJ1ZSxcbiAgdGFiU2l6ZTogdHJ1ZSxcbiAgd2lkb3dzOiB0cnVlLFxuICB6SW5kZXg6IHRydWUsXG4gIHpvb206IHRydWUsXG5cbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogdHJ1ZSxcbiAgc3RvcE9wYWNpdHk6IHRydWUsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IHRydWUsXG4gIHN0cm9rZU9wYWNpdHk6IHRydWUsXG4gIHN0cm9rZVdpZHRoOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBhcHBlbmRQeElmTmVlZGVkKHByb3BlcnR5TmFtZSwgdmFsdWUpIHtcbiAgdmFyIG5lZWRzUHhTdWZmaXggPSAhaXNVbml0bGVzc051bWJlcltwcm9wZXJ0eU5hbWVdICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IDA7XG4gIHJldHVybiBuZWVkc1B4U3VmZml4ID8gdmFsdWUgKyAncHgnIDogdmFsdWU7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JhZGl1bS9saWIvYXBwZW5kLXB4LWlmLW5lZWRlZC5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBlbmhhbmNlV2l0aFJhZGl1bTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3N0eWxlS2VlcGVyID0gcmVxdWlyZSgnLi9zdHlsZS1rZWVwZXIuanMnKTtcblxudmFyIF9zdHlsZUtlZXBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHlsZUtlZXBlcik7XG5cbnZhciBfcmVzb2x2ZVN0eWxlcyA9IHJlcXVpcmUoJy4vcmVzb2x2ZS1zdHlsZXMuanMnKTtcblxudmFyIF9yZXNvbHZlU3R5bGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Jlc29sdmVTdHlsZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBLRVlTX1RPX0lHTk9SRV9XSEVOX0NPUFlJTkdfUFJPUEVSVElFUyA9IFsnYXJndW1lbnRzJywgJ2NhbGxlZScsICdjYWxsZXInLCAnbGVuZ3RoJywgJ25hbWUnLCAncHJvdG90eXBlJywgJ3R5cGUnXTtcblxuZnVuY3Rpb24gY29weVByb3BlcnRpZXMoc291cmNlLCB0YXJnZXQpIHtcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoS0VZU19UT19JR05PUkVfV0hFTl9DT1BZSU5HX1BST1BFUlRJRVMuaW5kZXhPZihrZXkpIDwgMCAmJiAhdGFyZ2V0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzU3RhdGVsZXNzKGNvbXBvbmVudCkge1xuICByZXR1cm4gIWNvbXBvbmVudC5yZW5kZXIgJiYgIShjb21wb25lbnQucHJvdG90eXBlICYmIGNvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyKTtcbn1cblxuLy8gQ2hlY2sgaWYgdmFsdWUgaXMgYSByZWFsIEVTIGNsYXNzIGluIE5hdGl2ZSAvIE5vZGUgY29kZS5cbi8vIFNlZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMwNzYwMjM2XG5mdW5jdGlvbiBpc05hdGl2ZUNsYXNzKGNvbXBvbmVudCkge1xuICByZXR1cm4gdHlwZW9mIGNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJiAvXlxccypjbGFzc1xccysvLnRlc3QoY29tcG9uZW50LnRvU3RyaW5nKCkpO1xufVxuXG4vLyBNYW51YWxseSBhcHBseSBiYWJlbC1pc2ggY2xhc3MgaW5oZXJpdGFuY2UuXG5mdW5jdGlvbiBpbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yoc3VwZXJDbGFzcykpKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcblxuICBpZiAoc3VwZXJDbGFzcykge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5oYW5jZVdpdGhSYWRpdW0oY29uZmlnT3JDb21wb3NlZENvbXBvbmVudCkge1xuICB2YXIgX2NsYXNzLCBfdGVtcDtcblxuICB2YXIgY29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICBpZiAodHlwZW9mIGNvbmZpZ09yQ29tcG9zZWRDb21wb25lbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgbmV3Q29uZmlnID0gX2V4dGVuZHMoe30sIGNvbmZpZywgY29uZmlnT3JDb21wb3NlZENvbXBvbmVudCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjb25maWdPckNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIGVuaGFuY2VXaXRoUmFkaXVtKGNvbmZpZ09yQ29tcG9uZW50LCBuZXdDb25maWcpO1xuICAgIH07XG4gIH1cblxuICB2YXIgY29tcG9uZW50ID0gY29uZmlnT3JDb21wb3NlZENvbXBvbmVudDtcbiAgdmFyIENvbXBvc2VkQ29tcG9uZW50ID0gY29tcG9uZW50O1xuXG4gIC8vIEhhbmRsZSBOYXRpdmUgRVMgY2xhc3Nlcy5cbiAgaWYgKGlzTmF0aXZlQ2xhc3MoQ29tcG9zZWRDb21wb25lbnQpKSB7XG4gICAgLy8gTWFudWFsbHkgYXBwcm94aW1hdGUgYmFiZWwncyBjbGFzcyB0cmFuc3BpbGF0aW9uLCBidXQgX3dpdGhfIGEgcmVhbCBgbmV3YCBjYWxsLlxuICAgIENvbXBvc2VkQ29tcG9uZW50ID0gZnVuY3Rpb24gKE9yaWdDb21wb25lbnQpIHtcbiAgICAgIGZ1bmN0aW9uIE5ld0NvbXBvbmVudCgpIHtcbiAgICAgICAgLy8gT3JkaW5hcmlseSwgYmFiZWwgd291bGQgcHJvZHVjZSBzb21ldGhpbmcgbGlrZTpcbiAgICAgICAgLy9cbiAgICAgICAgLy8gYGBgXG4gICAgICAgIC8vIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPcmlnQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgICAvLyBgYGBcbiAgICAgICAgLy9cbiAgICAgICAgLy8gSW5zdGVhZCwgd2UganVzdCBjYWxsIGBuZXdgIGRpcmVjdGx5IHdpdGhvdXQgdGhlIGBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybmAgd3JhcHBlci5cbiAgICAgICAgdmFyIHNvdXJjZSA9IG5ldyAoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuYXBwbHkoT3JpZ0NvbXBvbmVudCwgW251bGxdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSkpKCk7XG5cbiAgICAgICAgLy8gVGhlbiB3ZSBtYW51YWxseSB1cGRhdGUgY29udGV4dCB3aXRoIHByb3BlcnRpZXMuXG4gICAgICAgIGNvcHlQcm9wZXJ0aWVzKHNvdXJjZSwgdGhpcyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGluaGVyaXRzKE5ld0NvbXBvbmVudCwgT3JpZ0NvbXBvbmVudCk7XG5cbiAgICAgIHJldHVybiBOZXdDb21wb25lbnQ7XG4gICAgfShDb21wb3NlZENvbXBvbmVudCk7XG4gIH1cblxuICAvLyBIYW5kbGUgc3RhdGVsZXNzIGNvbXBvbmVudHNcbiAgaWYgKGlzU3RhdGVsZXNzKENvbXBvc2VkQ29tcG9uZW50KSkge1xuICAgIENvbXBvc2VkQ29tcG9uZW50ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIF9pbmhlcml0cyhDb21wb3NlZENvbXBvbmVudCwgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIENvbXBvc2VkQ29tcG9uZW50KCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29tcG9zZWRDb21wb25lbnQpO1xuXG4gICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuXG4gICAgICBDb21wb3NlZENvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gY29tcG9uZW50KHRoaXMucHJvcHMsIHRoaXMuY29udGV4dCk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ29tcG9zZWRDb21wb25lbnQ7XG4gICAgfShfcmVhY3QuQ29tcG9uZW50KTtcblxuICAgIENvbXBvc2VkQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gY29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IGNvbXBvbmVudC5uYW1lO1xuICB9XG5cbiAgdmFyIFJhZGl1bUVuaGFuY2VyID0gKF90ZW1wID0gX2NsYXNzID0gZnVuY3Rpb24gKF9Db21wb3NlZENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhSYWRpdW1FbmhhbmNlciwgX0NvbXBvc2VkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFJhZGl1bUVuaGFuY2VyKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJhZGl1bUVuaGFuY2VyKTtcblxuICAgICAgdmFyIF90aGlzMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb3NlZENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblxuICAgICAgX3RoaXMyLnN0YXRlID0gX3RoaXMyLnN0YXRlIHx8IHt9O1xuICAgICAgX3RoaXMyLnN0YXRlLl9yYWRpdW1TdHlsZVN0YXRlID0ge307XG4gICAgICBfdGhpczIuX3JhZGl1bUlzTW91bnRlZCA9IHRydWU7XG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIFJhZGl1bUVuaGFuY2VyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKF9Db21wb3NlZENvbXBvbmVudC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQpIHtcbiAgICAgICAgX0NvbXBvc2VkQ29tcG9uZW50LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudC5jYWxsKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yYWRpdW1Jc01vdW50ZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKHRoaXMuX3JhZGl1bU1vdXNlVXBMaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9yYWRpdW1Nb3VzZVVwTGlzdGVuZXIucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9yYWRpdW1NZWRpYVF1ZXJ5TGlzdGVuZXJzQnlRdWVyeSkge1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLl9yYWRpdW1NZWRpYVF1ZXJ5TGlzdGVuZXJzQnlRdWVyeSkuZm9yRWFjaChmdW5jdGlvbiAocXVlcnkpIHtcbiAgICAgICAgICB0aGlzLl9yYWRpdW1NZWRpYVF1ZXJ5TGlzdGVuZXJzQnlRdWVyeVtxdWVyeV0ucmVtb3ZlKCk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBSYWRpdW1FbmhhbmNlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIHN1cGVyQ2hpbGRDb250ZXh0ID0gX0NvbXBvc2VkQ29tcG9uZW50LnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPyBfQ29tcG9zZWRDb21wb25lbnQucHJvdG90eXBlLmdldENoaWxkQ29udGV4dC5jYWxsKHRoaXMpIDoge307XG5cbiAgICAgIGlmICghdGhpcy5wcm9wcy5yYWRpdW1Db25maWcpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyQ2hpbGRDb250ZXh0O1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV3Q29udGV4dCA9IF9leHRlbmRzKHt9LCBzdXBlckNoaWxkQ29udGV4dCk7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLnJhZGl1bUNvbmZpZykge1xuICAgICAgICBuZXdDb250ZXh0Ll9yYWRpdW1Db25maWcgPSB0aGlzLnByb3BzLnJhZGl1bUNvbmZpZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld0NvbnRleHQ7XG4gICAgfTtcblxuICAgIFJhZGl1bUVuaGFuY2VyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgcmVuZGVyZWRFbGVtZW50ID0gX0NvbXBvc2VkQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIuY2FsbCh0aGlzKTtcbiAgICAgIHZhciBjdXJyZW50Q29uZmlnID0gdGhpcy5wcm9wcy5yYWRpdW1Db25maWcgfHwgdGhpcy5jb250ZXh0Ll9yYWRpdW1Db25maWcgfHwgY29uZmlnO1xuXG4gICAgICBpZiAoY29uZmlnICYmIGN1cnJlbnRDb25maWcgIT09IGNvbmZpZykge1xuICAgICAgICBjdXJyZW50Q29uZmlnID0gX2V4dGVuZHMoe30sIGNvbmZpZywgY3VycmVudENvbmZpZyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoMCwgX3Jlc29sdmVTdHlsZXMyLmRlZmF1bHQpKHRoaXMsIHJlbmRlcmVkRWxlbWVudCwgY3VycmVudENvbmZpZyk7XG4gICAgfTtcblxuICAgIHJldHVybiBSYWRpdW1FbmhhbmNlcjtcbiAgfShDb21wb3NlZENvbXBvbmVudCksIF9jbGFzcy5faXNSYWRpdW1FbmhhbmNlZCA9IHRydWUsIF90ZW1wKTtcblxuICAvLyBDbGFzcyBpbmhlcml0YW5jZSB1c2VzIE9iamVjdC5jcmVhdGUgYW5kIGJlY2F1c2Ugb2YgX19wcm90b19fIGlzc3Vlc1xuICAvLyB3aXRoIElFIDwxMCBhbnkgc3RhdGljIHByb3BlcnRpZXMgb2YgdGhlIHN1cGVyY2xhc3MgYXJlbid0IGluaGVyaXRlZCBhbmRcbiAgLy8gc28gbmVlZCB0byBiZSBtYW51YWxseSBwb3B1bGF0ZWQuXG4gIC8vIFNlZSBodHRwOi8vYmFiZWxqcy5pby9kb2NzL2FkdmFuY2VkL2NhdmVhdHMvI2NsYXNzZXMtMTAtYW5kLWJlbG93LVxuXG4gIGNvcHlQcm9wZXJ0aWVzKGNvbXBvbmVudCwgUmFkaXVtRW5oYW5jZXIpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBhbHNvIGZpeGVzIFJlYWN0IEhvdCBMb2FkZXIgYnkgZXhwb3NpbmcgdGhlIG9yaWdpbmFsIGNvbXBvbmVudHMgdG9wXG4gICAgLy8gbGV2ZWwgcHJvdG90eXBlIG1ldGhvZHMgb24gdGhlIFJhZGl1bSBlbmhhbmNlZCBwcm90b3R5cGUgYXMgZGlzY3Vzc2VkIGluXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0Zvcm1pZGFibGVMYWJzL3JhZGl1bS9pc3N1ZXMvMjE5LlxuICAgIGNvcHlQcm9wZXJ0aWVzKENvbXBvc2VkQ29tcG9uZW50LnByb3RvdHlwZSwgUmFkaXVtRW5oYW5jZXIucHJvdG90eXBlKTtcbiAgfVxuXG4gIGlmIChSYWRpdW1FbmhhbmNlci5wcm9wVHlwZXMgJiYgUmFkaXVtRW5oYW5jZXIucHJvcFR5cGVzLnN0eWxlKSB7XG4gICAgUmFkaXVtRW5oYW5jZXIucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIFJhZGl1bUVuaGFuY2VyLnByb3BUeXBlcywge1xuICAgICAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5LCBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdF0pXG4gICAgfSk7XG4gIH1cblxuICBSYWRpdW1FbmhhbmNlci5kaXNwbGF5TmFtZSA9IGNvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBjb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcblxuICBSYWRpdW1FbmhhbmNlci5jb250ZXh0VHlwZXMgPSBfZXh0ZW5kcyh7fSwgUmFkaXVtRW5oYW5jZXIuY29udGV4dFR5cGVzLCB7XG4gICAgX3JhZGl1bUNvbmZpZzogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gICAgX3JhZGl1bVN0eWxlS2VlcGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lmluc3RhbmNlT2YoX3N0eWxlS2VlcGVyMi5kZWZhdWx0KVxuICB9KTtcblxuICBSYWRpdW1FbmhhbmNlci5jaGlsZENvbnRleHRUeXBlcyA9IF9leHRlbmRzKHt9LCBSYWRpdW1FbmhhbmNlci5jaGlsZENvbnRleHRUeXBlcywge1xuICAgIF9yYWRpdW1Db25maWc6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAgIF9yYWRpdW1TdHlsZUtlZXBlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5pbnN0YW5jZU9mKF9zdHlsZUtlZXBlcjIuZGVmYXVsdClcbiAgfSk7XG5cbiAgcmV0dXJuIFJhZGl1bUVuaGFuY2VyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yYWRpdW0vbGliL2VuaGFuY2VyLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIGdldFN0YXRlS2V5ID0gZnVuY3Rpb24gZ2V0U3RhdGVLZXkoZWxlbWVudEtleSkge1xuICByZXR1cm4gZWxlbWVudEtleSA9PT0gbnVsbCB8fCBlbGVtZW50S2V5ID09PSB1bmRlZmluZWQgPyAnbWFpbicgOiBlbGVtZW50S2V5LnRvU3RyaW5nKCk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBnZXRTdGF0ZUtleTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmFkaXVtL2xpYi9nZXQtc3RhdGUta2V5LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2dldFN0YXRlS2V5ID0gcmVxdWlyZSgnLi9nZXQtc3RhdGUta2V5Jyk7XG5cbnZhciBfZ2V0U3RhdGVLZXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0U3RhdGVLZXkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZ2V0U3RhdGUgPSBmdW5jdGlvbiBnZXRTdGF0ZShzdGF0ZSwgZWxlbWVudEtleSwgdmFsdWUpIHtcbiAgdmFyIGtleSA9ICgwLCBfZ2V0U3RhdGVLZXkyLmRlZmF1bHQpKGVsZW1lbnRLZXkpO1xuXG4gIHJldHVybiAhIXN0YXRlICYmICEhc3RhdGUuX3JhZGl1bVN0eWxlU3RhdGUgJiYgISFzdGF0ZS5fcmFkaXVtU3R5bGVTdGF0ZVtrZXldICYmIHN0YXRlLl9yYWRpdW1TdHlsZVN0YXRlW2tleV1bdmFsdWVdO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0U3RhdGU7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JhZGl1bS9saWIvZ2V0LXN0YXRlLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaGFzaDtcblxuXG4vLyBhIHNpbXBsZSBkamIyIGhhc2ggYmFzZWQgb24gaGFzaC1zdHJpbmc6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vTWF0dGhld0Jhcmtlci9oYXNoLXN0cmluZy9ibG9iL21hc3Rlci9zb3VyY2UvaGFzaC1zdHJpbmcuanNcbi8vIHJldHVybnMgYSBoZXgtZW5jb2RlZCBoYXNoXG5mdW5jdGlvbiBoYXNoKHRleHQpIHtcbiAgaWYgKCF0ZXh0KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgdmFyIGhhc2hWYWx1ZSA9IDUzODE7XG4gIHZhciBpbmRleCA9IHRleHQubGVuZ3RoIC0gMTtcblxuICB3aGlsZSAoaW5kZXgpIHtcbiAgICBoYXNoVmFsdWUgPSBoYXNoVmFsdWUgKiAzMyBeIHRleHQuY2hhckNvZGVBdChpbmRleCk7XG4gICAgaW5kZXggLT0gMTtcbiAgfVxuXG4gIHJldHVybiAoaGFzaFZhbHVlID4+PiAwKS50b1N0cmluZygxNik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JhZGl1bS9saWIvaGFzaC5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gbWFwT2JqZWN0O1xuZnVuY3Rpb24gbWFwT2JqZWN0KG9iamVjdCwgbWFwcGVyKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmplY3QpLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBrZXkpIHtcbiAgICByZXN1bHRba2V5XSA9IG1hcHBlcihvYmplY3Rba2V5XSwga2V5KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LCB7fSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmFkaXVtL2xpYi9tYXAtb2JqZWN0LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NoZWNrUHJvcHNQbHVnaW4gPSByZXF1aXJlKCcuL2NoZWNrLXByb3BzLXBsdWdpbicpO1xuXG52YXIgX2NoZWNrUHJvcHNQbHVnaW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hlY2tQcm9wc1BsdWdpbik7XG5cbnZhciBfa2V5ZnJhbWVzUGx1Z2luID0gcmVxdWlyZSgnLi9rZXlmcmFtZXMtcGx1Z2luJyk7XG5cbnZhciBfa2V5ZnJhbWVzUGx1Z2luMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleWZyYW1lc1BsdWdpbik7XG5cbnZhciBfbWVyZ2VTdHlsZUFycmF5UGx1Z2luID0gcmVxdWlyZSgnLi9tZXJnZS1zdHlsZS1hcnJheS1wbHVnaW4nKTtcblxudmFyIF9tZXJnZVN0eWxlQXJyYXlQbHVnaW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWVyZ2VTdHlsZUFycmF5UGx1Z2luKTtcblxudmFyIF9wcmVmaXhQbHVnaW4gPSByZXF1aXJlKCcuL3ByZWZpeC1wbHVnaW4nKTtcblxudmFyIF9wcmVmaXhQbHVnaW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJlZml4UGx1Z2luKTtcblxudmFyIF9yZW1vdmVOZXN0ZWRTdHlsZXNQbHVnaW4gPSByZXF1aXJlKCcuL3JlbW92ZS1uZXN0ZWQtc3R5bGVzLXBsdWdpbicpO1xuXG52YXIgX3JlbW92ZU5lc3RlZFN0eWxlc1BsdWdpbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZW1vdmVOZXN0ZWRTdHlsZXNQbHVnaW4pO1xuXG52YXIgX3Jlc29sdmVJbnRlcmFjdGlvblN0eWxlc1BsdWdpbiA9IHJlcXVpcmUoJy4vcmVzb2x2ZS1pbnRlcmFjdGlvbi1zdHlsZXMtcGx1Z2luJyk7XG5cbnZhciBfcmVzb2x2ZUludGVyYWN0aW9uU3R5bGVzUGx1Z2luMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Jlc29sdmVJbnRlcmFjdGlvblN0eWxlc1BsdWdpbik7XG5cbnZhciBfcmVzb2x2ZU1lZGlhUXVlcmllc1BsdWdpbiA9IHJlcXVpcmUoJy4vcmVzb2x2ZS1tZWRpYS1xdWVyaWVzLXBsdWdpbicpO1xuXG52YXIgX3Jlc29sdmVNZWRpYVF1ZXJpZXNQbHVnaW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVzb2x2ZU1lZGlhUXVlcmllc1BsdWdpbik7XG5cbnZhciBfdmlzaXRlZFBsdWdpbiA9IHJlcXVpcmUoJy4vdmlzaXRlZC1wbHVnaW4nKTtcblxudmFyIF92aXNpdGVkUGx1Z2luMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Zpc2l0ZWRQbHVnaW4pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIGNoZWNrUHJvcHM6IF9jaGVja1Byb3BzUGx1Z2luMi5kZWZhdWx0LFxuICBrZXlmcmFtZXM6IF9rZXlmcmFtZXNQbHVnaW4yLmRlZmF1bHQsXG4gIG1lcmdlU3R5bGVBcnJheTogX21lcmdlU3R5bGVBcnJheVBsdWdpbjIuZGVmYXVsdCxcbiAgcHJlZml4OiBfcHJlZml4UGx1Z2luMi5kZWZhdWx0LFxuICByZW1vdmVOZXN0ZWRTdHlsZXM6IF9yZW1vdmVOZXN0ZWRTdHlsZXNQbHVnaW4yLmRlZmF1bHQsXG4gIHJlc29sdmVJbnRlcmFjdGlvblN0eWxlczogX3Jlc29sdmVJbnRlcmFjdGlvblN0eWxlc1BsdWdpbjIuZGVmYXVsdCxcbiAgcmVzb2x2ZU1lZGlhUXVlcmllczogX3Jlc29sdmVNZWRpYVF1ZXJpZXNQbHVnaW4yLmRlZmF1bHQsXG4gIHZpc2l0ZWQ6IF92aXNpdGVkUGx1Z2luMi5kZWZhdWx0XG59O1xuLyogZXNsaW50LWRpc2FibGUgYmxvY2stc2NvcGVkLWNvbnN0ICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmFkaXVtL2xpYi9wbHVnaW5zL2luZGV4LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfYXBwZW5kSW1wb3J0YW50VG9FYWNoVmFsdWUgPSByZXF1aXJlKCcuL2FwcGVuZC1pbXBvcnRhbnQtdG8tZWFjaC12YWx1ZScpO1xuXG52YXIgX2FwcGVuZEltcG9ydGFudFRvRWFjaFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FwcGVuZEltcG9ydGFudFRvRWFjaFZhbHVlKTtcblxudmFyIF9jc3NSdWxlU2V0VG9TdHJpbmcgPSByZXF1aXJlKCcuL2Nzcy1ydWxlLXNldC10by1zdHJpbmcnKTtcblxudmFyIF9jc3NSdWxlU2V0VG9TdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3NzUnVsZVNldFRvU3RyaW5nKTtcblxudmFyIF9nZXRTdGF0ZSA9IHJlcXVpcmUoJy4vZ2V0LXN0YXRlJyk7XG5cbnZhciBfZ2V0U3RhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0U3RhdGUpO1xuXG52YXIgX2dldFN0YXRlS2V5ID0gcmVxdWlyZSgnLi9nZXQtc3RhdGUta2V5Jyk7XG5cbnZhciBfZ2V0U3RhdGVLZXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0U3RhdGVLZXkpO1xuXG52YXIgX2hhc2ggPSByZXF1aXJlKCcuL2hhc2gnKTtcblxudmFyIF9oYXNoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhc2gpO1xuXG52YXIgX21lcmdlU3R5bGVzID0gcmVxdWlyZSgnLi9tZXJnZS1zdHlsZXMnKTtcblxudmFyIF9wbHVnaW5zID0gcmVxdWlyZSgnLi9wbHVnaW5zLycpO1xuXG52YXIgX3BsdWdpbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGx1Z2lucyk7XG5cbnZhciBfZXhlbnYgPSByZXF1aXJlKCdleGVudicpO1xuXG52YXIgX2V4ZW52MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZW52KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgREVGQVVMVF9DT05GSUcgPSB7XG4gIHBsdWdpbnM6IFtfcGx1Z2luczIuZGVmYXVsdC5tZXJnZVN0eWxlQXJyYXksIF9wbHVnaW5zMi5kZWZhdWx0LmNoZWNrUHJvcHMsIF9wbHVnaW5zMi5kZWZhdWx0LnJlc29sdmVNZWRpYVF1ZXJpZXMsIF9wbHVnaW5zMi5kZWZhdWx0LnJlc29sdmVJbnRlcmFjdGlvblN0eWxlcywgX3BsdWdpbnMyLmRlZmF1bHQua2V5ZnJhbWVzLCBfcGx1Z2luczIuZGVmYXVsdC52aXNpdGVkLCBfcGx1Z2luczIuZGVmYXVsdC5yZW1vdmVOZXN0ZWRTdHlsZXMsIF9wbHVnaW5zMi5kZWZhdWx0LnByZWZpeCwgX3BsdWdpbnMyLmRlZmF1bHQuY2hlY2tQcm9wc11cbn07XG5cbi8vIEdyb3NzXG52YXIgZ2xvYmFsU3RhdGUgPSB7fTtcblxuLy8gRGVjbGFyZSBlYXJseSBmb3IgcmVjdXJzaXZlIGhlbHBlcnMuXG52YXIgcmVzb2x2ZVN0eWxlcyA9IG51bGw7XG5cbnZhciBfc2hvdWxkUmVzb2x2ZVN0eWxlcyA9IGZ1bmN0aW9uIF9zaG91bGRSZXNvbHZlU3R5bGVzKGNvbXBvbmVudCkge1xuICByZXR1cm4gY29tcG9uZW50LnR5cGUgJiYgIWNvbXBvbmVudC50eXBlLl9pc1JhZGl1bUVuaGFuY2VkO1xufTtcblxudmFyIF9yZXNvbHZlQ2hpbGRyZW4gPSBmdW5jdGlvbiBfcmVzb2x2ZUNoaWxkcmVuKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIGNvbXBvbmVudCA9IF9yZWYuY29tcG9uZW50LFxuICAgICAgY29uZmlnID0gX3JlZi5jb25maWcsXG4gICAgICBleGlzdGluZ0tleU1hcCA9IF9yZWYuZXhpc3RpbmdLZXlNYXA7XG5cbiAgaWYgKCFjaGlsZHJlbikge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuXG4gIHZhciBjaGlsZHJlblR5cGUgPSB0eXBlb2YgY2hpbGRyZW4gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGNoaWxkcmVuKTtcblxuICBpZiAoY2hpbGRyZW5UeXBlID09PSAnc3RyaW5nJyB8fCBjaGlsZHJlblR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgd2l0aCBhIHNpbmdsZSBwcmltaXRpdmUgY2hpbGRcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cblxuICBpZiAoY2hpbGRyZW5UeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gV3JhcCB0aGUgZnVuY3Rpb24sIHJlc29sdmluZyBzdHlsZXMgb24gdGhlIHJlc3VsdFxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gY2hpbGRyZW4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmIChfcmVhY3QyLmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQocmVzdWx0KSkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZVN0eWxlcyhjb21wb25lbnQsIHJlc3VsdCwgY29uZmlnLCBleGlzdGluZ0tleU1hcCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH1cblxuICBpZiAoX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMSAmJiBjaGlsZHJlbi50eXBlKSB7XG4gICAgLy8gSWYgYSBSZWFjdCBFbGVtZW50IGlzIGFuIG9ubHkgY2hpbGQsIGRvbid0IHdyYXAgaXQgaW4gYW4gYXJyYXkgZm9yXG4gICAgLy8gUmVhY3QuQ2hpbGRyZW4ubWFwKCkgZm9yIFJlYWN0LkNoaWxkcmVuLm9ubHkoKSBjb21wYXRpYmlsaXR5LlxuICAgIHZhciBvbmx5Q2hpbGQgPSBfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG4gICAgcmV0dXJuIHJlc29sdmVTdHlsZXMoY29tcG9uZW50LCBvbmx5Q2hpbGQsIGNvbmZpZywgZXhpc3RpbmdLZXlNYXAsIHRydWUpO1xuICB9XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmIChfcmVhY3QyLmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZVN0eWxlcyhjb21wb25lbnQsIGNoaWxkLCBjb25maWcsIGV4aXN0aW5nS2V5TWFwLCB0cnVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGQ7XG4gIH0pO1xufTtcblxuLy8gUmVjdXJzZSBvdmVyIHByb3BzLCBqdXN0IGxpa2UgY2hpbGRyZW5cbnZhciBfcmVzb2x2ZVByb3BzID0gZnVuY3Rpb24gX3Jlc29sdmVQcm9wcyhfcmVmMikge1xuICB2YXIgY29tcG9uZW50ID0gX3JlZjIuY29tcG9uZW50LFxuICAgICAgY29uZmlnID0gX3JlZjIuY29uZmlnLFxuICAgICAgZXhpc3RpbmdLZXlNYXAgPSBfcmVmMi5leGlzdGluZ0tleU1hcCxcbiAgICAgIHByb3BzID0gX3JlZjIucHJvcHM7XG5cbiAgdmFyIG5ld1Byb3BzID0gcHJvcHM7XG5cbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAvLyBXZSBhbHJlYWR5IHJlY3Vyc2Ugb3ZlciBjaGlsZHJlbiBhYm92ZVxuICAgIGlmIChwcm9wID09PSAnY2hpbGRyZW4nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgIGlmIChfcmVhY3QyLmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgICAgbmV3UHJvcHMgPSBfZXh0ZW5kcyh7fSwgbmV3UHJvcHMpO1xuICAgICAgbmV3UHJvcHNbcHJvcF0gPSByZXNvbHZlU3R5bGVzKGNvbXBvbmVudCwgcHJvcFZhbHVlLCBjb25maWcsIGV4aXN0aW5nS2V5TWFwLCB0cnVlKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBuZXdQcm9wcztcbn07XG5cbnZhciBfYnVpbGRHZXRLZXkgPSBmdW5jdGlvbiBfYnVpbGRHZXRLZXkoX3JlZjMpIHtcbiAgdmFyIGNvbXBvbmVudE5hbWUgPSBfcmVmMy5jb21wb25lbnROYW1lLFxuICAgICAgZXhpc3RpbmdLZXlNYXAgPSBfcmVmMy5leGlzdGluZ0tleU1hcCxcbiAgICAgIHJlbmRlcmVkRWxlbWVudCA9IF9yZWYzLnJlbmRlcmVkRWxlbWVudDtcblxuICAvLyBXZSBuZWVkIGEgdW5pcXVlIGtleSB0byBjb3JyZWxhdGUgc3RhdGUgY2hhbmdlcyBkdWUgdG8gdXNlciBpbnRlcmFjdGlvblxuICAvLyB3aXRoIHRoZSByZW5kZXJlZCBlbGVtZW50LCBzbyB3ZSBrbm93IHRvIGFwcGx5IHRoZSBwcm9wZXIgaW50ZXJhY3RpdmVcbiAgLy8gc3R5bGVzLlxuICB2YXIgb3JpZ2luYWxLZXkgPSB0eXBlb2YgcmVuZGVyZWRFbGVtZW50LnJlZiA9PT0gJ3N0cmluZycgPyByZW5kZXJlZEVsZW1lbnQucmVmIDogcmVuZGVyZWRFbGVtZW50LmtleTtcbiAgdmFyIGtleSA9ICgwLCBfZ2V0U3RhdGVLZXkyLmRlZmF1bHQpKG9yaWdpbmFsS2V5KTtcblxuICB2YXIgYWxyZWFkeUdvdEtleSA9IGZhbHNlO1xuICB2YXIgZ2V0S2V5ID0gZnVuY3Rpb24gZ2V0S2V5KCkge1xuICAgIGlmIChhbHJlYWR5R290S2V5KSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cblxuICAgIGFscmVhZHlHb3RLZXkgPSB0cnVlO1xuXG4gICAgaWYgKGV4aXN0aW5nS2V5TWFwW2tleV0pIHtcbiAgICAgIHZhciBlbGVtZW50TmFtZSA9IHZvaWQgMDtcbiAgICAgIGlmICh0eXBlb2YgcmVuZGVyZWRFbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVsZW1lbnROYW1lID0gcmVuZGVyZWRFbGVtZW50LnR5cGU7XG4gICAgICB9IGVsc2UgaWYgKHJlbmRlcmVkRWxlbWVudC50eXBlLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgIGVsZW1lbnROYW1lID0gcmVuZGVyZWRFbGVtZW50LnR5cGUuY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgcmVuZGVyZWRFbGVtZW50LnR5cGUuY29uc3RydWN0b3IubmFtZTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSYWRpdW0gcmVxdWlyZXMgZWFjaCBlbGVtZW50IHdpdGggaW50ZXJhY3RpdmUgc3R5bGVzIHRvIGhhdmUgYSB1bmlxdWUgJyArICdrZXksIHNldCB1c2luZyBlaXRoZXIgdGhlIHJlZiBvciBrZXkgcHJvcC4gJyArIChvcmlnaW5hbEtleSA/ICdLZXkgXCInICsgb3JpZ2luYWxLZXkgKyAnXCIgaXMgYSBkdXBsaWNhdGUuJyA6ICdNdWx0aXBsZSBlbGVtZW50cyBoYXZlIG5vIGtleSBzcGVjaWZpZWQuJykgKyAnICcgKyAnQ29tcG9uZW50OiBcIicgKyBjb21wb25lbnROYW1lICsgJ1wiLiAnICsgKGVsZW1lbnROYW1lID8gJ0VsZW1lbnQ6IFwiJyArIGVsZW1lbnROYW1lICsgJ1wiLicgOiAnJykpO1xuICAgIH1cblxuICAgIGV4aXN0aW5nS2V5TWFwW2tleV0gPSB0cnVlO1xuXG4gICAgcmV0dXJuIGtleTtcbiAgfTtcblxuICByZXR1cm4gZ2V0S2V5O1xufTtcblxudmFyIF9zZXRTdHlsZVN0YXRlID0gZnVuY3Rpb24gX3NldFN0eWxlU3RhdGUoY29tcG9uZW50LCBrZXksIHN0YXRlS2V5LCB2YWx1ZSkge1xuICBpZiAoIWNvbXBvbmVudC5fcmFkaXVtSXNNb3VudGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGV4aXN0aW5nID0gY29tcG9uZW50Ll9sYXN0UmFkaXVtU3RhdGUgfHwgY29tcG9uZW50LnN0YXRlICYmIGNvbXBvbmVudC5zdGF0ZS5fcmFkaXVtU3R5bGVTdGF0ZSB8fCB7fTtcblxuICB2YXIgc3RhdGUgPSB7IF9yYWRpdW1TdHlsZVN0YXRlOiBfZXh0ZW5kcyh7fSwgZXhpc3RpbmcpIH07XG4gIHN0YXRlLl9yYWRpdW1TdHlsZVN0YXRlW2tleV0gPSBfZXh0ZW5kcyh7fSwgc3RhdGUuX3JhZGl1bVN0eWxlU3RhdGVba2V5XSk7XG4gIHN0YXRlLl9yYWRpdW1TdHlsZVN0YXRlW2tleV1bc3RhdGVLZXldID0gdmFsdWU7XG5cbiAgY29tcG9uZW50Ll9sYXN0UmFkaXVtU3RhdGUgPSBzdGF0ZS5fcmFkaXVtU3R5bGVTdGF0ZTtcbiAgY29tcG9uZW50LnNldFN0YXRlKHN0YXRlKTtcbn07XG5cbnZhciBfcnVuUGx1Z2lucyA9IGZ1bmN0aW9uIF9ydW5QbHVnaW5zKF9yZWY0KSB7XG4gIHZhciBjb21wb25lbnQgPSBfcmVmNC5jb21wb25lbnQsXG4gICAgICBjb25maWcgPSBfcmVmNC5jb25maWcsXG4gICAgICBleGlzdGluZ0tleU1hcCA9IF9yZWY0LmV4aXN0aW5nS2V5TWFwLFxuICAgICAgcHJvcHMgPSBfcmVmNC5wcm9wcyxcbiAgICAgIHJlbmRlcmVkRWxlbWVudCA9IF9yZWY0LnJlbmRlcmVkRWxlbWVudDtcblxuICAvLyBEb24ndCBydW4gcGx1Z2lucyBpZiByZW5kZXJlZEVsZW1lbnQgaXMgbm90IGEgc2ltcGxlIFJlYWN0RE9NRWxlbWVudCBvciBoYXNcbiAgLy8gbm8gc3R5bGUuXG4gIGlmICghX3JlYWN0Mi5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KHJlbmRlcmVkRWxlbWVudCkgfHwgdHlwZW9mIHJlbmRlcmVkRWxlbWVudC50eXBlICE9PSAnc3RyaW5nJyB8fCAhcHJvcHMuc3R5bGUpIHtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH1cblxuICB2YXIgbmV3UHJvcHMgPSBwcm9wcztcblxuICB2YXIgcGx1Z2lucyA9IGNvbmZpZy5wbHVnaW5zIHx8IERFRkFVTFRfQ09ORklHLnBsdWdpbnM7XG5cbiAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgY29tcG9uZW50LmNvbnN0cnVjdG9yLm5hbWU7XG4gIHZhciBnZXRLZXkgPSBfYnVpbGRHZXRLZXkoe1xuICAgIHJlbmRlcmVkRWxlbWVudDogcmVuZGVyZWRFbGVtZW50LFxuICAgIGV4aXN0aW5nS2V5TWFwOiBleGlzdGluZ0tleU1hcCxcbiAgICBjb21wb25lbnROYW1lOiBjb21wb25lbnROYW1lXG4gIH0pO1xuICB2YXIgZ2V0Q29tcG9uZW50RmllbGQgPSBmdW5jdGlvbiBnZXRDb21wb25lbnRGaWVsZChrZXkpIHtcbiAgICByZXR1cm4gY29tcG9uZW50W2tleV07XG4gIH07XG4gIHZhciBnZXRHbG9iYWxTdGF0ZSA9IGZ1bmN0aW9uIGdldEdsb2JhbFN0YXRlKGtleSkge1xuICAgIHJldHVybiBnbG9iYWxTdGF0ZVtrZXldO1xuICB9O1xuICB2YXIgY29tcG9uZW50R2V0U3RhdGUgPSBmdW5jdGlvbiBjb21wb25lbnRHZXRTdGF0ZShzdGF0ZUtleSwgZWxlbWVudEtleSkge1xuICAgIHJldHVybiAoMCwgX2dldFN0YXRlMi5kZWZhdWx0KShjb21wb25lbnQuc3RhdGUsIGVsZW1lbnRLZXkgfHwgZ2V0S2V5KCksIHN0YXRlS2V5KTtcbiAgfTtcbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUoc3RhdGVLZXksIHZhbHVlLCBlbGVtZW50S2V5KSB7XG4gICAgcmV0dXJuIF9zZXRTdHlsZVN0YXRlKGNvbXBvbmVudCwgZWxlbWVudEtleSB8fCBnZXRLZXkoKSwgc3RhdGVLZXksIHZhbHVlKTtcbiAgfTtcblxuICB2YXIgYWRkQ1NTID0gZnVuY3Rpb24gYWRkQ1NTKGNzcykge1xuICAgIHZhciBzdHlsZUtlZXBlciA9IGNvbXBvbmVudC5fcmFkaXVtU3R5bGVLZWVwZXIgfHwgY29tcG9uZW50LmNvbnRleHQuX3JhZGl1bVN0eWxlS2VlcGVyO1xuICAgIGlmICghc3R5bGVLZWVwZXIpIHtcbiAgICAgIGlmIChfX2lzVGVzdE1vZGVFbmFibGVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvIHVzZSBwbHVnaW5zIHJlcXVpcmluZyBgYWRkQ1NTYCAoZS5nLiBrZXlmcmFtZXMsIG1lZGlhIHF1ZXJpZXMpLCAnICsgJ3BsZWFzZSB3cmFwIHlvdXIgYXBwbGljYXRpb24gaW4gdGhlIFN0eWxlUm9vdCBjb21wb25lbnQuIENvbXBvbmVudCAnICsgJ25hbWU6IGAnICsgY29tcG9uZW50TmFtZSArICdgLicpO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZUtlZXBlci5hZGRDU1MoY3NzKTtcbiAgfTtcblxuICB2YXIgbmV3U3R5bGUgPSBwcm9wcy5zdHlsZTtcblxuICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHZhciByZXN1bHQgPSBwbHVnaW4oe1xuICAgICAgRXhlY3V0aW9uRW52aXJvbm1lbnQ6IF9leGVudjIuZGVmYXVsdCxcbiAgICAgIGFkZENTUzogYWRkQ1NTLFxuICAgICAgYXBwZW5kSW1wb3J0YW50VG9FYWNoVmFsdWU6IF9hcHBlbmRJbXBvcnRhbnRUb0VhY2hWYWx1ZTIuZGVmYXVsdCxcbiAgICAgIGNvbXBvbmVudE5hbWU6IGNvbXBvbmVudE5hbWUsXG4gICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgIGNzc1J1bGVTZXRUb1N0cmluZzogX2Nzc1J1bGVTZXRUb1N0cmluZzIuZGVmYXVsdCxcbiAgICAgIGdldENvbXBvbmVudEZpZWxkOiBnZXRDb21wb25lbnRGaWVsZCxcbiAgICAgIGdldEdsb2JhbFN0YXRlOiBnZXRHbG9iYWxTdGF0ZSxcbiAgICAgIGdldFN0YXRlOiBjb21wb25lbnRHZXRTdGF0ZSxcbiAgICAgIGhhc2g6IF9oYXNoMi5kZWZhdWx0LFxuICAgICAgbWVyZ2VTdHlsZXM6IF9tZXJnZVN0eWxlcy5tZXJnZVN0eWxlcyxcbiAgICAgIHByb3BzOiBuZXdQcm9wcyxcbiAgICAgIHNldFN0YXRlOiBzZXRTdGF0ZSxcbiAgICAgIGlzTmVzdGVkU3R5bGU6IF9tZXJnZVN0eWxlcy5pc05lc3RlZFN0eWxlLFxuICAgICAgc3R5bGU6IG5ld1N0eWxlXG4gICAgfSkgfHwge307XG5cbiAgICBuZXdTdHlsZSA9IHJlc3VsdC5zdHlsZSB8fCBuZXdTdHlsZTtcblxuICAgIG5ld1Byb3BzID0gcmVzdWx0LnByb3BzICYmIE9iamVjdC5rZXlzKHJlc3VsdC5wcm9wcykubGVuZ3RoID8gX2V4dGVuZHMoe30sIG5ld1Byb3BzLCByZXN1bHQucHJvcHMpIDogbmV3UHJvcHM7XG5cbiAgICB2YXIgbmV3Q29tcG9uZW50RmllbGRzID0gcmVzdWx0LmNvbXBvbmVudEZpZWxkcyB8fCB7fTtcbiAgICBPYmplY3Qua2V5cyhuZXdDb21wb25lbnRGaWVsZHMpLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkTmFtZSkge1xuICAgICAgY29tcG9uZW50W2ZpZWxkTmFtZV0gPSBuZXdDb21wb25lbnRGaWVsZHNbZmllbGROYW1lXTtcbiAgICB9KTtcblxuICAgIHZhciBuZXdHbG9iYWxTdGF0ZSA9IHJlc3VsdC5nbG9iYWxTdGF0ZSB8fCB7fTtcbiAgICBPYmplY3Qua2V5cyhuZXdHbG9iYWxTdGF0ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBnbG9iYWxTdGF0ZVtrZXldID0gbmV3R2xvYmFsU3RhdGVba2V5XTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaWYgKG5ld1N0eWxlICE9PSBwcm9wcy5zdHlsZSkge1xuICAgIG5ld1Byb3BzID0gX2V4dGVuZHMoe30sIG5ld1Byb3BzLCB7IHN0eWxlOiBuZXdTdHlsZSB9KTtcbiAgfVxuXG4gIHJldHVybiBuZXdQcm9wcztcbn07XG5cbi8vIFdyYXBwZXIgYXJvdW5kIFJlYWN0LmNsb25lRWxlbWVudC4gVG8gYXZvaWQgcHJvY2Vzc2luZyB0aGUgc2FtZSBlbGVtZW50XG4vLyB0d2ljZSwgd2hlbmV2ZXIgd2UgY2xvbmUgYW4gZWxlbWVudCBhZGQgYSBzcGVjaWFsIHByb3AgdG8gbWFrZSBzdXJlIHdlIGRvbid0XG4vLyBwcm9jZXNzIHRoaXMgZWxlbWVudCBhZ2Fpbi5cbnZhciBfY2xvbmVFbGVtZW50ID0gZnVuY3Rpb24gX2Nsb25lRWxlbWVudChyZW5kZXJlZEVsZW1lbnQsIG5ld1Byb3BzLCBuZXdDaGlsZHJlbikge1xuICAvLyBPbmx5IGFkZCBmbGFnIGlmIHRoaXMgaXMgYSBub3JtYWwgRE9NIGVsZW1lbnRcbiAgaWYgKHR5cGVvZiByZW5kZXJlZEVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBuZXdQcm9wcyA9IF9leHRlbmRzKHt9LCBuZXdQcm9wcywgeyAnZGF0YS1yYWRpdW0nOiB0cnVlIH0pO1xuICB9XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQocmVuZGVyZWRFbGVtZW50LCBuZXdQcm9wcywgbmV3Q2hpbGRyZW4pO1xufTtcblxuLy9cbi8vIFRoZSBudWNsZXVzIG9mIFJhZGl1bS4gcmVzb2x2ZVN0eWxlcyBpcyBjYWxsZWQgb24gdGhlIHJlbmRlcmVkIGVsZW1lbnRzXG4vLyBiZWZvcmUgdGhleSBhcmUgcmV0dXJuZWQgaW4gcmVuZGVyLiBJdCBpdGVyYXRlcyBvdmVyIHRoZSBlbGVtZW50cyBhbmRcbi8vIGNoaWxkcmVuLCByZXdyaXRpbmcgcHJvcHMgdG8gYWRkIGV2ZW50IGhhbmRsZXJzIHJlcXVpcmVkIHRvIGNhcHR1cmUgdXNlclxuLy8gaW50ZXJhY3Rpb25zIChlLmcuIG1vdXNlIG92ZXIpLiBJdCBhbHNvIHJlcGxhY2VzIHRoZSBzdHlsZSBwcm9wIGJlY2F1c2UgaXRcbi8vIGFkZHMgaW4gdGhlIHZhcmlvdXMgaW50ZXJhY3Rpb24gc3R5bGVzIChlLmcuIDpob3ZlcikuXG4vL1xucmVzb2x2ZVN0eWxlcyA9IGZ1bmN0aW9uIHJlc29sdmVTdHlsZXMoY29tcG9uZW50LCAvLyBSZWFjdENvbXBvbmVudCwgZmxvdytlc2xpbnQgY29tcGxhaW5pbmdcbnJlbmRlcmVkRWxlbWVudCkge1xuICB2YXIgY29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBERUZBVUxUX0NPTkZJRztcbiAgdmFyIGV4aXN0aW5nS2V5TWFwID0gYXJndW1lbnRzWzNdO1xuICB2YXIgc2hvdWxkQ2hlY2tCZWZvcmVSZXNvbHZlID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTtcblxuICAvLyBSZWFjdEVsZW1lbnRcbiAgZXhpc3RpbmdLZXlNYXAgPSBleGlzdGluZ0tleU1hcCB8fCB7fTtcbiAgaWYgKCFyZW5kZXJlZEVsZW1lbnQgfHxcbiAgLy8gQmFpbCBpZiB3ZSd2ZSBhbHJlYWR5IHByb2Nlc3NlZCB0aGlzIGVsZW1lbnQuIFRoaXMgZW5zdXJlcyB0aGF0IG9ubHkgdGhlXG4gIC8vIG93bmVyIG9mIGFuIGVsZW1lbnQgcHJvY2Vzc2VzIHRoYXQgZWxlbWVudCwgc2luY2UgdGhlIG93bmVyJ3MgcmVuZGVyXG4gIC8vIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGZpcnN0ICh3aGljaCB3aWxsIGFsd2F5cyBiZSB0aGUgY2FzZSwgc2luY2UgeW91XG4gIC8vIGNhbid0IGtub3cgd2hhdCBlbHNlIHRvIHJlbmRlciB1bnRpbCB5b3UgcmVuZGVyIHRoZSBwYXJlbnQgY29tcG9uZW50KS5cbiAgcmVuZGVyZWRFbGVtZW50LnByb3BzICYmIHJlbmRlcmVkRWxlbWVudC5wcm9wc1snZGF0YS1yYWRpdW0nXSB8fFxuICAvLyBCYWlsIGlmIHRoaXMgZWxlbWVudCBpcyBhIHJhZGl1bSBlbmhhbmNlZCBlbGVtZW50LCBiZWNhdXNlIGlmIGl0IGlzLFxuICAvLyB0aGVuIGl0IHdpbGwgdGFrZSBjYXJlIG9mIHJlc29sdmluZyBpdHMgb3duIHN0eWxlcy5cbiAgc2hvdWxkQ2hlY2tCZWZvcmVSZXNvbHZlICYmICFfc2hvdWxkUmVzb2x2ZVN0eWxlcyhyZW5kZXJlZEVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIHJlbmRlcmVkRWxlbWVudDtcbiAgfVxuXG4gIHZhciBuZXdDaGlsZHJlbiA9IF9yZXNvbHZlQ2hpbGRyZW4oe1xuICAgIGNoaWxkcmVuOiByZW5kZXJlZEVsZW1lbnQucHJvcHMuY2hpbGRyZW4sXG4gICAgY29tcG9uZW50OiBjb21wb25lbnQsXG4gICAgY29uZmlnOiBjb25maWcsXG4gICAgZXhpc3RpbmdLZXlNYXA6IGV4aXN0aW5nS2V5TWFwXG4gIH0pO1xuXG4gIHZhciBuZXdQcm9wcyA9IF9yZXNvbHZlUHJvcHMoe1xuICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgIGNvbmZpZzogY29uZmlnLFxuICAgIGV4aXN0aW5nS2V5TWFwOiBleGlzdGluZ0tleU1hcCxcbiAgICBwcm9wczogcmVuZGVyZWRFbGVtZW50LnByb3BzXG4gIH0pO1xuXG4gIG5ld1Byb3BzID0gX3J1blBsdWdpbnMoe1xuICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgIGNvbmZpZzogY29uZmlnLFxuICAgIGV4aXN0aW5nS2V5TWFwOiBleGlzdGluZ0tleU1hcCxcbiAgICBwcm9wczogbmV3UHJvcHMsXG4gICAgcmVuZGVyZWRFbGVtZW50OiByZW5kZXJlZEVsZW1lbnRcbiAgfSk7XG5cbiAgLy8gSWYgbm90aGluZyBjaGFuZ2VkLCBkb24ndCBib3RoZXIgY2xvbmluZyB0aGUgZWxlbWVudC4gTWlnaHQgYmUgYSBiaXRcbiAgLy8gd2FzdGVmdWwsIGFzIHdlIGFkZCB0aGUgc2VudGluYWwgdG8gc3RvcCBkb3VibGUtcHJvY2Vzc2luZyB3aGVuIHdlIGNsb25lLlxuICAvLyBBc3N1bWUgYmVuaWduIGRvdWJsZS1wcm9jZXNzaW5nIGlzIGJldHRlciB0aGFuIHVubmVlZGVkIGNsb25pbmcuXG4gIGlmIChuZXdDaGlsZHJlbiA9PT0gcmVuZGVyZWRFbGVtZW50LnByb3BzLmNoaWxkcmVuICYmIG5ld1Byb3BzID09PSByZW5kZXJlZEVsZW1lbnQucHJvcHMpIHtcbiAgICByZXR1cm4gcmVuZGVyZWRFbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIF9jbG9uZUVsZW1lbnQocmVuZGVyZWRFbGVtZW50LCBuZXdQcm9wcyAhPT0gcmVuZGVyZWRFbGVtZW50LnByb3BzID8gbmV3UHJvcHMgOiB7fSwgbmV3Q2hpbGRyZW4pO1xufTtcblxuLy8gT25seSBmb3IgdXNlIGJ5IHRlc3RzXG52YXIgX19pc1Rlc3RNb2RlRW5hYmxlZCA9IGZhbHNlO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgcmVzb2x2ZVN0eWxlcy5fX2NsZWFyU3RhdGVGb3JUZXN0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBnbG9iYWxTdGF0ZSA9IHt9O1xuICB9O1xuICByZXNvbHZlU3R5bGVzLl9fc2V0VGVzdE1vZGUgPSBmdW5jdGlvbiAoaXNFbmFibGVkKSB7XG4gICAgX19pc1Rlc3RNb2RlRW5hYmxlZCA9IGlzRW5hYmxlZDtcbiAgfTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gcmVzb2x2ZVN0eWxlcztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmFkaXVtL2xpYi9yZXNvbHZlLXN0eWxlcy5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDU1MgcHJvcGVydGllcyB3aGljaCBhY2NlcHQgbnVtYmVycyBidXQgYXJlIG5vdCBpbiB1bml0cyBvZiBcInB4XCIuXG4gKi9cblxudmFyIGlzVW5pdGxlc3NOdW1iZXIgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiB0cnVlLFxuICBib3JkZXJJbWFnZU91dHNldDogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VTbGljZTogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogdHJ1ZSxcbiAgYm94RmxleDogdHJ1ZSxcbiAgYm94RmxleEdyb3VwOiB0cnVlLFxuICBib3hPcmRpbmFsR3JvdXA6IHRydWUsXG4gIGNvbHVtbkNvdW50OiB0cnVlLFxuICBjb2x1bW5zOiB0cnVlLFxuICBmbGV4OiB0cnVlLFxuICBmbGV4R3JvdzogdHJ1ZSxcbiAgZmxleFBvc2l0aXZlOiB0cnVlLFxuICBmbGV4U2hyaW5rOiB0cnVlLFxuICBmbGV4TmVnYXRpdmU6IHRydWUsXG4gIGZsZXhPcmRlcjogdHJ1ZSxcbiAgZ3JpZFJvdzogdHJ1ZSxcbiAgZ3JpZFJvd0VuZDogdHJ1ZSxcbiAgZ3JpZFJvd1NwYW46IHRydWUsXG4gIGdyaWRSb3dTdGFydDogdHJ1ZSxcbiAgZ3JpZENvbHVtbjogdHJ1ZSxcbiAgZ3JpZENvbHVtbkVuZDogdHJ1ZSxcbiAgZ3JpZENvbHVtblNwYW46IHRydWUsXG4gIGdyaWRDb2x1bW5TdGFydDogdHJ1ZSxcbiAgZm9udFdlaWdodDogdHJ1ZSxcbiAgbGluZUNsYW1wOiB0cnVlLFxuICBsaW5lSGVpZ2h0OiB0cnVlLFxuICBvcGFjaXR5OiB0cnVlLFxuICBvcmRlcjogdHJ1ZSxcbiAgb3JwaGFuczogdHJ1ZSxcbiAgdGFiU2l6ZTogdHJ1ZSxcbiAgd2lkb3dzOiB0cnVlLFxuICB6SW5kZXg6IHRydWUsXG4gIHpvb206IHRydWUsXG5cbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogdHJ1ZSxcbiAgZmxvb2RPcGFjaXR5OiB0cnVlLFxuICBzdG9wT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlRGFzaGFycmF5OiB0cnVlLFxuICBzdHJva2VEYXNob2Zmc2V0OiB0cnVlLFxuICBzdHJva2VNaXRlcmxpbWl0OiB0cnVlLFxuICBzdHJva2VPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VXaWR0aDogdHJ1ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IHZlbmRvci1zcGVjaWZpYyBwcmVmaXgsIGVnOiBXZWJraXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgc3R5bGUgbmFtZSwgZWc6IHRyYW5zaXRpb25EdXJhdGlvblxuICogQHJldHVybiB7c3RyaW5nfSBzdHlsZSBuYW1lIHByZWZpeGVkIHdpdGggYHByZWZpeGAsIHByb3Blcmx5IGNhbWVsQ2FzZWQsIGVnOlxuICogV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uXG4gKi9cbmZ1bmN0aW9uIHByZWZpeEtleShwcmVmaXgsIGtleSkge1xuICByZXR1cm4gcHJlZml4ICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cmluZygxKTtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHN0eWxlIG5hbWVzIHRoYXQgbWF5IGNvbWUgcGFzc2VkIGluIHByZWZpeGVkIGJ5IGFkZGluZyBwZXJtdXRhdGlvbnNcbiAqIG9mIHZlbmRvciBwcmVmaXhlcy5cbiAqL1xudmFyIHByZWZpeGVzID0gWydXZWJraXQnLCAnbXMnLCAnTW96JywgJ08nXTtcblxuLy8gVXNpbmcgT2JqZWN0LmtleXMgaGVyZSwgb3IgZWxzZSB0aGUgdmFuaWxsYSBmb3ItaW4gbG9vcCBtYWtlcyBJRTggZ28gaW50byBhblxuLy8gaW5maW5pdGUgbG9vcCwgYmVjYXVzZSBpdCBpdGVyYXRlcyBvdmVyIHRoZSBuZXdseSBhZGRlZCBwcm9wcyB0b28uXG5PYmplY3Qua2V5cyhpc1VuaXRsZXNzTnVtYmVyKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gIHByZWZpeGVzLmZvckVhY2goZnVuY3Rpb24gKHByZWZpeCkge1xuICAgIGlzVW5pdGxlc3NOdW1iZXJbcHJlZml4S2V5KHByZWZpeCwgcHJvcCldID0gaXNVbml0bGVzc051bWJlcltwcm9wXTtcbiAgfSk7XG59KTtcblxuLyoqXG4gKiBNb3N0IHN0eWxlIHByb3BlcnRpZXMgY2FuIGJlIHVuc2V0IGJ5IGRvaW5nIC5zdHlsZVtwcm9wXSA9ICcnIGJ1dCBJRThcbiAqIGRvZXNuJ3QgbGlrZSBkb2luZyB0aGF0IHdpdGggc2hvcnRoYW5kIHByb3BlcnRpZXMgc28gZm9yIHRoZSBwcm9wZXJ0aWVzIHRoYXRcbiAqIElFOCBicmVha3Mgb24sIHdoaWNoIGFyZSBsaXN0ZWQgaGVyZSwgd2UgaW5zdGVhZCB1bnNldCBlYWNoIG9mIHRoZVxuICogaW5kaXZpZHVhbCBwcm9wZXJ0aWVzLiBTZWUgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzODUuXG4gKiBUaGUgNC12YWx1ZSAnY2xvY2snIHByb3BlcnRpZXMgbGlrZSBtYXJnaW4sIHBhZGRpbmcsIGJvcmRlci13aWR0aCBzZWVtIHRvXG4gKiBiZWhhdmUgd2l0aG91dCBhbnkgcHJvYmxlbXMuIEN1cmlvdXNseSwgbGlzdC1zdHlsZSB3b3JrcyB0b28gd2l0aG91dCBhbnlcbiAqIHNwZWNpYWwgcHJvZGRpbmcuXG4gKi9cbnZhciBzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnMgPSB7XG4gIGJhY2tncm91bmQ6IHtcbiAgICBiYWNrZ3JvdW5kQXR0YWNobWVudDogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRydWUsXG4gICAgYmFja2dyb3VuZEltYWdlOiB0cnVlLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblg6IHRydWUsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uWTogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kUmVwZWF0OiB0cnVlXG4gIH0sXG4gIGJhY2tncm91bmRQb3NpdGlvbjoge1xuICAgIGJhY2tncm91bmRQb3NpdGlvblg6IHRydWUsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uWTogdHJ1ZVxuICB9LFxuICBib3JkZXI6IHtcbiAgICBib3JkZXJXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJCb3R0b206IHtcbiAgICBib3JkZXJCb3R0b21XaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJCb3R0b21TdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJCb3R0b21Db2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJMZWZ0OiB7XG4gICAgYm9yZGVyTGVmdFdpZHRoOiB0cnVlLFxuICAgIGJvcmRlckxlZnRTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJMZWZ0Q29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyUmlnaHQ6IHtcbiAgICBib3JkZXJSaWdodFdpZHRoOiB0cnVlLFxuICAgIGJvcmRlclJpZ2h0U3R5bGU6IHRydWUsXG4gICAgYm9yZGVyUmlnaHRDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJUb3A6IHtcbiAgICBib3JkZXJUb3BXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJUb3BTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJUb3BDb2xvcjogdHJ1ZVxuICB9LFxuICBmb250OiB7XG4gICAgZm9udFN0eWxlOiB0cnVlLFxuICAgIGZvbnRWYXJpYW50OiB0cnVlLFxuICAgIGZvbnRXZWlnaHQ6IHRydWUsXG4gICAgZm9udFNpemU6IHRydWUsXG4gICAgbGluZUhlaWdodDogdHJ1ZSxcbiAgICBmb250RmFtaWx5OiB0cnVlXG4gIH0sXG4gIG91dGxpbmU6IHtcbiAgICBvdXRsaW5lV2lkdGg6IHRydWUsXG4gICAgb3V0bGluZVN0eWxlOiB0cnVlLFxuICAgIG91dGxpbmVDb2xvcjogdHJ1ZVxuICB9XG59O1xuXG52YXIgQ1NTUHJvcGVydHkgPSB7XG4gIGlzVW5pdGxlc3NOdW1iZXI6IGlzVW5pdGxlc3NOdW1iZXIsXG4gIHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uczogc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENTU1Byb3BlcnR5O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9DU1NQcm9wZXJ0eS5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHBzZXVkby1ldmVudCBtb2R1bGUgdG8gaGVscCBrZWVwIHRyYWNrIG9mIGNvbXBvbmVudHMgd2FpdGluZyB0b1xuICogYmUgbm90aWZpZWQgd2hlbiB0aGVpciBET00gcmVwcmVzZW50YXRpb25zIGFyZSBhdmFpbGFibGUgZm9yIHVzZS5cbiAqXG4gKiBUaGlzIGltcGxlbWVudHMgYFBvb2xlZENsYXNzYCwgc28geW91IHNob3VsZCBuZXZlciBuZWVkIHRvIGluc3RhbnRpYXRlIHRoaXMuXG4gKiBJbnN0ZWFkLCB1c2UgYENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKClgLlxuICpcbiAqIEBjbGFzcyBSZWFjdE1vdW50UmVhZHlcbiAqIEBpbXBsZW1lbnRzIFBvb2xlZENsYXNzXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG52YXIgQ2FsbGJhY2tRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ2FsbGJhY2tRdWV1ZShhcmcpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2FsbGJhY2tRdWV1ZSk7XG5cbiAgICB0aGlzLl9jYWxsYmFja3MgPSBudWxsO1xuICAgIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbiAgICB0aGlzLl9hcmcgPSBhcmc7XG4gIH1cblxuICAvKipcbiAgICogRW5xdWV1ZXMgYSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdoZW4gYG5vdGlmeUFsbGAgaXMgaW52b2tlZC5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgSW52b2tlZCB3aGVuIGBub3RpZnlBbGxgIGlzIGludm9rZWQuXG4gICAqIEBwYXJhbSB7P29iamVjdH0gY29udGV4dCBDb250ZXh0IHRvIGNhbGwgYGNhbGxiYWNrYCB3aXRoLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cblxuICBDYWxsYmFja1F1ZXVlLnByb3RvdHlwZS5lbnF1ZXVlID0gZnVuY3Rpb24gZW5xdWV1ZShjYWxsYmFjaywgY29udGV4dCkge1xuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCBbXTtcbiAgICB0aGlzLl9jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgdGhpcy5fY29udGV4dHMgPSB0aGlzLl9jb250ZXh0cyB8fCBbXTtcbiAgICB0aGlzLl9jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJbnZva2VzIGFsbCBlbnF1ZXVlZCBjYWxsYmFja3MgYW5kIGNsZWFycyB0aGUgcXVldWUuIFRoaXMgaXMgaW52b2tlZCBhZnRlclxuICAgKiB0aGUgRE9NIHJlcHJlc2VudGF0aW9uIG9mIGEgY29tcG9uZW50IGhhcyBiZWVuIGNyZWF0ZWQgb3IgdXBkYXRlZC5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuXG5cbiAgQ2FsbGJhY2tRdWV1ZS5wcm90b3R5cGUubm90aWZ5QWxsID0gZnVuY3Rpb24gbm90aWZ5QWxsKCkge1xuICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3M7XG4gICAgdmFyIGNvbnRleHRzID0gdGhpcy5fY29udGV4dHM7XG4gICAgdmFyIGFyZyA9IHRoaXMuX2FyZztcbiAgICBpZiAoY2FsbGJhY2tzICYmIGNvbnRleHRzKSB7XG4gICAgICAhKGNhbGxiYWNrcy5sZW5ndGggPT09IGNvbnRleHRzLmxlbmd0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTWlzbWF0Y2hlZCBsaXN0IG9mIGNvbnRleHRzIGluIGNhbGxiYWNrIHF1ZXVlJykgOiBfcHJvZEludmFyaWFudCgnMjQnKSA6IHZvaWQgMDtcbiAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gICAgICB0aGlzLl9jb250ZXh0cyA9IG51bGw7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsYmFja3NbaV0uY2FsbChjb250ZXh0c1tpXSwgYXJnKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgICAgY29udGV4dHMubGVuZ3RoID0gMDtcbiAgICB9XG4gIH07XG5cbiAgQ2FsbGJhY2tRdWV1ZS5wcm90b3R5cGUuY2hlY2twb2ludCA9IGZ1bmN0aW9uIGNoZWNrcG9pbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrcyA/IHRoaXMuX2NhbGxiYWNrcy5sZW5ndGggOiAwO1xuICB9O1xuXG4gIENhbGxiYWNrUXVldWUucHJvdG90eXBlLnJvbGxiYWNrID0gZnVuY3Rpb24gcm9sbGJhY2sobGVuKSB7XG4gICAgaWYgKHRoaXMuX2NhbGxiYWNrcyAmJiB0aGlzLl9jb250ZXh0cykge1xuICAgICAgdGhpcy5fY2FsbGJhY2tzLmxlbmd0aCA9IGxlbjtcbiAgICAgIHRoaXMuX2NvbnRleHRzLmxlbmd0aCA9IGxlbjtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGUgaW50ZXJuYWwgcXVldWUuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cblxuXG4gIENhbGxiYWNrUXVldWUucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgICB0aGlzLl9jb250ZXh0cyA9IG51bGw7XG4gIH07XG5cbiAgLyoqXG4gICAqIGBQb29sZWRDbGFzc2AgbG9va3MgZm9yIHRoaXMuXG4gICAqL1xuXG5cbiAgQ2FsbGJhY2tRdWV1ZS5wcm90b3R5cGUuZGVzdHJ1Y3RvciA9IGZ1bmN0aW9uIGRlc3RydWN0b3IoKSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9O1xuXG4gIHJldHVybiBDYWxsYmFja1F1ZXVlO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhDYWxsYmFja1F1ZXVlKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvQ2FsbGJhY2tRdWV1ZS5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eScpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG52YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG5cbnZhciBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlciA9IHJlcXVpcmUoJy4vcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXInKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVggPSBuZXcgUmVnRXhwKCdeWycgKyBET01Qcm9wZXJ0eS5BVFRSSUJVVEVfTkFNRV9TVEFSVF9DSEFSICsgJ11bJyArIERPTVByb3BlcnR5LkFUVFJJQlVURV9OQU1FX0NIQVIgKyAnXSokJyk7XG52YXIgaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9O1xudmFyIHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBpc0F0dHJpYnV0ZU5hbWVTYWZlKGF0dHJpYnV0ZU5hbWUpIHtcbiAgaWYgKHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZS5oYXNPd25Qcm9wZXJ0eShhdHRyaWJ1dGVOYW1lKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlLmhhc093blByb3BlcnR5KGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWC50ZXN0KGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgdmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlW2F0dHJpYnV0ZU5hbWVdID0gdHJ1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlW2F0dHJpYnV0ZU5hbWVdID0gdHJ1ZTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdJbnZhbGlkIGF0dHJpYnV0ZSBuYW1lOiBgJXNgJywgYXR0cmlidXRlTmFtZSkgOiB2b2lkIDA7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkSWdub3JlVmFsdWUocHJvcGVydHlJbmZvLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCB8fCBwcm9wZXJ0eUluZm8uaGFzQm9vbGVhblZhbHVlICYmICF2YWx1ZSB8fCBwcm9wZXJ0eUluZm8uaGFzTnVtZXJpY1ZhbHVlICYmIGlzTmFOKHZhbHVlKSB8fCBwcm9wZXJ0eUluZm8uaGFzUG9zaXRpdmVOdW1lcmljVmFsdWUgJiYgdmFsdWUgPCAxIHx8IHByb3BlcnR5SW5mby5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlICYmIHZhbHVlID09PSBmYWxzZTtcbn1cblxuLyoqXG4gKiBPcGVyYXRpb25zIGZvciBkZWFsaW5nIHdpdGggRE9NIHByb3BlcnRpZXMuXG4gKi9cbnZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgdGhlIElEIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVW5lc2NhcGVkIElELlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBzdHJpbmcuXG4gICAqL1xuICBjcmVhdGVNYXJrdXBGb3JJRDogZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuIERPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FICsgJz0nICsgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIoaWQpO1xuICB9LFxuXG4gIHNldEF0dHJpYnV0ZUZvcklEOiBmdW5jdGlvbiAobm9kZSwgaWQpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRSwgaWQpO1xuICB9LFxuXG4gIGNyZWF0ZU1hcmt1cEZvclJvb3Q6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gRE9NUHJvcGVydHkuUk9PVF9BVFRSSUJVVEVfTkFNRSArICc9XCJcIic7XG4gIH0sXG5cbiAgc2V0QXR0cmlidXRlRm9yUm9vdDogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShET01Qcm9wZXJ0eS5ST09UX0FUVFJJQlVURV9OQU1FLCAnJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgbWFya3VwIGZvciBhIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEByZXR1cm4gez9zdHJpbmd9IE1hcmt1cCBzdHJpbmcsIG9yIG51bGwgaWYgdGhlIHByb3BlcnR5IHdhcyBpbnZhbGlkLlxuICAgKi9cbiAgY3JlYXRlTWFya3VwRm9yUHJvcGVydHk6IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBwcm9wZXJ0eUluZm8gPSBET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5hbWUpID8gRE9NUHJvcGVydHkucHJvcGVydGllc1tuYW1lXSA6IG51bGw7XG4gICAgaWYgKHByb3BlcnR5SW5mbykge1xuICAgICAgaWYgKHNob3VsZElnbm9yZVZhbHVlKHByb3BlcnR5SW5mbywgdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gcHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWU7XG4gICAgICBpZiAocHJvcGVydHlJbmZvLmhhc0Jvb2xlYW5WYWx1ZSB8fCBwcm9wZXJ0eUluZm8uaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZSAmJiB2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gYXR0cmlidXRlTmFtZSArICc9XCJcIic7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXR0cmlidXRlTmFtZSArICc9JyArIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmFtZSArICc9JyArIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgbWFya3VwIGZvciBhIGN1c3RvbSBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBzdHJpbmcsIG9yIGVtcHR5IHN0cmluZyBpZiB0aGUgcHJvcGVydHkgd2FzIGludmFsaWQuXG4gICAqL1xuICBjcmVhdGVNYXJrdXBGb3JDdXN0b21BdHRyaWJ1dGU6IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgIGlmICghaXNBdHRyaWJ1dGVOYW1lU2FmZShuYW1lKSB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBuYW1lICsgJz0nICsgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2YWx1ZSBmb3IgYSBwcm9wZXJ0eSBvbiBhIG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqL1xuICBzZXRWYWx1ZUZvclByb3BlcnR5OiBmdW5jdGlvbiAobm9kZSwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgcHJvcGVydHlJbmZvID0gRE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IERPTVByb3BlcnR5LnByb3BlcnRpZXNbbmFtZV0gOiBudWxsO1xuICAgIGlmIChwcm9wZXJ0eUluZm8pIHtcbiAgICAgIHZhciBtdXRhdGlvbk1ldGhvZCA9IHByb3BlcnR5SW5mby5tdXRhdGlvbk1ldGhvZDtcbiAgICAgIGlmIChtdXRhdGlvbk1ldGhvZCkge1xuICAgICAgICBtdXRhdGlvbk1ldGhvZChub2RlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHNob3VsZElnbm9yZVZhbHVlKHByb3BlcnR5SW5mbywgdmFsdWUpKSB7XG4gICAgICAgIHRoaXMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShub2RlLCBuYW1lKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eUluZm8ubXVzdFVzZVByb3BlcnR5KSB7XG4gICAgICAgIC8vIENvbnRyYXJ5IHRvIGBzZXRBdHRyaWJ1dGVgLCBvYmplY3QgcHJvcGVydGllcyBhcmUgcHJvcGVybHlcbiAgICAgICAgLy8gYHRvU3RyaW5nYGVkIGJ5IElFOC85LlxuICAgICAgICBub2RlW3Byb3BlcnR5SW5mby5wcm9wZXJ0eU5hbWVdID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lO1xuICAgICAgICB2YXIgbmFtZXNwYWNlID0gcHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWVzcGFjZTtcbiAgICAgICAgLy8gYHNldEF0dHJpYnV0ZWAgd2l0aCBvYmplY3RzIGJlY29tZXMgb25seSBgW29iamVjdF1gIGluIElFOC85LFxuICAgICAgICAvLyAoJycgKyB2YWx1ZSkgbWFrZXMgaXQgb3V0cHV0IHRoZSBjb3JyZWN0IHRvU3RyaW5nKCktdmFsdWUuXG4gICAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZU5TKG5hbWVzcGFjZSwgYXR0cmlidXRlTmFtZSwgJycgKyB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlJbmZvLmhhc0Jvb2xlYW5WYWx1ZSB8fCBwcm9wZXJ0eUluZm8uaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZSAmJiB2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsICcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCAnJyArIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvckF0dHJpYnV0ZShub2RlLCBuYW1lLCB2YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBwYXlsb2FkID0ge307XG4gICAgICBwYXlsb2FkW25hbWVdID0gdmFsdWU7XG4gICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Ib3N0T3BlcmF0aW9uKHtcbiAgICAgICAgaW5zdGFuY2VJRDogUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUobm9kZSkuX2RlYnVnSUQsXG4gICAgICAgIHR5cGU6ICd1cGRhdGUgYXR0cmlidXRlJyxcbiAgICAgICAgcGF5bG9hZDogcGF5bG9hZFxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIHNldFZhbHVlRm9yQXR0cmlidXRlOiBmdW5jdGlvbiAobm9kZSwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoIWlzQXR0cmlidXRlTmFtZVNhZmUobmFtZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCAnJyArIHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHBheWxvYWQgPSB7fTtcbiAgICAgIHBheWxvYWRbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkhvc3RPcGVyYXRpb24oe1xuICAgICAgICBpbnN0YW5jZUlEOiBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShub2RlKS5fZGVidWdJRCxcbiAgICAgICAgdHlwZTogJ3VwZGF0ZSBhdHRyaWJ1dGUnLFxuICAgICAgICBwYXlsb2FkOiBwYXlsb2FkXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYW4gYXR0cmlidXRlcyBmcm9tIGEgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqL1xuICBkZWxldGVWYWx1ZUZvckF0dHJpYnV0ZTogZnVuY3Rpb24gKG5vZGUsIG5hbWUpIHtcbiAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7XG4gICAgICAgIGluc3RhbmNlSUQ6IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKG5vZGUpLl9kZWJ1Z0lELFxuICAgICAgICB0eXBlOiAncmVtb3ZlIGF0dHJpYnV0ZScsXG4gICAgICAgIHBheWxvYWQ6IG5hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGVsZXRlcyB0aGUgdmFsdWUgZm9yIGEgcHJvcGVydHkgb24gYSBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICovXG4gIGRlbGV0ZVZhbHVlRm9yUHJvcGVydHk6IGZ1bmN0aW9uIChub2RlLCBuYW1lKSB7XG4gICAgdmFyIHByb3BlcnR5SW5mbyA9IERPTVByb3BlcnR5LnByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzW25hbWVdIDogbnVsbDtcbiAgICBpZiAocHJvcGVydHlJbmZvKSB7XG4gICAgICB2YXIgbXV0YXRpb25NZXRob2QgPSBwcm9wZXJ0eUluZm8ubXV0YXRpb25NZXRob2Q7XG4gICAgICBpZiAobXV0YXRpb25NZXRob2QpIHtcbiAgICAgICAgbXV0YXRpb25NZXRob2Qobm9kZSwgdW5kZWZpbmVkKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlJbmZvLm11c3RVc2VQcm9wZXJ0eSkge1xuICAgICAgICB2YXIgcHJvcE5hbWUgPSBwcm9wZXJ0eUluZm8ucHJvcGVydHlOYW1lO1xuICAgICAgICBpZiAocHJvcGVydHlJbmZvLmhhc0Jvb2xlYW5WYWx1ZSkge1xuICAgICAgICAgIG5vZGVbcHJvcE5hbWVdID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZVtwcm9wTmFtZV0gPSAnJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUocHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Ib3N0T3BlcmF0aW9uKHtcbiAgICAgICAgaW5zdGFuY2VJRDogUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUobm9kZSkuX2RlYnVnSUQsXG4gICAgICAgIHR5cGU6ICdyZW1vdmUgYXR0cmlidXRlJyxcbiAgICAgICAgcGF5bG9hZDogbmFtZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTVByb3BlcnR5T3BlcmF0aW9ucztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvRE9NUHJvcGVydHlPcGVyYXRpb25zLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RET01Db21wb25lbnRGbGFncyA9IHtcbiAgaGFzQ2FjaGVkQ2hpbGROb2RlczogMSA8PCAwXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NQ29tcG9uZW50RmxhZ3M7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NQ29tcG9uZW50RmxhZ3MuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciB2YWxpZGF0ZURPTU5lc3RpbmcgPSByZXF1aXJlKCcuL3ZhbGlkYXRlRE9NTmVzdGluZycpO1xuXG52YXIgRE9DX05PREVfVFlQRSA9IDk7XG5cbmZ1bmN0aW9uIFJlYWN0RE9NQ29udGFpbmVySW5mbyh0b3BMZXZlbFdyYXBwZXIsIG5vZGUpIHtcbiAgdmFyIGluZm8gPSB7XG4gICAgX3RvcExldmVsV3JhcHBlcjogdG9wTGV2ZWxXcmFwcGVyLFxuICAgIF9pZENvdW50ZXI6IDEsXG4gICAgX293bmVyRG9jdW1lbnQ6IG5vZGUgPyBub2RlLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFID8gbm9kZSA6IG5vZGUub3duZXJEb2N1bWVudCA6IG51bGwsXG4gICAgX25vZGU6IG5vZGUsXG4gICAgX3RhZzogbm9kZSA/IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA6IG51bGwsXG4gICAgX25hbWVzcGFjZVVSSTogbm9kZSA/IG5vZGUubmFtZXNwYWNlVVJJIDogbnVsbFxuICB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGluZm8uX2FuY2VzdG9ySW5mbyA9IG5vZGUgPyB2YWxpZGF0ZURPTU5lc3RpbmcudXBkYXRlZEFuY2VzdG9ySW5mbyhudWxsLCBpbmZvLl90YWcsIG51bGwpIDogbnVsbDtcbiAgfVxuICByZXR1cm4gaW5mbztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUNvbnRhaW5lckluZm87XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NQ29udGFpbmVySW5mby5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBMaW5rZWRWYWx1ZVV0aWxzID0gcmVxdWlyZSgnLi9MaW5rZWRWYWx1ZVV0aWxzJyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIGRpZFdhcm5WYWx1ZUxpbmsgPSBmYWxzZTtcbnZhciBkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUgPSBmYWxzZTtcblxuZnVuY3Rpb24gdXBkYXRlT3B0aW9uc0lmUGVuZGluZ1VwZGF0ZUFuZE1vdW50ZWQoKSB7XG4gIGlmICh0aGlzLl9yb290Tm9kZUlEICYmIHRoaXMuX3dyYXBwZXJTdGF0ZS5wZW5kaW5nVXBkYXRlKSB7XG4gICAgdGhpcy5fd3JhcHBlclN0YXRlLnBlbmRpbmdVcGRhdGUgPSBmYWxzZTtcblxuICAgIHZhciBwcm9wcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUocHJvcHMpO1xuXG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIHVwZGF0ZU9wdGlvbnModGhpcywgQm9vbGVhbihwcm9wcy5tdWx0aXBsZSksIHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKG93bmVyKSB7XG4gIGlmIChvd25lcikge1xuICAgIHZhciBuYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbnZhciB2YWx1ZVByb3BOYW1lcyA9IFsndmFsdWUnLCAnZGVmYXVsdFZhbHVlJ107XG5cbi8qKlxuICogVmFsaWRhdGlvbiBmdW5jdGlvbiBmb3IgYHZhbHVlYCBhbmQgYGRlZmF1bHRWYWx1ZWAuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjaGVja1NlbGVjdFByb3BUeXBlcyhpbnN0LCBwcm9wcykge1xuICB2YXIgb3duZXIgPSBpbnN0Ll9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gIExpbmtlZFZhbHVlVXRpbHMuY2hlY2tQcm9wVHlwZXMoJ3NlbGVjdCcsIHByb3BzLCBvd25lcik7XG5cbiAgaWYgKHByb3BzLnZhbHVlTGluayAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuVmFsdWVMaW5rKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdgdmFsdWVMaW5rYCBwcm9wIG9uIGBzZWxlY3RgIGlzIGRlcHJlY2F0ZWQ7IHNldCBgdmFsdWVgIGFuZCBgb25DaGFuZ2VgIGluc3RlYWQuJykgOiB2b2lkIDA7XG4gICAgZGlkV2FyblZhbHVlTGluayA9IHRydWU7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlUHJvcE5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByb3BOYW1lID0gdmFsdWVQcm9wTmFtZXNbaV07XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHByb3BzW3Byb3BOYW1lXSk7XG4gICAgaWYgKHByb3BzLm11bHRpcGxlICYmICFpc0FycmF5KSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1RoZSBgJXNgIHByb3Agc3VwcGxpZWQgdG8gPHNlbGVjdD4gbXVzdCBiZSBhbiBhcnJheSBpZiAnICsgJ2BtdWx0aXBsZWAgaXMgdHJ1ZS4lcycsIHByb3BOYW1lLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpKSA6IHZvaWQgMDtcbiAgICB9IGVsc2UgaWYgKCFwcm9wcy5tdWx0aXBsZSAmJiBpc0FycmF5KSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1RoZSBgJXNgIHByb3Agc3VwcGxpZWQgdG8gPHNlbGVjdD4gbXVzdCBiZSBhIHNjYWxhciAnICsgJ3ZhbHVlIGlmIGBtdWx0aXBsZWAgaXMgZmFsc2UuJXMnLCBwcm9wTmFtZSwgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKG93bmVyKSkgOiB2b2lkIDA7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdERPTUNvbXBvbmVudH0gaW5zdFxuICogQHBhcmFtIHtib29sZWFufSBtdWx0aXBsZVxuICogQHBhcmFtIHsqfSBwcm9wVmFsdWUgQSBzdHJpbmdhYmxlICh3aXRoIGBtdWx0aXBsZWAsIGEgbGlzdCBvZiBzdHJpbmdhYmxlcykuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB1cGRhdGVPcHRpb25zKGluc3QsIG11bHRpcGxlLCBwcm9wVmFsdWUpIHtcbiAgdmFyIHNlbGVjdGVkVmFsdWUsIGk7XG4gIHZhciBvcHRpb25zID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCkub3B0aW9ucztcblxuICBpZiAobXVsdGlwbGUpIHtcbiAgICBzZWxlY3RlZFZhbHVlID0ge307XG4gICAgZm9yIChpID0gMDsgaSA8IHByb3BWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgc2VsZWN0ZWRWYWx1ZVsnJyArIHByb3BWYWx1ZVtpXV0gPSB0cnVlO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNlbGVjdGVkID0gc2VsZWN0ZWRWYWx1ZS5oYXNPd25Qcm9wZXJ0eShvcHRpb25zW2ldLnZhbHVlKTtcbiAgICAgIGlmIChvcHRpb25zW2ldLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkge1xuICAgICAgICBvcHRpb25zW2ldLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIERvIG5vdCBzZXQgYHNlbGVjdC52YWx1ZWAgYXMgZXhhY3QgYmVoYXZpb3IgaXNuJ3QgY29uc2lzdGVudCBhY3Jvc3MgYWxsXG4gICAgLy8gYnJvd3NlcnMgZm9yIGFsbCBjYXNlcy5cbiAgICBzZWxlY3RlZFZhbHVlID0gJycgKyBwcm9wVmFsdWU7XG4gICAgZm9yIChpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChvcHRpb25zW2ldLnZhbHVlID09PSBzZWxlY3RlZFZhbHVlKSB7XG4gICAgICAgIG9wdGlvbnNbaV0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmxlbmd0aCkge1xuICAgICAgb3B0aW9uc1swXS5zZWxlY3RlZCA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhIDxzZWxlY3Q+IGhvc3QgY29tcG9uZW50IHRoYXQgYWxsb3dzIG9wdGlvbmFsbHkgc2V0dGluZyB0aGVcbiAqIHByb3BzIGB2YWx1ZWAgYW5kIGBkZWZhdWx0VmFsdWVgLiBJZiBgbXVsdGlwbGVgIGlzIGZhbHNlLCB0aGUgcHJvcCBtdXN0IGJlIGFcbiAqIHN0cmluZ2FibGUuIElmIGBtdWx0aXBsZWAgaXMgdHJ1ZSwgdGhlIHByb3AgbXVzdCBiZSBhbiBhcnJheSBvZiBzdHJpbmdhYmxlcy5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnMgdGhhdCBjaGFuZ2UgdGhlXG4gKiBzZWxlY3RlZCBvcHRpb24gd2lsbCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gKlxuICogSWYgaXQgaXMgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgb3B0aW9ucyB3aWxsIG5vdFxuICogdXBkYXRlIGluIHJlc3BvbnNlIHRvIHVzZXIgYWN0aW9ucy4gSW5zdGVhZCwgdGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGNoYW5nZSBpblxuICogb3JkZXIgZm9yIHRoZSByZW5kZXJlZCBvcHRpb25zIHRvIHVwZGF0ZS5cbiAqXG4gKiBJZiBgZGVmYXVsdFZhbHVlYCBpcyBwcm92aWRlZCwgYW55IG9wdGlvbnMgd2l0aCB0aGUgc3VwcGxpZWQgdmFsdWVzIHdpbGwgYmVcbiAqIHNlbGVjdGVkLlxuICovXG52YXIgUmVhY3RET01TZWxlY3QgPSB7XG4gIGdldEhvc3RQcm9wczogZnVuY3Rpb24gKGluc3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIF9hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICBvbkNoYW5nZTogaW5zdC5fd3JhcHBlclN0YXRlLm9uQ2hhbmdlLFxuICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9LFxuXG4gIG1vdW50V3JhcHBlcjogZnVuY3Rpb24gKGluc3QsIHByb3BzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrU2VsZWN0UHJvcFR5cGVzKGluc3QsIHByb3BzKTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICBpbnN0Ll93cmFwcGVyU3RhdGUgPSB7XG4gICAgICBwZW5kaW5nVXBkYXRlOiBmYWxzZSxcbiAgICAgIGluaXRpYWxWYWx1ZTogdmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgbGlzdGVuZXJzOiBudWxsLFxuICAgICAgb25DaGFuZ2U6IF9oYW5kbGVDaGFuZ2UuYmluZChpbnN0KSxcbiAgICAgIHdhc011bHRpcGxlOiBCb29sZWFuKHByb3BzLm11bHRpcGxlKVxuICAgIH07XG5cbiAgICBpZiAocHJvcHMudmFsdWUgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1NlbGVjdCBlbGVtZW50cyBtdXN0IGJlIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAnICsgJyhzcGVjaWZ5IGVpdGhlciB0aGUgdmFsdWUgcHJvcCwgb3IgdGhlIGRlZmF1bHRWYWx1ZSBwcm9wLCBidXQgbm90ICcgKyAnYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgc2VsZWN0ICcgKyAnZWxlbWVudCBhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJykgOiB2b2lkIDA7XG4gICAgICBkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUgPSB0cnVlO1xuICAgIH1cbiAgfSxcblxuICBnZXRTZWxlY3RWYWx1ZUNvbnRleHQ6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgLy8gUmVhY3RET01PcHRpb24gbG9va3MgYXQgdGhpcyBpbml0aWFsIHZhbHVlIHNvIHRoZSBpbml0aWFsIGdlbmVyYXRlZFxuICAgIC8vIG1hcmt1cCBoYXMgY29ycmVjdCBgc2VsZWN0ZWRgIGF0dHJpYnV0ZXNcbiAgICByZXR1cm4gaW5zdC5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtcbiAgfSxcblxuICBwb3N0VXBkYXRlV3JhcHBlcjogZnVuY3Rpb24gKGluc3QpIHtcbiAgICB2YXIgcHJvcHMgPSBpbnN0Ll9jdXJyZW50RWxlbWVudC5wcm9wcztcblxuICAgIC8vIEFmdGVyIHRoZSBpbml0aWFsIG1vdW50LCB3ZSBjb250cm9sIHNlbGVjdGVkLW5lc3MgbWFudWFsbHkgc28gZG9uJ3QgcGFzc1xuICAgIC8vIHRoaXMgdmFsdWUgZG93blxuICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUgPSB1bmRlZmluZWQ7XG5cbiAgICB2YXIgd2FzTXVsdGlwbGUgPSBpbnN0Ll93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU7XG4gICAgaW5zdC5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlID0gQm9vbGVhbihwcm9wcy5tdWx0aXBsZSk7XG5cbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLnBlbmRpbmdVcGRhdGUgPSBmYWxzZTtcbiAgICAgIHVwZGF0ZU9wdGlvbnMoaW5zdCwgQm9vbGVhbihwcm9wcy5tdWx0aXBsZSksIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHdhc011bHRpcGxlICE9PSBCb29sZWFuKHByb3BzLm11bHRpcGxlKSkge1xuICAgICAgLy8gRm9yIHNpbXBsaWNpdHksIHJlYXBwbHkgYGRlZmF1bHRWYWx1ZWAgaWYgYG11bHRpcGxlYCBpcyB0b2dnbGVkLlxuICAgICAgaWYgKHByb3BzLmRlZmF1bHRWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHVwZGF0ZU9wdGlvbnMoaW5zdCwgQm9vbGVhbihwcm9wcy5tdWx0aXBsZSksIHByb3BzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXZlcnQgdGhlIHNlbGVjdCBiYWNrIHRvIGl0cyBkZWZhdWx0IHVuc2VsZWN0ZWQgc3RhdGUuXG4gICAgICAgIHVwZGF0ZU9wdGlvbnMoaW5zdCwgQm9vbGVhbihwcm9wcy5tdWx0aXBsZSksIHByb3BzLm11bHRpcGxlID8gW10gOiAnJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBfaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gIHZhciBwcm9wcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICB2YXIgcmV0dXJuVmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmV4ZWN1dGVPbkNoYW5nZShwcm9wcywgZXZlbnQpO1xuXG4gIGlmICh0aGlzLl9yb290Tm9kZUlEKSB7XG4gICAgdGhpcy5fd3JhcHBlclN0YXRlLnBlbmRpbmdVcGRhdGUgPSB0cnVlO1xuICB9XG4gIFJlYWN0VXBkYXRlcy5hc2FwKHVwZGF0ZU9wdGlvbnNJZlBlbmRpbmdVcGRhdGVBbmRNb3VudGVkLCB0aGlzKTtcbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NU2VsZWN0O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTVNlbGVjdC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9UcmFuc2FjdGlvbicpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcblxudmFyIFJFU0VUX0JBVENIRURfVVBEQVRFUyA9IHtcbiAgaW5pdGlhbGl6ZTogZW1wdHlGdW5jdGlvbixcbiAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID0gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBGTFVTSF9CQVRDSEVEX1VQREFURVMgPSB7XG4gIGluaXRpYWxpemU6IGVtcHR5RnVuY3Rpb24sXG4gIGNsb3NlOiBSZWFjdFVwZGF0ZXMuZmx1c2hCYXRjaGVkVXBkYXRlcy5iaW5kKFJlYWN0VXBkYXRlcylcbn07XG5cbnZhciBUUkFOU0FDVElPTl9XUkFQUEVSUyA9IFtGTFVTSF9CQVRDSEVEX1VQREFURVMsIFJFU0VUX0JBVENIRURfVVBEQVRFU107XG5cbmZ1bmN0aW9uIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lUcmFuc2FjdGlvbigpIHtcbiAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xufVxuXG5fYXNzaWduKFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lUcmFuc2FjdGlvbi5wcm90b3R5cGUsIFRyYW5zYWN0aW9uLCB7XG4gIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gIH1cbn0pO1xuXG52YXIgdHJhbnNhY3Rpb24gPSBuZXcgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uKCk7XG5cbnZhciBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5ID0ge1xuICBpc0JhdGNoaW5nVXBkYXRlczogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENhbGwgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIGluIGEgY29udGV4dCB3aXRoaW4gd2hpY2ggY2FsbHMgdG8gYHNldFN0YXRlYFxuICAgKiBhbmQgZnJpZW5kcyBhcmUgYmF0Y2hlZCBzdWNoIHRoYXQgY29tcG9uZW50cyBhcmVuJ3QgdXBkYXRlZCB1bm5lY2Vzc2FyaWx5LlxuICAgKi9cbiAgYmF0Y2hlZFVwZGF0ZXM6IGZ1bmN0aW9uIChjYWxsYmFjaywgYSwgYiwgYywgZCwgZSkge1xuICAgIHZhciBhbHJlYWR5QmF0Y2hpbmdVcGRhdGVzID0gUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcztcblxuICAgIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPSB0cnVlO1xuXG4gICAgLy8gVGhlIGNvZGUgaXMgd3JpdHRlbiB0aGlzIHdheSB0byBhdm9pZCBleHRyYSBhbGxvY2F0aW9uc1xuICAgIGlmIChhbHJlYWR5QmF0Y2hpbmdVcGRhdGVzKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soYSwgYiwgYywgZCwgZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cmFuc2FjdGlvbi5wZXJmb3JtKGNhbGxiYWNrLCBudWxsLCBhLCBiLCBjLCBkLCBlKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEFSSUFET01Qcm9wZXJ0eUNvbmZpZyA9IHJlcXVpcmUoJy4vQVJJQURPTVByb3BlcnR5Q29uZmlnJyk7XG52YXIgQmVmb3JlSW5wdXRFdmVudFBsdWdpbiA9IHJlcXVpcmUoJy4vQmVmb3JlSW5wdXRFdmVudFBsdWdpbicpO1xudmFyIENoYW5nZUV2ZW50UGx1Z2luID0gcmVxdWlyZSgnLi9DaGFuZ2VFdmVudFBsdWdpbicpO1xudmFyIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyID0gcmVxdWlyZSgnLi9EZWZhdWx0RXZlbnRQbHVnaW5PcmRlcicpO1xudmFyIEVudGVyTGVhdmVFdmVudFBsdWdpbiA9IHJlcXVpcmUoJy4vRW50ZXJMZWF2ZUV2ZW50UGx1Z2luJyk7XG52YXIgSFRNTERPTVByb3BlcnR5Q29uZmlnID0gcmVxdWlyZSgnLi9IVE1MRE9NUHJvcGVydHlDb25maWcnKTtcbnZhciBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnQnKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xudmFyIFJlYWN0RE9NRW1wdHlDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0RE9NRW1wdHlDb21wb25lbnQnKTtcbnZhciBSZWFjdERPTVRyZWVUcmF2ZXJzYWwgPSByZXF1aXJlKCcuL1JlYWN0RE9NVHJlZVRyYXZlcnNhbCcpO1xudmFyIFJlYWN0RE9NVGV4dENvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RET01UZXh0Q29tcG9uZW50Jyk7XG52YXIgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSA9IHJlcXVpcmUoJy4vUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneScpO1xudmFyIFJlYWN0RXZlbnRMaXN0ZW5lciA9IHJlcXVpcmUoJy4vUmVhY3RFdmVudExpc3RlbmVyJyk7XG52YXIgUmVhY3RJbmplY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5qZWN0aW9uJyk7XG52YXIgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbicpO1xudmFyIFNWR0RPTVByb3BlcnR5Q29uZmlnID0gcmVxdWlyZSgnLi9TVkdET01Qcm9wZXJ0eUNvbmZpZycpO1xudmFyIFNlbGVjdEV2ZW50UGx1Z2luID0gcmVxdWlyZSgnLi9TZWxlY3RFdmVudFBsdWdpbicpO1xudmFyIFNpbXBsZUV2ZW50UGx1Z2luID0gcmVxdWlyZSgnLi9TaW1wbGVFdmVudFBsdWdpbicpO1xuXG52YXIgYWxyZWFkeUluamVjdGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGluamVjdCgpIHtcbiAgaWYgKGFscmVhZHlJbmplY3RlZCkge1xuICAgIC8vIFRPRE86IFRoaXMgaXMgY3VycmVudGx5IHRydWUgYmVjYXVzZSB0aGVzZSBpbmplY3Rpb25zIGFyZSBzaGFyZWQgYmV0d2VlblxuICAgIC8vIHRoZSBjbGllbnQgYW5kIHRoZSBzZXJ2ZXIgcGFja2FnZS4gVGhleSBzaG91bGQgYmUgYnVpbHQgaW5kZXBlbmRlbnRseVxuICAgIC8vIGFuZCBub3Qgc2hhcmUgYW55IGluamVjdGlvbiBzdGF0ZS4gVGhlbiB0aGlzIHByb2JsZW0gd2lsbCBiZSBzb2x2ZWQuXG4gICAgcmV0dXJuO1xuICB9XG4gIGFscmVhZHlJbmplY3RlZCA9IHRydWU7XG5cbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRFbWl0dGVyLmluamVjdFJlYWN0RXZlbnRMaXN0ZW5lcihSZWFjdEV2ZW50TGlzdGVuZXIpO1xuXG4gIC8qKlxuICAgKiBJbmplY3QgbW9kdWxlcyBmb3IgcmVzb2x2aW5nIERPTSBoaWVyYXJjaHkgYW5kIHBsdWdpbiBvcmRlcmluZy5cbiAgICovXG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIpO1xuICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpblV0aWxzLmluamVjdENvbXBvbmVudFRyZWUoUmVhY3RET01Db21wb25lbnRUcmVlKTtcbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5VdGlscy5pbmplY3RUcmVlVHJhdmVyc2FsKFJlYWN0RE9NVHJlZVRyYXZlcnNhbCk7XG5cbiAgLyoqXG4gICAqIFNvbWUgaW1wb3J0YW50IGV2ZW50IHBsdWdpbnMgaW5jbHVkZWQgYnkgZGVmYXVsdCAod2l0aG91dCBoYXZpbmcgdG8gcmVxdWlyZVxuICAgKiB0aGVtKS5cbiAgICovXG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7XG4gICAgU2ltcGxlRXZlbnRQbHVnaW46IFNpbXBsZUV2ZW50UGx1Z2luLFxuICAgIEVudGVyTGVhdmVFdmVudFBsdWdpbjogRW50ZXJMZWF2ZUV2ZW50UGx1Z2luLFxuICAgIENoYW5nZUV2ZW50UGx1Z2luOiBDaGFuZ2VFdmVudFBsdWdpbixcbiAgICBTZWxlY3RFdmVudFBsdWdpbjogU2VsZWN0RXZlbnRQbHVnaW4sXG4gICAgQmVmb3JlSW5wdXRFdmVudFBsdWdpbjogQmVmb3JlSW5wdXRFdmVudFBsdWdpblxuICB9KTtcblxuICBSZWFjdEluamVjdGlvbi5Ib3N0Q29tcG9uZW50LmluamVjdEdlbmVyaWNDb21wb25lbnRDbGFzcyhSZWFjdERPTUNvbXBvbmVudCk7XG5cbiAgUmVhY3RJbmplY3Rpb24uSG9zdENvbXBvbmVudC5pbmplY3RUZXh0Q29tcG9uZW50Q2xhc3MoUmVhY3RET01UZXh0Q29tcG9uZW50KTtcblxuICBSZWFjdEluamVjdGlvbi5ET01Qcm9wZXJ0eS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhBUklBRE9NUHJvcGVydHlDb25maWcpO1xuICBSZWFjdEluamVjdGlvbi5ET01Qcm9wZXJ0eS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhIVE1MRE9NUHJvcGVydHlDb25maWcpO1xuICBSZWFjdEluamVjdGlvbi5ET01Qcm9wZXJ0eS5pbmplY3RET01Qcm9wZXJ0eUNvbmZpZyhTVkdET01Qcm9wZXJ0eUNvbmZpZyk7XG5cbiAgUmVhY3RJbmplY3Rpb24uRW1wdHlDb21wb25lbnQuaW5qZWN0RW1wdHlDb21wb25lbnRGYWN0b3J5KGZ1bmN0aW9uIChpbnN0YW50aWF0ZSkge1xuICAgIHJldHVybiBuZXcgUmVhY3RET01FbXB0eUNvbXBvbmVudChpbnN0YW50aWF0ZSk7XG4gIH0pO1xuXG4gIFJlYWN0SW5qZWN0aW9uLlVwZGF0ZXMuaW5qZWN0UmVjb25jaWxlVHJhbnNhY3Rpb24oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbik7XG4gIFJlYWN0SW5qZWN0aW9uLlVwZGF0ZXMuaW5qZWN0QmF0Y2hpbmdTdHJhdGVneShSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5KTtcblxuICBSZWFjdEluamVjdGlvbi5Db21wb25lbnQuaW5qZWN0RW52aXJvbm1lbnQoUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaW5qZWN0OiBpbmplY3Rcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RGVmYXVsdEluamVjdGlvbi5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5Q29tcG9uZW50RmFjdG9yeTtcblxudmFyIFJlYWN0RW1wdHlDb21wb25lbnRJbmplY3Rpb24gPSB7XG4gIGluamVjdEVtcHR5Q29tcG9uZW50RmFjdG9yeTogZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgICBlbXB0eUNvbXBvbmVudEZhY3RvcnkgPSBmYWN0b3J5O1xuICB9XG59O1xuXG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiAoaW5zdGFudGlhdGUpIHtcbiAgICByZXR1cm4gZW1wdHlDb21wb25lbnRGYWN0b3J5KGluc3RhbnRpYXRlKTtcbiAgfVxufTtcblxuUmVhY3RFbXB0eUNvbXBvbmVudC5pbmplY3Rpb24gPSBSZWFjdEVtcHR5Q29tcG9uZW50SW5qZWN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RW1wdHlDb21wb25lbnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RW1wdHlDb21wb25lbnQuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RmVhdHVyZUZsYWdzID0ge1xuICAvLyBXaGVuIHRydWUsIGNhbGwgY29uc29sZS50aW1lKCkgYmVmb3JlIGFuZCAudGltZUVuZCgpIGFmdGVyIGVhY2ggdG9wLWxldmVsXG4gIC8vIHJlbmRlciAoYm90aCBpbml0aWFsIHJlbmRlcnMgYW5kIHVwZGF0ZXMpLiBVc2VmdWwgd2hlbiBsb29raW5nIGF0IHByb2QtbW9kZVxuICAvLyB0aW1lbGluZSBwcm9maWxlcyBpbiBDaHJvbWUsIGZvciBleGFtcGxlLlxuICBsb2dUb3BMZXZlbFJlbmRlcnM6IGZhbHNlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RmVhdHVyZUZsYWdzO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdEZlYXR1cmVGbGFncy5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgZ2VuZXJpY0NvbXBvbmVudENsYXNzID0gbnVsbDtcbnZhciB0ZXh0Q29tcG9uZW50Q2xhc3MgPSBudWxsO1xuXG52YXIgUmVhY3RIb3N0Q29tcG9uZW50SW5qZWN0aW9uID0ge1xuICAvLyBUaGlzIGFjY2VwdHMgYSBjbGFzcyB0aGF0IHJlY2VpdmVzIHRoZSB0YWcgc3RyaW5nLiBUaGlzIGlzIGEgY2F0Y2ggYWxsXG4gIC8vIHRoYXQgY2FuIHJlbmRlciBhbnkga2luZCBvZiB0YWcuXG4gIGluamVjdEdlbmVyaWNDb21wb25lbnRDbGFzczogZnVuY3Rpb24gKGNvbXBvbmVudENsYXNzKSB7XG4gICAgZ2VuZXJpY0NvbXBvbmVudENsYXNzID0gY29tcG9uZW50Q2xhc3M7XG4gIH0sXG4gIC8vIFRoaXMgYWNjZXB0cyBhIHRleHQgY29tcG9uZW50IGNsYXNzIHRoYXQgdGFrZXMgdGhlIHRleHQgc3RyaW5nIHRvIGJlXG4gIC8vIHJlbmRlcmVkIGFzIHByb3BzLlxuICBpbmplY3RUZXh0Q29tcG9uZW50Q2xhc3M6IGZ1bmN0aW9uIChjb21wb25lbnRDbGFzcykge1xuICAgIHRleHRDb21wb25lbnRDbGFzcyA9IGNvbXBvbmVudENsYXNzO1xuICB9XG59O1xuXG4vKipcbiAqIEdldCBhIGhvc3QgaW50ZXJuYWwgY29tcG9uZW50IGNsYXNzIGZvciBhIHNwZWNpZmljIHRhZy5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBjcmVhdGUuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGludGVybmFsIGNsYXNzIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnRlcm5hbENvbXBvbmVudChlbGVtZW50KSB7XG4gICFnZW5lcmljQ29tcG9uZW50Q2xhc3MgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVGhlcmUgaXMgbm8gcmVnaXN0ZXJlZCBjb21wb25lbnQgZm9yIHRoZSB0YWcgJXMnLCBlbGVtZW50LnR5cGUpIDogX3Byb2RJbnZhcmlhbnQoJzExMScsIGVsZW1lbnQudHlwZSkgOiB2b2lkIDA7XG4gIHJldHVybiBuZXcgZ2VuZXJpY0NvbXBvbmVudENsYXNzKGVsZW1lbnQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RUZXh0fSB0ZXh0XG4gKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VGb3JUZXh0KHRleHQpIHtcbiAgcmV0dXJuIG5ldyB0ZXh0Q29tcG9uZW50Q2xhc3ModGV4dCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1RleHRDb21wb25lbnQoY29tcG9uZW50KSB7XG4gIHJldHVybiBjb21wb25lbnQgaW5zdGFuY2VvZiB0ZXh0Q29tcG9uZW50Q2xhc3M7XG59XG5cbnZhciBSZWFjdEhvc3RDb21wb25lbnQgPSB7XG4gIGNyZWF0ZUludGVybmFsQ29tcG9uZW50OiBjcmVhdGVJbnRlcm5hbENvbXBvbmVudCxcbiAgY3JlYXRlSW5zdGFuY2VGb3JUZXh0OiBjcmVhdGVJbnN0YW5jZUZvclRleHQsXG4gIGlzVGV4dENvbXBvbmVudDogaXNUZXh0Q29tcG9uZW50LFxuICBpbmplY3Rpb246IFJlYWN0SG9zdENvbXBvbmVudEluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEhvc3RDb21wb25lbnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0SG9zdENvbXBvbmVudC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RE9NU2VsZWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdERPTVNlbGVjdGlvbicpO1xuXG52YXIgY29udGFpbnNOb2RlID0gcmVxdWlyZSgnZmJqcy9saWIvY29udGFpbnNOb2RlJyk7XG52YXIgZm9jdXNOb2RlID0gcmVxdWlyZSgnZmJqcy9saWIvZm9jdXNOb2RlJyk7XG52YXIgZ2V0QWN0aXZlRWxlbWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQnKTtcblxuZnVuY3Rpb24gaXNJbkRvY3VtZW50KG5vZGUpIHtcbiAgcmV0dXJuIGNvbnRhaW5zTm9kZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIG5vZGUpO1xufVxuXG4vKipcbiAqIEBSZWFjdElucHV0U2VsZWN0aW9uOiBSZWFjdCBpbnB1dCBzZWxlY3Rpb24gbW9kdWxlLiBCYXNlZCBvbiBTZWxlY3Rpb24uanMsXG4gKiBidXQgbW9kaWZpZWQgdG8gYmUgc3VpdGFibGUgZm9yIHJlYWN0IGFuZCBoYXMgYSBjb3VwbGUgb2YgYnVnIGZpeGVzIChkb2Vzbid0XG4gKiBhc3N1bWUgYnV0dG9ucyBoYXZlIHJhbmdlIHNlbGVjdGlvbnMgYWxsb3dlZCkuXG4gKiBJbnB1dCBzZWxlY3Rpb24gbW9kdWxlIGZvciBSZWFjdC5cbiAqL1xudmFyIFJlYWN0SW5wdXRTZWxlY3Rpb24gPSB7XG4gIGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllczogZnVuY3Rpb24gKGVsZW0pIHtcbiAgICB2YXIgbm9kZU5hbWUgPSBlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiBub2RlTmFtZSAmJiAobm9kZU5hbWUgPT09ICdpbnB1dCcgJiYgZWxlbS50eXBlID09PSAndGV4dCcgfHwgbm9kZU5hbWUgPT09ICd0ZXh0YXJlYScgfHwgZWxlbS5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJyk7XG4gIH0sXG5cbiAgZ2V0U2VsZWN0aW9uSW5mb3JtYXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZm9jdXNlZEVsZW0gPSBnZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzZWRFbGVtOiBmb2N1c2VkRWxlbSxcbiAgICAgIHNlbGVjdGlvblJhbmdlOiBSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhmb2N1c2VkRWxlbSkgPyBSZWFjdElucHV0U2VsZWN0aW9uLmdldFNlbGVjdGlvbihmb2N1c2VkRWxlbSkgOiBudWxsXG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogQHJlc3RvcmVTZWxlY3Rpb246IElmIGFueSBzZWxlY3Rpb24gaW5mb3JtYXRpb24gd2FzIHBvdGVudGlhbGx5IGxvc3QsXG4gICAqIHJlc3RvcmUgaXQuIFRoaXMgaXMgdXNlZnVsIHdoZW4gcGVyZm9ybWluZyBvcGVyYXRpb25zIHRoYXQgY291bGQgcmVtb3ZlIGRvbVxuICAgKiBub2RlcyBhbmQgcGxhY2UgdGhlbSBiYWNrIGluLCByZXN1bHRpbmcgaW4gZm9jdXMgYmVpbmcgbG9zdC5cbiAgICovXG4gIHJlc3RvcmVTZWxlY3Rpb246IGZ1bmN0aW9uIChwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uKSB7XG4gICAgdmFyIGN1ckZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudCgpO1xuICAgIHZhciBwcmlvckZvY3VzZWRFbGVtID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5mb2N1c2VkRWxlbTtcbiAgICB2YXIgcHJpb3JTZWxlY3Rpb25SYW5nZSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uc2VsZWN0aW9uUmFuZ2U7XG4gICAgaWYgKGN1ckZvY3VzZWRFbGVtICE9PSBwcmlvckZvY3VzZWRFbGVtICYmIGlzSW5Eb2N1bWVudChwcmlvckZvY3VzZWRFbGVtKSkge1xuICAgICAgaWYgKFJlYWN0SW5wdXRTZWxlY3Rpb24uaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKHByaW9yRm9jdXNlZEVsZW0pKSB7XG4gICAgICAgIFJlYWN0SW5wdXRTZWxlY3Rpb24uc2V0U2VsZWN0aW9uKHByaW9yRm9jdXNlZEVsZW0sIHByaW9yU2VsZWN0aW9uUmFuZ2UpO1xuICAgICAgfVxuICAgICAgZm9jdXNOb2RlKHByaW9yRm9jdXNlZEVsZW0pO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQGdldFNlbGVjdGlvbjogR2V0cyB0aGUgc2VsZWN0aW9uIGJvdW5kcyBvZiBhIGZvY3VzZWQgdGV4dGFyZWEsIGlucHV0IG9yXG4gICAqIGNvbnRlbnRFZGl0YWJsZSBub2RlLlxuICAgKiAtQGlucHV0OiBMb29rIHVwIHNlbGVjdGlvbiBib3VuZHMgb2YgdGhpcyBpbnB1dFxuICAgKiAtQHJldHVybiB7c3RhcnQ6IHNlbGVjdGlvblN0YXJ0LCBlbmQ6IHNlbGVjdGlvbkVuZH1cbiAgICovXG4gIGdldFNlbGVjdGlvbjogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgdmFyIHNlbGVjdGlvbjtcblxuICAgIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIGlucHV0KSB7XG4gICAgICAvLyBNb2Rlcm4gYnJvd3NlciB3aXRoIGlucHV0IG9yIHRleHRhcmVhLlxuICAgICAgc2VsZWN0aW9uID0ge1xuICAgICAgICBzdGFydDogaW5wdXQuc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgIGVuZDogaW5wdXQuc2VsZWN0aW9uRW5kXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uICYmIGlucHV0Lm5vZGVOYW1lICYmIGlucHV0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcpIHtcbiAgICAgIC8vIElFOCBpbnB1dC5cbiAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgICAgLy8gVGhlcmUgY2FuIG9ubHkgYmUgb25lIHNlbGVjdGlvbiBwZXIgZG9jdW1lbnQgaW4gSUUsIHNvIGl0IG11c3RcbiAgICAgIC8vIGJlIGluIG91ciBlbGVtZW50LlxuICAgICAgaWYgKHJhbmdlLnBhcmVudEVsZW1lbnQoKSA9PT0gaW5wdXQpIHtcbiAgICAgICAgc2VsZWN0aW9uID0ge1xuICAgICAgICAgIHN0YXJ0OiAtcmFuZ2UubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCAtaW5wdXQudmFsdWUubGVuZ3RoKSxcbiAgICAgICAgICBlbmQ6IC1yYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCAtaW5wdXQudmFsdWUubGVuZ3RoKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDb250ZW50IGVkaXRhYmxlIG9yIG9sZCBJRSB0ZXh0YXJlYS5cbiAgICAgIHNlbGVjdGlvbiA9IFJlYWN0RE9NU2VsZWN0aW9uLmdldE9mZnNldHMoaW5wdXQpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxlY3Rpb24gfHwgeyBzdGFydDogMCwgZW5kOiAwIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBzZXRTZWxlY3Rpb246IFNldHMgdGhlIHNlbGVjdGlvbiBib3VuZHMgb2YgYSB0ZXh0YXJlYSBvciBpbnB1dCBhbmQgZm9jdXNlc1xuICAgKiB0aGUgaW5wdXQuXG4gICAqIC1AaW5wdXQgICAgIFNldCBzZWxlY3Rpb24gYm91bmRzIG9mIHRoaXMgaW5wdXQgb3IgdGV4dGFyZWFcbiAgICogLUBvZmZzZXRzICAgT2JqZWN0IG9mIHNhbWUgZm9ybSB0aGF0IGlzIHJldHVybmVkIGZyb20gZ2V0KlxuICAgKi9cbiAgc2V0U2VsZWN0aW9uOiBmdW5jdGlvbiAoaW5wdXQsIG9mZnNldHMpIHtcbiAgICB2YXIgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0O1xuICAgIHZhciBlbmQgPSBvZmZzZXRzLmVuZDtcbiAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVuZCA9IHN0YXJ0O1xuICAgIH1cblxuICAgIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIGlucHV0KSB7XG4gICAgICBpbnB1dC5zZWxlY3Rpb25TdGFydCA9IHN0YXJ0O1xuICAgICAgaW5wdXQuc2VsZWN0aW9uRW5kID0gTWF0aC5taW4oZW5kLCBpbnB1dC52YWx1ZS5sZW5ndGgpO1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uICYmIGlucHV0Lm5vZGVOYW1lICYmIGlucHV0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcpIHtcbiAgICAgIHZhciByYW5nZSA9IGlucHV0LmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgICByYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIHN0YXJ0KTtcbiAgICAgIHJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIGVuZCAtIHN0YXJ0KTtcbiAgICAgIHJhbmdlLnNlbGVjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBSZWFjdERPTVNlbGVjdGlvbi5zZXRPZmZzZXRzKGlucHV0LCBvZmZzZXRzKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RJbnB1dFNlbGVjdGlvbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RJbnB1dFNlbGVjdGlvbi5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGFkbGVyMzIgPSByZXF1aXJlKCcuL2FkbGVyMzInKTtcblxudmFyIFRBR19FTkQgPSAvXFwvPz4vO1xudmFyIENPTU1FTlRfU1RBUlQgPSAvXjxcXCFcXC1cXC0vO1xuXG52YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9IHtcbiAgQ0hFQ0tTVU1fQVRUUl9OQU1FOiAnZGF0YS1yZWFjdC1jaGVja3N1bScsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBzdHJpbmcgd2l0aCBjaGVja3N1bSBhdHRyaWJ1dGUgYXR0YWNoZWRcbiAgICovXG4gIGFkZENoZWNrc3VtVG9NYXJrdXA6IGZ1bmN0aW9uIChtYXJrdXApIHtcbiAgICB2YXIgY2hlY2tzdW0gPSBhZGxlcjMyKG1hcmt1cCk7XG5cbiAgICAvLyBBZGQgY2hlY2tzdW0gKGhhbmRsZSBib3RoIHBhcmVudCB0YWdzLCBjb21tZW50cyBhbmQgc2VsZi1jbG9zaW5nIHRhZ3MpXG4gICAgaWYgKENPTU1FTlRfU1RBUlQudGVzdChtYXJrdXApKSB7XG4gICAgICByZXR1cm4gbWFya3VwO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWFya3VwLnJlcGxhY2UoVEFHX0VORCwgJyAnICsgUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUgKyAnPVwiJyArIGNoZWNrc3VtICsgJ1wiJCYnKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgdG8gdXNlXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCByb290IFJlYWN0IGVsZW1lbnRcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgb3Igbm90IHRoZSBtYXJrdXAgaXMgdGhlIHNhbWVcbiAgICovXG4gIGNhblJldXNlTWFya3VwOiBmdW5jdGlvbiAobWFya3VwLCBlbGVtZW50KSB7XG4gICAgdmFyIGV4aXN0aW5nQ2hlY2tzdW0gPSBlbGVtZW50LmdldEF0dHJpYnV0ZShSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSk7XG4gICAgZXhpc3RpbmdDaGVja3N1bSA9IGV4aXN0aW5nQ2hlY2tzdW0gJiYgcGFyc2VJbnQoZXhpc3RpbmdDaGVja3N1bSwgMTApO1xuICAgIHZhciBtYXJrdXBDaGVja3N1bSA9IGFkbGVyMzIobWFya3VwKTtcbiAgICByZXR1cm4gbWFya3VwQ2hlY2tzdW0gPT09IGV4aXN0aW5nQ2hlY2tzdW07XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RNYXJrdXBDaGVja3N1bTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RNYXJrdXBDaGVja3N1bS5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIERPTUxhenlUcmVlID0gcmVxdWlyZSgnLi9ET01MYXp5VHJlZScpO1xudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eScpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvbGliL1JlYWN0Jyk7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXInKTtcbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9SZWFjdEN1cnJlbnRPd25lcicpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG52YXIgUmVhY3RET01Db250YWluZXJJbmZvID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbnRhaW5lckluZm8nKTtcbnZhciBSZWFjdERPTUZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4vUmVhY3RET01GZWF0dXJlRmxhZ3MnKTtcbnZhciBSZWFjdEZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4vUmVhY3RGZWF0dXJlRmxhZ3MnKTtcbnZhciBSZWFjdEluc3RhbmNlTWFwID0gcmVxdWlyZSgnLi9SZWFjdEluc3RhbmNlTWFwJyk7XG52YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG52YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9IHJlcXVpcmUoJy4vUmVhY3RNYXJrdXBDaGVja3N1bScpO1xudmFyIFJlYWN0UmVjb25jaWxlciA9IHJlcXVpcmUoJy4vUmVhY3RSZWNvbmNpbGVyJyk7XG52YXIgUmVhY3RVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVRdWV1ZScpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG5cbnZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5T2JqZWN0Jyk7XG52YXIgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoJy4vc2V0SW5uZXJIVE1MJyk7XG52YXIgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIEFUVFJfTkFNRSA9IERPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FO1xudmFyIFJPT1RfQVRUUl9OQU1FID0gRE9NUHJvcGVydHkuUk9PVF9BVFRSSUJVVEVfTkFNRTtcblxudmFyIEVMRU1FTlRfTk9ERV9UWVBFID0gMTtcbnZhciBET0NfTk9ERV9UWVBFID0gOTtcbnZhciBET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUgPSAxMTtcblxudmFyIGluc3RhbmNlc0J5UmVhY3RSb290SUQgPSB7fTtcblxuLyoqXG4gKiBGaW5kcyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGNoYXJhY3RlclxuICogdGhhdCdzIG5vdCBjb21tb24gYmV0d2VlbiB0aGUgdHdvIGdpdmVuIHN0cmluZ3MuXG4gKlxuICogQHJldHVybiB7bnVtYmVyfSB0aGUgaW5kZXggb2YgdGhlIGNoYXJhY3RlciB3aGVyZSB0aGUgc3RyaW5ncyBkaXZlcmdlXG4gKi9cbmZ1bmN0aW9uIGZpcnN0RGlmZmVyZW5jZUluZGV4KHN0cmluZzEsIHN0cmluZzIpIHtcbiAgdmFyIG1pbkxlbiA9IE1hdGgubWluKHN0cmluZzEubGVuZ3RoLCBzdHJpbmcyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWluTGVuOyBpKyspIHtcbiAgICBpZiAoc3RyaW5nMS5jaGFyQXQoaSkgIT09IHN0cmluZzIuY2hhckF0KGkpKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cmluZzEubGVuZ3RoID09PSBzdHJpbmcyLmxlbmd0aCA/IC0xIDogbWluTGVuO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01Eb2N1bWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRoYXQgbWF5IGNvbnRhaW5cbiAqIGEgUmVhY3QgY29tcG9uZW50XG4gKiBAcmV0dXJuIHs/Kn0gRE9NIGVsZW1lbnQgdGhhdCBtYXkgaGF2ZSB0aGUgcmVhY3RSb290IElELCBvciBudWxsLlxuICovXG5mdW5jdGlvbiBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKSB7XG4gIGlmICghY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5kb2N1bWVudEVsZW1lbnQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5maXJzdENoaWxkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludGVybmFsR2V0SUQobm9kZSkge1xuICAvLyBJZiBub2RlIGlzIHNvbWV0aGluZyBsaWtlIGEgd2luZG93LCBkb2N1bWVudCwgb3IgdGV4dCBub2RlLCBub25lIG9mXG4gIC8vIHdoaWNoIHN1cHBvcnQgYXR0cmlidXRlcyBvciBhIC5nZXRBdHRyaWJ1dGUgbWV0aG9kLCBncmFjZWZ1bGx5IHJldHVyblxuICAvLyB0aGUgZW1wdHkgc3RyaW5nLCBhcyBpZiB0aGUgYXR0cmlidXRlIHdlcmUgbWlzc2luZy5cbiAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKEFUVFJfTkFNRSkgfHwgJyc7XG59XG5cbi8qKlxuICogTW91bnRzIHRoaXMgY29tcG9uZW50IGFuZCBpbnNlcnRzIGl0IGludG8gdGhlIERPTS5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnRJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdG8gbW91bnQuXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byBtb3VudCBpbnRvLlxuICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtib29sZWFufSBzaG91bGRSZXVzZU1hcmt1cCBJZiB0cnVlLCBkbyBub3QgaW5zZXJ0IG1hcmt1cFxuICovXG5mdW5jdGlvbiBtb3VudENvbXBvbmVudEludG9Ob2RlKHdyYXBwZXJJbnN0YW5jZSwgY29udGFpbmVyLCB0cmFuc2FjdGlvbiwgc2hvdWxkUmV1c2VNYXJrdXAsIGNvbnRleHQpIHtcbiAgdmFyIG1hcmtlck5hbWU7XG4gIGlmIChSZWFjdEZlYXR1cmVGbGFncy5sb2dUb3BMZXZlbFJlbmRlcnMpIHtcbiAgICB2YXIgd3JhcHBlZEVsZW1lbnQgPSB3cmFwcGVySW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50LnByb3BzLmNoaWxkO1xuICAgIHZhciB0eXBlID0gd3JhcHBlZEVsZW1lbnQudHlwZTtcbiAgICBtYXJrZXJOYW1lID0gJ1JlYWN0IG1vdW50OiAnICsgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyA/IHR5cGUgOiB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSk7XG4gICAgY29uc29sZS50aW1lKG1hcmtlck5hbWUpO1xuICB9XG5cbiAgdmFyIG1hcmt1cCA9IFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudCh3cmFwcGVySW5zdGFuY2UsIHRyYW5zYWN0aW9uLCBudWxsLCBSZWFjdERPTUNvbnRhaW5lckluZm8od3JhcHBlckluc3RhbmNlLCBjb250YWluZXIpLCBjb250ZXh0LCAwIC8qIHBhcmVudERlYnVnSUQgKi9cbiAgKTtcblxuICBpZiAobWFya2VyTmFtZSkge1xuICAgIGNvbnNvbGUudGltZUVuZChtYXJrZXJOYW1lKTtcbiAgfVxuXG4gIHdyYXBwZXJJbnN0YW5jZS5fcmVuZGVyZWRDb21wb25lbnQuX3RvcExldmVsV3JhcHBlciA9IHdyYXBwZXJJbnN0YW5jZTtcbiAgUmVhY3RNb3VudC5fbW91bnRJbWFnZUludG9Ob2RlKG1hcmt1cCwgY29udGFpbmVyLCB3cmFwcGVySW5zdGFuY2UsIHNob3VsZFJldXNlTWFya3VwLCB0cmFuc2FjdGlvbik7XG59XG5cbi8qKlxuICogQmF0Y2hlZCBtb3VudC5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnRJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdG8gbW91bnQuXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byBtb3VudCBpbnRvLlxuICogQHBhcmFtIHtib29sZWFufSBzaG91bGRSZXVzZU1hcmt1cCBJZiB0cnVlLCBkbyBub3QgaW5zZXJ0IG1hcmt1cFxuICovXG5mdW5jdGlvbiBiYXRjaGVkTW91bnRDb21wb25lbnRJbnRvTm9kZShjb21wb25lbnRJbnN0YW5jZSwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCwgY29udGV4dCkge1xuICB2YXIgdHJhbnNhY3Rpb24gPSBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5nZXRQb29sZWQoXG4gIC8qIHVzZUNyZWF0ZUVsZW1lbnQgKi9cbiAgIXNob3VsZFJldXNlTWFya3VwICYmIFJlYWN0RE9NRmVhdHVyZUZsYWdzLnVzZUNyZWF0ZUVsZW1lbnQpO1xuICB0cmFuc2FjdGlvbi5wZXJmb3JtKG1vdW50Q29tcG9uZW50SW50b05vZGUsIG51bGwsIGNvbXBvbmVudEluc3RhbmNlLCBjb250YWluZXIsIHRyYW5zYWN0aW9uLCBzaG91bGRSZXVzZU1hcmt1cCwgY29udGV4dCk7XG4gIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xufVxuXG4vKipcbiAqIFVubW91bnRzIGEgY29tcG9uZW50IGFuZCByZW1vdmVzIGl0IGZyb20gdGhlIERPTS5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnN0YW5jZSBSZWFjdCBjb21wb25lbnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byB1bm1vdW50IGZyb20uXG4gKiBAZmluYWxcbiAqIEBpbnRlcm5hbFxuICogQHNlZSB7UmVhY3RNb3VudC51bm1vdW50Q29tcG9uZW50QXROb2RlfVxuICovXG5mdW5jdGlvbiB1bm1vdW50Q29tcG9uZW50RnJvbU5vZGUoaW5zdGFuY2UsIGNvbnRhaW5lciwgc2FmZWx5KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uQmVnaW5GbHVzaCgpO1xuICB9XG4gIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KGluc3RhbmNlLCBzYWZlbHkpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkVuZEZsdXNoKCk7XG4gIH1cblxuICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFKSB7XG4gICAgY29udGFpbmVyID0gY29udGFpbmVyLmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2VtcHR5aW5nLWEtbm9kZVxuICB3aGlsZSAoY29udGFpbmVyLmxhc3RDaGlsZCkge1xuICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIubGFzdENoaWxkKTtcbiAgfVxufVxuXG4vKipcbiAqIFRydWUgaWYgdGhlIHN1cHBsaWVkIERPTSBub2RlIGhhcyBhIGRpcmVjdCBSZWFjdC1yZW5kZXJlZCBjaGlsZCB0aGF0IGlzXG4gKiBub3QgYSBSZWFjdCByb290IGVsZW1lbnQuIFVzZWZ1bCBmb3Igd2FybmluZyBpbiBgcmVuZGVyYCxcbiAqIGB1bm1vdW50Q29tcG9uZW50QXROb2RlYCwgZXRjLlxuICpcbiAqIEBwYXJhbSB7P0RPTUVsZW1lbnR9IG5vZGUgVGhlIGNhbmRpZGF0ZSBET00gbm9kZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIERPTSBlbGVtZW50IGNvbnRhaW5zIGEgZGlyZWN0IGNoaWxkIHRoYXQgd2FzXG4gKiByZW5kZXJlZCBieSBSZWFjdCBidXQgaXMgbm90IGEgcm9vdCBlbGVtZW50LlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGhhc05vblJvb3RSZWFjdENoaWxkKGNvbnRhaW5lcikge1xuICB2YXIgcm9vdEVsID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gIGlmIChyb290RWwpIHtcbiAgICB2YXIgaW5zdCA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKHJvb3RFbCk7XG4gICAgcmV0dXJuICEhKGluc3QgJiYgaW5zdC5faG9zdFBhcmVudCk7XG4gIH1cbn1cblxuLyoqXG4gKiBUcnVlIGlmIHRoZSBzdXBwbGllZCBET00gbm9kZSBpcyBhIFJlYWN0IERPTSBlbGVtZW50IGFuZFxuICogaXQgaGFzIGJlZW4gcmVuZGVyZWQgYnkgYW5vdGhlciBjb3B5IG9mIFJlYWN0LlxuICpcbiAqIEBwYXJhbSB7P0RPTUVsZW1lbnR9IG5vZGUgVGhlIGNhbmRpZGF0ZSBET00gbm9kZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIERPTSBoYXMgYmVlbiByZW5kZXJlZCBieSBhbm90aGVyIGNvcHkgb2YgUmVhY3RcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBub2RlSXNSZW5kZXJlZEJ5T3RoZXJJbnN0YW5jZShjb250YWluZXIpIHtcbiAgdmFyIHJvb3RFbCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICByZXR1cm4gISEocm9vdEVsICYmIGlzUmVhY3ROb2RlKHJvb3RFbCkgJiYgIVJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKHJvb3RFbCkpO1xufVxuXG4vKipcbiAqIFRydWUgaWYgdGhlIHN1cHBsaWVkIERPTSBub2RlIGlzIGEgdmFsaWQgbm9kZSBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7P0RPTUVsZW1lbnR9IG5vZGUgVGhlIGNhbmRpZGF0ZSBET00gbm9kZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIERPTSBpcyBhIHZhbGlkIERPTSBub2RlLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRDb250YWluZXIobm9kZSkge1xuICByZXR1cm4gISEobm9kZSAmJiAobm9kZS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgfHwgbm9kZS5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSB8fCBub2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUpKTtcbn1cblxuLyoqXG4gKiBUcnVlIGlmIHRoZSBzdXBwbGllZCBET00gbm9kZSBpcyBhIHZhbGlkIFJlYWN0IG5vZGUgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gez9ET01FbGVtZW50fSBub2RlIFRoZSBjYW5kaWRhdGUgRE9NIG5vZGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBET00gaXMgYSB2YWxpZCBSZWFjdCBET00gbm9kZS5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpc1JlYWN0Tm9kZShub2RlKSB7XG4gIHJldHVybiBpc1ZhbGlkQ29udGFpbmVyKG5vZGUpICYmIChub2RlLmhhc0F0dHJpYnV0ZShST09UX0FUVFJfTkFNRSkgfHwgbm9kZS5oYXNBdHRyaWJ1dGUoQVRUUl9OQU1FKSk7XG59XG5cbmZ1bmN0aW9uIGdldEhvc3RSb290SW5zdGFuY2VJbkNvbnRhaW5lcihjb250YWluZXIpIHtcbiAgdmFyIHJvb3RFbCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICB2YXIgcHJldkhvc3RJbnN0YW5jZSA9IHJvb3RFbCAmJiBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShyb290RWwpO1xuICByZXR1cm4gcHJldkhvc3RJbnN0YW5jZSAmJiAhcHJldkhvc3RJbnN0YW5jZS5faG9zdFBhcmVudCA/IHByZXZIb3N0SW5zdGFuY2UgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRUb3BMZXZlbFdyYXBwZXJJbkNvbnRhaW5lcihjb250YWluZXIpIHtcbiAgdmFyIHJvb3QgPSBnZXRIb3N0Um9vdEluc3RhbmNlSW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgcmV0dXJuIHJvb3QgPyByb290Ll9ob3N0Q29udGFpbmVySW5mby5fdG9wTGV2ZWxXcmFwcGVyIDogbnVsbDtcbn1cblxuLyoqXG4gKiBUZW1wb3JhcnkgKD8pIGhhY2sgc28gdGhhdCB3ZSBjYW4gc3RvcmUgYWxsIHRvcC1sZXZlbCBwZW5kaW5nIHVwZGF0ZXMgb25cbiAqIGNvbXBvc2l0ZXMgaW5zdGVhZCBvZiBoYXZpbmcgdG8gd29ycnkgYWJvdXQgZGlmZmVyZW50IHR5cGVzIG9mIGNvbXBvbmVudHNcbiAqIGhlcmUuXG4gKi9cbnZhciB0b3BMZXZlbFJvb3RDb3VudGVyID0gMTtcbnZhciBUb3BMZXZlbFdyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucm9vdElEID0gdG9wTGV2ZWxSb290Q291bnRlcisrO1xufTtcblRvcExldmVsV3JhcHBlci5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVG9wTGV2ZWxXcmFwcGVyLmRpc3BsYXlOYW1lID0gJ1RvcExldmVsV3JhcHBlcic7XG59XG5Ub3BMZXZlbFdyYXBwZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGQ7XG59O1xuVG9wTGV2ZWxXcmFwcGVyLmlzUmVhY3RUb3BMZXZlbFdyYXBwZXIgPSB0cnVlO1xuXG4vKipcbiAqIE1vdW50aW5nIGlzIHRoZSBwcm9jZXNzIG9mIGluaXRpYWxpemluZyBhIFJlYWN0IGNvbXBvbmVudCBieSBjcmVhdGluZyBpdHNcbiAqIHJlcHJlc2VudGF0aXZlIERPTSBlbGVtZW50cyBhbmQgaW5zZXJ0aW5nIHRoZW0gaW50byBhIHN1cHBsaWVkIGBjb250YWluZXJgLlxuICogQW55IHByaW9yIGNvbnRlbnQgaW5zaWRlIGBjb250YWluZXJgIGlzIGRlc3Ryb3llZCBpbiB0aGUgcHJvY2Vzcy5cbiAqXG4gKiAgIFJlYWN0TW91bnQucmVuZGVyKFxuICogICAgIGNvbXBvbmVudCxcbiAqICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGFpbmVyJylcbiAqICAgKTtcbiAqXG4gKiAgIDxkaXYgaWQ9XCJjb250YWluZXJcIj4gICAgICAgICAgICAgICAgICAgPC0tIFN1cHBsaWVkIGBjb250YWluZXJgLlxuICogICAgIDxkaXYgZGF0YS1yZWFjdGlkPVwiLjNcIj4gICAgICAgICAgICAgIDwtLSBSZW5kZXJlZCByZWFjdFJvb3Qgb2YgUmVhY3RcbiAqICAgICAgIC8vIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9kaXY+XG4gKlxuICogSW5zaWRlIG9mIGBjb250YWluZXJgLCB0aGUgZmlyc3QgZWxlbWVudCByZW5kZXJlZCBpcyB0aGUgXCJyZWFjdFJvb3RcIi5cbiAqL1xudmFyIFJlYWN0TW91bnQgPSB7XG4gIFRvcExldmVsV3JhcHBlcjogVG9wTGV2ZWxXcmFwcGVyLFxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGRldnRvb2xzLiBUaGUga2V5cyBhcmUgbm90IGltcG9ydGFudC5cbiAgICovXG4gIF9pbnN0YW5jZXNCeVJlYWN0Um9vdElEOiBpbnN0YW5jZXNCeVJlYWN0Um9vdElELFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgaG9vayBwcm92aWRlZCB0byBzdXBwb3J0IHJlbmRlcmluZyBSZWFjdCBjb21wb25lbnRzIHdoaWxlXG4gICAqIGVuc3VyaW5nIHRoYXQgdGhlIGFwcGFyZW50IHNjcm9sbCBwb3NpdGlvbiBvZiBpdHMgYGNvbnRhaW5lcmAgZG9lcyBub3RcbiAgICogY2hhbmdlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBUaGUgYGNvbnRhaW5lcmAgYmVpbmcgcmVuZGVyZWQgaW50by5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gcmVuZGVyQ2FsbGJhY2sgVGhpcyBtdXN0IGJlIGNhbGxlZCBvbmNlIHRvIGRvIHRoZSByZW5kZXIuXG4gICAqL1xuICBzY3JvbGxNb25pdG9yOiBmdW5jdGlvbiAoY29udGFpbmVyLCByZW5kZXJDYWxsYmFjaykge1xuICAgIHJlbmRlckNhbGxiYWNrKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRha2UgYSBjb21wb25lbnQgdGhhdCdzIGFscmVhZHkgbW91bnRlZCBpbnRvIHRoZSBET00gYW5kIHJlcGxhY2UgaXRzIHByb3BzXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IHByZXZDb21wb25lbnQgY29tcG9uZW50IGluc3RhbmNlIGFscmVhZHkgaW4gdGhlIERPTVxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgY29tcG9uZW50IGluc3RhbmNlIHRvIHJlbmRlclxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBjb250YWluZXIgdG8gcmVuZGVyIGludG9cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uIHRyaWdnZXJlZCBvbiBjb21wbGV0aW9uXG4gICAqL1xuICBfdXBkYXRlUm9vdENvbXBvbmVudDogZnVuY3Rpb24gKHByZXZDb21wb25lbnQsIG5leHRFbGVtZW50LCBuZXh0Q29udGV4dCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgIFJlYWN0TW91bnQuc2Nyb2xsTW9uaXRvcihjb250YWluZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUVsZW1lbnRJbnRlcm5hbChwcmV2Q29tcG9uZW50LCBuZXh0RWxlbWVudCwgbmV4dENvbnRleHQpO1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUNhbGxiYWNrSW50ZXJuYWwocHJldkNvbXBvbmVudCwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHByZXZDb21wb25lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbmRlciBhIG5ldyBjb21wb25lbnQgaW50byB0aGUgRE9NLiBIb29rZWQgYnkgaG9va3MhXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudCBlbGVtZW50IHRvIHJlbmRlclxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBjb250YWluZXIgdG8gcmVuZGVyIGludG9cbiAgICogQHBhcmFtIHtib29sZWFufSBzaG91bGRSZXVzZU1hcmt1cCBpZiB3ZSBzaG91bGQgc2tpcCB0aGUgbWFya3VwIGluc2VydGlvblxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gbmV4dENvbXBvbmVudFxuICAgKi9cbiAgX3JlbmRlck5ld1Jvb3RDb21wb25lbnQ6IGZ1bmN0aW9uIChuZXh0RWxlbWVudCwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCwgY29udGV4dCkge1xuICAgIC8vIFZhcmlvdXMgcGFydHMgb2Ygb3VyIGNvZGUgKHN1Y2ggYXMgUmVhY3RDb21wb3NpdGVDb21wb25lbnQnc1xuICAgIC8vIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQpIGFzc3VtZSB0aGF0IGNhbGxzIHRvIHJlbmRlciBhcmVuJ3QgbmVzdGVkO1xuICAgIC8vIHZlcmlmeSB0aGF0IHRoYXQncyB0aGUgY2FzZS5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID09IG51bGwsICdfcmVuZGVyTmV3Um9vdENvbXBvbmVudCgpOiBSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uICcgKyAnb2YgcHJvcHMgYW5kIHN0YXRlOyB0cmlnZ2VyaW5nIG5lc3RlZCBjb21wb25lbnQgdXBkYXRlcyBmcm9tICcgKyAncmVuZGVyIGlzIG5vdCBhbGxvd2VkLiBJZiBuZWNlc3NhcnksIHRyaWdnZXIgbmVzdGVkIHVwZGF0ZXMgaW4gJyArICdjb21wb25lbnREaWRVcGRhdGUuIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mICVzLicsIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgJiYgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiB2b2lkIDA7XG5cbiAgICAhaXNWYWxpZENvbnRhaW5lcihjb250YWluZXIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ19yZWdpc3RlckNvbXBvbmVudCguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LicpIDogX3Byb2RJbnZhcmlhbnQoJzM3JykgOiB2b2lkIDA7XG5cbiAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuZW5zdXJlU2Nyb2xsVmFsdWVNb25pdG9yaW5nKCk7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChuZXh0RWxlbWVudCwgZmFsc2UpO1xuXG4gICAgLy8gVGhlIGluaXRpYWwgcmVuZGVyIGlzIHN5bmNocm9ub3VzIGJ1dCBhbnkgdXBkYXRlcyB0aGF0IGhhcHBlbiBkdXJpbmdcbiAgICAvLyByZW5kZXJpbmcsIGluIGNvbXBvbmVudFdpbGxNb3VudCBvciBjb21wb25lbnREaWRNb3VudCwgd2lsbCBiZSBiYXRjaGVkXG4gICAgLy8gYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IGJhdGNoaW5nIHN0cmF0ZWd5LlxuXG4gICAgUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKGJhdGNoZWRNb3VudENvbXBvbmVudEludG9Ob2RlLCBjb21wb25lbnRJbnN0YW5jZSwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCwgY29udGV4dCk7XG5cbiAgICB2YXIgd3JhcHBlcklEID0gY29tcG9uZW50SW5zdGFuY2UuX2luc3RhbmNlLnJvb3RJRDtcbiAgICBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW3dyYXBwZXJJRF0gPSBjb21wb25lbnRJbnN0YW5jZTtcblxuICAgIHJldHVybiBjb21wb25lbnRJbnN0YW5jZTtcbiAgfSxcblxuICAvKipcbiAgICogUmVuZGVycyBhIFJlYWN0IGNvbXBvbmVudCBpbnRvIHRoZSBET00gaW4gdGhlIHN1cHBsaWVkIGBjb250YWluZXJgLlxuICAgKlxuICAgKiBJZiB0aGUgUmVhY3QgY29tcG9uZW50IHdhcyBwcmV2aW91c2x5IHJlbmRlcmVkIGludG8gYGNvbnRhaW5lcmAsIHRoaXMgd2lsbFxuICAgKiBwZXJmb3JtIGFuIHVwZGF0ZSBvbiBpdCBhbmQgb25seSBtdXRhdGUgdGhlIERPTSBhcyBuZWNlc3NhcnkgdG8gcmVmbGVjdCB0aGVcbiAgICogbGF0ZXN0IFJlYWN0IGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gcGFyZW50Q29tcG9uZW50IFRoZSBjb25jZXB0dWFsIHBhcmVudCBvZiB0aGlzIHJlbmRlciB0cmVlLlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgQ29tcG9uZW50IGVsZW1lbnQgdG8gcmVuZGVyLlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byByZW5kZXIgaW50by5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uIHRyaWdnZXJlZCBvbiBjb21wbGV0aW9uXG4gICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBDb21wb25lbnQgaW5zdGFuY2UgcmVuZGVyZWQgaW4gYGNvbnRhaW5lcmAuXG4gICAqL1xuICByZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjogZnVuY3Rpb24gKHBhcmVudENvbXBvbmVudCwgbmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAhKHBhcmVudENvbXBvbmVudCAhPSBudWxsICYmIFJlYWN0SW5zdGFuY2VNYXAuaGFzKHBhcmVudENvbXBvbmVudCkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3BhcmVudENvbXBvbmVudCBtdXN0IGJlIGEgdmFsaWQgUmVhY3QgQ29tcG9uZW50JykgOiBfcHJvZEludmFyaWFudCgnMzgnKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gUmVhY3RNb3VudC5fcmVuZGVyU3VidHJlZUludG9Db250YWluZXIocGFyZW50Q29tcG9uZW50LCBuZXh0RWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjayk7XG4gIH0sXG5cbiAgX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOiBmdW5jdGlvbiAocGFyZW50Q29tcG9uZW50LCBuZXh0RWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgIFJlYWN0VXBkYXRlUXVldWUudmFsaWRhdGVDYWxsYmFjayhjYWxsYmFjaywgJ1JlYWN0RE9NLnJlbmRlcicpO1xuICAgICFSZWFjdC5pc1ZhbGlkRWxlbWVudChuZXh0RWxlbWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RET00ucmVuZGVyKCk6IEludmFsaWQgY29tcG9uZW50IGVsZW1lbnQuJXMnLCB0eXBlb2YgbmV4dEVsZW1lbnQgPT09ICdzdHJpbmcnID8gXCIgSW5zdGVhZCBvZiBwYXNzaW5nIGEgc3RyaW5nIGxpa2UgJ2RpdicsIHBhc3MgXCIgKyBcIlJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicpIG9yIDxkaXYgLz4uXCIgOiB0eXBlb2YgbmV4dEVsZW1lbnQgPT09ICdmdW5jdGlvbicgPyAnIEluc3RlYWQgb2YgcGFzc2luZyBhIGNsYXNzIGxpa2UgRm9vLCBwYXNzICcgKyAnUmVhY3QuY3JlYXRlRWxlbWVudChGb28pIG9yIDxGb28gLz4uJyA6IC8vIENoZWNrIGlmIGl0IHF1YWNrcyBsaWtlIGFuIGVsZW1lbnRcbiAgICBuZXh0RWxlbWVudCAhPSBudWxsICYmIG5leHRFbGVtZW50LnByb3BzICE9PSB1bmRlZmluZWQgPyAnIFRoaXMgbWF5IGJlIGNhdXNlZCBieSB1bmludGVudGlvbmFsbHkgbG9hZGluZyB0d28gaW5kZXBlbmRlbnQgJyArICdjb3BpZXMgb2YgUmVhY3QuJyA6ICcnKSA6IF9wcm9kSW52YXJpYW50KCczOScsIHR5cGVvZiBuZXh0RWxlbWVudCA9PT0gJ3N0cmluZycgPyBcIiBJbnN0ZWFkIG9mIHBhc3NpbmcgYSBzdHJpbmcgbGlrZSAnZGl2JywgcGFzcyBcIiArIFwiUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2Jykgb3IgPGRpdiAvPi5cIiA6IHR5cGVvZiBuZXh0RWxlbWVudCA9PT0gJ2Z1bmN0aW9uJyA/ICcgSW5zdGVhZCBvZiBwYXNzaW5nIGEgY2xhc3MgbGlrZSBGb28sIHBhc3MgJyArICdSZWFjdC5jcmVhdGVFbGVtZW50KEZvbykgb3IgPEZvbyAvPi4nIDogbmV4dEVsZW1lbnQgIT0gbnVsbCAmJiBuZXh0RWxlbWVudC5wcm9wcyAhPT0gdW5kZWZpbmVkID8gJyBUaGlzIG1heSBiZSBjYXVzZWQgYnkgdW5pbnRlbnRpb25hbGx5IGxvYWRpbmcgdHdvIGluZGVwZW5kZW50ICcgKyAnY29waWVzIG9mIFJlYWN0LicgOiAnJykgOiB2b2lkIDA7XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghY29udGFpbmVyIHx8ICFjb250YWluZXIudGFnTmFtZSB8fCBjb250YWluZXIudGFnTmFtZS50b1VwcGVyQ2FzZSgpICE9PSAnQk9EWScsICdyZW5kZXIoKTogUmVuZGVyaW5nIGNvbXBvbmVudHMgZGlyZWN0bHkgaW50byBkb2N1bWVudC5ib2R5IGlzICcgKyAnZGlzY291cmFnZWQsIHNpbmNlIGl0cyBjaGlsZHJlbiBhcmUgb2Z0ZW4gbWFuaXB1bGF0ZWQgYnkgdGhpcmQtcGFydHkgJyArICdzY3JpcHRzIGFuZCBicm93c2VyIGV4dGVuc2lvbnMuIFRoaXMgbWF5IGxlYWQgdG8gc3VidGxlICcgKyAncmVjb25jaWxpYXRpb24gaXNzdWVzLiBUcnkgcmVuZGVyaW5nIGludG8gYSBjb250YWluZXIgZWxlbWVudCBjcmVhdGVkICcgKyAnZm9yIHlvdXIgYXBwLicpIDogdm9pZCAwO1xuXG4gICAgdmFyIG5leHRXcmFwcGVkRWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoVG9wTGV2ZWxXcmFwcGVyLCB7XG4gICAgICBjaGlsZDogbmV4dEVsZW1lbnRcbiAgICB9KTtcblxuICAgIHZhciBuZXh0Q29udGV4dDtcbiAgICBpZiAocGFyZW50Q29tcG9uZW50KSB7XG4gICAgICB2YXIgcGFyZW50SW5zdCA9IFJlYWN0SW5zdGFuY2VNYXAuZ2V0KHBhcmVudENvbXBvbmVudCk7XG4gICAgICBuZXh0Q29udGV4dCA9IHBhcmVudEluc3QuX3Byb2Nlc3NDaGlsZENvbnRleHQocGFyZW50SW5zdC5fY29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHRDb250ZXh0ID0gZW1wdHlPYmplY3Q7XG4gICAgfVxuXG4gICAgdmFyIHByZXZDb21wb25lbnQgPSBnZXRUb3BMZXZlbFdyYXBwZXJJbkNvbnRhaW5lcihjb250YWluZXIpO1xuXG4gICAgaWYgKHByZXZDb21wb25lbnQpIHtcbiAgICAgIHZhciBwcmV2V3JhcHBlZEVsZW1lbnQgPSBwcmV2Q29tcG9uZW50Ll9jdXJyZW50RWxlbWVudDtcbiAgICAgIHZhciBwcmV2RWxlbWVudCA9IHByZXZXcmFwcGVkRWxlbWVudC5wcm9wcy5jaGlsZDtcbiAgICAgIGlmIChzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpKSB7XG4gICAgICAgIHZhciBwdWJsaWNJbnN0ID0gcHJldkNvbXBvbmVudC5fcmVuZGVyZWRDb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKTtcbiAgICAgICAgdmFyIHVwZGF0ZWRDYWxsYmFjayA9IGNhbGxiYWNrICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjYWxsYmFjay5jYWxsKHB1YmxpY0luc3QpO1xuICAgICAgICB9O1xuICAgICAgICBSZWFjdE1vdW50Ll91cGRhdGVSb290Q29tcG9uZW50KHByZXZDb21wb25lbnQsIG5leHRXcmFwcGVkRWxlbWVudCwgbmV4dENvbnRleHQsIGNvbnRhaW5lciwgdXBkYXRlZENhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIHB1YmxpY0luc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRBdE5vZGUoY29udGFpbmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVhY3RSb290RWxlbWVudCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIHZhciBjb250YWluZXJIYXNSZWFjdE1hcmt1cCA9IHJlYWN0Um9vdEVsZW1lbnQgJiYgISFpbnRlcm5hbEdldElEKHJlYWN0Um9vdEVsZW1lbnQpO1xuICAgIHZhciBjb250YWluZXJIYXNOb25Sb290UmVhY3RDaGlsZCA9IGhhc05vblJvb3RSZWFjdENoaWxkKGNvbnRhaW5lcik7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWNvbnRhaW5lckhhc05vblJvb3RSZWFjdENoaWxkLCAncmVuZGVyKC4uLik6IFJlcGxhY2luZyBSZWFjdC1yZW5kZXJlZCBjaGlsZHJlbiB3aXRoIGEgbmV3IHJvb3QgJyArICdjb21wb25lbnQuIElmIHlvdSBpbnRlbmRlZCB0byB1cGRhdGUgdGhlIGNoaWxkcmVuIG9mIHRoaXMgbm9kZSwgJyArICd5b3Ugc2hvdWxkIGluc3RlYWQgaGF2ZSB0aGUgZXhpc3RpbmcgY2hpbGRyZW4gdXBkYXRlIHRoZWlyIHN0YXRlICcgKyAnYW5kIHJlbmRlciB0aGUgbmV3IGNvbXBvbmVudHMgaW5zdGVhZCBvZiBjYWxsaW5nIFJlYWN0RE9NLnJlbmRlci4nKSA6IHZvaWQgMDtcblxuICAgICAgaWYgKCFjb250YWluZXJIYXNSZWFjdE1hcmt1cCB8fCByZWFjdFJvb3RFbGVtZW50Lm5leHRTaWJsaW5nKSB7XG4gICAgICAgIHZhciByb290RWxlbWVudFNpYmxpbmcgPSByZWFjdFJvb3RFbGVtZW50O1xuICAgICAgICB3aGlsZSAocm9vdEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgICAgICAgaWYgKGludGVybmFsR2V0SUQocm9vdEVsZW1lbnRTaWJsaW5nKSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdyZW5kZXIoKTogVGFyZ2V0IG5vZGUgaGFzIG1hcmt1cCByZW5kZXJlZCBieSBSZWFjdCwgYnV0IHRoZXJlICcgKyAnYXJlIHVucmVsYXRlZCBub2RlcyBhcyB3ZWxsLiBUaGlzIGlzIG1vc3QgY29tbW9ubHkgY2F1c2VkIGJ5ICcgKyAnd2hpdGUtc3BhY2UgaW5zZXJ0ZWQgYXJvdW5kIHNlcnZlci1yZW5kZXJlZCBtYXJrdXAuJykgOiB2b2lkIDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgcm9vdEVsZW1lbnRTaWJsaW5nID0gcm9vdEVsZW1lbnRTaWJsaW5nLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNob3VsZFJldXNlTWFya3VwID0gY29udGFpbmVySGFzUmVhY3RNYXJrdXAgJiYgIXByZXZDb21wb25lbnQgJiYgIWNvbnRhaW5lckhhc05vblJvb3RSZWFjdENoaWxkO1xuICAgIHZhciBjb21wb25lbnQgPSBSZWFjdE1vdW50Ll9yZW5kZXJOZXdSb290Q29tcG9uZW50KG5leHRXcmFwcGVkRWxlbWVudCwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCwgbmV4dENvbnRleHQpLl9yZW5kZXJlZENvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2suY2FsbChjb21wb25lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcG9uZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIGEgUmVhY3QgY29tcG9uZW50IGludG8gdGhlIERPTSBpbiB0aGUgc3VwcGxpZWQgYGNvbnRhaW5lcmAuXG4gICAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdGRvbS5yZW5kZXJcbiAgICpcbiAgICogSWYgdGhlIFJlYWN0IGNvbXBvbmVudCB3YXMgcHJldmlvdXNseSByZW5kZXJlZCBpbnRvIGBjb250YWluZXJgLCB0aGlzIHdpbGxcbiAgICogcGVyZm9ybSBhbiB1cGRhdGUgb24gaXQgYW5kIG9ubHkgbXV0YXRlIHRoZSBET00gYXMgbmVjZXNzYXJ5IHRvIHJlZmxlY3QgdGhlXG4gICAqIGxhdGVzdCBSZWFjdCBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudCBDb21wb25lbnQgZWxlbWVudCB0byByZW5kZXIuXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHJlbmRlciBpbnRvLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24gdHJpZ2dlcmVkIG9uIGNvbXBsZXRpb25cbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IENvbXBvbmVudCBpbnN0YW5jZSByZW5kZXJlZCBpbiBgY29udGFpbmVyYC5cbiAgICovXG4gIHJlbmRlcjogZnVuY3Rpb24gKG5leHRFbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIFJlYWN0TW91bnQuX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKG51bGwsIG5leHRFbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKTtcbiAgfSxcblxuICAvKipcbiAgICogVW5tb3VudHMgYW5kIGRlc3Ryb3lzIHRoZSBSZWFjdCBjb21wb25lbnQgcmVuZGVyZWQgaW4gdGhlIGBjb250YWluZXJgLlxuICAgKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3Rkb20udW5tb3VudGNvbXBvbmVudGF0bm9kZVxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCBjb250YWluaW5nIGEgUmVhY3QgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGEgY29tcG9uZW50IHdhcyBmb3VuZCBpbiBhbmQgdW5tb3VudGVkIGZyb21cbiAgICogICAgICAgICAgICAgICAgICAgYGNvbnRhaW5lcmBcbiAgICovXG4gIHVubW91bnRDb21wb25lbnRBdE5vZGU6IGZ1bmN0aW9uIChjb250YWluZXIpIHtcbiAgICAvLyBWYXJpb3VzIHBhcnRzIG9mIG91ciBjb2RlIChzdWNoIGFzIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50J3NcbiAgICAvLyBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KSBhc3N1bWUgdGhhdCBjYWxscyB0byByZW5kZXIgYXJlbid0IG5lc3RlZDtcbiAgICAvLyB2ZXJpZnkgdGhhdCB0aGF0J3MgdGhlIGNhc2UuIChTdHJpY3RseSBzcGVha2luZywgdW5tb3VudGluZyB3b24ndCBjYXVzZSBhXG4gICAgLy8gcmVuZGVyIGJ1dCB3ZSBzdGlsbCBkb24ndCBleHBlY3QgdG8gYmUgaW4gYSByZW5kZXIgY2FsbCBoZXJlLilcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID09IG51bGwsICd1bm1vdW50Q29tcG9uZW50QXROb2RlKCk6IFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gJyArICdvZiBwcm9wcyBhbmQgc3RhdGU7IHRyaWdnZXJpbmcgbmVzdGVkIGNvbXBvbmVudCB1cGRhdGVzIGZyb20gcmVuZGVyICcgKyAnaXMgbm90IGFsbG93ZWQuIElmIG5lY2Vzc2FyeSwgdHJpZ2dlciBuZXN0ZWQgdXBkYXRlcyBpbiAnICsgJ2NvbXBvbmVudERpZFVwZGF0ZS4gQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgJXMuJywgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCAmJiBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IHZvaWQgMDtcblxuICAgICFpc1ZhbGlkQ29udGFpbmVyKGNvbnRhaW5lcikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndW5tb3VudENvbXBvbmVudEF0Tm9kZSguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LicpIDogX3Byb2RJbnZhcmlhbnQoJzQwJykgOiB2b2lkIDA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIW5vZGVJc1JlbmRlcmVkQnlPdGhlckluc3RhbmNlKGNvbnRhaW5lciksIFwidW5tb3VudENvbXBvbmVudEF0Tm9kZSgpOiBUaGUgbm9kZSB5b3UncmUgYXR0ZW1wdGluZyB0byB1bm1vdW50IFwiICsgJ3dhcyByZW5kZXJlZCBieSBhbm90aGVyIGNvcHkgb2YgUmVhY3QuJykgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgdmFyIHByZXZDb21wb25lbnQgPSBnZXRUb3BMZXZlbFdyYXBwZXJJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIGlmICghcHJldkNvbXBvbmVudCkge1xuICAgICAgLy8gQ2hlY2sgaWYgdGhlIG5vZGUgYmVpbmcgdW5tb3VudGVkIHdhcyByZW5kZXJlZCBieSBSZWFjdCwgYnV0IGlzbid0IGFcbiAgICAgIC8vIHJvb3Qgbm9kZS5cbiAgICAgIHZhciBjb250YWluZXJIYXNOb25Sb290UmVhY3RDaGlsZCA9IGhhc05vblJvb3RSZWFjdENoaWxkKGNvbnRhaW5lcik7XG5cbiAgICAgIC8vIENoZWNrIGlmIHRoZSBjb250YWluZXIgaXRzZWxmIGlzIGEgUmVhY3Qgcm9vdCBub2RlLlxuICAgICAgdmFyIGlzQ29udGFpbmVyUmVhY3RSb290ID0gY29udGFpbmVyLm5vZGVUeXBlID09PSAxICYmIGNvbnRhaW5lci5oYXNBdHRyaWJ1dGUoUk9PVF9BVFRSX05BTUUpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghY29udGFpbmVySGFzTm9uUm9vdFJlYWN0Q2hpbGQsIFwidW5tb3VudENvbXBvbmVudEF0Tm9kZSgpOiBUaGUgbm9kZSB5b3UncmUgYXR0ZW1wdGluZyB0byB1bm1vdW50IFwiICsgJ3dhcyByZW5kZXJlZCBieSBSZWFjdCBhbmQgaXMgbm90IGEgdG9wLWxldmVsIGNvbnRhaW5lci4gJXMnLCBpc0NvbnRhaW5lclJlYWN0Um9vdCA/ICdZb3UgbWF5IGhhdmUgYWNjaWRlbnRhbGx5IHBhc3NlZCBpbiBhIFJlYWN0IHJvb3Qgbm9kZSBpbnN0ZWFkICcgKyAnb2YgaXRzIGNvbnRhaW5lci4nIDogJ0luc3RlYWQsIGhhdmUgdGhlIHBhcmVudCBjb21wb25lbnQgdXBkYXRlIGl0cyBzdGF0ZSBhbmQgJyArICdyZXJlbmRlciBpbiBvcmRlciB0byByZW1vdmUgdGhpcyBjb21wb25lbnQuJykgOiB2b2lkIDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZGVsZXRlIGluc3RhbmNlc0J5UmVhY3RSb290SURbcHJldkNvbXBvbmVudC5faW5zdGFuY2Uucm9vdElEXTtcbiAgICBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXModW5tb3VudENvbXBvbmVudEZyb21Ob2RlLCBwcmV2Q29tcG9uZW50LCBjb250YWluZXIsIGZhbHNlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICBfbW91bnRJbWFnZUludG9Ob2RlOiBmdW5jdGlvbiAobWFya3VwLCBjb250YWluZXIsIGluc3RhbmNlLCBzaG91bGRSZXVzZU1hcmt1cCwgdHJhbnNhY3Rpb24pIHtcbiAgICAhaXNWYWxpZENvbnRhaW5lcihjb250YWluZXIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ21vdW50Q29tcG9uZW50SW50b05vZGUoLi4uKTogVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgdmFsaWQuJykgOiBfcHJvZEludmFyaWFudCgnNDEnKSA6IHZvaWQgMDtcblxuICAgIGlmIChzaG91bGRSZXVzZU1hcmt1cCkge1xuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICBpZiAoUmVhY3RNYXJrdXBDaGVja3N1bS5jYW5SZXVzZU1hcmt1cChtYXJrdXAsIHJvb3RFbGVtZW50KSkge1xuICAgICAgICBSZWFjdERPTUNvbXBvbmVudFRyZWUucHJlY2FjaGVOb2RlKGluc3RhbmNlLCByb290RWxlbWVudCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjaGVja3N1bSA9IHJvb3RFbGVtZW50LmdldEF0dHJpYnV0ZShSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSk7XG4gICAgICAgIHJvb3RFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSk7XG5cbiAgICAgICAgdmFyIHJvb3RNYXJrdXAgPSByb290RWxlbWVudC5vdXRlckhUTUw7XG4gICAgICAgIHJvb3RFbGVtZW50LnNldEF0dHJpYnV0ZShSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSwgY2hlY2tzdW0pO1xuXG4gICAgICAgIHZhciBub3JtYWxpemVkTWFya3VwID0gbWFya3VwO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIC8vIGJlY2F1c2Ugcm9vdE1hcmt1cCBpcyByZXRyaWV2ZWQgZnJvbSB0aGUgRE9NLCB2YXJpb3VzIG5vcm1hbGl6YXRpb25zXG4gICAgICAgICAgLy8gd2lsbCBoYXZlIG9jY3VycmVkIHdoaWNoIHdpbGwgbm90IGJlIHByZXNlbnQgaW4gYG1hcmt1cGAuIEhlcmUsXG4gICAgICAgICAgLy8gaW5zZXJ0IG1hcmt1cCBpbnRvIGEgPGRpdj4gb3IgPGlmcmFtZT4gZGVwZW5kaW5nIG9uIHRoZSBjb250YWluZXJcbiAgICAgICAgICAvLyB0eXBlIHRvIHBlcmZvcm0gdGhlIHNhbWUgbm9ybWFsaXphdGlvbnMgYmVmb3JlIGNvbXBhcmluZy5cbiAgICAgICAgICB2YXIgbm9ybWFsaXplcjtcbiAgICAgICAgICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSkge1xuICAgICAgICAgICAgbm9ybWFsaXplciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgbm9ybWFsaXplci5pbm5lckhUTUwgPSBtYXJrdXA7XG4gICAgICAgICAgICBub3JtYWxpemVkTWFya3VwID0gbm9ybWFsaXplci5pbm5lckhUTUw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobm9ybWFsaXplcik7XG4gICAgICAgICAgICBub3JtYWxpemVyLmNvbnRlbnREb2N1bWVudC53cml0ZShtYXJrdXApO1xuICAgICAgICAgICAgbm9ybWFsaXplZE1hcmt1cCA9IG5vcm1hbGl6ZXIuY29udGVudERvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vdXRlckhUTUw7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG5vcm1hbGl6ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaWZmSW5kZXggPSBmaXJzdERpZmZlcmVuY2VJbmRleChub3JtYWxpemVkTWFya3VwLCByb290TWFya3VwKTtcbiAgICAgICAgdmFyIGRpZmZlcmVuY2UgPSAnIChjbGllbnQpICcgKyBub3JtYWxpemVkTWFya3VwLnN1YnN0cmluZyhkaWZmSW5kZXggLSAyMCwgZGlmZkluZGV4ICsgMjApICsgJ1xcbiAoc2VydmVyKSAnICsgcm9vdE1hcmt1cC5zdWJzdHJpbmcoZGlmZkluZGV4IC0gMjAsIGRpZmZJbmRleCArIDIwKTtcblxuICAgICAgICAhKGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRE9DX05PREVfVFlQRSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnWW91XFwncmUgdHJ5aW5nIHRvIHJlbmRlciBhIGNvbXBvbmVudCB0byB0aGUgZG9jdW1lbnQgdXNpbmcgc2VydmVyIHJlbmRlcmluZyBidXQgdGhlIGNoZWNrc3VtIHdhcyBpbnZhbGlkLiBUaGlzIHVzdWFsbHkgbWVhbnMgeW91IHJlbmRlcmVkIGEgZGlmZmVyZW50IGNvbXBvbmVudCB0eXBlIG9yIHByb3BzIG9uIHRoZSBjbGllbnQgZnJvbSB0aGUgb25lIG9uIHRoZSBzZXJ2ZXIsIG9yIHlvdXIgcmVuZGVyKCkgbWV0aG9kcyBhcmUgaW1wdXJlLiBSZWFjdCBjYW5ub3QgaGFuZGxlIHRoaXMgY2FzZSBkdWUgdG8gY3Jvc3MtYnJvd3NlciBxdWlya3MgYnkgcmVuZGVyaW5nIGF0IHRoZSBkb2N1bWVudCByb290LiBZb3Ugc2hvdWxkIGxvb2sgZm9yIGVudmlyb25tZW50IGRlcGVuZGVudCBjb2RlIGluIHlvdXIgY29tcG9uZW50cyBhbmQgZW5zdXJlIHRoZSBwcm9wcyBhcmUgdGhlIHNhbWUgY2xpZW50IGFuZCBzZXJ2ZXIgc2lkZTpcXG4lcycsIGRpZmZlcmVuY2UpIDogX3Byb2RJbnZhcmlhbnQoJzQyJywgZGlmZmVyZW5jZSkgOiB2b2lkIDA7XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1JlYWN0IGF0dGVtcHRlZCB0byByZXVzZSBtYXJrdXAgaW4gYSBjb250YWluZXIgYnV0IHRoZSAnICsgJ2NoZWNrc3VtIHdhcyBpbnZhbGlkLiBUaGlzIGdlbmVyYWxseSBtZWFucyB0aGF0IHlvdSBhcmUgJyArICd1c2luZyBzZXJ2ZXIgcmVuZGVyaW5nIGFuZCB0aGUgbWFya3VwIGdlbmVyYXRlZCBvbiB0aGUgJyArICdzZXJ2ZXIgd2FzIG5vdCB3aGF0IHRoZSBjbGllbnQgd2FzIGV4cGVjdGluZy4gUmVhY3QgaW5qZWN0ZWQgJyArICduZXcgbWFya3VwIHRvIGNvbXBlbnNhdGUgd2hpY2ggd29ya3MgYnV0IHlvdSBoYXZlIGxvc3QgbWFueSAnICsgJ29mIHRoZSBiZW5lZml0cyBvZiBzZXJ2ZXIgcmVuZGVyaW5nLiBJbnN0ZWFkLCBmaWd1cmUgb3V0ICcgKyAnd2h5IHRoZSBtYXJrdXAgYmVpbmcgZ2VuZXJhdGVkIGlzIGRpZmZlcmVudCBvbiB0aGUgY2xpZW50ICcgKyAnb3Igc2VydmVyOlxcbiVzJywgZGlmZmVyZW5jZSkgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAhKGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRE9DX05PREVfVFlQRSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnWW91XFwncmUgdHJ5aW5nIHRvIHJlbmRlciBhIGNvbXBvbmVudCB0byB0aGUgZG9jdW1lbnQgYnV0IHlvdSBkaWRuXFwndCB1c2Ugc2VydmVyIHJlbmRlcmluZy4gV2UgY2FuXFwndCBkbyB0aGlzIHdpdGhvdXQgdXNpbmcgc2VydmVyIHJlbmRlcmluZyBkdWUgdG8gY3Jvc3MtYnJvd3NlciBxdWlya3MuIFNlZSBSZWFjdERPTVNlcnZlci5yZW5kZXJUb1N0cmluZygpIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLicpIDogX3Byb2RJbnZhcmlhbnQoJzQzJykgOiB2b2lkIDA7XG5cbiAgICBpZiAodHJhbnNhY3Rpb24udXNlQ3JlYXRlRWxlbWVudCkge1xuICAgICAgd2hpbGUgKGNvbnRhaW5lci5sYXN0Q2hpbGQpIHtcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNvbnRhaW5lci5sYXN0Q2hpbGQpO1xuICAgICAgfVxuICAgICAgRE9NTGF6eVRyZWUuaW5zZXJ0VHJlZUJlZm9yZShjb250YWluZXIsIG1hcmt1cCwgbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldElubmVySFRNTChjb250YWluZXIsIG1hcmt1cCk7XG4gICAgICBSZWFjdERPTUNvbXBvbmVudFRyZWUucHJlY2FjaGVOb2RlKGluc3RhbmNlLCBjb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBob3N0Tm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKGNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgIGlmIChob3N0Tm9kZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Ib3N0T3BlcmF0aW9uKHtcbiAgICAgICAgICBpbnN0YW5jZUlEOiBob3N0Tm9kZS5fZGVidWdJRCxcbiAgICAgICAgICB0eXBlOiAnbW91bnQnLFxuICAgICAgICAgIHBheWxvYWQ6IG1hcmt1cC50b1N0cmluZygpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE1vdW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdE1vdW50LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9SZWFjdCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBSZWFjdE5vZGVUeXBlcyA9IHtcbiAgSE9TVDogMCxcbiAgQ09NUE9TSVRFOiAxLFxuICBFTVBUWTogMixcblxuICBnZXRUeXBlOiBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChub2RlID09PSBudWxsIHx8IG5vZGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gUmVhY3ROb2RlVHlwZXMuRU1QVFk7XG4gICAgfSBlbHNlIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChub2RlKSkge1xuICAgICAgaWYgKHR5cGVvZiBub2RlLnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0Tm9kZVR5cGVzLkNPTVBPU0lURTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBSZWFjdE5vZGVUeXBlcy5IT1NUO1xuICAgICAgfVxuICAgIH1cbiAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVW5leHBlY3RlZCBub2RlOiAlcycsIG5vZGUpIDogX3Byb2RJbnZhcmlhbnQoJzI2Jywgbm9kZSkgOiB2b2lkIDA7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROb2RlVHlwZXM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0Tm9kZVR5cGVzLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9UcmFuc2FjdGlvbicpO1xudmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluc3RydW1lbnRhdGlvbicpO1xudmFyIFJlYWN0U2VydmVyVXBkYXRlUXVldWUgPSByZXF1aXJlKCcuL1JlYWN0U2VydmVyVXBkYXRlUXVldWUnKTtcblxuLyoqXG4gKiBFeGVjdXRlZCB3aXRoaW4gdGhlIHNjb3BlIG9mIHRoZSBgVHJhbnNhY3Rpb25gIGluc3RhbmNlLiBDb25zaWRlciB0aGVzZSBhc1xuICogYmVpbmcgbWVtYmVyIG1ldGhvZHMsIGJ1dCB3aXRoIGFuIGltcGxpZWQgb3JkZXJpbmcgd2hpbGUgYmVpbmcgaXNvbGF0ZWQgZnJvbVxuICogZWFjaCBvdGhlci5cbiAqL1xudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW107XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRSQU5TQUNUSU9OX1dSQVBQRVJTLnB1c2goe1xuICAgIGluaXRpYWxpemU6IFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luRmx1c2gsXG4gICAgY2xvc2U6IFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkVuZEZsdXNoXG4gIH0pO1xufVxuXG52YXIgbm9vcENhbGxiYWNrUXVldWUgPSB7XG4gIGVucXVldWU6IGZ1bmN0aW9uICgpIHt9XG59O1xuXG4vKipcbiAqIEBjbGFzcyBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHJlbmRlclRvU3RhdGljTWFya3VwXG4gKi9cbmZ1bmN0aW9uIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ocmVuZGVyVG9TdGF0aWNNYXJrdXApIHtcbiAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xuICB0aGlzLnJlbmRlclRvU3RhdGljTWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXA7XG4gIHRoaXMudXNlQ3JlYXRlRWxlbWVudCA9IGZhbHNlO1xuICB0aGlzLnVwZGF0ZVF1ZXVlID0gbmV3IFJlYWN0U2VydmVyVXBkYXRlUXVldWUodGhpcyk7XG59XG5cbnZhciBNaXhpbiA9IHtcbiAgLyoqXG4gICAqIEBzZWUgVHJhbnNhY3Rpb25cbiAgICogQGFic3RyYWN0XG4gICAqIEBmaW5hbFxuICAgKiBAcmV0dXJuIHthcnJheX0gRW1wdHkgbGlzdCBvZiBvcGVyYXRpb24gd3JhcCBwcm9jZWR1cmVzLlxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgcXVldWUgdG8gY29sbGVjdCBgb25ET01SZWFkeWAgY2FsbGJhY2tzIHdpdGguXG4gICAqL1xuICBnZXRSZWFjdE1vdW50UmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbm9vcENhbGxiYWNrUXVldWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge29iamVjdH0gVGhlIHF1ZXVlIHRvIGNvbGxlY3QgUmVhY3QgYXN5bmMgZXZlbnRzLlxuICAgKi9cbiAgZ2V0VXBkYXRlUXVldWU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVRdWV1ZTtcbiAgfSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgdGhpcywgYW5kIHdpbGwgaW52b2tlIHRoaXMgYmVmb3JlIGFsbG93aW5nIHRoaXNcbiAgICogaW5zdGFuY2UgdG8gYmUgcmV1c2VkLlxuICAgKi9cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24gKCkge30sXG5cbiAgY2hlY2twb2ludDogZnVuY3Rpb24gKCkge30sXG5cbiAgcm9sbGJhY2s6IGZ1bmN0aW9uICgpIHt9XG59O1xuXG5fYXNzaWduKFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ucHJvdG90eXBlLCBUcmFuc2FjdGlvbiwgTWl4aW4pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSAnMTUuNi4yJztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RWZXJzaW9uLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVmlld3BvcnRNZXRyaWNzID0ge1xuICBjdXJyZW50U2Nyb2xsTGVmdDogMCxcblxuICBjdXJyZW50U2Nyb2xsVG9wOiAwLFxuXG4gIHJlZnJlc2hTY3JvbGxWYWx1ZXM6IGZ1bmN0aW9uIChzY3JvbGxQb3NpdGlvbikge1xuICAgIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsTGVmdCA9IHNjcm9sbFBvc2l0aW9uLng7XG4gICAgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxUb3AgPSBzY3JvbGxQb3NpdGlvbi55O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZXdwb3J0TWV0cmljcztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvVmlld3BvcnRNZXRyaWNzLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBBY2N1bXVsYXRlcyBpdGVtcyB0aGF0IG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkIGludG8gdGhlIGZpcnN0IG9uZS4gVGhpc1xuICogaXMgdXNlZCB0byBjb25zZXJ2ZSBtZW1vcnkgYnkgYXZvaWRpbmcgYXJyYXkgYWxsb2NhdGlvbnMsIGFuZCB0aHVzIHNhY3JpZmljZXNcbiAqIEFQSSBjbGVhbm5lc3MuIFNpbmNlIGBjdXJyZW50YCBjYW4gYmUgbnVsbCBiZWZvcmUgYmVpbmcgcGFzc2VkIGluIGFuZCBub3RcbiAqIG51bGwgYWZ0ZXIgdGhpcyBmdW5jdGlvbiwgbWFrZSBzdXJlIHRvIGFzc2lnbiBpdCBiYWNrIHRvIGBjdXJyZW50YDpcbiAqXG4gKiBgYSA9IGFjY3VtdWxhdGVJbnRvKGEsIGIpO2BcbiAqXG4gKiBUaGlzIEFQSSBzaG91bGQgYmUgc3BhcmluZ2x5IHVzZWQuIFRyeSBgYWNjdW11bGF0ZWAgZm9yIHNvbWV0aGluZyBjbGVhbmVyLlxuICpcbiAqIEByZXR1cm4geyp8YXJyYXk8Kj59IEFuIGFjY3VtdWxhdGlvbiBvZiBpdGVtcy5cbiAqL1xuXG5mdW5jdGlvbiBhY2N1bXVsYXRlSW50byhjdXJyZW50LCBuZXh0KSB7XG4gICEobmV4dCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdhY2N1bXVsYXRlSW50byguLi4pOiBBY2N1bXVsYXRlZCBpdGVtcyBtdXN0IG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4nKSA6IF9wcm9kSW52YXJpYW50KCczMCcpIDogdm9pZCAwO1xuXG4gIGlmIChjdXJyZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbmV4dDtcbiAgfVxuXG4gIC8vIEJvdGggYXJlIG5vdCBlbXB0eS4gV2FybmluZzogTmV2ZXIgY2FsbCB4LmNvbmNhdCh5KSB3aGVuIHlvdSBhcmUgbm90XG4gIC8vIGNlcnRhaW4gdGhhdCB4IGlzIGFuIEFycmF5ICh4IGNvdWxkIGJlIGEgc3RyaW5nIHdpdGggY29uY2F0IG1ldGhvZCkuXG4gIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnQpKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobmV4dCkpIHtcbiAgICAgIGN1cnJlbnQucHVzaC5hcHBseShjdXJyZW50LCBuZXh0KTtcbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH1cbiAgICBjdXJyZW50LnB1c2gobmV4dCk7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShuZXh0KSkge1xuICAgIC8vIEEgYml0IHRvbyBkYW5nZXJvdXMgdG8gbXV0YXRlIGBuZXh0YC5cbiAgICByZXR1cm4gW2N1cnJlbnRdLmNvbmNhdChuZXh0KTtcbiAgfVxuXG4gIHJldHVybiBbY3VycmVudCwgbmV4dF07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYWNjdW11bGF0ZUludG87XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL2FjY3VtdWxhdGVJbnRvLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHBhcmFtIHthcnJheX0gYXJyIGFuIFwiYWNjdW11bGF0aW9uXCIgb2YgaXRlbXMgd2hpY2ggaXMgZWl0aGVyIGFuIEFycmF5IG9yXG4gKiBhIHNpbmdsZSBpdGVtLiBVc2VmdWwgd2hlbiBwYWlyZWQgd2l0aCB0aGUgYGFjY3VtdWxhdGVgIG1vZHVsZS4gVGhpcyBpcyBhXG4gKiBzaW1wbGUgdXRpbGl0eSB0aGF0IGFsbG93cyB1cyB0byByZWFzb24gYWJvdXQgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zLCBidXRcbiAqIGhhbmRsaW5nIHRoZSBjYXNlIHdoZW4gdGhlcmUgaXMgZXhhY3RseSBvbmUgaXRlbSAoYW5kIHdlIGRvIG5vdCBuZWVkIHRvXG4gKiBhbGxvY2F0ZSBhbiBhcnJheSkuXG4gKi9cblxuZnVuY3Rpb24gZm9yRWFjaEFjY3VtdWxhdGVkKGFyciwgY2IsIHNjb3BlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBhcnIuZm9yRWFjaChjYiwgc2NvcGUpO1xuICB9IGVsc2UgaWYgKGFycikge1xuICAgIGNiLmNhbGwoc2NvcGUsIGFycik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JFYWNoQWNjdW11bGF0ZWQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL2ZvckVhY2hBY2N1bXVsYXRlZC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Tm9kZVR5cGVzID0gcmVxdWlyZSgnLi9SZWFjdE5vZGVUeXBlcycpO1xuXG5mdW5jdGlvbiBnZXRIb3N0Q29tcG9uZW50RnJvbUNvbXBvc2l0ZShpbnN0KSB7XG4gIHZhciB0eXBlO1xuXG4gIHdoaWxlICgodHlwZSA9IGluc3QuX3JlbmRlcmVkTm9kZVR5cGUpID09PSBSZWFjdE5vZGVUeXBlcy5DT01QT1NJVEUpIHtcbiAgICBpbnN0ID0gaW5zdC5fcmVuZGVyZWRDb21wb25lbnQ7XG4gIH1cblxuICBpZiAodHlwZSA9PT0gUmVhY3ROb2RlVHlwZXMuSE9TVCkge1xuICAgIHJldHVybiBpbnN0Ll9yZW5kZXJlZENvbXBvbmVudDtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBSZWFjdE5vZGVUeXBlcy5FTVBUWSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SG9zdENvbXBvbmVudEZyb21Db21wb3NpdGU7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL2dldEhvc3RDb21wb25lbnRGcm9tQ29tcG9zaXRlLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgY29udGVudEtleSA9IG51bGw7XG5cbi8qKlxuICogR2V0cyB0aGUga2V5IHVzZWQgdG8gYWNjZXNzIHRleHQgY29udGVudCBvbiBhIERPTSBub2RlLlxuICpcbiAqIEByZXR1cm4gez9zdHJpbmd9IEtleSB1c2VkIHRvIGFjY2VzcyB0ZXh0IGNvbnRlbnQuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpIHtcbiAgaWYgKCFjb250ZW50S2V5ICYmIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAgIC8vIFByZWZlciB0ZXh0Q29udGVudCB0byBpbm5lclRleHQgYmVjYXVzZSBtYW55IGJyb3dzZXJzIHN1cHBvcnQgYm90aCBidXRcbiAgICAvLyBTVkcgPHRleHQ+IGVsZW1lbnRzIGRvbid0IHN1cHBvcnQgaW5uZXJUZXh0IGV2ZW4gd2hlbiA8ZGl2PiBkb2VzLlxuICAgIGNvbnRlbnRLZXkgPSAndGV4dENvbnRlbnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA/ICd0ZXh0Q29udGVudCcgOiAnaW5uZXJUZXh0JztcbiAgfVxuICByZXR1cm4gY29udGVudEtleTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRUZXh0Q29udGVudEFjY2Vzc29yO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9nZXRUZXh0Q29udGVudEFjY2Vzc29yLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcblxuZnVuY3Rpb24gaXNDaGVja2FibGUoZWxlbSkge1xuICB2YXIgdHlwZSA9IGVsZW0udHlwZTtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZTtcbiAgcmV0dXJuIG5vZGVOYW1lICYmIG5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgJiYgKHR5cGUgPT09ICdjaGVja2JveCcgfHwgdHlwZSA9PT0gJ3JhZGlvJyk7XG59XG5cbmZ1bmN0aW9uIGdldFRyYWNrZXIoaW5zdCkge1xuICByZXR1cm4gaW5zdC5fd3JhcHBlclN0YXRlLnZhbHVlVHJhY2tlcjtcbn1cblxuZnVuY3Rpb24gYXR0YWNoVHJhY2tlcihpbnN0LCB0cmFja2VyKSB7XG4gIGluc3QuX3dyYXBwZXJTdGF0ZS52YWx1ZVRyYWNrZXIgPSB0cmFja2VyO1xufVxuXG5mdW5jdGlvbiBkZXRhY2hUcmFja2VyKGluc3QpIHtcbiAgaW5zdC5fd3JhcHBlclN0YXRlLnZhbHVlVHJhY2tlciA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlRnJvbU5vZGUobm9kZSkge1xuICB2YXIgdmFsdWU7XG4gIGlmIChub2RlKSB7XG4gICAgdmFsdWUgPSBpc0NoZWNrYWJsZShub2RlKSA/ICcnICsgbm9kZS5jaGVja2VkIDogbm9kZS52YWx1ZTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbnZhciBpbnB1dFZhbHVlVHJhY2tpbmcgPSB7XG4gIC8vIGV4cG9zZWQgZm9yIHRlc3RpbmdcbiAgX2dldFRyYWNrZXJGcm9tTm9kZTogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gZ2V0VHJhY2tlcihSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShub2RlKSk7XG4gIH0sXG5cblxuICB0cmFjazogZnVuY3Rpb24gKGluc3QpIHtcbiAgICBpZiAoZ2V0VHJhY2tlcihpbnN0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBub2RlID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCk7XG4gICAgdmFyIHZhbHVlRmllbGQgPSBpc0NoZWNrYWJsZShub2RlKSA/ICdjaGVja2VkJyA6ICd2YWx1ZSc7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5vZGUuY29uc3RydWN0b3IucHJvdG90eXBlLCB2YWx1ZUZpZWxkKTtcblxuICAgIHZhciBjdXJyZW50VmFsdWUgPSAnJyArIG5vZGVbdmFsdWVGaWVsZF07XG5cbiAgICAvLyBpZiBzb21lb25lIGhhcyBhbHJlYWR5IGRlZmluZWQgYSB2YWx1ZSBvciBTYWZhcmksIHRoZW4gYmFpbFxuICAgIC8vIGFuZCBkb24ndCB0cmFjayB2YWx1ZSB3aWxsIGNhdXNlIG92ZXIgcmVwb3J0aW5nIG9mIGNoYW5nZXMsXG4gICAgLy8gYnV0IGl0J3MgYmV0dGVyIHRoZW4gYSBoYXJkIGZhaWx1cmVcbiAgICAvLyAobmVlZGVkIGZvciBjZXJ0YWluIHRlc3RzIHRoYXQgc3B5T24gaW5wdXQgdmFsdWVzIGFuZCBTYWZhcmkpXG4gICAgaWYgKG5vZGUuaGFzT3duUHJvcGVydHkodmFsdWVGaWVsZCkgfHwgdHlwZW9mIGRlc2NyaXB0b3IuZ2V0ICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBkZXNjcmlwdG9yLnNldCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub2RlLCB2YWx1ZUZpZWxkLCB7XG4gICAgICBlbnVtZXJhYmxlOiBkZXNjcmlwdG9yLmVudW1lcmFibGUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3IuZ2V0LmNhbGwodGhpcyk7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgY3VycmVudFZhbHVlID0gJycgKyB2YWx1ZTtcbiAgICAgICAgZGVzY3JpcHRvci5zZXQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBhdHRhY2hUcmFja2VyKGluc3QsIHtcbiAgICAgIGdldFZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50VmFsdWU7XG4gICAgICB9LFxuICAgICAgc2V0VmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBjdXJyZW50VmFsdWUgPSAnJyArIHZhbHVlO1xuICAgICAgfSxcbiAgICAgIHN0b3BUcmFja2luZzogZnVuY3Rpb24gKCkge1xuICAgICAgICBkZXRhY2hUcmFja2VyKGluc3QpO1xuICAgICAgICBkZWxldGUgbm9kZVt2YWx1ZUZpZWxkXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICB1cGRhdGVWYWx1ZUlmQ2hhbmdlZDogZnVuY3Rpb24gKGluc3QpIHtcbiAgICBpZiAoIWluc3QpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHRyYWNrZXIgPSBnZXRUcmFja2VyKGluc3QpO1xuXG4gICAgaWYgKCF0cmFja2VyKSB7XG4gICAgICBpbnB1dFZhbHVlVHJhY2tpbmcudHJhY2soaW5zdCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgbGFzdFZhbHVlID0gdHJhY2tlci5nZXRWYWx1ZSgpO1xuICAgIHZhciBuZXh0VmFsdWUgPSBnZXRWYWx1ZUZyb21Ob2RlKFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpKTtcblxuICAgIGlmIChuZXh0VmFsdWUgIT09IGxhc3RWYWx1ZSkge1xuICAgICAgdHJhY2tlci5zZXRWYWx1ZShuZXh0VmFsdWUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBzdG9wVHJhY2tpbmc6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgdmFyIHRyYWNrZXIgPSBnZXRUcmFja2VyKGluc3QpO1xuICAgIGlmICh0cmFja2VyKSB7XG4gICAgICB0cmFja2VyLnN0b3BUcmFja2luZygpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnB1dFZhbHVlVHJhY2tpbmc7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL2lucHV0VmFsdWVUcmFja2luZy5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBzZWUgaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvdGhlLWlucHV0LWVsZW1lbnQuaHRtbCNpbnB1dC10eXBlLWF0dHItc3VtbWFyeVxuICovXG5cbnZhciBzdXBwb3J0ZWRJbnB1dFR5cGVzID0ge1xuICBjb2xvcjogdHJ1ZSxcbiAgZGF0ZTogdHJ1ZSxcbiAgZGF0ZXRpbWU6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWUsXG4gIGVtYWlsOiB0cnVlLFxuICBtb250aDogdHJ1ZSxcbiAgbnVtYmVyOiB0cnVlLFxuICBwYXNzd29yZDogdHJ1ZSxcbiAgcmFuZ2U6IHRydWUsXG4gIHNlYXJjaDogdHJ1ZSxcbiAgdGVsOiB0cnVlLFxuICB0ZXh0OiB0cnVlLFxuICB0aW1lOiB0cnVlLFxuICB1cmw6IHRydWUsXG4gIHdlZWs6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGlzVGV4dElucHV0RWxlbWVudChlbGVtKSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW0gJiYgZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnaW5wdXQnKSB7XG4gICAgcmV0dXJuICEhc3VwcG9ydGVkSW5wdXRUeXBlc1tlbGVtLnR5cGVdO1xuICB9XG5cbiAgaWYgKG5vZGVOYW1lID09PSAndGV4dGFyZWEnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0SW5wdXRFbGVtZW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9pc1RleHRJbnB1dEVsZW1lbnQuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG52YXIgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyID0gcmVxdWlyZSgnLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXInKTtcbnZhciBzZXRJbm5lckhUTUwgPSByZXF1aXJlKCcuL3NldElubmVySFRNTCcpO1xuXG4vKipcbiAqIFNldCB0aGUgdGV4dENvbnRlbnQgcHJvcGVydHkgb2YgYSBub2RlLCBlbnN1cmluZyB0aGF0IHdoaXRlc3BhY2UgaXMgcHJlc2VydmVkXG4gKiBldmVuIGluIElFOC4gaW5uZXJUZXh0IGlzIGEgcG9vciBzdWJzdGl0dXRlIGZvciB0ZXh0Q29udGVudCBhbmQsIGFtb25nIG1hbnlcbiAqIGlzc3VlcywgaW5zZXJ0cyA8YnI+IGluc3RlYWQgb2YgdGhlIGxpdGVyYWwgbmV3bGluZSBjaGFycy4gaW5uZXJIVE1MIGJlaGF2ZXNcbiAqIGFzIGl0IHNob3VsZC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIHNldFRleHRDb250ZW50ID0gZnVuY3Rpb24gKG5vZGUsIHRleHQpIHtcbiAgaWYgKHRleHQpIHtcbiAgICB2YXIgZmlyc3RDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcblxuICAgIGlmIChmaXJzdENoaWxkICYmIGZpcnN0Q2hpbGQgPT09IG5vZGUubGFzdENoaWxkICYmIGZpcnN0Q2hpbGQubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIGZpcnN0Q2hpbGQubm9kZVZhbHVlID0gdGV4dDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59O1xuXG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIGlmICghKCd0ZXh0Q29udGVudCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSkge1xuICAgIHNldFRleHRDb250ZW50ID0gZnVuY3Rpb24gKG5vZGUsIHRleHQpIHtcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICAgIG5vZGUubm9kZVZhbHVlID0gdGV4dDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2V0SW5uZXJIVE1MKG5vZGUsIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih0ZXh0KSk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRleHRDb250ZW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9zZXRUZXh0Q29udGVudC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZSgncmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnRTeW1ib2wnKTtcblxudmFyIGdldEl0ZXJhdG9yRm4gPSByZXF1aXJlKCcuL2dldEl0ZXJhdG9yRm4nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBLZXlFc2NhcGVVdGlscyA9IHJlcXVpcmUoJy4vS2V5RXNjYXBlVXRpbHMnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgU0VQQVJBVE9SID0gJy4nO1xudmFyIFNVQlNFUEFSQVRPUiA9ICc6JztcblxuLyoqXG4gKiBUaGlzIGlzIGlubGluZWQgZnJvbSBSZWFjdEVsZW1lbnQgc2luY2UgdGhpcyBmaWxlIGlzIHNoYXJlZCBiZXR3ZWVuXG4gKiBpc29tb3JwaGljIGFuZCByZW5kZXJlcnMuIFdlIGNvdWxkIGV4dHJhY3QgdGhpcyB0byBhXG4gKlxuICovXG5cbi8qKlxuICogVE9ETzogVGVzdCB0aGF0IGEgc2luZ2xlIGNoaWxkIGFuZCBhbiBhcnJheSB3aXRoIG9uZSBpdGVtIGhhdmUgdGhlIHNhbWUga2V5XG4gKiBwYXR0ZXJuLlxuICovXG5cbnZhciBkaWRXYXJuQWJvdXRNYXBzID0gZmFsc2U7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBrZXkgc3RyaW5nIHRoYXQgaWRlbnRpZmllcyBhIGNvbXBvbmVudCB3aXRoaW4gYSBzZXQuXG4gKlxuICogQHBhcmFtIHsqfSBjb21wb25lbnQgQSBjb21wb25lbnQgdGhhdCBjb3VsZCBjb250YWluIGEgbWFudWFsIGtleS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCB0aGF0IGlzIHVzZWQgaWYgYSBtYW51YWwga2V5IGlzIG5vdCBwcm92aWRlZC5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50S2V5KGNvbXBvbmVudCwgaW5kZXgpIHtcbiAgLy8gRG8gc29tZSB0eXBlY2hlY2tpbmcgaGVyZSBzaW5jZSB3ZSBjYWxsIHRoaXMgYmxpbmRseS4gV2Ugd2FudCB0byBlbnN1cmVcbiAgLy8gdGhhdCB3ZSBkb24ndCBibG9jayBwb3RlbnRpYWwgZnV0dXJlIEVTIEFQSXMuXG4gIGlmIChjb21wb25lbnQgJiYgdHlwZW9mIGNvbXBvbmVudCA9PT0gJ29iamVjdCcgJiYgY29tcG9uZW50LmtleSAhPSBudWxsKSB7XG4gICAgLy8gRXhwbGljaXQga2V5XG4gICAgcmV0dXJuIEtleUVzY2FwZVV0aWxzLmVzY2FwZShjb21wb25lbnQua2V5KTtcbiAgfVxuICAvLyBJbXBsaWNpdCBrZXkgZGV0ZXJtaW5lZCBieSB0aGUgaW5kZXggaW4gdGhlIHNldFxuICByZXR1cm4gaW5kZXgudG9TdHJpbmcoMzYpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHshc3RyaW5nfSBuYW1lU29GYXIgTmFtZSBvZiB0aGUga2V5IHBhdGggc28gZmFyLlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aXRoIGVhY2ggY2hpbGQgZm91bmQuXG4gKiBAcGFyYW0gez8qfSB0cmF2ZXJzZUNvbnRleHQgVXNlZCB0byBwYXNzIGluZm9ybWF0aW9uIHRocm91Z2hvdXQgdGhlIHRyYXZlcnNhbFxuICogcHJvY2Vzcy5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZHJlbiwgbmFtZVNvRmFyLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkcmVuO1xuXG4gIGlmICh0eXBlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAvLyBBbGwgb2YgdGhlIGFib3ZlIGFyZSBwZXJjZWl2ZWQgYXMgbnVsbC5cbiAgICBjaGlsZHJlbiA9IG51bGw7XG4gIH1cblxuICBpZiAoY2hpbGRyZW4gPT09IG51bGwgfHwgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZSA9PT0gJ251bWJlcicgfHxcbiAgLy8gVGhlIGZvbGxvd2luZyBpcyBpbmxpbmVkIGZyb20gUmVhY3RFbGVtZW50LiBUaGlzIG1lYW5zIHdlIGNhbiBvcHRpbWl6ZVxuICAvLyBzb21lIGNoZWNrcy4gUmVhY3QgRmliZXIgYWxzbyBpbmxpbmVzIHRoaXMgbG9naWMgZm9yIHNpbWlsYXIgcHVycG9zZXMuXG4gIHR5cGUgPT09ICdvYmplY3QnICYmIGNoaWxkcmVuLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEUpIHtcbiAgICBjYWxsYmFjayh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkcmVuLFxuICAgIC8vIElmIGl0J3MgdGhlIG9ubHkgY2hpbGQsIHRyZWF0IHRoZSBuYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIGFuIGFycmF5XG4gICAgLy8gc28gdGhhdCBpdCdzIGNvbnNpc3RlbnQgaWYgdGhlIG51bWJlciBvZiBjaGlsZHJlbiBncm93cy5cbiAgICBuYW1lU29GYXIgPT09ICcnID8gU0VQQVJBVE9SICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkcmVuLCAwKSA6IG5hbWVTb0Zhcik7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICB2YXIgY2hpbGQ7XG4gIHZhciBuZXh0TmFtZTtcbiAgdmFyIHN1YnRyZWVDb3VudCA9IDA7IC8vIENvdW50IG9mIGNoaWxkcmVuIGZvdW5kIGluIHRoZSBjdXJyZW50IHN1YnRyZWUuXG4gIHZhciBuZXh0TmFtZVByZWZpeCA9IG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgOiBuYW1lU29GYXIgKyBTVUJTRVBBUkFUT1I7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIG5leHROYW1lID0gbmV4dE5hbWVQcmVmaXggKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIGkpO1xuICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLCBuZXh0TmFtZSwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihjaGlsZHJlbik7XG4gICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChjaGlsZHJlbik7XG4gICAgICB2YXIgc3RlcDtcbiAgICAgIGlmIChpdGVyYXRvckZuICE9PSBjaGlsZHJlbi5lbnRyaWVzKSB7XG4gICAgICAgIHZhciBpaSA9IDA7XG4gICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICBjaGlsZCA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIGdldENvbXBvbmVudEtleShjaGlsZCwgaWkrKyk7XG4gICAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLCBuZXh0TmFtZSwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG1hcHNBc0NoaWxkcmVuQWRkZW5kdW0gPSAnJztcbiAgICAgICAgICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgICAgICAgdmFyIG1hcHNBc0NoaWxkcmVuT3duZXJOYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgICAgICAgICBpZiAobWFwc0FzQ2hpbGRyZW5Pd25lck5hbWUpIHtcbiAgICAgICAgICAgICAgbWFwc0FzQ2hpbGRyZW5BZGRlbmR1bSA9ICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBtYXBzQXNDaGlsZHJlbk93bmVyTmFtZSArICdgLic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGRpZFdhcm5BYm91dE1hcHMsICdVc2luZyBNYXBzIGFzIGNoaWxkcmVuIGlzIG5vdCB5ZXQgZnVsbHkgc3VwcG9ydGVkLiBJdCBpcyBhbiAnICsgJ2V4cGVyaW1lbnRhbCBmZWF0dXJlIHRoYXQgbWlnaHQgYmUgcmVtb3ZlZC4gQ29udmVydCBpdCB0byBhICcgKyAnc2VxdWVuY2UgLyBpdGVyYWJsZSBvZiBrZXllZCBSZWFjdEVsZW1lbnRzIGluc3RlYWQuJXMnLCBtYXBzQXNDaGlsZHJlbkFkZGVuZHVtKSA6IHZvaWQgMDtcbiAgICAgICAgICBkaWRXYXJuQWJvdXRNYXBzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJdGVyYXRvciB3aWxsIHByb3ZpZGUgZW50cnkgW2ssdl0gdHVwbGVzIHJhdGhlciB0aGFuIHZhbHVlcy5cbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICBjaGlsZCA9IGVudHJ5WzFdO1xuICAgICAgICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIEtleUVzY2FwZVV0aWxzLmVzY2FwZShlbnRyeVswXSkgKyBTVUJTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIDApO1xuICAgICAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLCBuZXh0TmFtZSwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFyIGFkZGVuZHVtID0gJyc7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBhZGRlbmR1bSA9ICcgSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSAnICsgJ2luc3RlYWQgb3Igd3JhcCB0aGUgb2JqZWN0IHVzaW5nIGNyZWF0ZUZyYWdtZW50KG9iamVjdCkgZnJvbSB0aGUgJyArICdSZWFjdCBhZGQtb25zLic7XG4gICAgICAgIGlmIChjaGlsZHJlbi5faXNSZWFjdEVsZW1lbnQpIHtcbiAgICAgICAgICBhZGRlbmR1bSA9IFwiIEl0IGxvb2tzIGxpa2UgeW91J3JlIHVzaW5nIGFuIGVsZW1lbnQgY3JlYXRlZCBieSBhIGRpZmZlcmVudCBcIiArICd2ZXJzaW9uIG9mIFJlYWN0LiBNYWtlIHN1cmUgdG8gdXNlIG9ubHkgb25lIGNvcHkgb2YgUmVhY3QuJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgICAgIHZhciBuYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIGFkZGVuZHVtICs9ICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlblN0cmluZyA9IFN0cmluZyhjaGlsZHJlbik7XG4gICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiAlcykuJXMnLCBjaGlsZHJlblN0cmluZyA9PT0gJ1tvYmplY3QgT2JqZWN0XScgPyAnb2JqZWN0IHdpdGgga2V5cyB7JyArIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5qb2luKCcsICcpICsgJ30nIDogY2hpbGRyZW5TdHJpbmcsIGFkZGVuZHVtKSA6IF9wcm9kSW52YXJpYW50KCczMScsIGNoaWxkcmVuU3RyaW5nID09PSAnW29iamVjdCBPYmplY3RdJyA/ICdvYmplY3Qgd2l0aCBrZXlzIHsnICsgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmpvaW4oJywgJykgKyAnfScgOiBjaGlsZHJlblN0cmluZywgYWRkZW5kdW0pIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdWJ0cmVlQ291bnQ7XG59XG5cbi8qKlxuICogVHJhdmVyc2VzIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYCwgYnV0XG4gKiBtaWdodCBhbHNvIGJlIHNwZWNpZmllZCB0aHJvdWdoIGF0dHJpYnV0ZXM6XG4gKlxuICogLSBgdHJhdmVyc2VBbGxDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuLCAuLi4pYFxuICogLSBgdHJhdmVyc2VBbGxDaGlsZHJlbih0aGlzLnByb3BzLmxlZnRQYW5lbENoaWxkcmVuLCAuLi4pYFxuICpcbiAqIFRoZSBgdHJhdmVyc2VDb250ZXh0YCBpcyBhbiBvcHRpb25hbCBhcmd1bWVudCB0aGF0IGlzIHBhc3NlZCB0aHJvdWdoIHRoZVxuICogZW50aXJlIHRyYXZlcnNhbC4gSXQgY2FuIGJlIHVzZWQgdG8gc3RvcmUgYWNjdW11bGF0aW9ucyBvciBhbnl0aGluZyBlbHNlIHRoYXRcbiAqIHRoZSBjYWxsYmFjayBtaWdodCBmaW5kIHJlbGV2YW50LlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgb2JqZWN0LlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIFRvIGludm9rZSB1cG9uIHRyYXZlcnNpbmcgZWFjaCBjaGlsZC5cbiAqIEBwYXJhbSB7Pyp9IHRyYXZlcnNlQ29udGV4dCBDb250ZXh0IGZvciB0cmF2ZXJzYWwuXG4gKiBAcmV0dXJuIHshbnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuIGluIHRoaXMgc3VidHJlZS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkcmVuLCAnJywgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHJhdmVyc2VBbGxDaGlsZHJlbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvdHJhdmVyc2VBbGxDaGlsZHJlbi5qcyIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1pcy9pbmRleC5qcyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSBcImhpc3RvcnlcIjtcblxudmFyIGlzTW9kaWZpZWRFdmVudCA9IGZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG52YXIgTGluayA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMaW5rLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaW5rKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGluayk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNsaWNrKSBfdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICFfdGhpcy5wcm9wcy50YXJnZXQgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgdmFyIGhpc3RvcnkgPSBfdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgICByZXBsYWNlID0gX3RoaXMkcHJvcHMucmVwbGFjZSxcbiAgICAgICAgICAgICAgdG8gPSBfdGhpcyRwcm9wcy50bztcblxuXG4gICAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICAgIGhpc3RvcnkucmVwbGFjZSh0byk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpc3RvcnkucHVzaCh0byk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBMaW5rLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHJlcGxhY2UgPSBfcHJvcHMucmVwbGFjZSxcbiAgICAgICAgdG8gPSBfcHJvcHMudG8sXG4gICAgICAgIGlubmVyUmVmID0gX3Byb3BzLmlubmVyUmVmLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFtcInJlcGxhY2VcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICBpbnZhcmlhbnQodG8gIT09IHVuZGVmaW5lZCwgJ1lvdSBtdXN0IHNwZWNpZnkgdGhlIFwidG9cIiBwcm9wZXJ0eScpO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgaGlzdG9yeS5sb2NhdGlvbikgOiB0bztcblxuICAgIHZhciBocmVmID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7IG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssIGhyZWY6IGhyZWYsIHJlZjogaW5uZXJSZWYgfSkpO1xuICB9O1xuXG4gIHJldHVybiBMaW5rO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5MaW5rLnByb3BUeXBlcyA9IHtcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZCxcbiAgaW5uZXJSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jXSlcbn07XG5MaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgcmVwbGFjZTogZmFsc2Vcbn07XG5MaW5rLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGNyZWF0ZUhyZWY6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTGluaztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LXJvdXRlci1kb20vZXMvTGluay5qcyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUm91dGUgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Sb3V0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LXJvdXRlci1kb20vZXMvUm91dGUuanMiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoXCI7XG5cbnZhciBpc0VtcHR5Q2hpbGRyZW4gPSBmdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG52YXIgUm91dGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcywgX3RoaXMuY29udGV4dC5yb3V0ZXIpXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBSb3V0ZS5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMubG9jYXRpb24gfHwgdGhpcy5jb250ZXh0LnJvdXRlci5yb3V0ZS5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaDogdGhpcy5zdGF0ZS5tYXRjaFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChfcmVmLCByb3V0ZXIpIHtcbiAgICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgICBwYXRoID0gX3JlZi5wYXRoLFxuICAgICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgICBzZW5zaXRpdmUgPSBfcmVmLnNlbnNpdGl2ZTtcblxuICAgIGlmIChjb21wdXRlZE1hdGNoKSByZXR1cm4gY29tcHV0ZWRNYXRjaDsgLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG5cbiAgICBpbnZhcmlhbnQocm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG9yIHdpdGhSb3V0ZXIoKSBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICB2YXIgcm91dGUgPSByb3V0ZXIucm91dGU7XG5cbiAgICB2YXIgcGF0aG5hbWUgPSAobG9jYXRpb24gfHwgcm91dGUubG9jYXRpb24pLnBhdGhuYW1lO1xuXG4gICAgcmV0dXJuIG1hdGNoUGF0aChwYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBzdHJpY3Q6IHN0cmljdCwgZXhhY3Q6IGV4YWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9LCByb3V0ZS5tYXRjaCk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWRcIik7XG5cbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5yZW5kZXIgJiYgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkXCIpO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAgd2FybmluZyghKG5leHRQcm9wcy5sb2NhdGlvbiAmJiAhdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBtYXRjaDogdGhpcy5jb21wdXRlTWF0Y2gobmV4dFByb3BzLCBuZXh0Q29udGV4dC5yb3V0ZXIpXG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgbWF0Y2ggPSB0aGlzLnN0YXRlLm1hdGNoO1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudCxcbiAgICAgICAgcmVuZGVyID0gX3Byb3BzLnJlbmRlcjtcbiAgICB2YXIgX2NvbnRleHQkcm91dGVyID0gdGhpcy5jb250ZXh0LnJvdXRlcixcbiAgICAgICAgaGlzdG9yeSA9IF9jb250ZXh0JHJvdXRlci5oaXN0b3J5LFxuICAgICAgICByb3V0ZSA9IF9jb250ZXh0JHJvdXRlci5yb3V0ZSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IF9jb250ZXh0JHJvdXRlci5zdGF0aWNDb250ZXh0O1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbjtcbiAgICB2YXIgcHJvcHMgPSB7IG1hdGNoOiBtYXRjaCwgbG9jYXRpb246IGxvY2F0aW9uLCBoaXN0b3J5OiBoaXN0b3J5LCBzdGF0aWNDb250ZXh0OiBzdGF0aWNDb250ZXh0IH07XG5cbiAgICBpZiAoY29tcG9uZW50KSByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogbnVsbDtcblxuICAgIGlmIChyZW5kZXIpIHJldHVybiBtYXRjaCA/IHJlbmRlcihwcm9wcykgOiBudWxsO1xuXG4gICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gY2hpbGRyZW4ocHJvcHMpO1xuXG4gICAgaWYgKGNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pKSByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlLnByb3BUeXBlcyA9IHtcbiAgY29tcHV0ZWRNYXRjaDogUHJvcFR5cGVzLm9iamVjdCwgLy8gcHJpdmF0ZSwgZnJvbSA8U3dpdGNoPlxuICBwYXRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZS5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgcm91dGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pXG59O1xuUm91dGUuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtcm91dGVyL2VzL1JvdXRlLmpzIiwiaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tIFwicGF0aC10by1yZWdleHBcIjtcblxudmFyIHBhdHRlcm5DYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxudmFyIGNvbXBpbGVHZW5lcmF0b3IgPSBmdW5jdGlvbiBjb21waWxlR2VuZXJhdG9yKHBhdHRlcm4pIHtcbiAgdmFyIGNhY2hlS2V5ID0gcGF0dGVybjtcbiAgdmFyIGNhY2hlID0gcGF0dGVybkNhY2hlW2NhY2hlS2V5XSB8fCAocGF0dGVybkNhY2hlW2NhY2hlS2V5XSA9IHt9KTtcblxuICBpZiAoY2FjaGVbcGF0dGVybl0pIHJldHVybiBjYWNoZVtwYXR0ZXJuXTtcblxuICB2YXIgY29tcGlsZWRHZW5lcmF0b3IgPSBwYXRoVG9SZWdleHAuY29tcGlsZShwYXR0ZXJuKTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkR2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBjb21waWxlZEdlbmVyYXRvcjtcbn07XG5cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0dGVybiBhbmQgcGFyYW1ldGVycy5cbiAqL1xudmFyIGdlbmVyYXRlUGF0aCA9IGZ1bmN0aW9uIGdlbmVyYXRlUGF0aCgpIHtcbiAgdmFyIHBhdHRlcm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFwiL1wiO1xuICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICBpZiAocGF0dGVybiA9PT0gXCIvXCIpIHtcbiAgICByZXR1cm4gcGF0dGVybjtcbiAgfVxuICB2YXIgZ2VuZXJhdG9yID0gY29tcGlsZUdlbmVyYXRvcihwYXR0ZXJuKTtcbiAgcmV0dXJuIGdlbmVyYXRvcihwYXJhbXMsIHsgcHJldHR5OiB0cnVlIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2VuZXJhdGVQYXRoO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtcm91dGVyL2VzL2dlbmVyYXRlUGF0aC5qcyIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LXJvdXRlci9+L3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpLFxuICAgIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoJy4vUmVhY3ROb29wVXBkYXRlUXVldWUnKTtcblxudmFyIGNhbkRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9jYW5EZWZpbmVQcm9wZXJ0eScpO1xudmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlPYmplY3QnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBsb3dQcmlvcml0eVdhcm5pbmcgPSByZXF1aXJlKCcuL2xvd1ByaW9yaXR5V2FybmluZycpO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgaGVscGVycyBmb3IgdGhlIHVwZGF0aW5nIHN0YXRlIG9mIGEgY29tcG9uZW50LlxuICovXG5mdW5jdGlvbiBSZWFjdENvbXBvbmVudChwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMucmVmcyA9IGVtcHR5T2JqZWN0O1xuICAvLyBXZSBpbml0aWFsaXplIHRoZSBkZWZhdWx0IHVwZGF0ZXIgYnV0IHRoZSByZWFsIG9uZSBnZXRzIGluamVjdGVkIGJ5IHRoZVxuICAvLyByZW5kZXJlci5cbiAgdGhpcy51cGRhdGVyID0gdXBkYXRlciB8fCBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcbn1cblxuUmVhY3RDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQgPSB7fTtcblxuLyoqXG4gKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBzdGF0ZS4gQWx3YXlzIHVzZSB0aGlzIHRvIG11dGF0ZVxuICogc3RhdGUuIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAqXG4gKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAqXG4gKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBjYWxscyB0byBgc2V0U3RhdGVgIHdpbGwgcnVuIHN5bmNocm9ub3VzbHksXG4gKiBhcyB0aGV5IG1heSBldmVudHVhbGx5IGJlIGJhdGNoZWQgdG9nZXRoZXIuICBZb3UgY2FuIHByb3ZpZGUgYW4gb3B0aW9uYWxcbiAqIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBleGVjdXRlZCB3aGVuIHRoZSBjYWxsIHRvIHNldFN0YXRlIGlzIGFjdHVhbGx5XG4gKiBjb21wbGV0ZWQuXG4gKlxuICogV2hlbiBhIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIHRvIHNldFN0YXRlLCBpdCB3aWxsIGJlIGNhbGxlZCBhdCBzb21lIHBvaW50IGluXG4gKiB0aGUgZnV0dXJlIChub3Qgc3luY2hyb25vdXNseSkuIEl0IHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIHVwIHRvIGRhdGVcbiAqIGNvbXBvbmVudCBhcmd1bWVudHMgKHN0YXRlLCBwcm9wcywgY29udGV4dCkuIFRoZXNlIHZhbHVlcyBjYW4gYmUgZGlmZmVyZW50XG4gKiBmcm9tIHRoaXMuKiBiZWNhdXNlIHlvdXIgZnVuY3Rpb24gbWF5IGJlIGNhbGxlZCBhZnRlciByZWNlaXZlUHJvcHMgYnV0IGJlZm9yZVxuICogc2hvdWxkQ29tcG9uZW50VXBkYXRlLCBhbmQgdGhpcyBuZXcgc3RhdGUsIHByb3BzLCBhbmQgY29udGV4dCB3aWxsIG5vdCB5ZXQgYmVcbiAqIGFzc2lnbmVkIHRvIHRoaXMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb259IHBhcnRpYWxTdGF0ZSBOZXh0IHBhcnRpYWwgc3RhdGUgb3IgZnVuY3Rpb24gdG9cbiAqICAgICAgICBwcm9kdWNlIG5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBjdXJyZW50IHN0YXRlLlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBzdGF0ZSBpcyB1cGRhdGVkLlxuICogQGZpbmFsXG4gKiBAcHJvdGVjdGVkXG4gKi9cblJlYWN0Q29tcG9uZW50LnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrKSB7XG4gICEodHlwZW9mIHBhcnRpYWxTdGF0ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHBhcnRpYWxTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyB8fCBwYXJ0aWFsU3RhdGUgPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnc2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuJykgOiBfcHJvZEludmFyaWFudCgnODUnKSA6IHZvaWQgMDtcbiAgdGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLCBwYXJ0aWFsU3RhdGUpO1xuICBpZiAoY2FsbGJhY2spIHtcbiAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrLCAnc2V0U3RhdGUnKTtcbiAgfVxufTtcblxuLyoqXG4gKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gKiBjZXJ0YWludHkgdGhhdCB3ZSBhcmUgKipub3QqKiBpbiBhIERPTSB0cmFuc2FjdGlvbi5cbiAqXG4gKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gKiBjb21wb25lbnQncyBzdGF0ZSBoYXMgY2hhbmdlZCBidXQgYHNldFN0YXRlYCB3YXMgbm90IGNhbGxlZC5cbiAqXG4gKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gKiBgY29tcG9uZW50V2lsbFVwZGF0ZWAgYW5kIGBjb21wb25lbnREaWRVcGRhdGVgLlxuICpcbiAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgdXBkYXRlIGlzIGNvbXBsZXRlLlxuICogQGZpbmFsXG4gKiBAcHJvdGVjdGVkXG4gKi9cblJlYWN0Q29tcG9uZW50LnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMpO1xuICBpZiAoY2FsbGJhY2spIHtcbiAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrLCAnZm9yY2VVcGRhdGUnKTtcbiAgfVxufTtcblxuLyoqXG4gKiBEZXByZWNhdGVkIEFQSXMuIFRoZXNlIEFQSXMgdXNlZCB0byBleGlzdCBvbiBjbGFzc2ljIFJlYWN0IGNsYXNzZXMgYnV0IHNpbmNlXG4gKiB3ZSB3b3VsZCBsaWtlIHRvIGRlcHJlY2F0ZSB0aGVtLCB3ZSdyZSBub3QgZ29pbmcgdG8gbW92ZSB0aGVtIG92ZXIgdG8gdGhpc1xuICogbW9kZXJuIGJhc2UgY2xhc3MuIEluc3RlYWQsIHdlIGRlZmluZSBhIGdldHRlciB0aGF0IHdhcm5zIGlmIGl0J3MgYWNjZXNzZWQuXG4gKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBkZXByZWNhdGVkQVBJcyA9IHtcbiAgICBpc01vdW50ZWQ6IFsnaXNNb3VudGVkJywgJ0luc3RlYWQsIG1ha2Ugc3VyZSB0byBjbGVhbiB1cCBzdWJzY3JpcHRpb25zIGFuZCBwZW5kaW5nIHJlcXVlc3RzIGluICcgKyAnY29tcG9uZW50V2lsbFVubW91bnQgdG8gcHJldmVudCBtZW1vcnkgbGVha3MuJ10sXG4gICAgcmVwbGFjZVN0YXRlOiBbJ3JlcGxhY2VTdGF0ZScsICdSZWZhY3RvciB5b3VyIGNvZGUgdG8gdXNlIHNldFN0YXRlIGluc3RlYWQgKHNlZSAnICsgJ2h0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMzIzNikuJ11cbiAgfTtcbiAgdmFyIGRlZmluZURlcHJlY2F0aW9uV2FybmluZyA9IGZ1bmN0aW9uIChtZXRob2ROYW1lLCBpbmZvKSB7XG4gICAgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhY3RDb21wb25lbnQucHJvdG90eXBlLCBtZXRob2ROYW1lLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxvd1ByaW9yaXR5V2FybmluZyhmYWxzZSwgJyVzKC4uLikgaXMgZGVwcmVjYXRlZCBpbiBwbGFpbiBKYXZhU2NyaXB0IFJlYWN0IGNsYXNzZXMuICVzJywgaW5mb1swXSwgaW5mb1sxXSk7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICBmb3IgKHZhciBmbk5hbWUgaW4gZGVwcmVjYXRlZEFQSXMpIHtcbiAgICBpZiAoZGVwcmVjYXRlZEFQSXMuaGFzT3duUHJvcGVydHkoZm5OYW1lKSkge1xuICAgICAgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nKGZuTmFtZSwgZGVwcmVjYXRlZEFQSXNbZm5OYW1lXSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQmFzZSBjbGFzcyBoZWxwZXJzIGZvciB0aGUgdXBkYXRpbmcgc3RhdGUgb2YgYSBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIFJlYWN0UHVyZUNvbXBvbmVudChwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICAvLyBEdXBsaWNhdGVkIGZyb20gUmVhY3RDb21wb25lbnQuXG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gIC8vIFdlIGluaXRpYWxpemUgdGhlIGRlZmF1bHQgdXBkYXRlciBidXQgdGhlIHJlYWwgb25lIGdldHMgaW5qZWN0ZWQgYnkgdGhlXG4gIC8vIHJlbmRlcmVyLlxuICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xufVxuXG5mdW5jdGlvbiBDb21wb25lbnREdW1teSgpIHt9XG5Db21wb25lbnREdW1teS5wcm90b3R5cGUgPSBSZWFjdENvbXBvbmVudC5wcm90b3R5cGU7XG5SZWFjdFB1cmVDb21wb25lbnQucHJvdG90eXBlID0gbmV3IENvbXBvbmVudER1bW15KCk7XG5SZWFjdFB1cmVDb21wb25lbnQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVhY3RQdXJlQ29tcG9uZW50O1xuLy8gQXZvaWQgYW4gZXh0cmEgcHJvdG90eXBlIGp1bXAgZm9yIHRoZXNlIG1ldGhvZHMuXG5fYXNzaWduKFJlYWN0UHVyZUNvbXBvbmVudC5wcm90b3R5cGUsIFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZSk7XG5SZWFjdFB1cmVDb21wb25lbnQucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50ID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENvbXBvbmVudDogUmVhY3RDb21wb25lbnQsXG4gIFB1cmVDb21wb25lbnQ6IFJlYWN0UHVyZUNvbXBvbmVudFxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0L2xpYi9SZWFjdEJhc2VDbGFzc2VzLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIFRoZSBTeW1ib2wgdXNlZCB0byB0YWcgdGhlIFJlYWN0RWxlbWVudCB0eXBlLiBJZiB0aGVyZSBpcyBubyBuYXRpdmUgU3ltYm9sXG4vLyBub3IgcG9seWZpbGwsIHRoZW4gYSBwbGFpbiBudW1iZXIgaXMgdXNlZCBmb3IgcGVyZm9ybWFuY2UuXG5cbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbFsnZm9yJ10gJiYgU3ltYm9sWydmb3InXSgncmVhY3QuZWxlbWVudCcpIHx8IDB4ZWFjNztcblxubW9kdWxlLmV4cG9ydHMgPSBSRUFDVF9FTEVNRU5UX1RZUEU7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC9saWIvUmVhY3RFbGVtZW50U3ltYm9sLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuLyoqXG4gKiBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgcHJvdmlkZXMgYSB3cmFwcGVyIGFyb3VuZCBhIGVsZW1lbnQgZmFjdG9yeVxuICogd2hpY2ggdmFsaWRhdGVzIHRoZSBwcm9wcyBwYXNzZWQgdG8gdGhlIGVsZW1lbnQuIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmVcbiAqIHVzZWQgb25seSBpbiBERVYgYW5kIGNvdWxkIGJlIHJlcGxhY2VkIGJ5IGEgc3RhdGljIHR5cGUgY2hlY2tlciBmb3IgbGFuZ3VhZ2VzXG4gKiB0aGF0IHN1cHBvcnQgaXQuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUmVhY3RDb21wb25lbnRUcmVlSG9vayA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRUcmVlSG9vaycpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG5cbnZhciBjaGVja1JlYWN0VHlwZVNwZWMgPSByZXF1aXJlKCcuL2NoZWNrUmVhY3RUeXBlU3BlYycpO1xuXG52YXIgY2FuRGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL2NhbkRlZmluZVByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3JGbiA9IHJlcXVpcmUoJy4vZ2V0SXRlcmF0b3JGbicpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG52YXIgbG93UHJpb3JpdHlXYXJuaW5nID0gcmVxdWlyZSgnLi9sb3dQcmlvcml0eVdhcm5pbmcnKTtcblxuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkge1xuICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgIHZhciBuYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gZ2V0U291cmNlSW5mb0Vycm9yQWRkZW5kdW0oZWxlbWVudFByb3BzKSB7XG4gIGlmIChlbGVtZW50UHJvcHMgIT09IG51bGwgJiYgZWxlbWVudFByb3BzICE9PSB1bmRlZmluZWQgJiYgZWxlbWVudFByb3BzLl9fc291cmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgc291cmNlID0gZWxlbWVudFByb3BzLl9fc291cmNlO1xuICAgIHZhciBmaWxlTmFtZSA9IHNvdXJjZS5maWxlTmFtZS5yZXBsYWNlKC9eLipbXFxcXFxcL10vLCAnJyk7XG4gICAgdmFyIGxpbmVOdW1iZXIgPSBzb3VyY2UubGluZU51bWJlcjtcbiAgICByZXR1cm4gJyBDaGVjayB5b3VyIGNvZGUgYXQgJyArIGZpbGVOYW1lICsgJzonICsgbGluZU51bWJlciArICcuJztcbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogV2FybiBpZiB0aGVyZSdzIG5vIGtleSBleHBsaWNpdGx5IHNldCBvbiBkeW5hbWljIGFycmF5cyBvZiBjaGlsZHJlbiBvclxuICogb2JqZWN0IGtleXMgYXJlIG5vdCB2YWxpZC4gVGhpcyBhbGxvd3MgdXMgdG8ga2VlcCB0cmFjayBvZiBjaGlsZHJlbiBiZXR3ZWVuXG4gKiB1cGRhdGVzLlxuICovXG52YXIgb3duZXJIYXNLZXlVc2VXYXJuaW5nID0ge307XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRDb21wb25lbnRFcnJvckluZm8ocGFyZW50VHlwZSkge1xuICB2YXIgaW5mbyA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpO1xuXG4gIGlmICghaW5mbykge1xuICAgIHZhciBwYXJlbnROYW1lID0gdHlwZW9mIHBhcmVudFR5cGUgPT09ICdzdHJpbmcnID8gcGFyZW50VHlwZSA6IHBhcmVudFR5cGUuZGlzcGxheU5hbWUgfHwgcGFyZW50VHlwZS5uYW1lO1xuICAgIGlmIChwYXJlbnROYW1lKSB7XG4gICAgICBpbmZvID0gJyBDaGVjayB0aGUgdG9wLWxldmVsIHJlbmRlciBjYWxsIHVzaW5nIDwnICsgcGFyZW50TmFtZSArICc+Lic7XG4gICAgfVxuICB9XG4gIHJldHVybiBpbmZvO1xufVxuXG4vKipcbiAqIFdhcm4gaWYgdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIGFuIGV4cGxpY2l0IGtleSBhc3NpZ25lZCB0byBpdC5cbiAqIFRoaXMgZWxlbWVudCBpcyBpbiBhbiBhcnJheS4gVGhlIGFycmF5IGNvdWxkIGdyb3cgYW5kIHNocmluayBvciBiZVxuICogcmVvcmRlcmVkLiBBbGwgY2hpbGRyZW4gdGhhdCBoYXZlbid0IGFscmVhZHkgYmVlbiB2YWxpZGF0ZWQgYXJlIHJlcXVpcmVkIHRvXG4gKiBoYXZlIGEgXCJrZXlcIiBwcm9wZXJ0eSBhc3NpZ25lZCB0byBpdC4gRXJyb3Igc3RhdHVzZXMgYXJlIGNhY2hlZCBzbyBhIHdhcm5pbmdcbiAqIHdpbGwgb25seSBiZSBzaG93biBvbmNlLlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0aGF0IHJlcXVpcmVzIGEga2V5LlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGVsZW1lbnQncyBwYXJlbnQncyB0eXBlLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUV4cGxpY2l0S2V5KGVsZW1lbnQsIHBhcmVudFR5cGUpIHtcbiAgaWYgKCFlbGVtZW50Ll9zdG9yZSB8fCBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgfHwgZWxlbWVudC5rZXkgIT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuXG4gIHZhciBtZW1vaXplciA9IG93bmVySGFzS2V5VXNlV2FybmluZy51bmlxdWVLZXkgfHwgKG93bmVySGFzS2V5VXNlV2FybmluZy51bmlxdWVLZXkgPSB7fSk7XG5cbiAgdmFyIGN1cnJlbnRDb21wb25lbnRFcnJvckluZm8gPSBnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvKHBhcmVudFR5cGUpO1xuICBpZiAobWVtb2l6ZXJbY3VycmVudENvbXBvbmVudEVycm9ySW5mb10pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbWVtb2l6ZXJbY3VycmVudENvbXBvbmVudEVycm9ySW5mb10gPSB0cnVlO1xuXG4gIC8vIFVzdWFsbHkgdGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIG9mZmVuZGVyLCBidXQgaWYgaXQgYWNjZXB0cyBjaGlsZHJlbiBhcyBhXG4gIC8vIHByb3BlcnR5LCBpdCBtYXkgYmUgdGhlIGNyZWF0b3Igb2YgdGhlIGNoaWxkIHRoYXQncyByZXNwb25zaWJsZSBmb3JcbiAgLy8gYXNzaWduaW5nIGl0IGEga2V5LlxuICB2YXIgY2hpbGRPd25lciA9ICcnO1xuICBpZiAoZWxlbWVudCAmJiBlbGVtZW50Ll9vd25lciAmJiBlbGVtZW50Ll9vd25lciAhPT0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgIC8vIEdpdmUgdGhlIGNvbXBvbmVudCB0aGF0IG9yaWdpbmFsbHkgY3JlYXRlZCB0aGlzIGNoaWxkLlxuICAgIGNoaWxkT3duZXIgPSAnIEl0IHdhcyBwYXNzZWQgYSBjaGlsZCBmcm9tICcgKyBlbGVtZW50Ll9vd25lci5nZXROYW1lKCkgKyAnLic7XG4gIH1cblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0VhY2ggY2hpbGQgaW4gYW4gYXJyYXkgb3IgaXRlcmF0b3Igc2hvdWxkIGhhdmUgYSB1bmlxdWUgXCJrZXlcIiBwcm9wLicgKyAnJXMlcyBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWtleXMgZm9yIG1vcmUgaW5mb3JtYXRpb24uJXMnLCBjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvLCBjaGlsZE93bmVyLCBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEN1cnJlbnRTdGFja0FkZGVuZHVtKGVsZW1lbnQpKSA6IHZvaWQgMDtcbn1cblxuLyoqXG4gKiBFbnN1cmUgdGhhdCBldmVyeSBlbGVtZW50IGVpdGhlciBpcyBwYXNzZWQgaW4gYSBzdGF0aWMgbG9jYXRpb24sIGluIGFuXG4gKiBhcnJheSB3aXRoIGFuIGV4cGxpY2l0IGtleXMgcHJvcGVydHkgZGVmaW5lZCwgb3IgaW4gYW4gb2JqZWN0IGxpdGVyYWxcbiAqIHdpdGggdmFsaWQga2V5IHByb3BlcnR5LlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtSZWFjdE5vZGV9IG5vZGUgU3RhdGljYWxseSBwYXNzZWQgY2hpbGQgb2YgYW55IHR5cGUuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgbm9kZSdzIHBhcmVudCdzIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlQ2hpbGRLZXlzKG5vZGUsIHBhcmVudFR5cGUpIHtcbiAgaWYgKHR5cGVvZiBub2RlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gbm9kZVtpXTtcbiAgICAgIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoY2hpbGQsIHBhcmVudFR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQobm9kZSkpIHtcbiAgICAvLyBUaGlzIGVsZW1lbnQgd2FzIHBhc3NlZCBpbiBhIHZhbGlkIGxvY2F0aW9uLlxuICAgIGlmIChub2RlLl9zdG9yZSkge1xuICAgICAgbm9kZS5fc3RvcmUudmFsaWRhdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAobm9kZSkge1xuICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihub2RlKTtcbiAgICAvLyBFbnRyeSBpdGVyYXRvcnMgcHJvdmlkZSBpbXBsaWNpdCBrZXlzLlxuICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gbm9kZS5lbnRyaWVzKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChub2RlKTtcbiAgICAgICAgdmFyIHN0ZXA7XG4gICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHN0ZXAudmFsdWUpKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUV4cGxpY2l0S2V5KHN0ZXAudmFsdWUsIHBhcmVudFR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEdpdmVuIGFuIGVsZW1lbnQsIHZhbGlkYXRlIHRoYXQgaXRzIHByb3BzIGZvbGxvdyB0aGUgcHJvcFR5cGVzIGRlZmluaXRpb24sXG4gKiBwcm92aWRlZCBieSB0aGUgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BUeXBlcyhlbGVtZW50KSB7XG4gIHZhciBjb21wb25lbnRDbGFzcyA9IGVsZW1lbnQudHlwZTtcbiAgaWYgKHR5cGVvZiBjb21wb25lbnRDbGFzcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbmFtZSA9IGNvbXBvbmVudENsYXNzLmRpc3BsYXlOYW1lIHx8IGNvbXBvbmVudENsYXNzLm5hbWU7XG4gIGlmIChjb21wb25lbnRDbGFzcy5wcm9wVHlwZXMpIHtcbiAgICBjaGVja1JlYWN0VHlwZVNwZWMoY29tcG9uZW50Q2xhc3MucHJvcFR5cGVzLCBlbGVtZW50LnByb3BzLCAncHJvcCcsIG5hbWUsIGVsZW1lbnQsIG51bGwpO1xuICB9XG4gIGlmICh0eXBlb2YgY29tcG9uZW50Q2xhc3MuZ2V0RGVmYXVsdFByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoY29tcG9uZW50Q2xhc3MuZ2V0RGVmYXVsdFByb3BzLmlzUmVhY3RDbGFzc0FwcHJvdmVkLCAnZ2V0RGVmYXVsdFByb3BzIGlzIG9ubHkgdXNlZCBvbiBjbGFzc2ljIFJlYWN0LmNyZWF0ZUNsYXNzICcgKyAnZGVmaW5pdGlvbnMuIFVzZSBhIHN0YXRpYyBwcm9wZXJ0eSBuYW1lZCBgZGVmYXVsdFByb3BzYCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICB9XG59XG5cbnZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSB7XG4gIGNyZWF0ZUVsZW1lbnQ6IGZ1bmN0aW9uICh0eXBlLCBwcm9wcywgY2hpbGRyZW4pIHtcbiAgICB2YXIgdmFsaWRUeXBlID0gdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nO1xuICAgIC8vIFdlIHdhcm4gaW4gdGhpcyBjYXNlIGJ1dCBkb24ndCB0aHJvdy4gV2UgZXhwZWN0IHRoZSBlbGVtZW50IGNyZWF0aW9uIHRvXG4gICAgLy8gc3VjY2VlZCBhbmQgdGhlcmUgd2lsbCBsaWtlbHkgYmUgZXJyb3JzIGluIHJlbmRlci5cbiAgICBpZiAoIXZhbGlkVHlwZSkge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB0eXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgaW5mbyA9ICcnO1xuICAgICAgICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsICYmIE9iamVjdC5rZXlzKHR5cGUpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGluZm8gKz0gJyBZb3UgbGlrZWx5IGZvcmdvdCB0byBleHBvcnQgeW91ciBjb21wb25lbnQgZnJvbSB0aGUgZmlsZSAnICsgXCJpdCdzIGRlZmluZWQgaW4uXCI7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc291cmNlSW5mbyA9IGdldFNvdXJjZUluZm9FcnJvckFkZGVuZHVtKHByb3BzKTtcbiAgICAgICAgaWYgKHNvdXJjZUluZm8pIHtcbiAgICAgICAgICBpbmZvICs9IHNvdXJjZUluZm87XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5mbyArPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluZm8gKz0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRDdXJyZW50U3RhY2tBZGRlbmR1bSgpO1xuXG4gICAgICAgIHZhciBjdXJyZW50U291cmNlID0gcHJvcHMgIT09IG51bGwgJiYgcHJvcHMgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5fX3NvdXJjZSAhPT0gdW5kZWZpbmVkID8gcHJvcHMuX19zb3VyY2UgOiBudWxsO1xuICAgICAgICBSZWFjdENvbXBvbmVudFRyZWVIb29rLnB1c2hOb25TdGFuZGFyZFdhcm5pbmdTdGFjayh0cnVlLCBjdXJyZW50U291cmNlKTtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdSZWFjdC5jcmVhdGVFbGVtZW50OiB0eXBlIGlzIGludmFsaWQgLS0gZXhwZWN0ZWQgYSBzdHJpbmcgKGZvciAnICsgJ2J1aWx0LWluIGNvbXBvbmVudHMpIG9yIGEgY2xhc3MvZnVuY3Rpb24gKGZvciBjb21wb3NpdGUgJyArICdjb21wb25lbnRzKSBidXQgZ290OiAlcy4lcycsIHR5cGUgPT0gbnVsbCA/IHR5cGUgOiB0eXBlb2YgdHlwZSwgaW5mbykgOiB2b2lkIDA7XG4gICAgICAgIFJlYWN0Q29tcG9uZW50VHJlZUhvb2sucG9wTm9uU3RhbmRhcmRXYXJuaW5nU3RhY2soKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZWxlbWVudCA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAvLyBUaGUgcmVzdWx0IGNhbiBiZSBudWxsaXNoIGlmIGEgbW9jayBvciBhIGN1c3RvbSBmdW5jdGlvbiBpcyB1c2VkLlxuICAgIC8vIFRPRE86IERyb3AgdGhpcyB3aGVuIHRoZXNlIGFyZSBubyBsb25nZXIgYWxsb3dlZCBhcyB0aGUgdHlwZSBhcmd1bWVudC5cbiAgICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG5cbiAgICAvLyBTa2lwIGtleSB3YXJuaW5nIGlmIHRoZSB0eXBlIGlzbid0IHZhbGlkIHNpbmNlIG91ciBrZXkgdmFsaWRhdGlvbiBsb2dpY1xuICAgIC8vIGRvZXNuJ3QgZXhwZWN0IGEgbm9uLXN0cmluZy9mdW5jdGlvbiB0eXBlIGFuZCBjYW4gdGhyb3cgY29uZnVzaW5nIGVycm9ycy5cbiAgICAvLyBXZSBkb24ndCB3YW50IGV4Y2VwdGlvbiBiZWhhdmlvciB0byBkaWZmZXIgYmV0d2VlbiBkZXYgYW5kIHByb2QuXG4gICAgLy8gKFJlbmRlcmluZyB3aWxsIHRocm93IHdpdGggYSBoZWxwZnVsIG1lc3NhZ2UgYW5kIGFzIHNvb24gYXMgdGhlIHR5cGUgaXNcbiAgICAvLyBmaXhlZCwgdGhlIGtleSB3YXJuaW5ncyB3aWxsIGFwcGVhci4pXG4gICAgaWYgKHZhbGlkVHlwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsaWRhdGVDaGlsZEtleXMoYXJndW1lbnRzW2ldLCB0eXBlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YWxpZGF0ZVByb3BUeXBlcyhlbGVtZW50KTtcblxuICAgIHJldHVybiBlbGVtZW50O1xuICB9LFxuXG4gIGNyZWF0ZUZhY3Rvcnk6IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgdmFyIHZhbGlkYXRlZEZhY3RvcnkgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRWxlbWVudC5iaW5kKG51bGwsIHR5cGUpO1xuICAgIC8vIExlZ2FjeSBob29rIFRPRE86IFdhcm4gaWYgdGhpcyBpcyBhY2Nlc3NlZFxuICAgIHZhbGlkYXRlZEZhY3RvcnkudHlwZSA9IHR5cGU7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWxpZGF0ZWRGYWN0b3J5LCAndHlwZScsIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxvd1ByaW9yaXR5V2FybmluZyhmYWxzZSwgJ0ZhY3RvcnkudHlwZSBpcyBkZXByZWNhdGVkLiBBY2Nlc3MgdGhlIGNsYXNzIGRpcmVjdGx5ICcgKyAnYmVmb3JlIHBhc3NpbmcgaXQgdG8gY3JlYXRlRmFjdG9yeS4nKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAndHlwZScsIHtcbiAgICAgICAgICAgICAgdmFsdWU6IHR5cGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdGVkRmFjdG9yeTtcbiAgfSxcblxuICBjbG9uZUVsZW1lbnQ6IGZ1bmN0aW9uIChlbGVtZW50LCBwcm9wcywgY2hpbGRyZW4pIHtcbiAgICB2YXIgbmV3RWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsaWRhdGVDaGlsZEtleXMoYXJndW1lbnRzW2ldLCBuZXdFbGVtZW50LnR5cGUpO1xuICAgIH1cbiAgICB2YWxpZGF0ZVByb3BUeXBlcyhuZXdFbGVtZW50KTtcbiAgICByZXR1cm4gbmV3RWxlbWVudDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3I7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC9saWIvUmVhY3RFbGVtZW50VmFsaWRhdG9yLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gd2Fybk5vb3AocHVibGljSW5zdGFuY2UsIGNhbGxlck5hbWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBwdWJsaWNJbnN0YW5jZS5jb25zdHJ1Y3RvcjtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzKC4uLik6IENhbiBvbmx5IHVwZGF0ZSBhIG1vdW50ZWQgb3IgbW91bnRpbmcgY29tcG9uZW50LiAnICsgJ1RoaXMgdXN1YWxseSBtZWFucyB5b3UgY2FsbGVkICVzKCkgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4gJyArICdUaGlzIGlzIGEgbm8tb3AuIFBsZWFzZSBjaGVjayB0aGUgY29kZSBmb3IgdGhlICVzIGNvbXBvbmVudC4nLCBjYWxsZXJOYW1lLCBjYWxsZXJOYW1lLCBjb25zdHJ1Y3RvciAmJiAoY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgY29uc3RydWN0b3IubmFtZSkgfHwgJ1JlYWN0Q2xhc3MnKSA6IHZvaWQgMDtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgaXMgdGhlIGFic3RyYWN0IEFQSSBmb3IgYW4gdXBkYXRlIHF1ZXVlLlxuICovXG52YXIgUmVhY3ROb29wVXBkYXRlUXVldWUgPSB7XG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgdGhpcyBjb21wb3NpdGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHdlIHdhbnQgdG8gdGVzdC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBtb3VudGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQGZpbmFsXG4gICAqL1xuICBpc01vdW50ZWQ6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogRW5xdWV1ZSBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhZnRlciBhbGwgdGhlIHBlbmRpbmcgdXBkYXRlc1xuICAgKiBoYXZlIHByb2Nlc3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdG8gdXNlIGFzIGB0aGlzYCBjb250ZXh0LlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZUNhbGxiYWNrOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIGNhbGxiYWNrKSB7fSxcblxuICAvKipcbiAgICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICAgKiBjZXJ0YWludHkgdGhhdCB3ZSBhcmUgKipub3QqKiBpbiBhIERPTSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICAgKiBjb21wb25lbnQncyBzdGF0ZSBoYXMgY2hhbmdlZCBidXQgYHNldFN0YXRlYCB3YXMgbm90IGNhbGxlZC5cbiAgICpcbiAgICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICAgKiBgY29tcG9uZW50V2lsbFVwZGF0ZWAgYW5kIGBjb21wb25lbnREaWRVcGRhdGVgLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSkge1xuICAgIHdhcm5Ob29wKHB1YmxpY0luc3RhbmNlLCAnZm9yY2VVcGRhdGUnKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIG9mIHRoZSBzdGF0ZS4gQWx3YXlzIHVzZSB0aGlzIG9yIGBzZXRTdGF0ZWAgdG8gbXV0YXRlIHN0YXRlLlxuICAgKiBZb3Ugc2hvdWxkIHRyZWF0IGB0aGlzLnN0YXRlYCBhcyBpbW11dGFibGUuXG4gICAqXG4gICAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGB0aGlzLnN0YXRlYCB3aWxsIGJlIGltbWVkaWF0ZWx5IHVwZGF0ZWQsIHNvXG4gICAqIGFjY2Vzc2luZyBgdGhpcy5zdGF0ZWAgYWZ0ZXIgY2FsbGluZyB0aGlzIG1ldGhvZCBtYXkgcmV0dXJuIHRoZSBvbGQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29tcGxldGVTdGF0ZSBOZXh0IHN0YXRlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgY29tcGxldGVTdGF0ZSkge1xuICAgIHdhcm5Ob29wKHB1YmxpY0luc3RhbmNlLCAncmVwbGFjZVN0YXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBUaGlzIG9ubHkgZXhpc3RzIGJlY2F1c2UgX3BlbmRpbmdTdGF0ZSBpc1xuICAgKiBpbnRlcm5hbC4gVGhpcyBwcm92aWRlcyBhIG1lcmdpbmcgc3RyYXRlZ3kgdGhhdCBpcyBub3QgYXZhaWxhYmxlIHRvIGRlZXBcbiAgICogcHJvcGVydGllcyB3aGljaCBpcyBjb25mdXNpbmcuIFRPRE86IEV4cG9zZSBwZW5kaW5nU3RhdGUgb3IgZG9uJ3QgdXNlIGl0XG4gICAqIGR1cmluZyB0aGUgbWVyZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBzdGF0ZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgcGFydGlhbFN0YXRlKSB7XG4gICAgd2Fybk5vb3AocHVibGljSW5zdGFuY2UsICdzZXRTdGF0ZScpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QvbGliL1JlYWN0Tm9vcFVwZGF0ZVF1ZXVlLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qIGdsb2JhbCBTeW1ib2wgKi9cblxudmFyIElURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InOyAvLyBCZWZvcmUgU3ltYm9sIHNwZWMuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgaXRlcmF0b3IgbWV0aG9kIGZ1bmN0aW9uIGNvbnRhaW5lZCBvbiB0aGUgaXRlcmFibGUgb2JqZWN0LlxuICpcbiAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICpcbiAqICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obXlJdGVyYWJsZSk7XG4gKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAqICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChteUl0ZXJhYmxlKTtcbiAqICAgICAgIC4uLlxuICogICAgIH1cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IG1heWJlSXRlcmFibGVcbiAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXSk7XG4gIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBpdGVyYXRvckZuO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SXRlcmF0b3JGbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0L2xpYi9nZXRJdGVyYXRvckZuLmpzIiwiLyogZ2xvYmFscyBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19hbWRfb3B0aW9uc19fO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9hbWQtb3B0aW9ucy5qc1xuLy8gbW9kdWxlIGlkID0gMTQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9SZWFjdERPTScpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vaW5kZXguanMiLCJpbXBvcnQgUmVhY3QgICAgICAgIGZyb20gJ3JlYWN0JztcbmltcG9ydCBSYWRpdW0gICAgICAgZnJvbSAncmFkaXVtJztcbmltcG9ydCBEZXRhaWxzSW5wdXQgZnJvbSAnLi9EZXRhaWxzSW5wdXQnO1xuaW1wb3J0IFRleHQgICAgICAgICBmcm9tICcuL1RleHQnO1xuaW1wb3J0IEJ1eUJ1dHRvbiAgICBmcm9tICcuL0J1eUJ1dHRvbic7XG5cbmNsYXNzIERldmljZUxvb2t1cCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGJyYW5kOiAnJyxcbiAgICAgIGRldmljZTogJycsXG4gICAgICBtb2RlbDogJydcbiAgICB9XG4gIH1cbiAgYnJhbmRDaGFuZ2UoZXZlbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHticmFuZDogZXZlbnQudGFyZ2V0LnZhbHVlLCBkZXZpY2U6ICcnfSk7XG4gIH1cbiAgZGV2aWNlQ2hhbmdlKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7ZGV2aWNlOiBldmVudC50YXJnZXQudmFsdWUsIG1vZGVsOiAnJ30pO1xuICB9XG4gIG1vZGVsQ2hhbmdlKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7bW9kZWw6IGV2ZW50LnRhcmdldC52YWx1ZX0pO1xuICB9XG4gIHJlbmRlckNvbnRhY3QoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxUZXh0Pldl4oCZZCBsaWtlIHRvIGZpbmQgb3V0IG1vcmUgYWJvdXQgeW91ciBkZXZpY2Ugc28geW91IGNhbiBnZXQgdGhlIHByb2R1Y3QgdGhhdCBmaXRzIGJlc3QsIHBsZWFzZSBnZXQgaW4gdG91Y2ghPC9UZXh0PlxuICAgICAgICA8RGV0YWlsc0lucHV0IGJyYW5kPXt0aGlzLnN0YXRlLmJyYW5kfSBkZXZpY2U9e3RoaXMuc3RhdGUuZGV2aWNlfSAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuICByZW5kZXJDb21wYXRpYmxlKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8cD48aW1nIHNyYz1cImltZy90aWNrLWljb24uc3ZnXCIgc3R5bGU9e3N0eWxlcy50aWNrfS8+WWVzISBUaGUgY29ubmVjdG9ycyBhcmUgaW5jbHVkZWQgaW4gdGhlIGJveDwvcD5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtkZXZpY2VzfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge2JyYW5kLCBkZXZpY2UsIG1vZGVsfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAvLyBjb25zb2xlLmxvZyhkZXZpY2UpXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuc2VsZWN0c30+XG4gICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnNlbGVjdEhvbGRlcn0+XG4gICAgICAgICAgICA8c2VsZWN0IHN0eWxlPXtbc3R5bGVzLnNlbGVjdCwgYnJhbmQgPT09ICcnID8gc3R5bGVzLmluYWN0aXZlIDogJyddfSB2YWx1ZT17YnJhbmR9IG9uQ2hhbmdlPXt0aGlzLmJyYW5kQ2hhbmdlLmJpbmQodGhpcyl9IGtleT1cImJyYW5kXCI+XG4gICAgICAgICAgICAgIDxvcHRpb24gZGlzYWJsZWQgdmFsdWU9XCJcIj5TZWxlY3QgQnJhbmQ8L29wdGlvbj5cbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRldmljZXMgPyBPYmplY3Qua2V5cyhkZXZpY2VzKS5tYXAoYnJhbmQgPT4gKFxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiBrZXk9e2JyYW5kfSB2YWx1ZT17YnJhbmR9PnticmFuZH08L29wdGlvbj5cbiAgICAgICAgICAgICAgICApKSA6IG51bGxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnNlbGVjdEhvbGRlcn0+XG4gICAgICAgICAgICA8c2VsZWN0IHN0eWxlPXtbc3R5bGVzLnNlbGVjdCwgZGV2aWNlID09PSAnJyA/IHN0eWxlcy5pbmFjdGl2ZSA6ICcnXX0gdmFsdWU9e2RldmljZX0gb25DaGFuZ2U9e3RoaXMuZGV2aWNlQ2hhbmdlLmJpbmQodGhpcyl9IGtleT1cImRldmljZVwiPlxuICAgICAgICAgICAgICA8b3B0aW9uIGRpc2FibGVkIHZhbHVlPVwiXCI+U2VsZWN0IFJhbmdlPC9vcHRpb24+XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAhIWRldmljZXMgJiYgZGV2aWNlc1ticmFuZF0gPyBkZXZpY2VzW2JyYW5kXS5tYXAoZGV2aWNlID0+IChcbiAgICAgICAgICAgICAgICAgIDxvcHRpb24ga2V5PXtkZXZpY2UuaWR9IHZhbHVlPXtkZXZpY2UubmFtZX0+e2RldmljZS5uYW1lfTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICkpIDogbnVsbFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHsvKiB7XG4gICAgICAgICAgICAgICAgISFkZXZpY2VzICYmIGRldmljZXNbYnJhbmRdID8gZGV2aWNlc1ticmFuZF0ubWFwKGRldmljZSA9PiAoXG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIGtleT17ZGV2aWNlfSB2YWx1ZT17ZGV2aWNlfT57ZGV2aWNlfTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICkpIDogbnVsbFxuICAgICAgICAgICAgICB9ICovfVxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnNlbGVjdEhvbGRlcn0+XG4gICAgICAgICAgICA8c2VsZWN0IHN0eWxlPXtbc3R5bGVzLnNlbGVjdCwgbW9kZWwgPT09ICcnID8gc3R5bGVzLmluYWN0aXZlIDogJyddfSB2YWx1ZT17bW9kZWx9IG9uQ2hhbmdlPXt0aGlzLm1vZGVsQ2hhbmdlLmJpbmQodGhpcyl9IGtleT1cIm1vZGVsXCI+XG4gICAgICAgICAgICAgIDxvcHRpb24gZGlzYWJsZWQgdmFsdWU9XCJcIj5TZWxlY3QgTW9kZWw8L29wdGlvbj5cbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICEhZGV2aWNlcyAmJiBkZXZpY2VzW2JyYW5kXSA/IGRldmljZXNbYnJhbmRdLm1hcChtb2RlbCA9PiAoXG4gICAgICAgICAgICAgICAgICBtb2RlbC5uYW1lID09IGRldmljZSA/IG1vZGVsLm1vZGVscy5tYXAodHlwZXMgPT4oXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24ga2V5PXt0eXBlc30gdmFsdWU9e3R5cGVzfT57dHlwZXN9PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICApKSA6IG51bGxcbiAgICAgICAgICAgICAgICAgIC8vIDxvcHRpb24ga2V5PXttb2RlbC5pZH0gdmFsdWU9e21vZGVsLm1vZGVsc30+e21vZGVsLm1vZGVsc308L29wdGlvbj5cbiAgICAgICAgICAgICAgICApKSA6IG51bGxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7XG4gICAgICAgICAgYnJhbmQgPT09ICdPdGhlcicgfHwgZGV2aWNlID09PSAnT3RoZXInIHx8IG1vZGVsID09ICdPdGhlcicgPyB0aGlzLnJlbmRlckNvbnRhY3QoKSA6XG4gICAgICAgICAgICAoZGV2aWNlICE9PSAnJyAmJiBtb2RlbCAhPT0gJycgPyB0aGlzLnJlbmRlckNvbXBhdGlibGUoKSA6IG51bGwpXG4gICAgICAgIH1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICBjb250YWluZXI6IHtcbiAgICBtYXhXaWR0aDogJzUwMHB4JyxcbiAgICBtYXJnaW46ICdhdXRvJyxcbiAgICBwYWRkaW5nOiAnMHB4IDIwcHgnXG4gIH0sXG4gIHNlbGVjdHM6IHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbidcbiAgICB9XG4gIH0sXG4gIHRpY2s6IHtcbiAgICBoZWlnaHQ6ICcxNXB4JyxcbiAgICBtYXJnaW5SaWdodDogJzEwcHgnXG4gIH0sXG4gIGJ1eToge1xuICAgIGNvbG9yOiAnd2hpdGUnXG4gIH0sXG4gIHNlbGVjdEhvbGRlcjoge1xuICAgIHBhZGRpbmc6ICcxMHB4IDBweCAwcHggMHB4JyxcbiAgICBtYXJnaW46ICcwJyxcbiAgICBib3JkZXI6ICcxcHggc29saWQgI2NjYycsXG4gICAgd2lkdGg6ICc0OSUnLFxuICAgIGhlaWdodDogJzM4cHgnLFxuICAgIGJvcmRlclJhZGl1czogJzNweCcsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIG1hcmdpbkJvdHRvbTogJzEwcHgnXG4gICAgfSxcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6ICd1cmwoaW1nL2Rvd24tYXJyb3cuc3ZnPyknLFxuICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgIGJhY2tncm91bmRQb3NpdGlvbjogJzk4JSA1MCUnLFxuICAgIGJhY2tncm91bmRTaXplOiAnMTBweCdcbiAgfSxcbiAgc2VsZWN0OiB7XG4gICAgcGFkZGluZzogJzVweCA4cHgnLFxuICAgIHdpZHRoOiAnMTMwJScsXG4gICAgYm9yZGVyOiAnbm9uZScsXG4gICAgYm94U2hhZG93OiAnbm9uZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGJhY2tncm91bmRJbWFnZTogJ25vbmUnLFxuICAgIGFwcGVhcmVuY2U6ICdub25lJyxcbiAgICAnOmZvY3VzJzoge1xuICAgICAgb3V0bGluZTogJ25vbmUnXG4gICAgfSxcbiAgICBmb250U2l6ZTogJzE0cHgnXG4gIH0sXG4gIGluYWN0aXZlOiB7XG4gICAgY29sb3I6ICcjY2NjY2NjJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpdW0oRGV2aWNlTG9va3VwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9jb21wb25lbnRzL0RldmljZUxvb2t1cC5qcyIsImltcG9ydCBSZWFjdCAgICBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmFkaXVtICAgZnJvbSAncmFkaXVtJztcbmltcG9ydCBSZWFjdFNWRyBmcm9tICdyZWFjdC1zdmcnXG5cbmNsYXNzIEZlYXR1cmVzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc2VsZWN0ZWQ6ICcnLFxuICAgIH07XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtzZWN0aW9uc30gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHtzZWxlY3RlZH0gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmJ1dHRvbnN9PlxuICAgICAgICAgIHtcbiAgICAgICAgICAgICEhc2VjdGlvbnMgPyBPYmplY3Qua2V5cyhzZWN0aW9ucykubWFwKChuYW1lKSA9PiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBrZXk9e25hbWV9XG4gICAgICAgICAgICAgICAgc3R5bGU9e1tzdHlsZXMuYnV0dG9uLCBuYW1lID09PSBzZWxlY3RlZCA/IHN0eWxlcy5zZWxlY3RlZCA6IG51bGxdfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0U3RhdGUoe3NlbGVjdGVkOiBuYW1lfSl9PlxuICAgICAgICAgICAgICAgIDxSZWFjdFNWR1xuICAgICAgICAgICAgICAgICAgcGF0aD17c2VjdGlvbnNbbmFtZV0uaWNvbiArICcuc3ZnJ30gc3R5bGU9e3NlbGVjdGVkID09PSBuYW1lID8gc3R5bGVzLmludmVydCA6IHN0eWxlcy5pbWd9IC8+XG4gICAgICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5uYW1lfT57bmFtZX08L3A+XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc2VjdGlvbnNbbmFtZV0udGV4dC5tYXAoKGxpbmUsIGspID0+IChcbiAgICAgICAgICAgICAgICAgICAgPHAga2V5PXtrfSBzdHlsZT17c3R5bGVzLnRleHR9PntsaW5lfTwvcD5cbiAgICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkpIDogbnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5kZXRhaWxzfT5cbiAgICAgICAgICB7XG4gICAgICAgICAgICAhIXNlbGVjdGVkID8gc2VjdGlvbnNbc2VsZWN0ZWRdLnRleHQubWFwKChsaW5lLCBrKSA9PiAoXG4gICAgICAgICAgICAgIDxwIGtleT17a30+e2xpbmV9PC9wPlxuICAgICAgICAgICAgKSkgOiAnQ2xpY2sgYW4gaWNvbiBhYm92ZSB0byBsZWFybiBtb3JlJ1xuICAgICAgICAgIH1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgY29udGFpbmVyOiB7XG4gICAgbWF4V2lkdGg6ICc3NjBweCcsXG4gICAgbWFyZ2luOiAnYXV0bydcbiAgfSxcbiAgdGV4dDoge1xuICAgIGZvbnRTaXplOiAnMTZweCcsXG4gICAgbWF4V2lkdGg6ICc1MDBweCcsXG4gICAgbWFyZ2luOiAnYXV0bydcbiAgfSxcbiAgYnV0dG9uczoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH1cbiAgfSxcbiAgYnV0dG9uOiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICBjdXJzb3I6ICdhdXRvJ1xuICAgIH0sXG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgJ0BtZWRpYSAobWluLXdpZHRoOiA2MDFweCknOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogJzRweCBzb2xpZCBibGFjaycsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogJy00cHgnXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBzZWxlY3RlZDoge1xuICAgICdAbWVkaWEgKG1pbi13aWR0aDogNjAxcHgpJzoge1xuICAgICAgYm9yZGVyQm90dG9tOiAnNHB4IHNvbGlkIGJsYWNrJyxcbiAgICAgIG1hcmdpbkJvdHRvbTogJy00cHgnXG4gICAgfVxuICB9LFxuICBpbWc6IHtcbiAgICBib3JkZXI6ICczcHggc29saWQgIzFlMWUxZScsXG4gICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBtYXJnaW46ICcyMHB4IDIwcHggMHB4IDIwcHgnXG4gIH0sXG4gIG5hbWU6IHtcbiAgICBmb250U2l6ZTogJzE2cHgnLFxuICAgIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgIG1hcmdpblRvcDogJzEycHgnLFxuICAgIG1hcmdpbkJvdHRvbTogJzBweCcsXG4gICAgZm9udFdlaWdodDogNjAwLFxuICAgIGxldHRlclNwZWNpbmc6ICcwLjRweCcsXG4gICAgcGFkZGluZzogJzAlIDIwJSdcbiAgfSxcbiAgdGV4dDoge1xuICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgZGlzcGxheTogJ25vbmUnLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH0sXG4gICAgbWFyZ2luOiAnMHB4JyxcbiAgICBwYWRkaW5nOiAnMTVweCdcbiAgfSxcbiAgZGV0YWlsczoge1xuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgfSxcbiAgICBmb250U2l6ZTogJzE2cHgnLFxuICAgIHBhZGRpbmc6ICcyMHB4IDBweCcsXG4gICAgbWluSGVpZ2h0OiAnNDBweCdcbiAgfSxcbiAgaW52ZXJ0OiB7XG4gICAgZmlsdGVyOiAnaW52ZXJ0KDEwMCUpJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBtYXJnaW46ICcyMHB4IDIwcHggMHB4IDIwcHgnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGl1bShGZWF0dXJlcyk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvY29tcG9uZW50cy9GZWF0dXJlcy5qcyIsImltcG9ydCBSZWFjdCAgICAgIGZyb20gJ3JlYWN0JztcbmltcG9ydCBTY3JvbGxjaG9yIGZyb20gJ3JlYWN0LXNjcm9sbGNob3InO1xuaW1wb3J0IFJhZGl1bSAgICAgZnJvbSAncmFkaXVtJztcbmltcG9ydCB7TGlua30gICAgIGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5jbGFzcyBGb290ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2xpbmtzfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5saW5rc30+XG4gICAgICAgICAge1xuICAgICAgICAgICAgISFsaW5rcyA/IE9iamVjdC5rZXlzKGxpbmtzKS5tYXAobmV0d29yayA9PiAoXG4gICAgICAgICAgICAgIDxhIGtleT17bmV0d29ya30gaHJlZj17bGlua3NbbmV0d29ya119IHN0eWxlPXtzdHlsZXMuc29jaWFsfT5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz17XCIvaW1nL1wiICsgbmV0d29yayArIFwiLnN2Z1wiIH0gc3R5bGU9e3N0eWxlcy5pY29ufS8+XG4gICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICkpIDogbnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuc21hbGxUZXh0fT4mY29weTsge25ldyBEYXRlKCkuZ2V0WWVhcigpICsgMTkwMH0gQXJyb2UgTGltaXRlZC4gQWxsIHJpZ2h0cyByZXNlcnZlZDwvcD5cbiAgICAgICAgPExpbmsgc3R5bGU9e3N0eWxlcy5zbWFsbFRleHR9IHRvPVwiL3ByaXZhY3lcIj5Qcml2YWN5IFBvbGljeTwvTGluaz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICBjb250YWluZXI6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMWUxZTFlJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgcGFkZGluZzogNTAsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCdcbiAgfSxcbiAgc29jaWFsOiB7XG4gICAgaGVpZ2h0OiAnMjBweCcsXG4gICAgd2lkdGg6ICcyMHB4JyxcbiAgICBtYXJnaW46ICcwcHggNXB4JyxcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xuICB9LFxuICBpY29uOiB7XG4gICAgaGVpZ2h0OiAnMTAwJSdcbiAgfSxcbiAgc21hbGxUZXh0OiB7XG4gICAgbWFyZ2luOiA0LFxuICAgIGZvbnRTaXplOiAxNCxcbiAgICBjb2xvcjogJ3doaXRlJyxcbiAgICBkaXNwbGF5OiAnYmxvY2snXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGl1bShGb290ZXIpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbXBvbmVudHMvRm9vdGVyLmpzIiwiaW1wb3J0IFJlYWN0ICAgICAgICAgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJhZGl1bSAgICAgICAgZnJvbSAncmFkaXVtJztcblxuaW1wb3J0IFNjcm9sbGNob3IgICAgZnJvbSAncmVhY3Qtc2Nyb2xsY2hvcic7XG5pbXBvcnQgWW91VHViZSAgICAgICBmcm9tICcuL1lvdVR1YmUnO1xuaW1wb3J0IFRpdGxlICAgICAgICAgZnJvbSAnLi9UaXRsZSc7XG5cbmNsYXNzIEhlcm9WaWRlbyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzaG93OiBmYWxzZVxuICAgIH07XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtwcmV2aWV3fSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge3Nob3d9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IHN0eWxlPXtbc3R5bGVzLmNvbnRhaW5lciwge2JhY2tncm91bmRJbWFnZTogYHVybCgke3ByZXZpZXd9KWB9XX0+XG4gICAgICAgIHsgIXNob3cgP1xuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuZ3JhZGllbnR9ID5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGltZyBzcmM9XCJpbWcvcGxheS1idXR0b24uc3ZnXCIgc3R5bGU9e3N0eWxlcy5idXR0b259IG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0U3RhdGUoe3Nob3c6IHRydWV9KX0vPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDpcbiAgICAgICAgICA8WW91VHViZVxuICAgICAgICAgICAgdmlkZW9JZD17dGhpcy5wcm9wcy52aWRlb0lkfVxuICAgICAgICAgICAgYXV0b3BsYXk9XCIxXCJcbiAgICAgICAgICAgIHJlbD1cIjBcIlxuICAgICAgICAgICAgbW9kZXN0PVwiMVwiXG4gICAgICAgICAgICBjb250cm9scz1cIjBcIlxuICAgICAgICAgICAgc2hvd2luZm89XCIwXCJcbiAgICAgICAgICAvPlxuICAgICAgICB9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgY29udGFpbmVyOiB7XG4gICAgaGVpZ2h0OiAnMTAwdmgnLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICB6SW5kZXg6IDAsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvdmVyJyxcbiAgICBwYWRkaW5nVG9wOiAnODBweCcsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCdcbiAgfSxcbiAgZ3JhZGllbnQ6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgYmFja2dyb3VuZEltYWdlOiAnbGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgcmdiYSgzMCwgMzAsIDMwLCAwKSwgIzFlMWUxZSknLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInXG4gIH0sXG4gIGJ1dHRvbjoge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIHdpZHRoOiAnMTAwcHgnLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInXG4gIH0sXG4gIHNjcm9sbGRvd246IHtcbiAgICB3aWR0aDogJzMwcHgnLFxuICAgIG1hcmdpbkJvdHRvbTogJzIwcHgnXG4gIH0sICBcbiAgcXVvdGU6IHtcbiAgICBjb2xvcjogJ3doaXRlJyxcbiAgfSxcbiAgcUxvZ286IHtcbiAgICBcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSYWRpdW0oSGVyb1ZpZGVvKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9jb21wb25lbnRzL0hlcm9WaWRlby5qcyIsImltcG9ydCBSZWFjdCAgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJhZGl1bSBmcm9tICdyYWRpdW0nO1xuXG5jbGFzcyBJbWFnZVNwbGl0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIHZhciB7ZGlyZWN0aW9uLCBzcmN9ID0gdGhpcy5wcm9wcztcblxuICAgIGRpcmVjdGlvbiA9IGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyA/ICdyaWdodCcgOiAnbGVmdCc7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICAgIDxkaXYgc3R5bGU9e1tzdHlsZXMucGFuZWwsIGRpcmVjdGlvbiA9PT0gJ2xlZnQnID8gc3R5bGVzLmxlZnQgOiBzdHlsZXMucmlnaHRdfT5cbiAgICAgICAgICA8aW1nIHNyYz17c3JjfSBzdHlsZT17c3R5bGVzLmltZ30vPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBzdHlsZT17W3N0eWxlcy5wYW5lbCwgZGlyZWN0aW9uID09PSAnbGVmdCcgPyBzdHlsZXMucmlnaHQgOiBzdHlsZXMubGVmdF19PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy50ZXh0Qm94fT5cbiAgICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMudGl0bGV9Pnt0aGlzLnByb3BzLnRpdGxlfTwvcD5cbiAgICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+e3RoaXMucHJvcHMudGV4dH08L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGNvbnRhaW5lcjoge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH1cbiAgfSxcbiAgbGVmdDoge1xuICAgIG9yZGVyOiAxLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJ1xuICB9LFxuICByaWdodDoge1xuICAgIG9yZGVyOiAyLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnXG4gIH0sXG4gIHBhbmVsOiB7XG4gICAgd2lkdGg6ICc1MCUnLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgfVxuICB9LFxuICBpbWc6IHtcbiAgICBhbGlnblNlbGY6ICdjZW50ZXInLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICdhdXRvJ1xuICAgIH1cbiAgfSxcbiAgdGV4dEJveDoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBwYWRkaW5nOiAnNDBweCAyMCUnLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgcGFkZGluZzogJzQwcHggMjBweCdcbiAgICB9XG4gIH0sXG4gIHRpdGxlOiB7XG4gICAgZm9udFNpemU6ICcyMHB4JyxcbiAgICAvLyB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgICBtYXJnaW46ICcwcHgnLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJ1xuICB9LFxuICBjb250ZW50OiB7XG4gICAgZm9udFNpemU6ICcxNHB4J1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpdW0oSW1hZ2VTcGxpdCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvY29tcG9uZW50cy9JbWFnZVNwbGl0LmpzIiwiaW1wb3J0IFJlYWN0ICBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmFkaXVtIGZyb20gJ3JhZGl1bSc7XG5cbmNsYXNzIEltYWdlU3BsaXRQaG9uZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICB2YXIge2RpcmVjdGlvbiwgc3JjfSA9IHRoaXMucHJvcHM7XG5cbiAgICBkaXJlY3Rpb24gPSBkaXJlY3Rpb24gPT09ICdyaWdodCcgPyAncmlnaHQnIDogJ2xlZnQnO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgICA8ZGl2IHN0eWxlPXtbc3R5bGVzLnBhbmVsLCBkaXJlY3Rpb24gPT09ICdsZWZ0JyA/IHN0eWxlcy5sZWZ0IDogc3R5bGVzLnJpZ2h0XX0+XG4gICAgICAgICAgPGltZyBzcmM9e3NyY30gc3R5bGU9e3N0eWxlcy5pbWd9Lz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e1tzdHlsZXMucGFuZWwsIGRpcmVjdGlvbiA9PT0gJ2xlZnQnID8gc3R5bGVzLnJpZ2h0IDogc3R5bGVzLmxlZnRdfT5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMudGV4dEJveH0+XG4gICAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLnRpdGxlfT57dGhpcy5wcm9wcy50aXRsZX08L3A+XG4gICAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLmNvbnRlbnR9Pnt0aGlzLnByb3BzLnRleHR9PC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICBjb250YWluZXI6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICB9XG4gIH0sXG4gIGxlZnQ6IHtcbiAgICBvcmRlcjogMSxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCdcbiAgfSxcbiAgcmlnaHQ6IHtcbiAgICBvcmRlcjogMixcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0J1xuICB9LFxuICBwYW5lbDoge1xuICAgIHdpZHRoOiAnNTAlJyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgIH1cbiAgfSxcbiAgaW1nOiB7XG4gICAgYWxpZ25TZWxmOiAnY2VudGVyJyxcbiAgICBoZWlnaHQ6ICc1MjBweCcsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGhlaWdodDogJ2F1dG8nXG4gICAgfVxuICB9LFxuICB0ZXh0Qm94OiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIHBhZGRpbmc6ICc0MHB4IDIwJScsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICBwYWRkaW5nOiAnNDBweCAyMHB4J1xuICAgIH1cbiAgfSxcbiAgdGl0bGU6IHtcbiAgICBmb250U2l6ZTogJzIwcHgnLFxuICAgIC8vIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgIG1hcmdpbjogJzBweCcsXG4gICAgZm9udFdlaWdodDogJ2JvbGQnXG4gIH0sXG4gIGNvbnRlbnQ6IHtcbiAgICBmb250U2l6ZTogJzE0cHgnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGl1bShJbWFnZVNwbGl0UGhvbmUpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbXBvbmVudHMvSW1hZ2VTcGxpdFBob25lLmpzIiwiaW1wb3J0IFJlYWN0ICBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmFkaXVtIGZyb20gJ3JhZGl1bSc7XG5cbmNsYXNzIEluVGhlQm94IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIHZhciB7c3JjfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMucGFuZWx9PlxuICAgICAgICAgIDxpbWcgc3JjPXtzcmN9IHN0eWxlPXtzdHlsZXMuaW1nfS8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMucGFuZWx9PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5sZWZ0fT5cbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy50ZXh0Qm94fT5cbiAgICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT5MQUVSIHdpdGggMjAsMDAwbUFoICg3NFdoKSBiYXR0ZXJ5IGNhcnRyaWRnZTwvcD5cbiAgICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT5VU0ItQyBQb3dlciBEZWxpdmVyeSAzLjAgNjBXIGNoYXJnZXIgYW5kIDIgbSBjYWJsZTwvcD5cbiAgICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT5MYXB0b3AgY2FibGUgKHNlbGVjdCB5b3VyIGxhcHRvcCBicmFuZCBhdCBjaGVja291dCkgYW5kIDJtIGV4dGVuc2lvbiBjYWJsZTwvcD5cbiAgICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+U2V0IG9mIGludGVybmF0aW9uYWwgYWRhcHRvciBwbHVnczogVHlwZSBBIChVUyksIFR5cGUgQyAoRXVyb3BlKSwgVHlwZSBHIChVSyksIFR5cGUgSSAoQXVzdHJhbGlhKTwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICBjb250YWluZXI6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICB9XG4gIH0sXG4gIGxlZnQ6IHtcbiAgICBvcmRlcjogMSxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCdcbiAgfSxcbiAgcmlnaHQ6IHtcbiAgICBvcmRlcjogMixcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0J1xuICB9LFxuICBwYW5lbDoge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgbWFyZ2luOiAnYXV0bycsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICB9XG4gIH0sXG4gIGltZzoge1xuICAgIGFsaWduU2VsZjogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICB9XG4gIH0sXG4gIHRleHRCb3g6IHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgcGFkZGluZzogJzQwcHggMjAlJyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIHBhZGRpbmdMZWZ0IDogJzIwJScsXG4gICAgICBwYWRkaW5nUmlnaHQgOiAnMjAlJ1xuICAgIH1cbiAgfSxcbiAgdGl0bGU6IHtcbiAgICBmb250U2l6ZTogJzIwcHgnLFxuICAgIC8vIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgIG1hcmdpbjogJzBweCcsXG4gICAgZm9udFdlaWdodDogJ2JvbGQnXG4gIH0sXG4gIGNvbnRlbnQ6IHtcbiAgICBmb250U2l6ZTogJzE0cHgnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGl1bShJblRoZUJveCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvY29tcG9uZW50cy9JblRoZUJveC5qcyIsImltcG9ydCBSZWFjdCAgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJhZGl1bSBmcm9tICdyYWRpdW0nO1xuXG5jbGFzcyBJblRoZUJveF9mciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICB2YXIge3NyY30gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnBhbmVsfT5cbiAgICAgICAgICA8aW1nIHNyYz17c3JjfSBzdHlsZT17c3R5bGVzLmltZ30vPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnBhbmVsfT5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMubGVmdH0+XG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMudGV4dEJveH0+XG4gICAgICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+TEFFUiBhdmVjIGJhdHRlcmllIGRlIDIwLDAwMCBtQWggKDc0IFdoKTwvcD5cbiAgICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT5DaGFyZ2V1ciBVU0ItQyBQRCAzLjAgNjAgVyBldCBjYWJsZSBVU0JDIFBEIDMuMCBkZSAyIG08L3A+XG4gICAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLmNvbnRlbnR9PkpldSBkZSBjw6JibGVzIGV0IGNvbm5lY3RldXJzIChVU0ItQyBQRCwgQXBwbGUgTWFnU2FmZSAyLCBNaWNyb3NvZnQgU3VyZmFjZSwgOCBhZGFwdGF0ZXVycyBQQywgZXQgY2FibGUgZOKAmWV4dGVuc2lvbiBkZSAyIG0pPC9wPlxuICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT5KZXUgZGUgcHJpc2UgaW50ZXJuYXRpb25hbGVzIDogVVNBLCBFdXJvcGUsIFJveWF1bWUtdW5pLCBBdXN0cmFsaWU8L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgY29udGFpbmVyOiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgfVxuICB9LFxuICBsZWZ0OiB7XG4gICAgb3JkZXI6IDEsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnXG4gIH0sXG4gIHJpZ2h0OiB7XG4gICAgb3JkZXI6IDIsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCdcbiAgfSxcbiAgcGFuZWw6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIG1hcmdpbjogJ2F1dG8nLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgfVxuICB9LFxuICBpbWc6IHtcbiAgICBhbGlnblNlbGY6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgfVxuICB9LFxuICB0ZXh0Qm94OiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIHBhZGRpbmc6ICc0MHB4IDIwJScsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICBwYWRkaW5nTGVmdCA6ICcyMCUnLFxuICAgICAgcGFkZGluZ1JpZ2h0IDogJzIwJSdcbiAgICB9XG4gIH0sXG4gIHRpdGxlOiB7XG4gICAgZm9udFNpemU6ICcyMHB4JyxcbiAgICAvLyB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgICBtYXJnaW46ICcwcHgnLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJ1xuICB9LFxuICBjb250ZW50OiB7XG4gICAgZm9udFNpemU6ICcxNHB4J1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpdW0oSW5UaGVCb3hfZnIpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbXBvbmVudHMvSW5UaGVCb3hfZnIuanMiLCJpbXBvcnQgUmVhY3QgIGZyb20gJ3JlYWN0JztcbmltcG9ydCBSYWRpdW0gZnJvbSAncmFkaXVtJztcblxuY2xhc3MgSW5UaGVCb3hfZ3IgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgdmFyIHtzcmN9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5wYW5lbH0+XG4gICAgICAgICAgPGltZyBzcmM9e3NyY30gc3R5bGU9e3N0eWxlcy5pbWd9Lz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5wYW5lbH0+XG4gICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmxlZnR9PlxuICAgICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnRleHRCb3h9PlxuICAgICAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLmNvbnRlbnR9PkxBRVIgbWl0IGVpbmVyIDIwLDAwMG1BaCAoNzRXaCkgQmF0dGVyaWVrYXJ0ZTwvcD5cbiAgICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT5VU0ItQyBQRCAzLjAgNjBXIExhZGVnZXLDpHQgdW5kIDJtIFVTQkMgUEQgMy4wIExhZGVrYWJlbDwvcD5cbiAgICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+TGFwdG9wLUFkYXB0ZXIgKFVTQi1DIFBELCBBcHBsZSBNYWdTYWZlIDIsIE1pY3Jvc29mdCBTdXJmYWNlLCA4IExhcHRvcC1BZGFwdGVyIFBDKSB1bmQgMm0gVmVybMOkbmdlcnVuZ3NrYWJlbGU8L3A+XG4gICAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLmNvbnRlbnR9PkludGVybmF0aW9uYWxlcyBBZGFwdGVyc3RlY2tlci1TZXQ6IFR5cCBBIChVUyksIFR5cCBDIChFdXJvcGEpLCBUeXAgRyAoVUspLCBUeXAgSSAoQXVzdHJhbGllbik8L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgY29udGFpbmVyOiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgfVxuICB9LFxuICBsZWZ0OiB7XG4gICAgb3JkZXI6IDEsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnXG4gIH0sXG4gIHJpZ2h0OiB7XG4gICAgb3JkZXI6IDIsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCdcbiAgfSxcbiAgcGFuZWw6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIG1hcmdpbjogJ2F1dG8nLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgfVxuICB9LFxuICBpbWc6IHtcbiAgICBhbGlnblNlbGY6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgfVxuICB9LFxuICB0ZXh0Qm94OiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIHBhZGRpbmc6ICc0MHB4IDIwJScsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICBwYWRkaW5nTGVmdCA6ICcyMCUnLFxuICAgICAgcGFkZGluZ1JpZ2h0IDogJzIwJSdcbiAgICB9XG4gIH0sXG4gIHRpdGxlOiB7XG4gICAgZm9udFNpemU6ICcyMHB4JyxcbiAgICAvLyB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgICBtYXJnaW46ICcwcHgnLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJ1xuICB9LFxuICBjb250ZW50OiB7XG4gICAgZm9udFNpemU6ICcxNHB4J1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpdW0oSW5UaGVCb3hfZ3IpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbXBvbmVudHMvSW5UaGVCb3hfZ3IuanMiLCJpbXBvcnQgUmVhY3QgICAgICBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU2Nyb2xsY2hvciBmcm9tICdyZWFjdC1zY3JvbGxjaG9yJztcbmltcG9ydCBSYWRpdW0gICAgIGZyb20gJ3JhZGl1bSc7XG5pbXBvcnQge0xpbmt9ICAgICBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuXG5pbXBvcnQgQnV5QnV0dG9uICBmcm9tICcuL0J1eUJ1dHRvbic7XG5cbmNsYXNzIE5hdiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7bGlua3N9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBzdHlsZT17W3N0eWxlcy5jb250YWluZXIsIHtwb3NpdGlvbjogJ2ZpeGVkJ31dfT5cbiAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmlubmVyfT5cbiAgICAgICAgICA8U2Nyb2xsY2hvciBzdHlsZT17c3R5bGVzLmxvZ29Db250YWluZXJ9IHRvPVwiI1wiPlxuICAgICAgICAgICAgPGltZyBzdHlsZT17c3R5bGVzLmxvZ299IHNyYz1cImltZy9hcnJvZS1sb2dvLnN2Z1wiIC8+XG4gICAgICAgICAgPC9TY3JvbGxjaG9yPlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5saW5rQ29udGFpbmVyfT5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgISFsaW5rcyA/IE9iamVjdC5rZXlzKGxpbmtzKS5tYXAobmFtZSA9PiAoXG5cbiAgICAgICAgICAgICAgICA8TGluayBrZXk9e25hbWV9IHRvPXtsaW5rc1tuYW1lXX0gc3R5bGU9e3N0eWxlcy5saW5rfT5cbiAgICAgICAgICAgICAgICB7bmFtZX1cbiAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICkpIDogbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5vcmRlckJ0bkNvbnRhaW5lcn0+XG4gICAgICAgICAgICA8QnV5QnV0dG9uIGxpbms9e3RoaXMucHJvcHMuYnV5TGlua30vPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICBjb250YWluZXI6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMWUxZTFlJyxcbiAgICBoZWlnaHQ6ICc4MHB4JyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIHpJbmRleDogMTAwMCxcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJ1xuICB9LFxuICBpbm5lcjoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgbWFyZ2luOiAnYXV0bycsXG4gICAgbWF4V2lkdGg6ICcxMDAwcHgnLFxuICAgIHBhZGRpbmc6ICcwcHggMjBweCdcbiAgfSxcbiAgbG9nb0NvbnRhaW5lcjoge1xuICAgIHdpZHRoOiAnMTExcHgnLFxuICAgIGZsZXhHcm93OiAwLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcidcbiAgfSxcbiAgbGlua0NvbnRhaW5lcjoge1xuICAgIGZsZXhHcm93OiAxLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG5cbiAgfSxcbiAgb3JkZXJCdG5Db250YWluZXI6IHtcbiAgICBjb2xvcjogJ1doaXRlJyxcbiAgICB3aWR0aDogJzEyMHB4JyxcbiAgICBmbGV4R3JvdzogMCxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgfSxcbiAgICBmb250U2l6ZTogMTYsXG4gICAgdGV4dEFsaWduOiAncmlnaHQnXG4gIH0sXG4gIGxvZ286IHtcbiAgICB3aWR0aDogJzEwMCUnXG4gIH0sXG4gIGxpbms6IHtcbiAgICBjb2xvcjogJ3doaXRlJyxcbiAgICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgbWFyZ2luOiAnMHB4IDEwcHgnLFxuICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgZm9udFNpemU6IDE0LFxuICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICBsZXR0ZXJTcGFjaW5nOiAnMS43NXB4J1xuICB9LFxuICBidXk6IHtcbiAgICBjb2xvcjogJ3doaXRlJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpdW0oTmF2KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9jb21wb25lbnRzL05hdi5qcyIsImltcG9ydCBSZWFjdCAgICAgIGZyb20gJ3JlYWN0JztcbmltcG9ydCBTY3JvbGxjaG9yIGZyb20gJ3JlYWN0LXNjcm9sbGNob3InO1xuaW1wb3J0IFJhZGl1bSAgICAgZnJvbSAncmFkaXVtJztcbmltcG9ydCB7TGlua30gICAgIGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5cbmltcG9ydCBCdXlCdXR0b24gIGZyb20gJy4vQnV5QnV0dG9uJztcblxuY2xhc3MgTmF2TGlnaHQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2xpbmtzfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgc3R5bGU9e1tzdHlsZXMuY29udGFpbmVyLCB7cG9zaXRpb246ICdmaXhlZCd9XX0+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5pbm5lcn0+XG4gICAgICAgICAgPFNjcm9sbGNob3Igc3R5bGU9e3N0eWxlcy5sb2dvQ29udGFpbmVyfSB0bz1cIiNcIj5cbiAgICAgICAgICAgIDxpbWcgc3R5bGU9e3N0eWxlcy5sb2dvfSBzcmM9XCJpbWcvYXJyb2UtbG9nby1kYXJrLnN2Z1wiIC8+XG4gICAgICAgICAgPC9TY3JvbGxjaG9yPlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5sYW5nSG9sZGVyfT5cbiAgICAgICAgICAgICAgPExpbmsgdG89Jy9wdXJjaGFzZSc+XG4gICAgICAgICAgICAgICAgPGltZyBzdHlsZT17c3R5bGVzLmZsYWdzfSBzcmM9XCJpbWcvZW5nLnBuZ1wiIC8+XG4gICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgPExpbmsgdG89Jy9wdXJjaGFzZV9mcic+XG4gICAgICAgICAgICAgICAgPGltZyBzdHlsZT17c3R5bGVzLmZsYWdzfSBzcmM9XCJpbWcvZnIucG5nXCIgLz5cbiAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICA8TGluayB0bz0nL3B1cmNoYXNlX2dyJz5cbiAgICAgICAgICAgICAgICA8aW1nIHN0eWxlPXtzdHlsZXMuZmxhZ3N9IHNyYz1cImltZy9nZXIucG5nXCIgLz5cbiAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGNvbnRhaW5lcjoge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICBoZWlnaHQ6ICc4MHB4JyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIHpJbmRleDogMTAwMCxcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJ1xuICB9LFxuICBpbm5lcjoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgbWFyZ2luOiAnYXV0bycsXG4gICAgbWF4V2lkdGg6ICcxMDAwcHgnLFxuICAgIHBhZGRpbmc6ICcwcHggMjBweCdcbiAgfSxcbiAgbG9nb0NvbnRhaW5lcjoge1xuICAgIHdpZHRoOiAnMTExcHgnLFxuICAgIGZsZXhHcm93OiAwLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcidcbiAgfSxcbiAgbGlua0NvbnRhaW5lcjoge1xuICAgIGZsZXhHcm93OiAxLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG5cbiAgfSxcbiAgb3JkZXJCdG5Db250YWluZXI6IHtcbiAgICBjb2xvcjogJ1doaXRlJyxcbiAgICB3aWR0aDogJzEyMHB4JyxcbiAgICBmbGV4R3JvdzogMCxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgfSxcbiAgICBmb250U2l6ZTogMTYsXG4gICAgdGV4dEFsaWduOiAncmlnaHQnXG4gIH0sXG4gIGxvZ286IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGZpbGw6ICdibGFjaydcbiAgfSxcbiAgbGluazoge1xuICAgIGNvbG9yOiAnYmxhY2snLFxuICAgIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBtYXJnaW46ICcwcHggMTBweCcsXG4gICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICBmb250U2l6ZTogMTQsXG4gICAgZm9udFdlaWdodDogNjAwLFxuICAgIGxldHRlclNwYWNpbmc6ICcxLjc1cHgnXG4gIH0sXG4gIGJ1eToge1xuICAgIGNvbG9yOiAnd2hpdGUnXG4gIH0sXG4gIGxhbmdIb2xkZXI6e1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgbWFyZ2luOiAnYXV0bycsXG4gICAgbWF4V2lkdGg6ICcxMDAwcHgnLFxuICAgIHBhZGRpbmc6ICcwcHggMjBweCcsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgcmlnaHQ6ICc1JScsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgcG9zaXRpb246ICdyaWdodCcsXG4gICAgICByaWdodDogJzEwcHgnLFxuICAgICAgcGFkZGluZzogJzVweCdcbiAgICB9LFxuICB9LFxuICBmbGFnczoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBib3JkZXJSYWRpdXM6ICcxODAnLFxuICAgIHdpZHRoOiAnMzBweCcsXG4gICAgaGVpZ2h0OiAnMzBweCcsXG4gICAgcGFkZGluZzogJzVweCcsXG4gICAgbWFyZ2luOiAnYXV0bycsXG4gICAgbWFyZ2luVG9wOiAnMjBweCcsXG4gICAgdmVydGljYWxBbGlnbjogJ2Jhc2VsaW5lJyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIHdpZHRoOiAnMjBweCcsXG4gICAgICBoZWlnaHQ6ICcyMHB4JyxcbiAgICB9LFxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpdW0oTmF2TGlnaHQpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbXBvbmVudHMvTmF2TGlnaHQuanMiLCJpbXBvcnQgUmVhY3QgIGZyb20gJ3JlYWN0JztcbmltcG9ydCBSYWRpdW0gZnJvbSAncmFkaXVtJztcblxuaW1wb3J0IFBlcnNvbiBmcm9tICcuL1BlcnNvbic7XG5cbmNsYXNzIFBlb3BsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7cGVvcGxlfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgICB7XG4gICAgICAgICAgISFwZW9wbGUgPyBPYmplY3Qua2V5cyhwZW9wbGUpLm1hcCgobmFtZSkgPT4gKFxuICAgICAgICAgICAgPFBlcnNvbiBuYW1lPXtuYW1lfSBrZXk9e25hbWV9IHRpdGxlPXtwZW9wbGVbbmFtZV0udGl0bGV9IHBpY3R1cmU9e3Blb3BsZVtuYW1lXS5waWN0dXJlfSAvPlxuICAgICAgICAgICkpIDogbnVsbFxuICAgICAgICB9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgY29udGFpbmVyOiB7XG4gICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICB3aWR0aDogJzc2MHB4JyxcbiAgICBtYXJnaW46ICcwcHggYXV0byA1MHB4JyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGl1bShQZW9wbGUpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbXBvbmVudHMvUGVvcGxlLmpzIiwiaW1wb3J0IFJlYWN0ICBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmFkaXVtIGZyb20gJ3JhZGl1bSc7XG5jbGFzcyBTZWN0aW9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtzY3JvbGxOYW1lfSA9IHRoaXMucHJvcHNcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBzdHlsZT17W3N0eWxlcy5jb250YWluZXIsIHRoaXMucHJvcHMuc3R5bGVdfT5cbiAgICAgICAgPGRpdiBpZD17c2Nyb2xsTmFtZX0gc3R5bGU9e3N0eWxlcy5zY3JvbGxUYXJnZXR9IC8+XG4gICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGNvbnRhaW5lcjoge1xuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIHBhZGRpbmdCb3R0b206ICc1NXB4J1xuICB9LFxuICB0ZXh0OiB7XG4gICAgZm9udFNpemU6ICcxNnB4JyxcbiAgICBtYXJnaW46ICdhdXRvJ1xuICB9LFxuICBzY3JvbGxUYXJnZXQ6IHtcbiAgICBtYXJnaW5Ub3A6ICctNTVweCcsXG4gICAgcGFkZGluZ1RvcDogJzU1cHgnICBcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmFkaXVtKFNlY3Rpb24pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsImltcG9ydCBSZWFjdCAgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJhZGl1bSBmcm9tICdyYWRpdW0nO1xuXG5pbXBvcnQgVGl0bGUgZnJvbSAnLi9UaXRsZSc7XG5cbmNsYXNzIFRlY2hTcGVjcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmxlZnR9PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy50ZXh0Qm94TGVmdH0+XG4gICAgICAgICAgPFRpdGxlPiBMQUVSIDwvVGl0bGU+XG4gICAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLnRpdGxlfT5TaXplIGFuZCBXZWlnaHQ8L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMucmlnaHR9PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy50ZXh0Qm94V1RpdGxlfT5cbiAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLmNvbnRlbnR9PldpZHRoOiAyODVtbTwvcD5cbiAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLmNvbnRlbnR9PkRlcHRoOiAyMDAgbW08L3A+XG4gICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT5IZWlnaHQ6IDEzbW0gKG1heCk8L3A+XG4gICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+V2VpZ2h0OiA4MTVnIHdpdGggMjAsMDAwbUFoIGJhdHRlcnkgNjU3ZyB3aXRoIDEwLDAwMG1BaCBiYXR0ZXJ5ICgxMCwwMDBtQWggYmF0dGVyeSBub3QgaW5jbHVkZWQsIHJlcXVpcmVzIGFkZGl0aW9uYWwgcHVyY2hhc2UpPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5sZWZ0fT5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMudGV4dEJveExlZnR9PlxuICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy50aXRsZX0+UG9ydHM8L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMucmlnaHR9PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy50ZXh0Qm94fT5cblxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+MXggREMgb3V0cHV0IChzdXBwb3J0aW5nIDEyLTIwViBvdXRwdXQpPC9wPlxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+MXggVVNCLUMgaW4vb3V0IHBvcnQgd2l0aCBQRCAzLjAgKHN1cHBvcnRpbmcgNSw5LDEyLDE1LCAyMFYgb3V0cHV0KTwvcD5cbiAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLmNvbnRlbnR9PjF4IFVTQi1DIG91dCBwb3J0IHdpdGggUEQgMy4wIChzdXBwb3J0aW5nIDUsOSwxMiwxNSwgMjBWIG91dHB1dCk8L3A+XG4gICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT4xeCBVU0ItQSBvdXRwdXQgKHN1cHBvcnRzIGZhc3QgY2hhcmdpbmcsIDUtMThXKTwvcD5cbiAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT4xeCBRaSBXaXJlbGVzcyBjaGFyZ2luZyBwb3J0ICg1ViwgMUEsIDVXKTwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5saW5lQnJlYWt9PjwvZGl2PlxuICAgICAgey8qIFxuICAgICAgXG4gICAgICBjb21tZW50IFxuICAgIFxuICAgICAgICAqL31cbiAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMubGVmdH0+XG4gICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnRleHRCb3hMZWZ0fT5cbiAgICAgICAgICA8VGl0bGU+IEJhdHRlcnkgYW5kIFBvd2VyIDwvVGl0bGU+XG4gICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy50aXRsZX0+MjAsMDAwbUFoIDc0d2ggQ2FydHJpZGdlPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnJpZ2h0fT5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMudGV4dEJveFdUaXRsZX0+XG4gICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT5Db250YWlucyBCYXR0ZXJ5IENlbGxzIDR4IDMuN3YgNSwwMDBtQWggY2VsbHMgaW4gc2VyaWVzPC9wPlxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+V2VpZ2h0OiA1NjFnIG1heDwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMubGVmdH0+XG4gICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnRleHRCb3hMZWZ0fT5cbiAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLnRpdGxlfT4xMCwwMDBtQWggMzd3aCBCYXR0ZXJ5IENhcnRyaWRnZSAobm90IGluY2x1ZGVkIGluIHRoaXMgYm94LCByZXF1aXJlcyBhZGRpdGlvbmFsIHB1cmNoYXNlKTwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5yaWdodH0+XG4gICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnRleHRCb3h9PlxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+Q29udGFpbnMgQmF0dGVyeSBDZWxscywgNHggMy43diAyLDUwMG1BaCBjZWxscyBpbiBzZXJpZXM8L3A+XG4gICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT5XZWlnaHQ6IDMzNmcgbWF4PC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5sZWZ0fT5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMudGV4dEJveExlZnR9PlxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMudGl0bGV9PlVTQi1DIENoYXJnZXI8L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMucmlnaHR9PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy50ZXh0Qm94fT5cblxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+NjB3IChtaW5pbXVtIG91dHB1dCkgVVNCLUMgUG93ZXIgRGVsaXZlcnkgY2hhcmdlciB3aXRoIHN3YXBwYWJsZSB3YWxsIHBsdWdzIGZvciBVUywgRXVyb3BlLCBVSywgYW5kIEF1c3RyYWxpYSBhbmQgc3VwcG9ydGluZyAybSBVU0ItQyBjYWJsZTwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgY29udGFpbmVyOiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH1cbiAgfSxcbiAgbGVmdDoge1xuICAgIG9yZGVyOiAxLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgICB3aWR0aDogJzUwJScsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICAvLyBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH1cbiAgfSxcbiAgcmlnaHQ6IHtcbiAgICBvcmRlcjogMixcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICB3aWR0aDogJzUwJScsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICAvLyBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH1cbiAgfSxcbiAgcGFuZWw6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIG1hcmdpbjogJ2F1dG8nLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgfVxuICB9LFxuICBpbWc6IHtcbiAgICBhbGlnblNlbGY6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgfVxuICB9LFxuICB0ZXh0Qm94OiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIC8vIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIHBhZGRpbmdMZWZ0OiAnMjAlJyxcbiAgICBwYWRkaW5nUmlnaHQ6ICcyMCUnLFxuICAgIHBhZGRpbmdUb3A6ICcwcHgnLFxuXG4gIH0sXG4gIHRleHRCb3hMZWZ0OiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIC8vIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIHBhZGRpbmdMZWZ0OiAnMjAlJyxcbiAgICBwYWRkaW5nUmlnaHQ6ICcyMCUnLFxuXG4gIH0sXG4gIHRleHRCb3hXVGl0bGU6e1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAvLyBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBwYWRkaW5nTGVmdDogJzIwJScsXG4gICAgcGFkZGluZ1JpZ2h0OiAnMjAlJyxcbiAgICBwYWRkaW5nVG9wOiAnNzVweCcsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICBwYWRkaW5nVG9wOiAnMHB4J1xuICAgIH1cbiAgfSxcbiAgdGl0bGU6IHtcbiAgICBmb250U2l6ZTogJzE2cHgnLFxuICAgIC8vIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgIG1hcmdpbjogJzBweCcsXG4gICAgZm9udFdlaWdodDogJ2JvbGQnXG4gIH0sXG4gIGNvbnRlbnQ6IHtcbiAgICBmb250U2l6ZTogJzE0cHgnXG4gIH0sXG4gIGxpbmVCcmVhazp7XG4gICAgbWFyZ2luOiAnYXV0bycsXG4gICAgbWFyZ2luVG9wOiAnNSUnLFxuICAgIG1hcmdpbkJvdHRvbTogJzUlJyxcbiAgICB3aWR0aDogJzgwJScsXG4gICAgaGVpZ2h0OiAnMXB4JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjRENEQ0RDJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpdW0oVGVjaFNwZWNzKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9jb21wb25lbnRzL1RlY2hTcGVjcy5qcyIsImltcG9ydCBSZWFjdCAgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJhZGl1bSBmcm9tICdyYWRpdW0nO1xuXG5pbXBvcnQgVGl0bGUgZnJvbSAnLi9UaXRsZSc7XG5cbmNsYXNzIFRlY2hTcGVjc19mciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmxlZnR9PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy50ZXh0Qm94TGVmdH0+XG4gICAgICAgICAgPFRpdGxlPiBMQUVSIDwvVGl0bGU+XG4gICAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLnRpdGxlfT5UYWlsbGUgZXQgcG9pZHM8L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMucmlnaHR9PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy50ZXh0Qm94V1RpdGxlfT5cbiAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLmNvbnRlbnR9PldpZHRoOiAyODVtbTwvcD5cbiAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLmNvbnRlbnR9PkRlcHRoOiAyMDAgbW08L3A+XG4gICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT5IZWlnaHQ6IDEzbW0gKG1heCk8L3A+XG4gICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+UG9pZHM6IDg3NGcgYXZlYyBsYSBjYXJ0b3VjaGUgZGUgMjAgMDAwbUFoLCA2NDlnIGF2ZWMgbGEgY2FydG91Y2hlIGRlIDEwIDAwMG1BaCAoY2FydG91Y2hlIGRlIDEwIDAwMG1BaCBub24gZm91cm5pcyBkYW5zIGNldHRlIGJvw650ZSwgYWNoYXQgc8OpcGFyw6kpPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5sZWZ0fT5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMudGV4dEJveExlZnR9PlxuICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy50aXRsZX0+UHJpc2VzPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnJpZ2h0fT5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMudGV4dEJveH0+XG5cbiAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLmNvbnRlbnR9PjF4IHNvcnRpZSBEQyAoMTItMjAgVik8L3A+XG4gICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT4xeCBlbnRyw6llIC8gc29ydGllIFVTQi1DIFBEIDMuMCAoNSw5LDEyLDE1LCAyMFYgZW4gc29ydGllKTwvcD5cbiAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLmNvbnRlbnR9PjF4IHNvcnRpZSBVU0ItQyBQRCAzLjAgKCA1LDksMTIsMTUsIDIwViBlbiBzb3J0aWUpPC9wPlxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+MXggc29ydGllIFVTQi1BIChjaGFyZ2UgcmFwaWRlLCA1LTE4Vyk8L3A+XG4gICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT4xeCBRaSByZWNoYXJnZSBzYW5zIGNvbnRhY3QgKDVWLCAxLjVBLCA3LjVXKTwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5saW5lQnJlYWt9PjwvZGl2PlxuICAgICAgey8qIFxuICAgICAgXG4gICAgICBjb21tZW50IFxuICAgIFxuICAgICAgICAqL31cbiAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMubGVmdH0+XG4gICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnRleHRCb3hMZWZ0fT5cbiAgICAgICAgICA8VGl0bGU+IEJhdHRlcmllIGV0IHB1aXNzYW5jZSA8L1RpdGxlPlxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMudGl0bGV9PkNhcnRvdWNoZSAyMCwwMDBtQWggNzR3aDwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5yaWdodH0+XG4gICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnRleHRCb3hXVGl0bGV9PlxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+TGEgY2FydG91Y2hlIGRlIDIwIDAwMG1BaCwgNzRXaCBjb250aWVudCA0eCAzLjd2IDUwMDBtQWggY2VsbHVsZXMgZW4gc8OpcmllPC9wPlxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+UG9pZHM6IDU2MSBtYXg8L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmxlZnR9PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy50ZXh0Qm94TGVmdH0+XG4gICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy50aXRsZX0+Q2FydG91Y2hlIDEwLDAwMG1BaCAzN3doIChjYXJ0b3VjaGUgbm9uIGZvdXJuaXMgZGFucyBjZXR0ZSBib8OudGUsIGFjaGF0IHPDqXBhcsOpKTwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5yaWdodH0+XG4gICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnRleHRCb3h9PlxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+TGEgY2FydG91Y2hlIGRlIDEwIDAwMG1BaCwgMzdXaCBjb250aWVudCAgNHggMy43diAyNTAwbUFoIGNlbGx1bGVzIGVuIHPDqXJpZS48L3A+XG4gICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT5Qb2lkczogMzM2ZyBtYXg8L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmxlZnR9PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy50ZXh0Qm94TGVmdH0+XG4gICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy50aXRsZX0+Q2hhcmdldXIgVVNCLUM8L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMucmlnaHR9PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy50ZXh0Qm94fT5cblxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+NjB3IChwdWlzc2FuY2UgbWF4KSBQb3dlciBEZWxpdmVyeSAzLjAgYXZlYyBwcmlzZXMgaW50ZXJjaGFuZ2VhYmxlcyBwb3VyIGxlcyBVU0EsIGzigJlFdXJvcGUsIGxlIFJveWF1bWUtVW5pLCBldCBs4oCZQXVzdHJhbGllLiBDYWJsZSBkZSAyIG3DqHRyZXMgVVNCLUMgUG93ZXIgRGVsaXZlcnkgMy4wLjwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgY29udGFpbmVyOiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH1cbiAgfSxcbiAgbGVmdDoge1xuICAgIG9yZGVyOiAxLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgICB3aWR0aDogJzUwJScsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICAvLyBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH1cbiAgfSxcbiAgcmlnaHQ6IHtcbiAgICBvcmRlcjogMixcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICB3aWR0aDogJzUwJScsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICAvLyBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH1cbiAgfSxcbiAgcGFuZWw6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIG1hcmdpbjogJ2F1dG8nLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgfVxuICB9LFxuICBpbWc6IHtcbiAgICBhbGlnblNlbGY6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgfVxuICB9LFxuICB0ZXh0Qm94OiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIC8vIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIHBhZGRpbmdMZWZ0OiAnMjAlJyxcbiAgICBwYWRkaW5nUmlnaHQ6ICcyMCUnLFxuICAgIHBhZGRpbmdUb3A6ICcwcHgnLFxuXG4gIH0sXG4gIHRleHRCb3hMZWZ0OiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIC8vIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIHBhZGRpbmdMZWZ0OiAnMjAlJyxcbiAgICBwYWRkaW5nUmlnaHQ6ICcyMCUnLFxuXG4gIH0sXG4gIHRleHRCb3hXVGl0bGU6e1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAvLyBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBwYWRkaW5nTGVmdDogJzIwJScsXG4gICAgcGFkZGluZ1JpZ2h0OiAnMjAlJyxcbiAgICBwYWRkaW5nVG9wOiAnNzVweCcsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICBwYWRkaW5nVG9wOiAnMHB4J1xuICAgIH1cbiAgfSxcbiAgdGl0bGU6IHtcbiAgICBmb250U2l6ZTogJzE2cHgnLFxuICAgIC8vIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgIG1hcmdpbjogJzBweCcsXG4gICAgZm9udFdlaWdodDogJ2JvbGQnXG4gIH0sXG4gIGNvbnRlbnQ6IHtcbiAgICBmb250U2l6ZTogJzE0cHgnXG4gIH0sXG4gIGxpbmVCcmVhazp7XG4gICAgbWFyZ2luOiAnYXV0bycsXG4gICAgbWFyZ2luVG9wOiAnNSUnLFxuICAgIG1hcmdpbkJvdHRvbTogJzUlJyxcbiAgICB3aWR0aDogJzgwJScsXG4gICAgaGVpZ2h0OiAnMXB4JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjRENEQ0RDJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpdW0oVGVjaFNwZWNzX2ZyKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9jb21wb25lbnRzL1RlY2hTcGVjc19mci5qcyIsImltcG9ydCBSZWFjdCAgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJhZGl1bSBmcm9tICdyYWRpdW0nO1xuXG5pbXBvcnQgVGl0bGUgZnJvbSAnLi9UaXRsZSc7XG5cbmNsYXNzIFRlY2hTcGVjc19nciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmxlZnR9PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy50ZXh0Qm94TGVmdH0+XG4gICAgICAgICAgPFRpdGxlPiBMQUVSIDwvVGl0bGU+XG4gICAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLnRpdGxlfT5NYcOfZSB1bmQgR2V3aWNodDwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5yaWdodH0+XG4gICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnRleHRCb3hXVGl0bGV9PlxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+V2lkdGg6IDI4NW1tPC9wPlxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+RGVwdGg6IDIwMCBtbTwvcD5cbiAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLmNvbnRlbnR9PkhlaWdodDogMTNtbSAobWF4KTwvcD5cbiAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT5HZXdpY2h0OiA4NzRnIG1pdCAyMCwwMDBtQWggQWtrdSwgNjQ5ZyBtaXQgMTAsMDAwbUFoIEFra3UgKDEwLDAwMG1BaCBBa2t1IGlzdCBpbiBkaWVzZXIgQm94IG5pY2h0IGVudGhhbHRlbiwga2FubiB6dXPDpHR6bGljaCBlcndvcmJlbiB3ZXJkZW4pPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5sZWZ0fT5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMudGV4dEJveExlZnR9PlxuICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy50aXRsZX0+QW5zY2hsw7xzc2U8L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMucmlnaHR9PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy50ZXh0Qm94fT5cblxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+MXggREMgQXVzZ2FuZyAodW50ZXJzdMO8dHp0IDEyLTIwViBMZWlzdHVuZyk8L3A+XG4gICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT4xeCBVU0ItQyBFaW4tL0F1c2dhbmdzYW5zY2hsdXNzIG1pdCBQRCAzLjAgKHVudGVyc3TDvHR6dCA1LDksMTIsMTUsIDIwViBMZWlzdHVuZyk8L3A+XG4gICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT4xeCBVU0ItQyBBdXNnYW5nc2Fuc2NobHVzcyBtaXQgUEQgMy4wICh1bnRlcnN0w7x0enQgNSw5LDEyLDE1LCAyMFYgTGVpc3R1bmcpPC9wPlxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+MXggVVNCLUEgQXVzZ2FuZ3NhbnNjaGx1c3MgKHVudGVyc3TDvHR6dCBTY2huZWxsYWRlZnVua3Rpb24sIDUtMThXKTwvcD5cbiAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLmNvbnRlbnR9PjF4IFFpIGthYmVsbG9zZXMgTGFkZW4gKDVWLCAxLjVBLCA3LjVXKTwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5saW5lQnJlYWt9PjwvZGl2PlxuICAgICAgey8qIFxuICAgICAgXG4gICAgICBjb21tZW50IFxuICAgIFxuICAgICAgICAqL31cbiAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMubGVmdH0+XG4gICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnRleHRCb3hMZWZ0fT5cbiAgICAgICAgICA8VGl0bGU+IEJhdHRlcnkgYW5kIFBvd2VyIDwvVGl0bGU+XG4gICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy50aXRsZX0+MjAsMDAwbUFoIDc0d2ggQmF0dGVyaWVrYXJ0ZTwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5yaWdodH0+XG4gICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnRleHRCb3hXVGl0bGV9PlxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+RW50aMOkbHQgQmF0dGVyaWV6ZWxsZW4sIDR4IDMuN3YgNSwwMDBtQWggWmVsbGVuIGluIGVpbmVyIFNlcmllPC9wPlxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+R2V3aWNodCBtYXguIDU2MWcgPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5sZWZ0fT5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMudGV4dEJveExlZnR9PlxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMudGl0bGV9PjEwLDAwMG1BaCAzN3doIEJhdHRlcmlla2FydGUgKGlzdCBpbiBkaWVzZXIgVmVycGFja3VuZyBuaWNodCBlbnRoYWx0ZW4sIGthbm4genVzw6R0emxpY2ggZXJ3b3JiZW4gd2VyZGVuKTwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5yaWdodH0+XG4gICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnRleHRCb3h9PlxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+RW50aMOkbHQgQmF0dGVyaWV6ZWxsZW4sIDR4IDMuN3YgMiw1MDBtQWggWmVsbGVuIGluIGVpbmVyIFNlcmllPC9wPlxuICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuY29udGVudH0+R2V3aWNodCBtYXguIDMzNmc8L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmxlZnR9PlxuICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy50ZXh0Qm94TGVmdH0+XG4gICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy50aXRsZX0+VVNCLUMgTGFkZWdlcsOkdDwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5yaWdodH0+XG4gICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnRleHRCb3h9PlxuXG4gICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5jb250ZW50fT42MHcgKG1heC4gQXVzZ2FuZ3NsZWlzdHVuZykgVVNCLUMgUG93ZXIgRGVsaXZlcnkgMy4wIExhZGVnZXLDpHQgbWl0IGF1c3RhdXNjaGJhcmVuIFN0ZWNrZXIgZsO8ciBTdGVja2Rvc2VuIGluIFVTLCBFdXJvcGEsIFVLLCBBdXN0cmFsaWVuIHVuZCAybSBVU0ItQyBQRCAzLjAgTGFkZWthYmVsPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICBjb250YWluZXI6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgfVxuICB9LFxuICBsZWZ0OiB7XG4gICAgb3JkZXI6IDEsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxuICAgIHdpZHRoOiAnNTAlJyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIC8vIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfVxuICB9LFxuICByaWdodDoge1xuICAgIG9yZGVyOiAyLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgIHdpZHRoOiAnNTAlJyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIC8vIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfVxuICB9LFxuICBwYW5lbDoge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgbWFyZ2luOiAnYXV0bycsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICB9XG4gIH0sXG4gIGltZzoge1xuICAgIGFsaWduU2VsZjogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICB9XG4gIH0sXG4gIHRleHRCb3g6IHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgLy8ganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgcGFkZGluZ0xlZnQ6ICcyMCUnLFxuICAgIHBhZGRpbmdSaWdodDogJzIwJScsXG4gICAgcGFkZGluZ1RvcDogJzBweCcsXG5cbiAgfSxcbiAgdGV4dEJveExlZnQ6IHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgLy8ganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgcGFkZGluZ0xlZnQ6ICcyMCUnLFxuICAgIHBhZGRpbmdSaWdodDogJzIwJScsXG5cbiAgfSxcbiAgdGV4dEJveFdUaXRsZTp7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIC8vIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIHBhZGRpbmdMZWZ0OiAnMjAlJyxcbiAgICBwYWRkaW5nUmlnaHQ6ICcyMCUnLFxuICAgIHBhZGRpbmdUb3A6ICc3NXB4JyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIHBhZGRpbmdUb3A6ICcwcHgnXG4gICAgfVxuICB9LFxuICB0aXRsZToge1xuICAgIGZvbnRTaXplOiAnMTZweCcsXG4gICAgLy8gdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gICAgbWFyZ2luOiAnMHB4JyxcbiAgICBmb250V2VpZ2h0OiAnYm9sZCdcbiAgfSxcbiAgY29udGVudDoge1xuICAgIGZvbnRTaXplOiAnMTRweCdcbiAgfSxcbiAgbGluZUJyZWFrOntcbiAgICBtYXJnaW46ICdhdXRvJyxcbiAgICBtYXJnaW5Ub3A6ICc1JScsXG4gICAgbWFyZ2luQm90dG9tOiAnNSUnLFxuICAgIHdpZHRoOiAnODAlJyxcbiAgICBoZWlnaHQ6ICcxcHgnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJyNEQ0RDREMnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGl1bShUZWNoU3BlY3NfZ3IpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2NvbXBvbmVudHMvVGVjaFNwZWNzX2dyLmpzIiwiaW1wb3J0IFJlYWN0ICAgICAgICAgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJhZGl1bSAgICAgICAgZnJvbSAncmFkaXVtJztcblxuaW1wb3J0IHtcbiAgTmF2LFxuICBGb290ZXIsXG4gIEhlcm9WaWRlbyxcbiAgSGVyb0ltYWdlLFxuICBUaXRsZSxcbiAgVGV4dCxcbiAgU2VjdGlvbixcbiAgSW1hZ2VTcGxpdCxcbiAgSW1hZ2VTcGxpdFBybyxcbiAgRmVhdHVyZXMsXG4gIFBlb3BsZSxcbiAgRGV2aWNlTG9va3VwLFxuICBEZXRhaWxzSW5wdXQsXG4gIEJ1eUJ1dHRvbixcbiAgWW91VHViZVxufSAgICAgICAgICAgIGZyb20gJy4uL2NvbXBvbmVudHMnO1xuXG5jbGFzcyBBYm91dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgIGF0VG9wOiB0cnVlXG4gICAgfVxuICB9XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsLmJpbmQodGhpcykpO1xuICB9XG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsLmJpbmQodGhpcykpO1xuICB9XG4gIGhhbmRsZVNjcm9sbChldmVudCkge1xuICAgICAgbGV0IHNjcm9sbFRvcCA9IGV2ZW50LnNyY0VsZW1lbnQuYm9keS5zY3JvbGxUb3A7XG4gICAgICBpZiAoc2Nyb2xsVG9wIDwgMTAgIT0gdGhpcy5zdGF0ZS5hdFRvcCkge1xuICAgICAgICAvKiBPbmx5IG1ha2UgY2FsbCB0byBzZXRzdGF0ZSB3aGVuIHZhbHVlIGlzIGRpZmZlcmVudCAqL1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBhdFRvcDogc2Nyb2xsVG9wIDwgMTBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHthdFRvcH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHtjb25maWd9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IG5hdkxpbmtzID0ge1xuICAgICAgSG9tZTogXCIvXCIsXG4gICAgICBQcm9kdWN0OiAgIFwiL3Byb2R1Y3RcIixcbiAgICAgIGFib3V0OiAgICBcIi9hYm91dFwiXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8TmF2IGxpbmtzPXtuYXZMaW5rc30gYnV5TGluaz17Y29uZmlnLmxpbmtzLmJ1eX0vPlxuICAgICAgICA8U2VjdGlvbiBzdHlsZT17c3R5bGVzLmRhcmt9IHNjcm9sbE5hbWU9e25hdkxpbmtzLmRlc2lnbn0+XG4gICAgICAgICAge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoY29uZmlnLnNlY3Rpb25zLmFib3V0U3BsaXQpLm1hcCgodGl0bGUsIGspID0+IHtcbiAgICAgICAgICAgICAgbGV0IGRpciA9IGsgJSAyID09PSAwID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgICAgICAgbGV0IHt0ZXh0LCBzcmN9ID0gY29uZmlnLnNlY3Rpb25zLmFib3V0U3BsaXRbdGl0bGVdO1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxJbWFnZVNwbGl0IGtleT17a30gdGl0bGU9e3RpdGxlfSBkaXJlY3Rpb249e2Rpcn0gdGV4dD17dGV4dH0gc3JjPXtzcmN9IC8+XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgIDxTZWN0aW9uIHNjcm9sbE5hbWU9e25hdkxpbmtzLmFib3V0fT5cbiAgICAgICAgICA8VGl0bGU+VGhlIFRlYW08L1RpdGxlPlxuICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuanVzdGlmeX0+e2NvbmZpZy5zZWN0aW9ucy5hYm91dH08L1RleHQ+XG4gICAgICAgICAgPFBlb3BsZSBwZW9wbGU9e2NvbmZpZy5wZW9wbGV9IC8+XG4gICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgPFNlY3Rpb24gc3R5bGU9e3N0eWxlcy5kYXJrfSBzY3JvbGxOYW1lPXtuYXZMaW5rcy5zdXBwb3J0fT5cbiAgICAgICAgICA8VGl0bGU+U3VwcG9ydDwvVGl0bGU+XG4gICAgICAgICAgPFRleHQ+e2NvbmZpZy5zZWN0aW9ucy5zdXBwb3J0fTwvVGV4dD5cbiAgICAgICAgICA8RGV0YWlsc0lucHV0IC8+XG4gICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5wYWRib3R0b219PlxuICAgICAgICAgICAgV2FudCB0byBjb250YWN0IHVzIGJ5IGVtYWlsPyBFbWFpbCB1cyBhdCA8YSBzdHlsZT17c3R5bGVzLmxpbmt9IGhyZWY9XCJtYWlsdG86c3VwcG9ydEBhcnJvZS5jb1wiPnN1cHBvcnRAYXJyb2UuY288L2E+XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIDxiciAvPlxuICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgIDxTZWN0aW9uIHNjcm9sbE5hbWU9XCJub3RpZnlcIj5cbiAgICAgICAgICA8VGl0bGU+R2V0IE5vdGlmaWVkPC9UaXRsZT5cbiAgICAgICAgICA8VGV4dD5FbnRlciB5b3VyIG5hbWUgYW5kIGVtYWlsIGJlbG93IGFuZCB3ZeKAmWxsIGxldCB5b3Uga25vdyB3aGVuIHdl4oCZcmUgbGF1bmNoaW5nPC9UZXh0PlxuICAgICAgICAgIDxEZXRhaWxzSW5wdXQgc2lnbnVwPXt0cnVlfSAvPlxuICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgIDxGb290ZXIgbGlua3M9e2NvbmZpZy5tZWRpYX0gLz5cbiAgICAgICAgPGRpdiBzdHlsZT17W3N0eWxlcy5idXliYW5uZXIsIHtkaXNwbGF5OiBhdFRvcCA/ICdub25lJyA6ICdibG9jayd9XX0+XG4gICAgICAgICAgPEJ1eUJ1dHRvbiBsaW5rPXtjb25maWcubGlua3MuYnV5fSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICBmZWF0dXJlczoge1xuICAgIGJhY2tncm91bmRJbWFnZTogJ3VybChpbWcvaGVyby1pbWFnZS1taW4uanBnKScsXG4gICAgYmFja2dyb3VuZFNpemU6ICdjb3ZlcicsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICBoZWlnaHQ6ICcxMDB2aCdcbiAgfSxcbiAgcGxheWJ1dHRvbjoge1xuICAgIHdpZHRoOiAnMTAwcHgnXG4gIH0sXG4gIGRhcms6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMWUxZTFlJyxcbiAgICBjb2xvcjogJ3doaXRlJ1xuICB9LFxuICBmZWF0dXJlc3ZpZGVvOiB7XG4gICAgd2lkdGg6ICc3NjBweCcsXG4gICAgaGVpZ2h0OiAnNDAwcHgnLFxuICAgIG1hcmdpbjogJzIwcHggYXV0byA0MHB4JyxcbiAgICBtYXhXaWR0aDogJzEwMCUnXG4gIH0sXG4gIGJ1eWJhbm5lcjoge1xuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIGJvdHRvbTogJzAnLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnIzFlMWUxZScsXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAnQG1lZGlhIChtaW4td2lkdGg6IDYwMXB4KSc6IHtcbiAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgIH0sXG4gICAgcGFkZGluZzogJzEwcHgnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gIH0sXG4gIGxpbms6IHtcbiAgICBjb2xvcjogJ3doaXRlJ1xuICB9LFxuICBqdXN0aWZ5OiB7XG4gICAgdGV4dEFsaWduOiAnanVzdGlmeSdcbiAgfSxcbiAgY29udGFpbmVyOiB7XG4gICAgaGVpZ2h0OiAnMTAwdmgnLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICB6SW5kZXg6IDAsXG4gICAgYmFja2dyb3VuZEltYWdlOiAndXJsKGltZy9TbGVldmUtbWluLmpwZyknLFxuICAgIGJhY2tncm91bmRQb3NpdGlvbjogJ2NlbnRlcicsXG4gICAgYmFja2dyb3VuZFNpemU6ICdjb3ZlcicsXG4gICAgcGFkZGluZ1RvcDogJzgwcHgnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gIH0sXG4gIHdyYXBwZXI6IHtcbiAgICBtYXJnaW46ICcwIGF1dG8nLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gIH0sXG4gIHBhbmVsTGVmdDoge1xuICAgIG9yZGVyOiAxLFxuICAgIHdpZHRoOiAnNTB2aCcsXG4gICAgbWF4V2lkdGg6ICc1MHZoJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdibGFjaycsXG4gICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgIH1cbiAgfSxcbiAgcGFuZWxSaWdodDoge1xuICAgIG9yZGVyOiAyLFxuICAgIHdpZHRoOiAnNTAlJyxcbiAgICBmbG9hdDogJ3JpZ2h0JyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgIH1cbiAgfSxcbiAgaW5uZXJQYW5lbDoge1xuICAgIHdpZHRoOiAnNTAlJyxcbiAgICBmbG9hdDogJ3JpZ2h0JyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgIH1cbiAgfSxcbiAgaW5uZXJQYW5lbEw6IHtcbiAgICB3aWR0aDogJzUwJScsXG4gICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgIH1cbiAgfSxcbiAgXCJzcGlubmVyXCI6IHtcbiAgICBcIndpZHRoXCI6IFwiNTBweFwiLFxuICAgIFwiaGVpZ2h0XCI6IFwiNTBweFwiLFxuICAgIFwiYm9yZGVyUmFkaXVzXCI6IFwiNTAlXCIsXG4gICAgXCJib3JkZXJcIjogXCI0cHggc29saWQgd2hpdGVcIixcbiAgICBcIm1hcmdpblwiOiBcIjEwcHhcIixcbiAgICBcImRpc3BsYXlcIjogXCJpbmxpbmUtYmxvY2tcIlxuICB9LFxuICBcInNwaW5uZXIyXCI6IHtcbiAgICBcImZsb2F0XCI6IFwibGVmdFwiLFxuICAgIFwid2lkdGhcIjogXCI1MHB4XCIsXG4gICAgXCJoZWlnaHRcIjogXCI1MHB4XCIsXG4gICAgXCJiYWNrZ3JvdW5kXCI6IFwidHJhbnNwYXJlbnRcIixcbiAgICBcImJvcmRlclJhZGl1c1wiOiBcIjUwJVwiLFxuICAgIFwiYm9yZGVyXCI6IFwiNHB4IHNvbGlkICMxZTFlMWVcIixcbiAgICBcIm1hcmdpbkxlZnRcIjogXCIxMDBweFwiLFxuICAgIFwiZGlzcGxheVwiOiBcImlubGluZS1ibG9ja1wiLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgICBcIndpZHRoXCI6IFwiMzBweFwiLFxuICAgICAgICBcImhlaWdodFwiOiBcIjMwcHhcIixcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICB9XG4gIH0sXG4gIFwiaW5mb0hvbGRlclwiOiB7XG4gICAgXCJtYXJnaW5Ub3BcIjogXCItMTNweFwiLFxuICAgIFwidGV4dEFsaWduXCI6IFwibGVmdFwiLFxuICAgIFwibWFyZ2luTGVmdFwiOiBcIjIwcHhcIixcbiAgICBcIm1hcmdpblJpZ2h0XCI6IFwiMjBweFwiLFxuICAgIFwiZmxvYXRcIjogXCJsZWZ0XCIsXG4gICAgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWJsb2NrXCIsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICAgIG1hcmdpblRvcCA6ICctNXB4JyxcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH1cbiAgfSxcbiAgXCJ0ZWNoQm94XCI6IHtcbiAgICBcIndpZHRoXCI6IFwiMTAwJVwiLFxuICAgIGhlaWdodDogXCIxNXZoXCIsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICB9XG5cbiAgfSxcbiAgXCJzcGlubmVyVGV4dFwiOiB7XG4gICAgXCJwb3NpdGlvblwiOiBcInJlbGF0aXZlXCIsXG4gICAgXCJ0b3BcIjogXCItM3B4XCJcbiAgfSxcbiAgXCJzbWFsbFRleHRcIjoge1xuICAgIFwibWFyZ2luVG9wXCI6IFwiLTIwcHhcIixcbiAgICBcImZvbnRTaXplXCIgOiBcIjEycHhcIlxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGl1bShBYm91dCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvcGFnZXMvQWJvdXQuanMiLCJpbXBvcnQgUmVhY3QgICAgICAgICBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmFkaXVtICAgICAgICBmcm9tICdyYWRpdW0nO1xuXG5pbXBvcnQge1xuICBOYXYsXG4gIEZvb3RlcixcbiAgSGVyb1ZpZGVvLFxuICBUaXRsZSxcbiAgVGV4dCxcbiAgU2VjdGlvbixcbiAgSW1hZ2VTcGxpdCxcbiAgRmVhdHVyZXMsXG4gIFBlb3BsZSxcbiAgRGV2aWNlTG9va3VwLFxuICBEZXRhaWxzSW5wdXQsXG4gIEJ1eUJ1dHRvbixcbiAgWW91VHViZVxufSAgICAgICAgICAgIGZyb20gJy4uL2NvbXBvbmVudHMnO1xuXG5jbGFzcyBIb21lIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGF0VG9wOiB0cnVlLFxuICAgIH1cbiAgfVxuXG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVTY3JvbGwuYmluZCh0aGlzKSk7XG4gIH1cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVTY3JvbGwuYmluZCh0aGlzKSk7XG4gIH1cbiAgaGFuZGxlU2Nyb2xsKGV2ZW50KSB7XG4gICAgICBsZXQgc2Nyb2xsVG9wID0gZXZlbnQuc3JjRWxlbWVudC5ib2R5LnNjcm9sbFRvcDtcbiAgICAgIGlmIChzY3JvbGxUb3AgPCAxMCAhPSB0aGlzLnN0YXRlLmF0VG9wKSB7XG4gICAgICAgIC8qIE9ubHkgbWFrZSBjYWxsIHRvIHNldHN0YXRlIHdoZW4gdmFsdWUgaXMgZGlmZmVyZW50ICovXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGF0VG9wOiBzY3JvbGxUb3AgPCAxMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2F0VG9wfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qge2NvbmZpZ30gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgbmF2TGlua3MgPSB7XG4gICAgICBIb21lOiBcIi9cIixcbiAgICAgIFByb2R1Y3Q6ICAgXCIvcHJvZHVjdFwiLFxuICAgICAgYWJvdXQ6ICAgIFwiL2Fib3V0XCJcbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8TmF2IGxpbmtzPXtuYXZMaW5rc30gYnV5TGluaz17Y29uZmlnLmxpbmtzLmJ1eX0vPlxuICAgICAgICA8SGVyb1ZpZGVvXG4gICAgICAgICAgc3R5bGU9e3N0eWxlcy5zZWN0aW9ufVxuICAgICAgICAgIHByZXZpZXc9XCJpbWcvMTMuSlBHXCJcbiAgICAgICAgICB2aWRlb0lkPXtjb25maWcudmlkZW9zLmhlcm99XG4gICAgICAgICAgZG93bkxpbms9eycjJyArIG5hdkxpbmtzLmZlYXR1cmVzfVxuICAgICAgICAvPlxuICAgICAgICA8U2VjdGlvbiBzdHlsZT17c3R5bGVzLmRhcmt9IHNjcm9sbE5hbWU9e25hdkxpbmtzLmRlc2lnbn0+XG4gICAgICAgICAge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoY29uZmlnLnNlY3Rpb25zLmRlc2lnbikubWFwKCh0aXRsZSwgaykgPT4ge1xuICAgICAgICAgICAgICBsZXQgZGlyID0gayAlIDIgPT09IDAgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgICAgICAgICAgICBsZXQge3RleHQsIHNyY30gPSBjb25maWcuc2VjdGlvbnMuZGVzaWduW3RpdGxlXTtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8SW1hZ2VTcGxpdCBrZXk9e2t9IHRpdGxlPXt0aXRsZX0gZGlyZWN0aW9uPXtkaXJ9IHRleHQ9e3RleHR9IHNyYz17c3JjfSAvPlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICA8U2VjdGlvbiBzdHlsZT17c3R5bGVzLmRhcmt9IHNjcm9sbE5hbWU9e25hdkxpbmtzLnN1cHBvcnR9PlxuICAgICAgICAgIDxUaXRsZT5TdXBwb3J0PC9UaXRsZT5cbiAgICAgICAgICA8VGV4dD57Y29uZmlnLnNlY3Rpb25zLnN1cHBvcnR9PC9UZXh0PlxuICAgICAgICAgIDxEZXRhaWxzSW5wdXQgLz5cbiAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLnBhZGJvdHRvbX0+XG4gICAgICAgICAgICBXYW50IHRvIGNvbnRhY3QgdXMgYnkgZW1haWw/IEVtYWlsIHVzIGF0IDxhIHN0eWxlPXtzdHlsZXMubGlua30gaHJlZj1cIm1haWx0bzpzdXBwb3J0QGFycm9lLmNvXCI+c3VwcG9ydEBhcnJvZS5jbzwvYT5cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgPFNlY3Rpb24gc2Nyb2xsTmFtZT1cIm5vdGlmeVwiPlxuICAgICAgICAgIDxUaXRsZT5HZXQgTm90aWZpZWQ8L1RpdGxlPlxuICAgICAgICAgIDxUZXh0PkVudGVyIHlvdXIgbmFtZSBhbmQgZW1haWwgYmVsb3cgYW5kIHdl4oCZbGwgbGV0IHlvdSBrbm93IHdoZW4gd2XigJlyZSBsYXVuY2hpbmc8L1RleHQ+XG4gICAgICAgICAgPERldGFpbHNJbnB1dCBzaWdudXA9e3RydWV9IC8+XG4gICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgPEZvb3RlciBsaW5rcz17Y29uZmlnLm1lZGlhfSAvPlxuICAgICAgICA8ZGl2IHN0eWxlPXtbc3R5bGVzLmJ1eWJhbm5lciwge2Rpc3BsYXk6IGF0VG9wID8gJ25vbmUnIDogJ2Jsb2NrJ31dfT5cbiAgICAgICAgICA8QnV5QnV0dG9uIGxpbms9e2NvbmZpZy5saW5rcy5idXl9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGZlYXR1cmVzOiB7XG4gICAgYmFja2dyb3VuZEltYWdlOiAndXJsKGltZy9oZXJvLWltYWdlLmpwZyknLFxuICAgIGJhY2tncm91bmRTaXplOiAnY292ZXInLFxuICAgIGJhY2tncm91bmRQb3NpdGlvbjogJ2NlbnRlcicsXG4gICAgaGVpZ2h0OiAnMTAwdmgnXG4gIH0sXG4gIHBsYXlidXR0b246IHtcbiAgICB3aWR0aDogJzEwMHB4J1xuICB9LFxuICBkYXJrOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAnIzFlMWUxZScsXG4gICAgY29sb3I6ICd3aGl0ZSdcbiAgfSxcbiAgZmVhdHVyZXN2aWRlbzoge1xuICAgIHdpZHRoOiAnNzYwcHgnLFxuICAgIGhlaWdodDogJzQwMHB4JyxcbiAgICBtYXJnaW46ICcyMHB4IGF1dG8gNDBweCcsXG4gICAgbWF4V2lkdGg6ICcxMDAlJ1xuICB9LFxuICBidXliYW5uZXI6IHtcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICBib3R0b206ICcwJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJyMxZTFlMWUnLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgY29sb3I6ICd3aGl0ZScsXG4gICAgJ0BtZWRpYSAobWluLXdpZHRoOiA2MDFweCknOiB7XG4gICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICB9LFxuICAgIHBhZGRpbmc6ICcxMHB4JyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94J1xuICB9LFxuICBsaW5rOiB7XG4gICAgY29sb3I6ICd3aGl0ZSdcbiAgfSxcbiAganVzdGlmeToge1xuICAgIHRleHRBbGlnbjogJ2p1c3RpZnknXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmFkaXVtKEhvbWUpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3BhZ2VzL0hvbWUuanMiLCJpbXBvcnQgUmVhY3QgICAgIGZyb20gJ3JlYWN0JztcblxuY2xhc3MgTm90Rm91bmQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+NDA0IC0gUGFnZSBub3QgZm91bmQ8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vdEZvdW5kO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3BhZ2VzL05vdEZvdW5kLmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtcbiAgRm9vdGVyXG59ICAgICAgICAgICAgZnJvbSAnLi4vY29tcG9uZW50cyc7XG5cbmNsYXNzIE5vdEZvdW5kIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLnNjcm9sbGVkKSB7XG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwwKTtcbiAgICAgIHRoaXMuc2Nyb2xsZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2NvbmZpZ30gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgICAgIDxoMT5BcnJvZS5jbzogUHJpdmFjeSBQb2xpY3k8L2gxPlxuICAgICAgICAgICAgPGgyPldIQVQgSU5GT1JNQVRJT04gRE8gV0UgQ09MTEVDVD88L2gyPlxuXG4gICAgICAgICAgICBXZSBjb2xsZWN0IGluZm9ybWF0aW9uIGZyb20geW91IHdoZW4geW91IHJlZ2lzdGVyIG9uIHRoZSBzaXRlLCBwbGFjZSBhbiBvcmRlciwgZW50ZXIgYSBjb250ZXN0IG9yIHN3ZWVwc3Rha2VzLCByZXNwb25kIHRvIGEgc3VydmV5IG9yIGNvbW11bmljYXRpb24gc3VjaCBhcyBlLW1haWwsIG9yIHBhcnRpY2lwYXRlIGluIGFub3RoZXIgc2l0ZSBmZWF0dXJlLlxuICAgICAgICAgICAgV2hlbiBvcmRlcmluZyBvciByZWdpc3RlcmluZywgd2UgbWF5IGFzayB5b3UgZm9yIHlvdXIgbmFtZSwgZS1tYWlsIGFkZHJlc3MsIG1haWxpbmcgYWRkcmVzcywgcGhvbmUgbnVtYmVyLCBjcmVkaXQgY2FyZCBpbmZvcm1hdGlvbiBvciBvdGhlciBpbmZvcm1hdGlvbi4gWW91IG1heSwgaG93ZXZlciwgdmlzaXQgb3VyIHNpdGUgYW5vbnltb3VzbHkuXG4gICAgICAgICAgICBMaWtlIG1hbnkgd2Vic2l0ZXMsIHdlIHVzZSBcImNvb2tpZXNcIiB0byBlbmhhbmNlIHlvdXIgZXhwZXJpZW5jZSBhbmQgZ2F0aGVyIGluZm9ybWF0aW9uIGFib3V0IHZpc2l0b3JzIGFuZCB2aXNpdHMgdG8gb3VyIHdlYnNpdGVzLiBQbGVhc2UgcmVmZXIgdG8gdGhlIFwiRG8gd2UgdXNlICdjb29raWVzJz9cIiBzZWN0aW9uIGJlbG93IGZvciBpbmZvcm1hdGlvbiBhYm91dCBjb29raWVzIGFuZCBob3cgd2UgdXNlIHRoZW0uXG5cblxuICAgICAgICAgICAgPGgyPkhPVyBETyBXRSBVU0UgVEhJUyBJTkZPUk1BVElPTj88L2gyPlxuXG4gICAgICAgICAgICBXZSBtYXkgdXNlIHRoZSBpbmZvcm1hdGlvbiB3ZSBjb2xsZWN0IGZyb20geW91IHdoZW4geW91IHJlZ2lzdGVyLCBwdXJjaGFzZSBwcm9kdWN0cywgZW50ZXIgYSBjb250ZXN0IG9yIHByb21vdGlvbiwgcmVzcG9uZCB0byBhIHN1cnZleSBvciBtYXJrZXRpbmcgY29tbXVuaWNhdGlvbiwgc3VyZiB0aGUgd2Vic2l0ZSwgb3IgdXNlIGNlcnRhaW4gb3RoZXIgc2l0ZSBmZWF0dXJlcyBpbiB0aGUgZm9sbG93aW5nIHdheXM6XG4gICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICA8bGk+VG8gcGVyc29uYWxpemUgeW91ciBzaXRlIGV4cGVyaWVuY2UgYW5kIHRvIGFsbG93IHVzIHRvIGRlbGl2ZXIgdGhlIHR5cGUgb2YgY29udGVudCBhbmQgcHJvZHVjdCBvZmZlcmluZ3MgaW4gd2hpY2ggeW91IGFyZSBtb3N0IGludGVyZXN0ZWQuPC9saT5cbiAgICAgICAgICAgIDxsaT5UbyBhbGxvdyB1cyB0byByZXNwb25kIHRvIHlvdXIgY3VzdG9tZXIgc2VydmljZSByZXF1ZXN0cyBhbmQgcHJvY2VzcyB0cmFuc2FjdGlvbnMuPC9saT5cbiAgICAgICAgICAgIDxsaT5UbyBhZG1pbmlzdGVyIGEgY29udGVzdCwgcHJvbW90aW9uLCBzdXJ2ZXkgb3Igb3RoZXIgc2l0ZSBmZWF0dXJlLjwvbGk+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgSWYgeW91IGhhdmUgb3B0ZWQtaW4gdG8gcmVjZWl2ZSBvdXIgZS1tYWlsIG5ld3NsZXR0ZXIsIHdlIG1heSBzZW5kIHlvdSBwZXJpb2RpYyBlLW1haWxzLiBJZiB5b3Ugd291bGQgbm8gbG9uZ2VyIGxpa2UgdG8gcmVjZWl2ZSBwcm9tb3Rpb25hbCBlLW1haWwgZnJvbSB1cywgcGxlYXNlIHJlZmVyIHRvIHRoZSBcIkhvdyBjYW4geW91IG9wdC1vdXQsIHJlbW92ZSBvciBtb2RpZnkgaW5mb3JtYXRpb24geW91IGhhdmUgcHJvdmlkZWQgdG8gdXM/XCIgc2VjdGlvbiBiZWxvdy4gSWYgeW91IGhhdmUgbm90IG9wdGVkLWluIHRvIHJlY2VpdmUgZS1tYWlsIG5ld3NsZXR0ZXJzLCB5b3Ugd2lsbCBub3QgcmVjZWl2ZSB0aGVzZSBlLW1haWxzLiBWaXNpdG9ycyB3aG8gcmVnaXN0ZXIgb3IgcGFydGljaXBhdGUgaW4gb3RoZXIgc2l0ZSBmZWF0dXJlcyBzdWNoIGFzIG1hcmtldGluZyBwcm9ncmFtcyBhbmQgJ21lbWJlcnMtb25seScgY29udGVudCB3aWxsIGJlIGdpdmVuIGEgY2hvaWNlIHdoZXRoZXIgdGhleSB3b3VsZCBsaWtlIHRvIGJlIG9uIG91ciBlLW1haWwgbGlzdCBhbmQgcmVjZWl2ZSBlLW1haWwgY29tbXVuaWNhdGlvbnMgZnJvbSB1cy5cblxuXG5cblxuICAgICAgICAgICAgPGgyPkhPVyBETyBXRSBQUk9URUNUIFZJU0lUT1IgSU5GT1JNQVRJT04/PC9oMj5cblxuICAgICAgICAgICAgV2UgaW1wbGVtZW50IGEgdmFyaWV0eSBvZiBzZWN1cml0eSBtZWFzdXJlcyB0byBtYWludGFpbiB0aGUgc2FmZXR5IG9mIHlvdXIgcGVyc29uYWwgaW5mb3JtYXRpb24uIFlvdXIgcGVyc29uYWwgaW5mb3JtYXRpb24gaXMgY29udGFpbmVkIGJlaGluZCBzZWN1cmVkIG5ldHdvcmtzIGFuZCBpcyBvbmx5IGFjY2Vzc2libGUgYnkgYSBsaW1pdGVkIG51bWJlciBvZiBwZXJzb25zIHdobyBoYXZlIHNwZWNpYWwgYWNjZXNzIHJpZ2h0cyB0byBzdWNoIHN5c3RlbXMsIGFuZCBhcmUgcmVxdWlyZWQgdG8ga2VlcCB0aGUgaW5mb3JtYXRpb24gY29uZmlkZW50aWFsLiBXaGVuIHlvdSBwbGFjZSBvcmRlcnMgb3IgYWNjZXNzIHlvdXIgcGVyc29uYWwgaW5mb3JtYXRpb24sIHdlIG9mZmVyIHRoZSB1c2Ugb2YgYSBzZWN1cmUgc2VydmVyLiBBbGwgc2Vuc2l0aXZlL2NyZWRpdCBpbmZvcm1hdGlvbiB5b3Ugc3VwcGx5IGlzIHRyYW5zbWl0dGVkIHZpYSBTZWN1cmUgU29ja2V0IExheWVyIChTU0wpIHRlY2hub2xvZ3kgYW5kIHRoZW4gZW5jcnlwdGVkIGludG8gb3VyIGRhdGFiYXNlcyB0byBiZSBvbmx5IGFjY2Vzc2VkIGFzIHN0YXRlZCBhYm92ZS5cblxuXG4gICAgICAgICAgICA8aDI+RE8gV0UgVVNFIFwiQ09PS0lFU1wiPzwvaDI+XG5cbiAgICAgICAgICAgIFllcy4gQ29va2llcyBhcmUgc21hbGwgZmlsZXMgdGhhdCBhIHNpdGUgb3IgaXRzIHNlcnZpY2UgcHJvdmlkZXIgdHJhbnNmZXJzIHRvIHlvdXIgY29tcHV0ZXIncyBoYXJkIGRyaXZlIHRocm91Z2ggeW91ciBXZWIgYnJvd3NlciAoaWYgeW91IGFsbG93KSB0aGF0IGVuYWJsZXMgdGhlIHNpdGUncyBvciBzZXJ2aWNlIHByb3ZpZGVyJ3Mgc3lzdGVtcyB0byByZWNvZ25pemUgeW91ciBicm93c2VyIGFuZCBjYXB0dXJlIGFuZCByZW1lbWJlciBjZXJ0YWluIGluZm9ybWF0aW9uLiBGb3IgaW5zdGFuY2UsIHdlIHVzZSBjb29raWVzIHRvIGhlbHAgdXMgcmVtZW1iZXIgYW5kIHByb2Nlc3MgdGhlIGl0ZW1zIGluIHlvdXIgc2hvcHBpbmcgY2FydC4gVGhleSBhcmUgYWxzbyB1c2VkIHRvIGhlbHAgdXMgdW5kZXJzdGFuZCB5b3VyIHByZWZlcmVuY2VzIGJhc2VkIG9uIHByZXZpb3VzIG9yIGN1cnJlbnQgc2l0ZSBhY3Rpdml0eSwgd2hpY2ggZW5hYmxlcyB1cyB0byBwcm92aWRlIHlvdSB3aXRoIGltcHJvdmVkIHNlcnZpY2VzLiBXZSBhbHNvIHVzZSBjb29raWVzIHRvIGhlbHAgdXMgY29tcGlsZSBhZ2dyZWdhdGUgZGF0YSBhYm91dCBzaXRlIHRyYWZmaWMgYW5kIHNpdGUgaW50ZXJhY3Rpb24gc28gdGhhdCB3ZSBjYW4gb2ZmZXIgYmV0dGVyIHNpdGUgZXhwZXJpZW5jZXMgYW5kIHRvb2xzIGluIHRoZSBmdXR1cmUuXG5cbiAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgV2UgbWF5IGNvbnRyYWN0IHdpdGggdGhpcmQtcGFydHkgc2VydmljZSBwcm92aWRlcnMgdG8gYXNzaXN0IHVzIGluIGJldHRlciB1bmRlcnN0YW5kaW5nIG91ciBzaXRlIHZpc2l0b3JzLiBUaGVzZSBzZXJ2aWNlIHByb3ZpZGVycyBhcmUgbm90IHBlcm1pdHRlZCB0byB1c2UgdGhlIGluZm9ybWF0aW9uIGNvbGxlY3RlZCBvbiBvdXIgYmVoYWxmIGV4Y2VwdCB0byBoZWxwIHVzIGNvbmR1Y3QgYW5kIGltcHJvdmUgb3VyIGJ1c2luZXNzLiBZb3UgY2FuIGNob29zZSB0byBoYXZlIHlvdXIgY29tcHV0ZXIgd2FybiB5b3UgZWFjaCB0aW1lIGEgY29va2llIGlzIGJlaW5nIHNlbnQsIG9yIHlvdSBjYW4gY2hvb3NlIHRvIHR1cm4gb2ZmIGFsbCBjb29raWVzLiBZb3UgZG8gdGhpcyB0aHJvdWdoIHlvdXIgYnJvd3NlciAobGlrZSBHb29nbGUgQ2hyb21lLCBTYWZhcmkgb3IgSW50ZXJuZXQgRXhwbG9yZXIpIHNldHRpbmdzLiBFYWNoIGJyb3dzZXIgaXMgYSBsaXR0bGUgZGlmZmVyZW50LCBzbyBsb29rIGF0IHlvdXIgYnJvd3NlciBIZWxwIG1lbnUgdG8gbGVhcm4gdGhlIGNvcnJlY3Qgd2F5IHRvIG1vZGlmeSB5b3VyIGNvb2tpZXMuIElmIHlvdSB0dXJuIGNvb2tpZXMgb2ZmLCB5b3Ugd29uJ3QgaGF2ZSBhY2Nlc3MgdG8gbWFueSBmZWF0dXJlcyB0aGF0IG1ha2UgeW91ciBzaXRlIGV4cGVyaWVuY2UgbW9yZSBlZmZpY2llbnQgYW5kIHNvbWUgb2Ygb3VyIHNlcnZpY2VzIHdpbGwgbm90IGZ1bmN0aW9uIHByb3Blcmx5LlxuXG5cbiAgICAgICAgICAgIDxoMj5ETyBXRSBESVNDTE9TRSBUSEUgSU5GT1JNQVRJT04gV0UgQ09MTEVDVCBUTyBPVVRTSURFIFBBUlRJRVM/PC9oMj5cblxuICAgICAgICAgICAgV2UgZG8gbm90IHNlbGwsIHRyYWRlLCBvciBvdGhlcndpc2UgdHJhbnNmZXIgdG8gb3V0c2lkZSBwYXJ0aWVzIHlvdXIgcGVyc29uYWxseSBpZGVudGlmaWFibGUgaW5mb3JtYXRpb24gdW5sZXNzIHdlIHByb3ZpZGUgeW91IHdpdGggYWR2YW5jZSBub3RpY2UsIGV4Y2VwdCBhcyBkZXNjcmliZWQgYmVsb3cuIFRoZSB0ZXJtIFwib3V0c2lkZSBwYXJ0aWVzXCIgZG9lcyBub3QgaW5jbHVkZSB3ZWJzaXRlIGhvc3RpbmcgcGFydG5lcnMgYW5kIG90aGVyIHBhcnRpZXMgd2hvIGFzc2lzdCB1cyBpbiBvcGVyYXRpbmcgb3VyIHdlYnNpdGUsIGNvbmR1Y3Rpbmcgb3VyIGJ1c2luZXNzLCBvciBzZXJ2aWNpbmcgeW91LCBzbyBsb25nIGFzIHRob3NlIHBhcnRpZXMgYWdyZWUgdG8ga2VlcCB0aGlzIGluZm9ybWF0aW9uIGNvbmZpZGVudGlhbC4gV2UgbWF5IGFsc28gcmVsZWFzZSB5b3VyIGluZm9ybWF0aW9uIHdoZW4gd2UgYmVsaWV2ZSByZWxlYXNlIGlzIGFwcHJvcHJpYXRlIHRvIGNvbXBseSB3aXRoIHRoZSBsYXcsIGVuZm9yY2Ugb3VyIHNpdGUgcG9saWNpZXMsIG9yIHByb3RlY3Qgb3VycyBvciBvdGhlcnMnIHJpZ2h0cywgcHJvcGVydHksIG9yIHNhZmV0eS4gSG93ZXZlciwgbm9uLXBlcnNvbmFsbHkgaWRlbnRpZmlhYmxlIHZpc2l0b3IgaW5mb3JtYXRpb24gbWF5IGJlIHByb3ZpZGVkIHRvIG90aGVyIHBhcnRpZXMgZm9yIG1hcmtldGluZywgYWR2ZXJ0aXNpbmcsIG9yIG90aGVyIHVzZXMuXG5cblxuICAgICAgICAgICAgPGgyPlRISVJEIFBBUlRZIExJTktTPC9oMj5cblxuICAgICAgICAgICAgSW4gYW4gYXR0ZW1wdCB0byBwcm92aWRlIHlvdSB3aXRoIGluY3JlYXNlZCB2YWx1ZSwgd2UgbWF5IGluY2x1ZGUgdGhpcmQgcGFydHkgbGlua3Mgb24gb3VyIHNpdGUuIFRoZXNlIGxpbmtlZCBzaXRlcyBoYXZlIHNlcGFyYXRlIGFuZCBpbmRlcGVuZGVudCBwcml2YWN5IHBvbGljaWVzLiBXZSB0aGVyZWZvcmUgaGF2ZSBubyByZXNwb25zaWJpbGl0eSBvciBsaWFiaWxpdHkgZm9yIHRoZSBjb250ZW50IGFuZCBhY3Rpdml0aWVzIG9mIHRoZXNlIGxpbmtlZCBzaXRlcy4gTm9uZXRoZWxlc3MsIHdlIHNlZWsgdG8gcHJvdGVjdCB0aGUgaW50ZWdyaXR5IG9mIG91ciBzaXRlIGFuZCB3ZWxjb21lIGFueSBmZWVkYmFjayBhYm91dCB0aGVzZSBsaW5rZWQgc2l0ZXMgKGluY2x1ZGluZyBpZiBhIHNwZWNpZmljIGxpbmsgZG9lcyBub3Qgd29yaykuXG5cblxuICAgICAgICAgICAgPGgyPkRFVEVDVElORyBBTkQgUFJFVkVOVElORyBGUkFVRDwvaDI+XG5cbiAgICAgICAgICAgIEluIGFkZGl0aW9uLCB0aGlzIHNpdGUgY29sbGVjdHMsIHVzZXMsIGFuZCByZXRhaW5zIGNlcnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgdmlzaXRvcnMgdG8gZGV0ZWN0LCBwcmV2ZW50LCBhbmQgYW5hbHl6ZSBmcmF1ZHVsZW50IHRyYW5zYWN0aW9ucy4gV2UgbWF5IHNoYXJlIHRoaXMgaW5mb3JtYXRpb24gd2l0aCBhIHRoaXJkIHBhcnR5IHRoYXQgcHJvdmlkZXMgYW5hbHlzaXMsIG1vbml0b3JpbmcsIGFuZCByZXBvcnRzIHRvIGFzc2lzdCB1cyBpbiBwcmV2ZW50aW5nIGFuZCBkZXRlY3RpbmcgZnJhdWR1bGVudCB0cmFuc2FjdGlvbnMgYW5kIG90aGVyIGFjdGl2aXR5IG9uIHRoZSBzaXRlLlxuICAgICAgICAgICAgPGJyIC8+PGJyIC8+XG4gICAgICAgICAgICA8YSBocmVmPVwibWFpbHRvOnN1cHBvcnRAYXJyb2UuY29cIj5zdXBwb3J0QGFycm9lLmNvPC9hPlxuXG5cbiAgICAgICAgICAgIDxoMj5DSEFOR0VTIFRPIE9VUiBQT0xJQ1k8L2gyPlxuXG4gICAgICAgICAgICBJZiB3ZSBkZWNpZGUgdG8gY2hhbmdlIG91ciBwcml2YWN5IHBvbGljeSwgd2Ugd2lsbCBwb3N0IHRob3NlIGNoYW5nZXMgb24gdGhpcyBwYWdlLiBQb2xpY3kgY2hhbmdlcyB3aWxsIGFwcGx5IG9ubHkgdG8gaW5mb3JtYXRpb24gY29sbGVjdGVkIGFmdGVyIHRoZSBkYXRlIG9mIHRoZSBjaGFuZ2UuXG5cbiAgICAgICAgICAgIDxoMj5RVUVTVElPTlMgQU5EIEZFRURCQUNLPC9oMj5cblxuICAgICAgICAgICAgV2Ugd2VsY29tZSB5b3VyIHF1ZXN0aW9ucywgY29tbWVudHMsIGFuZCBjb25jZXJucyBhYm91dCBwcml2YWN5LiBQbGVhc2Ugc2VuZCB1cyBhbnkgYW5kIGFsbCBmZWVkYmFjayBwZXJ0YWluaW5nIHRvIHByaXZhY3ksIG9yIGFueSBvdGhlciBpc3N1ZS5cblxuICAgICAgICAgICAgPGgyPk9OTElORSBQT0xJQ1kgT05MWTwvaDI+XG5cbiAgICAgICAgICAgIFRoaXMgb25saW5lIHByaXZhY3kgcG9saWN5IGFwcGxpZXMgb25seSB0byBpbmZvcm1hdGlvbiBjb2xsZWN0ZWQgdGhyb3VnaCBvdXIgd2Vic2l0ZSBhbmQgbm90IHRvIGluZm9ybWF0aW9uIGNvbGxlY3RlZCBvZmZsaW5lLlxuXG4gICAgICAgICAgICA8aDI+WU9VUiBDT05TRU5UPC9oMj5cblxuICAgICAgICAgICAgQnkgdXNpbmcgb3VyIHNpdGUsIHlvdSBjb25zZW50IHRvIG91ciBwcml2YWN5IHBvbGljeS5cblxuICAgICAgICAgICAgPGgyPkNPTlRBQ1QgVVM8L2gyPlxuXG4gICAgICAgICAgICBBcnJvZSB3ZWxjb21lcyB5b3VyIHF1ZXN0aW9ucyBvciBjb21tZW50cyByZWdhcmRpbmcgdGhlIFRlcm1zOlxuXG4gICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5ub3RzcGFjZWR9PkFycm9lIExpbWl0ZWQuPC9wPlxuICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5ub3RzcGFjZWR9PjExIEdyb3ZlIEhvdXNlPC9wPlxuICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5ub3RzcGFjZWR9PjE2IFR1ZG9yIEdyb3ZlPC9wPlxuICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5ub3RzcGFjZWR9PkxvbmRvbjwvcD5cbiAgICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMubm90c3BhY2VkfT5FOSA3UVA8L3A+XG4gICAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLm5vdHNwYWNlZH0+VUs8L3A+XG4gICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgIEVtYWlsIEFkZHJlc3M6XG4gICAgICAgICAgICA8YSBocmVmPVwibWFpbHRvOnN1cHBvcnRAYXJyb2UuY29cIj5zdXBwb3J0QGFycm9lLmNvPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxiciAvPlxuICAgICAgICA8Rm9vdGVyIGxpbmtzPXtjb25maWcubWVkaWF9IC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5jb25zdCBzdHlsZXMgPSB7XG4gIGNvbnRhaW5lcjoge1xuICAgIG1hcmdpbkJvdHRvbTogJy0xMDBweCcsXG4gICAgcGFkZGluZ0JvdHRvbTogJy0xMDBweCcsXG4gICAgbWF4V2lkdGg6ICcxMDAwcHgnLFxuICAgIG1hcmdpbjogJ2F1dG8nXG4gIH0sXG4gIG5vdHNwYWNlZDoge1xuICAgIG1hcmdpbjogJzBweCdcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOb3RGb3VuZDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2FwcC9wYWdlcy9Qcml2YWN5LmpzIiwiaW1wb3J0IFJlYWN0ICAgICAgICAgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJhZGl1bSAgICAgICAgZnJvbSAncmFkaXVtJztcblxuaW1wb3J0IHtcbiAgTmF2LFxuICBGb290ZXIsXG4gIEhlcm9WaWRlbyxcbiAgSGVyb0ltYWdlLFxuICBUaXRsZSxcbiAgVGV4dCxcbiAgU2VjdGlvbixcbiAgSW1hZ2VTcGxpdCxcbiAgSW1hZ2VTcGxpdFBybyxcbiAgRmVhdHVyZXMsXG4gIFBlb3BsZSxcbiAgRGV2aWNlTG9va3VwLFxuICBEZXRhaWxzSW5wdXQsXG4gIEJ1eUJ1dHRvbixcbiAgWW91VHViZVxufSAgICAgICAgICAgIGZyb20gJy4uL2NvbXBvbmVudHMnO1xuXG5jbGFzcyBQcm9kdWN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgYXRUb3A6IHRydWVcbiAgICB9XG4gICAgdGhpcy5qZGF0YSA9IHtcbiAgICAgICAgcGhvbmVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTonaVBob25lIFgnLFxuICAgICAgICAgICAgICAgIGNhcDogJzd4J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOidpUGhvbmUgNyBQbHVzJyxcbiAgICAgICAgICAgICAgICBjYXA6ICc1LjV4J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOidTYW1zdW5nIFM3IEVkZ2UnLFxuICAgICAgICAgICAgICAgIGNhcDogJzQuNHgnXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBob25lczI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOidHb29nbGUgUGl4ZWwnLFxuICAgICAgICAgICAgICAgIGNhcDogJzUuN3gnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6J0xHIDUnLFxuICAgICAgICAgICAgICAgIGNhcDogJzUuN3gnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6J2lQYWQgUHJvIDEyLjknLFxuICAgICAgICAgICAgICAgIGNhcDogJzEuNXgnXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGxhcHRvcHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOidNYWNCb29rIFBybyAxNVwiJyxcbiAgICAgICAgICAgICAgICBjYXA6ICcxLjJ4J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOidNYWNCb29rIFBybyAxM1wiJyxcbiAgICAgICAgICAgICAgICBjYXA6ICcxLjV4J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOidNYWNCb29rIEFpciAxM1wiJyxcbiAgICAgICAgICAgICAgICBjYXA6ICcxLjV4J1xuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBsYXB0b3BzMjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6J0hQIEVsaXRlQm9vayBGb2xpbycsXG4gICAgICAgICAgICAgICAgY2FwOiAnMS41NngnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6J0FzdXMgWmVuYm9vayAzJyxcbiAgICAgICAgICAgICAgICBjYXA6ICcxLjV4J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOidBY2VyIEFzcGlyZSBzMTMnLFxuICAgICAgICAgICAgICAgIGNhcDogJzEuMzJ4J1xuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICB0ZWNoU3BlY3M6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJEaW1lbnNpb25zXCIsXG4gICAgICAgICAgICAgICAgdGV4dDogXCJXOiAyODVtbSAtIEw6IDIwMG1tIC0gSDogMTNtbVwiLFxuICAgICAgICAgICAgICAgIHRleHRMb3c6IFwiV2VpZ2h0IDMyMWdcIixcbiAgICAgICAgICAgICAgICBpY29uOiBcImltZy9kaW0ucG5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiT3V0cHV0XCIsXG4gICAgICAgICAgICAgICAgdGV4dDogXCIzN3cgbWluIHdpdGggMzd3aCBiYXR0ZXJ5LlwiLFxuICAgICAgICAgICAgICAgIHRleHRMb3c6IFwiNzR3IG1pbiB3aXRoIDc0d2ggYmF0dGVyeS5cIixcbiAgICAgICAgICAgICAgICBpY29uOiBcImltZy9wb3J0LnBuZ1wiXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgXSxcbiAgICAgICAgdGVjaFNwZWNzTWlkOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiUG9ydHNcIixcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkRDIE91dHB1dCwgMnggVVNCLUMgUG93ZXIgRGVsaXZlcnkgaW4vb3V0IHBvcnRzIChzdXBwb3J0aW5nIDUsOSwxMiwxNSwgMjBWIG91dHB1dCA2MHcgbWF4KVwiLFxuICAgICAgICAgICAgICAgIHRleHRMb3c6IFwiMXggVVNCLUEgUUMgMy4wIG91dHB1dCAoNS0yMHYgMThXIG1heCksIDF4IFFpIFdpcmVsZXNzIDMuMCBjaGFyZ2luZyBwb3J0ICg1ViwgMUEsIDVXIG1heClcIixcbiAgICAgICAgICAgICAgICBpY29uOiBcImltZy9wb3J0LnBuZ1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIlBhc3MgdGhyb3VnaCBjaGFyZ2luZ1wiLFxuICAgICAgICAgICAgICAgIHRleHQ6IFwiTEFFUiBzdXBwb3J0cyBwYXNzIHRocm91Z2ggY2hhcmdpbmcgYWxsb3dpbmcgaXQgdG8gY2hhcmdlIHRoZSBpbnRlcm5hbCBiYXR0ZXJ5IHdoaWxlIGNoYXJnaW5nIGFsbCBjb25uZWN0ZWQgZGV2aWNlcyBzaW11bHRhbmVvdXNseVwiLFxuICAgICAgICAgICAgICAgIGljb246IFwiaW1nL3BvcnQucG5nXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgdGVjaFNwZWNzUmlnaHQ6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCIzN3doIEJhdHRlcnkgXCIsXG4gICAgICAgICAgICAgICAgdGV4dDogXCIyeCAzLjd2IDUsMDAwbUFoXCIsXG4gICAgICAgICAgICAgICAgdGV4dExvdzogXCJXZWlnaHQgMzM2Z1wiLFxuICAgICAgICAgICAgICAgIGljb246IFwiaW1nL2JhdHRlcnkucG5nXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiNzR3aCBCYXR0ZXJ5IFwiLFxuICAgICAgICAgICAgICAgIHRleHQ6IFwiMnggMy43diAxMCwwMDBtQWguXCIsXG4gICAgICAgICAgICAgICAgdGV4dExvdzogXCIgV2VpZ2h0IDQ5NGdcIixcbiAgICAgICAgICAgICAgICBpY29uOiBcImltZy9iYXR0ZXJ5LnBuZ1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgfVxuXG4gIH1cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVTY3JvbGwuYmluZCh0aGlzKSk7XG4gIH1cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVTY3JvbGwuYmluZCh0aGlzKSk7XG4gIH1cbiAgaGFuZGxlU2Nyb2xsKGV2ZW50KSB7XG4gICAgICBsZXQgc2Nyb2xsVG9wID0gZXZlbnQuc3JjRWxlbWVudC5ib2R5LnNjcm9sbFRvcDtcbiAgICAgIGlmIChzY3JvbGxUb3AgPCAxMCAhPSB0aGlzLnN0YXRlLmF0VG9wKSB7XG4gICAgICAgIC8qIE9ubHkgbWFrZSBjYWxsIHRvIHNldHN0YXRlIHdoZW4gdmFsdWUgaXMgZGlmZmVyZW50ICovXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGF0VG9wOiBzY3JvbGxUb3AgPCAxMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2F0VG9wfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qge2NvbmZpZ30gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgbmF2TGlua3MgPSB7XG4gICAgICBIb21lOiBcIi9cIixcbiAgICAgIFByb2R1Y3Q6ICAgXCIvcHJvZHVjdFwiLFxuICAgICAgYWJvdXQ6ICAgIFwiL2Fib3V0XCJcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxOYXYgbGlua3M9e25hdkxpbmtzfSBidXlMaW5rPXtjb25maWcubGlua3MuYnV5fS8+XG4gICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPFNlY3Rpb24+XG4gICAgICAgIDxUaXRsZT5GZWF0dXJlczwvVGl0bGU+XG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuZmVhdHVyZXN2aWRlb30+XG4gICAgICAgICAgICAgICAgPFlvdVR1YmVcbiAgICAgICAgICAgICAgICAgICAgdmlkZW9JZD17Y29uZmlnLnZpZGVvcy5mZWF0dXJlc31cbiAgICAgICAgICAgICAgICAgICAgc2hvd2luZm89XCIxXCJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbHM9XCIwXCJcbiAgICAgICAgICAgICAgICAgICAgbW9kZXN0PVwiMVwiXG4gICAgICAgICAgICAgICAgICAgIHJlbD1cIjBcIlxuICAgICAgICAgICAgICAgICAgICBzaG93aW5mbz1cIjBcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxGZWF0dXJlcyBzZWN0aW9ucz17Y29uZmlnLmZlYXR1cmVzfS8+XG4gICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgPFNlY3Rpb24gc3R5bGU9e3N0eWxlcy5kYXJrfSBzY3JvbGxOYW1lPXtuYXZMaW5rcy5kZXNpZ259PlxuICAgICAgICAgICAgPFRpdGxlPkNoYXJnZSBDYXBhY2l0eTwvVGl0bGU+XG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMucGFuZWxSaWdodH0+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmlubmVyUGFuZWxDfT5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuamRhdGEucGhvbmVzMi5tYXAoKGRhdGEsIGlkeCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8ZGl2PjxwPntkYXRhLm5hbWV9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnNwaW5uZXJ9PjxwIHN0eWxlPXtzdHlsZXMuc3Bpbm5lclRleHR9PntkYXRhLmNhcH08L3A+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmlubmVyUGFuZWxDfT5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuamRhdGEucGhvbmVzLm1hcCgoZGF0YSwgaWR4KT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxkaXY+PHA+e2RhdGEubmFtZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuc3Bpbm5lcn0+PHAgc3R5bGU9e3N0eWxlcy5zcGlubmVyVGV4dH0+e2RhdGEuY2FwfTwvcD48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuaW5uZXJQYW5lbEN9PlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5qZGF0YS5sYXB0b3BzMi5tYXAoKGRhdGEsIGlkeCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8ZGl2PjxwPntkYXRhLm5hbWV9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnNwaW5uZXJ9PjxwIHN0eWxlPXtzdHlsZXMuc3Bpbm5lclRleHR9PntkYXRhLmNhcH08L3A+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmlubmVyUGFuZWxDfT5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuamRhdGEubGFwdG9wcy5tYXAoKGRhdGEsIGlkeCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8ZGl2PjxwPntkYXRhLm5hbWV9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLnNwaW5uZXJ9PjxwIHN0eWxlPXtzdHlsZXMuc3Bpbm5lclRleHR9PntkYXRhLmNhcH08L3A+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICA8U2VjdGlvbiBzY3JvbGxOYW1lPXtuYXZMaW5rcy5hYm91dH0+XG4gICAgICAgICAgICA8VGl0bGU+VGVjaG5pY2FsIFNwZWNpZmljYXRpb25zPC9UaXRsZT5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmlubmVyUGFuZWxMfT5cbiAgICAgICAgICAgICAgICAgICAgPFRpdGxlPjwvVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLmpkYXRhLnRlY2hTcGVjcy5tYXAoKGRhdGEsIGlkeCk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8ZGl2IHN0eWxlPXtzdHlsZXMudGVjaEJveH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmluZm9Ib2xkZXJ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgc3R5bGU9e3N0eWxlcy50eHRUaXRsZX0+e2RhdGEudGl0bGV9PC9oND5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5zbWFsbFRleHR9PntkYXRhLnRleHR9PC9wPjxicj48L2JyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLnNtYWxsVGV4dH0+e2RhdGEudGV4dExvd308L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17c3R5bGVzLmlubmVyUGFuZWx9PlxuICAgICAgICAgICAgICAgICAgICA8VGl0bGU+PC9UaXRsZT5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuamRhdGEudGVjaFNwZWNzTWlkLm1hcCgoZGF0YSwgaWR4KT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxkaXYgc3R5bGU9e3N0eWxlcy50ZWNoQm94fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuaW5mb0hvbGRlcn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBzdHlsZT17c3R5bGVzLnR4dFRpdGxlfT57ZGF0YS50aXRsZX08L2g0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT17c3R5bGVzLnNtYWxsVGV4dH0+e2RhdGEudGV4dH08L3A+PGJyPjwvYnI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuc21hbGxUZXh0fT57ZGF0YS50ZXh0TG93fTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXtzdHlsZXMuaW5uZXJQYW5lbFJ9PlxuICAgICAgICAgICAgICAgICAgICA8VGl0bGU+PC9UaXRsZT5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuamRhdGEudGVjaFNwZWNzUmlnaHQubWFwKChkYXRhLCBpZHgpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPGRpdiBzdHlsZT17c3R5bGVzLnRlY2hCb3h9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5pbmZvSG9sZGVyfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IHN0eWxlPXtzdHlsZXMudHh0VGl0bGV9PntkYXRhLnRpdGxlfTwvaDQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPXtzdHlsZXMuc21hbGxUZXh0fT57ZGF0YS50ZXh0fTwvcD48YnI+PC9icj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9e3N0eWxlcy5zbWFsbFRleHR9PntkYXRhLnRleHRMb3d9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgPFNlY3Rpb24gc3R5bGU9e3N0eWxlcy5kYXJrfSBzY3JvbGxOYW1lPXtuYXZMaW5rcy5kZXNpZ259PlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGNvbmZpZy5zZWN0aW9ucy5wcm9kdWN0KS5tYXAoKHRpdGxlLCBrKSA9PiB7XG4gICAgICAgICAgICAgIGxldCBkaXIgPSBrICUgMiA9PT0gMCA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICAgICAgICAgIGxldCB7dGV4dCwgc3JjfSA9IGNvbmZpZy5zZWN0aW9ucy5wcm9kdWN0W3RpdGxlXTtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8SW1hZ2VTcGxpdCBrZXk9e2t9IHRpdGxlPXt0aXRsZX0gZGlyZWN0aW9uPXtkaXJ9IHRleHQ9e3RleHR9IHNyYz17c3JjfSAvPlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICA8U2VjdGlvbiBzdHlsZT17c3R5bGVzLmRhcmt9IHNjcm9sbE5hbWU9e25hdkxpbmtzLnN1cHBvcnR9PlxuICAgICAgICAgIDxUaXRsZT5TdXBwb3J0PC9UaXRsZT5cbiAgICAgICAgICA8VGV4dD57Y29uZmlnLnNlY3Rpb25zLnN1cHBvcnR9PC9UZXh0PlxuICAgICAgICAgIDxEZXRhaWxzSW5wdXQgLz5cbiAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLnBhZGJvdHRvbX0+XG4gICAgICAgICAgICBXYW50IHRvIGNvbnRhY3QgdXMgYnkgZW1haWw/IEVtYWlsIHVzIGF0IDxhIHN0eWxlPXtzdHlsZXMubGlua30gaHJlZj1cIm1haWx0bzpzdXBwb3J0QGFycm9lLmNvXCI+c3VwcG9ydEBhcnJvZS5jbzwvYT5cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgPFNlY3Rpb24gc2Nyb2xsTmFtZT1cIm5vdGlmeVwiPlxuICAgICAgICAgIDxUaXRsZT5HZXQgTm90aWZpZWQ8L1RpdGxlPlxuICAgICAgICAgIDxUZXh0PkVudGVyIHlvdXIgbmFtZSBhbmQgZW1haWwgYmVsb3cgYW5kIHdl4oCZbGwgbGV0IHlvdSBrbm93IHdoZW4gd2XigJlyZSBsYXVuY2hpbmc8L1RleHQ+XG4gICAgICAgICAgPERldGFpbHNJbnB1dCBzaWdudXA9e3RydWV9IC8+XG4gICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgPEZvb3RlciBsaW5rcz17Y29uZmlnLm1lZGlhfSAvPlxuICAgICAgICA8ZGl2IHN0eWxlPXtbc3R5bGVzLmJ1eWJhbm5lciwge2Rpc3BsYXk6IGF0VG9wID8gJ25vbmUnIDogJ2Jsb2NrJ31dfT5cbiAgICAgICAgICA8QnV5QnV0dG9uIGxpbms9e2NvbmZpZy5saW5rcy5idXl9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGZlYXR1cmVzOiB7XG4gICAgYmFja2dyb3VuZEltYWdlOiAndXJsKGltZy9oZXJvLWltYWdlLmpwZyknLFxuICAgIGJhY2tncm91bmRTaXplOiAnY292ZXInLFxuICAgIGJhY2tncm91bmRQb3NpdGlvbjogJ2NlbnRlcicsXG4gICAgaGVpZ2h0OiAnMTAwdmgnXG4gIH0sXG4gIHBsYXlidXR0b246IHtcbiAgICB3aWR0aDogJzEwMHB4J1xuICB9LFxuICBkYXJrOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAnIzFlMWUxZScsXG4gICAgY29sb3I6ICd3aGl0ZSdcbiAgfSxcbiAgZmVhdHVyZXN2aWRlbzoge1xuICAgIHdpZHRoOiAnNzYwcHgnLFxuICAgIGhlaWdodDogJzQwMHB4JyxcbiAgICBtYXJnaW46ICcyMHB4IGF1dG8gNDBweCcsXG4gICAgbWF4V2lkdGg6ICc4MCUnXG4gIH0sXG4gIGZlYXR1cmVzdmlkZW86IHtcbiAgICB3aWR0aDogJzc2MHB4JyxcbiAgICBoZWlnaHQ6ICc0MDBweCcsXG4gICAgbWFyZ2luOiAnMjBweCBhdXRvIDQwcHgnLFxuICAgIG1heFdpZHRoOiAnMTAwJSdcbiAgfSxcbiAgYnV5YmFubmVyOiB7XG4gICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgYm90dG9tOiAnMCcsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMWUxZTFlJyxcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICdAbWVkaWEgKG1pbi13aWR0aDogNjAxcHgpJzoge1xuICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgfSxcbiAgICBwYWRkaW5nOiAnMTBweCcsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCdcbiAgfSxcbiAgbGluazoge1xuICAgIGNvbG9yOiAnd2hpdGUnXG4gIH0sXG4gIGp1c3RpZnk6IHtcbiAgICB0ZXh0QWxpZ246ICdqdXN0aWZ5J1xuICB9LFxuICBjb250YWluZXI6IHtcbiAgICBoZWlnaHQ6ICcxMDB2aCcsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIHpJbmRleDogMCxcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6ICd1cmwoaW1nL3Byb2R1Y3QtaGVyby5KUEcpJyxcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICdjZW50ZXInLFxuICAgIGJhY2tncm91bmRTaXplOiAnY292ZXInLFxuICAgIHBhZGRpbmdUb3A6ICc4MHB4JyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94J1xuICB9LFxuICB3cmFwcGVyOiB7XG4gICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICB9LFxuICBwYW5lbExlZnQ6IHtcbiAgICBvcmRlcjogMSxcbiAgICB3aWR0aDogJzUwdmgnLFxuICAgIG1heFdpZHRoOiAnNTB2aCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnYmxhY2snLFxuICAgIGZsb2F0OiAnbGVmdCcsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICB9XG4gIH0sXG4gIHBhbmVsUmlnaHQ6IHtcbiAgICBvcmRlcjogMixcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGZsb2F0OiAncmlnaHQnLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgfVxuICB9LFxuICBpbm5lclBhbmVsQzoge1xuICAgIFwid2lkdGhcIiA6IFwiMjUlXCIsXG4gICAgZmxvYXQ6ICdyaWdodCcsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICB9XG4gIH0sXG4gIGlubmVyUGFuZWw6IHtcbiAgICBmbG9hdDogJ2xlZnQnLFxuICAgIHdpZHRoOiAnMzMlJyxcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICBtYXJnaW5Cb3R0b206ICctNHB4JyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICcyMCUnXG4gICAgfVxuICB9LFxuICBpbm5lclBhbmVsTDoge1xuICAgIGZsb2F0OiAnbGVmdCcsXG4gICAgd2lkdGg6ICczMyUnLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIG1hcmdpbkJvdHRvbTogJy00cHgnLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICB9XG4gIH0sXG4gIGlubmVyUGFuZWxSOiB7XG4gICAgZmxvYXQ6ICdyaWdodCcsXG4gICAgd2lkdGg6ICczMyUnLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIG1hcmdpbkJvdHRvbTogJy00cHgnLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICB9XG4gIH0sXG4gIFwic3Bpbm5lclwiOiB7XG4gICAgXCJ3aWR0aFwiOiBcIjUwcHhcIixcbiAgICBcImhlaWdodFwiOiBcIjUwcHhcIixcbiAgICBcImJvcmRlclJhZGl1c1wiOiBcIjUwJVwiLFxuICAgIFwiYm9yZGVyXCI6IFwiNHB4IHNvbGlkIHdoaXRlXCIsXG4gICAgXCJtYXJnaW5cIjogXCIxMHB4XCIsXG4gICAgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWJsb2NrXCJcbiAgfSxcbiAgXCJzcGlubmVyMlwiOiB7XG4gICAgXCJmbG9hdFwiOiBcImxlZnRcIixcbiAgICBcIndpZHRoXCI6IFwiNTBweFwiLFxuICAgIFwiaGVpZ2h0XCI6IFwiNTBweFwiLFxuICAgIFwiYmFja2dyb3VuZFwiOiBcInRyYW5zcGFyZW50XCIsXG4gICAgXCJib3JkZXJSYWRpdXNcIjogXCI1MCVcIixcbiAgICBcImJvcmRlclwiOiBcIjRweCBzb2xpZCAjMWUxZTFlXCIsXG4gICAgXCJtYXJnaW5MZWZ0XCI6IFwiMTAwcHhcIixcbiAgICBcImRpc3BsYXlcIjogXCJpbmxpbmUtYmxvY2tcIixcbiAgICAnQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSc6IHtcbiAgICAgICAgXCJ3aWR0aFwiOiBcIjMwcHhcIixcbiAgICAgICAgXCJoZWlnaHRcIjogXCIzMHB4XCIsXG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgfVxuICB9LFxuICBcImluZm9Ib2xkZXJcIjoge1xuICAgIFwidGV4dEFsaWduXCI6IFwiY2VudGVyXCIsXG4gICAgXCJwYWRkaW5nTGVmdFwiOiBcIjE1cHhcIixcbiAgICBcImZsb2F0XCI6IFwibGVmdFwiLFxuICAgIFwiZGlzcGxheVwiOiBcImlubGluZS1ibG9ja1wiLFxuICAgIFwid2lkdGhcIiA6IFwiMTAwJVwiLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgICB3aWR0aCA6IFwiOTAlXCIsXG4gICAgICAgIG1hcmdpblRvcCA6ICctNXB4JyxcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH1cbiAgfSxcbiAgXCJ0ZWNoQm94XCI6IHtcbiAgICBcIndpZHRoXCI6IFwiMTAwJVwiLFxuICAgIGhlaWdodDogXCIyM3ZoXCIsXG4gICAgJ0BtZWRpYSAobWF4LXdpZHRoOiA2MDBweCknOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICB9XG5cbiAgfSxcbiAgXCJ0eHRUaXRsZVwiOiB7XG4gICAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gIH0sXG4gIFwic3Bpbm5lclRleHRcIjoge1xuICAgIFwicG9zaXRpb25cIjogXCJyZWxhdGl2ZVwiLFxuICAgIFwidG9wXCI6IFwiLTNweFwiXG4gIH0sXG4gIFwiaW1hZ2VIb2xkZXJJbm5lclwiOntcbiAgICBcImhlaWdodFwiOiBcIjkwdmhcIixcbiAgICBcIndpZHRoXCIgOiBcIjkwJVwiLFxuICAgICdAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpJzoge1xuICAgICAgXCJoZWlnaHRcIiA6IFwiNTB2aFwiLFxuICAgICAgXCJ3aWR0aFwiIDogXCIxMDAlXCJcbiAgICB9XG5cbiAgfSxcbiAgXCJpbWFnZUlubmVyXCI6e1xuICAgIFwicGFkZGluZ1RvcFwiOiBcIjMwJVwiLFxuICAgIFwidmVydGljYWxBbGlnblwiIDogXCJtaWRkbGVcIixcbiAgICBcIndpZHRoXCIgOiBcIjEwMCVcIixcbiAgICBcIm1hcmdpblwiOiBcImF1dG9cIlxuICB9LFxuICBcInNtYWxsVGV4dFwiOiB7XG4gICAgXCJtYXJnaW5Ub3BcIjogXCItMjBweFwiLFxuICAgIFwiZm9udFNpemVcIiA6IFwiMTJweFwiXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmFkaXVtKFByb2R1Y3QpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3BhZ2VzL1Byb2R1Y3QuanMiLCJpbXBvcnQgUmVhY3QgICAgICAgICBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmFkaXVtICAgICAgICBmcm9tICdyYWRpdW0nO1xuXG5pbXBvcnQge1xuICBOYXYsXG4gIE5hdkxpZ2h0LFxuICBGb290ZXIsXG4gIEhlcm9WaWRlbyxcbiAgVGl0bGUsXG4gIFRleHQsXG4gIFNlY3Rpb24sXG4gIEltYWdlU3BsaXQsXG4gIEZlYXR1cmVzLFxuICBQZW9wbGUsXG4gIERldmljZUxvb2t1cCxcbiAgRGV0YWlsc0lucHV0LFxuICBCdXlCdXR0b24sXG4gIFlvdVR1YmUsXG4gIEluVGhlQm94LFxuICBUZWNoU3BlY3MsXG4gIEltYWdlU3BsaXRQaG9uZVxufSAgICAgICAgICAgIGZyb20gJy4uL2NvbXBvbmVudHMnO1xuXG5jbGFzcyBQdXJjaGFzZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHNob3dUZWNoOiBmYWxzZTtcbiAgICBpc1RlY2hBY3RpdmU6IGZhbHNlO1xuICB9XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsLmJpbmQodGhpcykpO1xuICB9XG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsLmJpbmQodGhpcykpO1xuICB9XG4gIGhhbmRsZVNjcm9sbChldmVudCkge1xuICAgICAgbGV0IHNjcm9sbFRvcCA9IGV2ZW50LnNyY0VsZW1lbnQuYm9keS5zY3JvbGxUb3A7XG4gICAgICBpZiAoc2Nyb2xsVG9wIDwgMTAgIT0gdGhpcy5zdGF0ZS5hdFRvcCkge1xuICAgICAgICAvKiBPbmx5IG1ha2UgY2FsbCB0byBzZXRzdGF0ZSB3aGVuIHZhbHVlIGlzIGRpZmZlcmVudCAqL1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBhdFRvcDogc2Nyb2xsVG9wIDwgMTAsXG5cbiAgICAgICAgfSk7XG4gICAgICB9XG4gIH1cbiAgcmVuZGVyVGVjaFNwZWNzKCl7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBzaG93VGVjaDogdHJ1ZSxcbiAgICAgICAgICBpc1RlY2hBY3RpdmU6IHRydWVcbiAgICAgIH0pXG4gIH1cblxuICByZW5kZXJCb3goKXtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHNob3dUZWNoOiBmYWxzZSxcbiAgICAgICAgICBpc1RlY2hBY3RpdmU6IGZhbHNlXG4gICAgICB9KVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHthdFRvcH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHtjb25maWd9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IG5hdkxpbmtzID0ge1xuICAgICAgSG9tZTogXCIvXCIsXG4gICAgICBQcm9kdWN0OiAgIFwiL3Byb2R1Y3RcIixcbiAgICAgIGFib3V0OiAgICBcIi9hYm91dFwiXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICAgIHsvKiBjb21tZW50ICovfVxuICAgICAgICA8TmF2TGlnaHQgbGlua3M9e25hdkxpbmtzfSBidXlMaW5rPXtjb25maWcubGlua3MuYnV5fS8+XG4gICAgICAgIDxIZXJvVmlkZW9cbiAgICAgICAgICBzdHlsZT17c3R5bGVzLnNlY3Rpb259XG4gICAgICAgICAgcHJldmlldz1cImltZy8yMS5wbmdcIlxuICAgICAgICAgIHZpZGVvSWQ9e2NvbmZpZy52aWRlb3MudW5ib3h9XG4gICAgICAgICAgZG93bkxpbms9eycjJyArIG5hdkxpbmtzLmZlYXR1cmVzfVxuICAgICAgICAvPlxuICAgICAgICA8U2VjdGlvbiBzdHlsZT17c3R5bGVzLmxpZ2h0fSA+XG4gICAgICAgICAgICA8VGl0bGU+SXMgeW91ciBsYXB0b3AgY29ubmVjdG9yIGluIHRoZSBib3g/PC9UaXRsZT5cbiAgICAgICAgICAgIDxUZXh0PlxuICAgICAgICAgICAgV2Ugc3VwcGx5IGNvbm5lY3RvcnMgZm9yIG1vc3QgbWFqb3IgbGFwdG9wIG1ha2VzIGFuZCBtb2RlbHMuXG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICA8VGV4dD5cbiAgICAgICAgICAgIFBsZWFzZSB1c2UgdGhlIGZvcm0gYmVsb3cgdG8gY29uZmlybSB0aGF0IHlvdXIgbGFwdG9wIGNvbm5lY3RvciBpcyBpbiB0aGUgYm94LiBJZiBpdCBpc27igJl0IHlvdSBjYW4gb3JkZXIgYSBjb25uZWN0b3IgdGhhdCBmaXRzIHlvdXIgbGFwdG9wIG9uIG91ciB3ZWJzaXRlIHd3dy5hcnJvZS5jbyAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgIDxEZXZpY2VMb29rdXAgZGV2aWNlcz17Y29uZmlnLmRldmljZXN9IC8+XG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgPFNlY3Rpb24gc3R5bGU9e3N0eWxlcy5saWdodH0gPlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGNvbmZpZy5zZWN0aW9ucy5wdXJjaGFzZSkubWFwKCh0aXRsZSwgaykgPT4ge1xuICAgICAgICAgICAgICBsZXQgZGlyID0gayAlIDIgPT09IDAgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICAgICAgICBsZXQge3RleHQsIHNyY30gPSBjb25maWcuc2VjdGlvbnMucHVyY2hhc2VbdGl0bGVdO1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxJbWFnZVNwbGl0IGtleT17a30gdGl0bGU9e3RpdGxlfSBkaXJlY3Rpb249e2Rpcn0gdGV4dD17dGV4dH0gc3JjPXtzcmN9IC8+XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgIDxTZWN0aW9uIHN0eWxlPXtzdHlsZXMuZGFya30gPlxuICAgICAgICA8VGl0bGU+TmV2ZXIgd29ycnkgYWJvdXQgeW91ciBiYXR0ZXJ5IGFnYWluPC9UaXRsZT5cblxuICAgICAgICAgIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGNvbmZpZy5zZWN0aW9ucy5hcHBTZWN0aW9uKS5tYXAoKGksIGspID0+IHtcbiAgICAgICAgICAgICAgbGV0IHt0ZXh0LCBzcmN9ID0gY29uZmlnLnNlY3Rpb25zLmFwcFNlY3Rpb25baV07XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPEltYWdlU3BsaXRQaG9uZSBrZXk9e2t9ICBkaXJlY3Rpb249J2xlZnQnIHRleHQ9e3RleHR9IHNyYz17c3JjfSAvPlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgPC9TZWN0aW9uPlxuXG4gICAgICAgIDxTZWN0aW9uIHN0eWxlPXtzdHlsZXMubGlnaHR9ID5cbiAgICAgICAgICB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhjb25maWcuc2VjdGlvbnMuaW5zaWRlYm94KS5tYXAoKGksIGspID0+IHtcbiAgICAgICAgICAgICAgbGV0IGRpciA9IGsgJSAyID09PSAwID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgICAgICAgbGV0IHt0ZXh0LCBzcmN9ID0gY29uZmlnLnNlY3Rpb25zLmluc2lkZWJveFtpXTtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8SW1hZ2VTcGxpdCBrZXk9e2t9ICBkaXJlY3Rpb249e2Rpcn0gdGV4dD17dGV4dH0gc3JjPXtzcmN9IC8+XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgIDxTZWN0aW9uPlxuICAgICAgICAgICAgPGEgc3R5bGU9e3RoaXMuc3RhdGUuaXNUZWNoQWN0aXZlID8gc3R5bGVzLmluYWN0aXZlIDogc3R5bGVzLmFjdGl2ZX0gb25DbGljaz17KCk9PnRoaXMucmVuZGVyQm94KCl9PkluIFRoZSBCb3ggPC9hPlxuICAgICAgICAgICAgPGEgc3R5bGU9e3RoaXMuc3RhdGUuaXNUZWNoQWN0aXZlID8gc3R5bGVzLmFjdGl2ZSA6IHN0eWxlcy5pbmFjdGl2ZX0gb25DbGljaz17KCk9PnRoaXMucmVuZGVyVGVjaFNwZWNzKCl9PiBUZWNoIFNwZWNzPC9hPlxuICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgIDxTZWN0aW9uIHN0eWxlPXtzdHlsZXMubGlnaHR9ID5cbiAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2hvd1RlY2g/XG4gICAgICAgICAgICAgICAgPFRlY2hTcGVjcyAvPlxuICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8SW5UaGVCb3ggIHNyYz17Y29uZmlnLnRlY2hJbWcuc3JjfS8+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIH1cbiAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICA8Rm9vdGVyIGxpbmtzPXtjb25maWcubWVkaWF9IC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgZmVhdHVyZXM6IHtcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6ICd1cmwoaW1nL2hlcm8taW1hZ2UuanBnKScsXG4gICAgYmFja2dyb3VuZFNpemU6ICdjb3ZlcicsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICBoZWlnaHQ6ICcxMDB2aCdcbiAgfSxcbiAgcGxheWJ1dHRvbjoge1xuICAgIHdpZHRoOiAnMTAwcHgnXG4gIH0sXG4gIGxpZ2h0OiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgIGNvbG9yOiAnYmxhY2snXG4gIH0sXG4gIGRhcms6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMGQxMjFiJyxcbiAgICBjb2xvcjogJ3doaXRlJ1xuICB9LFxuICBmZWF0dXJlc3ZpZGVvOiB7XG4gICAgd2lkdGg6ICc3NjBweCcsXG4gICAgaGVpZ2h0OiAnNDAwcHgnLFxuICAgIG1hcmdpbjogJzIwcHggYXV0byA0MHB4JyxcbiAgICBtYXhXaWR0aDogJzEwMCUnXG4gIH0sXG4gIGJ1eWJhbm5lcjoge1xuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIGJvdHRvbTogJzAnLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnIzFlMWUxZScsXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAnQG1lZGlhIChtaW4td2lkdGg6IDYwMXB4KSc6IHtcbiAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgIH0sXG4gICAgcGFkZGluZzogJzEwcHgnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gIH0sXG4gIGxpbms6IHtcbiAgICBjb2xvcjogJ3doaXRlJ1xuICB9LFxuICBqdXN0aWZ5OiB7XG4gICAgdGV4dEFsaWduOiAnanVzdGlmeSdcbiAgfSxcbiAgYWN0aXZlOiB7XG4gICAgICBwYWRkaW5nTGVmdDogJzIwcHgnLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAnMjBweCcsXG4gICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gICAgICB0ZXh0RGVjb3JhdGlvbkxpbmU6ICd1bmRlcmxpbmUnXG4gIH0sXG4gIGluYWN0aXZlOiB7XG4gICAgICBwYWRkaW5nTGVmdDogJzIwcHgnLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAnMjBweCcsXG4gICAgICB0ZXh0RGVjb3JhdGlvbkxpbmU6ICdub25lJ1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGl1bShQdXJjaGFzZSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvcGFnZXMvUHVyY2hhc2UuanMiLCJpbXBvcnQgUmVhY3QgICAgICAgICBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmFkaXVtICAgICAgICBmcm9tICdyYWRpdW0nO1xuXG5pbXBvcnQge1xuICBOYXYsXG4gIE5hdkxpZ2h0LFxuICBGb290ZXIsXG4gIEhlcm9WaWRlbyxcbiAgVGl0bGUsXG4gIFRleHQsXG4gIFNlY3Rpb24sXG4gIEltYWdlU3BsaXQsXG4gIEZlYXR1cmVzLFxuICBQZW9wbGUsXG4gIERldmljZUxvb2t1cCxcbiAgRGV0YWlsc0lucHV0LFxuICBCdXlCdXR0b24sXG4gIFlvdVR1YmUsXG4gIEluVGhlQm94X2ZyLFxuICBUZWNoU3BlY3NfZnIsXG4gIEltYWdlU3BsaXRQaG9uZVxufSAgICAgICAgICAgIGZyb20gJy4uL2NvbXBvbmVudHMnO1xuXG5jbGFzcyBQdXJjaGFzZV9mciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHNob3dUZWNoOiBmYWxzZTtcbiAgICBpc1RlY2hBY3RpdmU6IGZhbHNlO1xuICB9XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsLmJpbmQodGhpcykpO1xuICB9XG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsLmJpbmQodGhpcykpO1xuICB9XG4gIGhhbmRsZVNjcm9sbChldmVudCkge1xuICAgICAgbGV0IHNjcm9sbFRvcCA9IGV2ZW50LnNyY0VsZW1lbnQuYm9keS5zY3JvbGxUb3A7XG4gICAgICBpZiAoc2Nyb2xsVG9wIDwgMTAgIT0gdGhpcy5zdGF0ZS5hdFRvcCkge1xuICAgICAgICAvKiBPbmx5IG1ha2UgY2FsbCB0byBzZXRzdGF0ZSB3aGVuIHZhbHVlIGlzIGRpZmZlcmVudCAqL1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBhdFRvcDogc2Nyb2xsVG9wIDwgMTAsXG5cbiAgICAgICAgfSk7XG4gICAgICB9XG4gIH1cbiAgcmVuZGVyVGVjaFNwZWNzKCl7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBzaG93VGVjaDogdHJ1ZSxcbiAgICAgICAgICBpc1RlY2hBY3RpdmU6IHRydWVcbiAgICAgIH0pXG4gIH1cblxuICByZW5kZXJCb3goKXtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHNob3dUZWNoOiBmYWxzZSxcbiAgICAgICAgICBpc1RlY2hBY3RpdmU6IGZhbHNlXG4gICAgICB9KVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHthdFRvcH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHtjb25maWd9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IG5hdkxpbmtzID0ge1xuICAgICAgSG9tZTogXCIvXCIsXG4gICAgICBQcm9kdWN0OiAgIFwiL3Byb2R1Y3RcIixcbiAgICAgIGFib3V0OiAgICBcIi9hYm91dFwiXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICAgIHsvKiBjb21tZW50ICovfVxuICAgICAgICA8TmF2TGlnaHQgbGlua3M9e25hdkxpbmtzfSBidXlMaW5rPXtjb25maWcubGlua3MuYnV5fS8+XG4gICAgICAgIDxIZXJvVmlkZW9cbiAgICAgICAgICBzdHlsZT17c3R5bGVzLnNlY3Rpb259XG4gICAgICAgICAgcHJldmlldz1cImltZy8yMS5wbmdcIlxuICAgICAgICAgIHZpZGVvSWQ9e2NvbmZpZy52aWRlb3MudW5ib3h9XG4gICAgICAgICAgZG93bkxpbms9eycjJyArIG5hdkxpbmtzLmZlYXR1cmVzfVxuICAgICAgICAvPlxuICAgICAgICA8U2VjdGlvbiBzdHlsZT17c3R5bGVzLmxpZ2h0fSA+XG4gICAgICAgICAgICA8VGl0bGU+VsOpcmlmaWV6IHNpIGxlIGJvbiBjb25uZWN0ZXVyIGVzdCBmb3Vybmk8L1RpdGxlPlxuICAgICAgICAgICAgPFRleHQ+XG4gICAgICAgICAgICBMZXMgY29ubmVjdGV1cnMgcG91ciBsZXMgbWFycXVlcyBsZWFkZXIgZOKAmW9yZGluYXRldXJzIHBvcnRhYmxlcyBzb250IGZvdXJuaXMuXG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICA8VGV4dD5cbiAgICAgICAgICAgIFbDqXJpZmlleiBzaSBsZSBjb25uZWN0ZXVyIHBvdXIgdm90cmUgbW9kw6hsZSBk4oCZb3JkaW5hdGV1ciBlc3QgZm91cm5pIGRhbnMgbGEgYm/DrnRlLiBTaSBjYSBu4oCZZXN0IHBhcyBsZSBjYXMsIHZvdXMgcG91dmV6IGNvbW1hbmRlciBzdXIgbm90cmUgc2l0ZSB3ZWIgd3d3LmFycm9lLmNvPC9UZXh0PlxuICAgICAgICAgICAgPERldmljZUxvb2t1cCBkZXZpY2VzPXtjb25maWcuZGV2aWNlc30gLz5cbiAgICAgICAgICA8YnIgLz5cbiAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICA8U2VjdGlvbiBzdHlsZT17c3R5bGVzLmxpZ2h0fSA+XG4gICAgICAgICAge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoY29uZmlnLnNlY3Rpb25zLnB1cmNoYXNlX2ZyKS5tYXAoKHRpdGxlLCBrKSA9PiB7XG4gICAgICAgICAgICAgIGxldCBkaXIgPSBrICUgMiA9PT0gMCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgICAgICAgIGxldCB7dGV4dCwgc3JjfSA9IGNvbmZpZy5zZWN0aW9ucy5wdXJjaGFzZV9mclt0aXRsZV07XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPEltYWdlU3BsaXQga2V5PXtrfSB0aXRsZT17dGl0bGV9IGRpcmVjdGlvbj17ZGlyfSB0ZXh0PXt0ZXh0fSBzcmM9e3NyY30gLz5cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIDwvU2VjdGlvbj5cbiAgICAgICAgPFNlY3Rpb24gc3R5bGU9e3N0eWxlcy5kYXJrfSA+XG4gICAgICAgIDxUaXRsZT5OZSB2b3VzIHNvdWNpZXogcGx1cyBkZSB2b3MgYmF0dGVyaWVzLjwvVGl0bGU+XG5cbiAgICAgICAgICB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhjb25maWcuc2VjdGlvbnMuYXBwU2VjdGlvbikubWFwKChpLCBrKSA9PiB7XG4gICAgICAgICAgICAgIGxldCB7dGV4dCwgc3JjfSA9IGNvbmZpZy5zZWN0aW9ucy5hcHBTZWN0aW9uX2ZyW2ldO1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxJbWFnZVNwbGl0UGhvbmUga2V5PXtrfSAgZGlyZWN0aW9uPSdsZWZ0JyB0ZXh0PXt0ZXh0fSBzcmM9e3NyY30gLz5cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIDwvU2VjdGlvbj5cblxuICAgICAgICA8U2VjdGlvbiBzdHlsZT17c3R5bGVzLmxpZ2h0fSA+XG4gICAgICAgICAge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoY29uZmlnLnNlY3Rpb25zLmluc2lkZWJveF9mcikubWFwKChpLCBrKSA9PiB7XG4gICAgICAgICAgICAgIGxldCBkaXIgPSBrICUgMiA9PT0gMCA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICAgICAgICAgIGxldCB7dGV4dCwgc3JjfSA9IGNvbmZpZy5zZWN0aW9ucy5pbnNpZGVib3hfZnJbaV07XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPEltYWdlU3BsaXQga2V5PXtrfSAgZGlyZWN0aW9uPXtkaXJ9IHRleHQ9e3RleHR9IHNyYz17c3JjfSAvPlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICA8U2VjdGlvbj5cbiAgICAgICAgICAgIDxhIHN0eWxlPXt0aGlzLnN0YXRlLmlzVGVjaEFjdGl2ZSA/IHN0eWxlcy5pbmFjdGl2ZSA6IHN0eWxlcy5hY3RpdmV9IG9uQ2xpY2s9eygpPT50aGlzLnJlbmRlckJveCgpfT5EYW5zIExhIEJvaXRlIDwvYT5cbiAgICAgICAgICAgIDxhIHN0eWxlPXt0aGlzLnN0YXRlLmlzVGVjaEFjdGl2ZSA/IHN0eWxlcy5hY3RpdmUgOiBzdHlsZXMuaW5hY3RpdmV9IG9uQ2xpY2s9eygpPT50aGlzLnJlbmRlclRlY2hTcGVjcygpfT4gU3DDqWNpZmljYXRpb25zIFRlY2huaXF1ZXMgPC9hPlxuICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgIDxTZWN0aW9uIHN0eWxlPXtzdHlsZXMubGlnaHR9ID5cbiAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2hvd1RlY2g/XG4gICAgICAgICAgICAgICAgPFRlY2hTcGVjc19mciAvPlxuICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8SW5UaGVCb3hfZnIgIHNyYz17Y29uZmlnLnRlY2hJbWcuc3JjfS8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIH1cbiAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICA8Rm9vdGVyIGxpbmtzPXtjb25maWcubWVkaWF9IC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgZmVhdHVyZXM6IHtcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6ICd1cmwoaW1nL2hlcm8taW1hZ2UuanBnKScsXG4gICAgYmFja2dyb3VuZFNpemU6ICdjb3ZlcicsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICBoZWlnaHQ6ICcxMDB2aCdcbiAgfSxcbiAgcGxheWJ1dHRvbjoge1xuICAgIHdpZHRoOiAnMTAwcHgnXG4gIH0sXG4gIGxpZ2h0OiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgIGNvbG9yOiAnYmxhY2snXG4gIH0sXG4gIGRhcms6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMGQxMjFiJyxcbiAgICBjb2xvcjogJ3doaXRlJ1xuICB9LFxuICBmZWF0dXJlc3ZpZGVvOiB7XG4gICAgd2lkdGg6ICc3NjBweCcsXG4gICAgaGVpZ2h0OiAnNDAwcHgnLFxuICAgIG1hcmdpbjogJzIwcHggYXV0byA0MHB4JyxcbiAgICBtYXhXaWR0aDogJzEwMCUnXG4gIH0sXG4gIGJ1eWJhbm5lcjoge1xuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIGJvdHRvbTogJzAnLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnIzFlMWUxZScsXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAnQG1lZGlhIChtaW4td2lkdGg6IDYwMXB4KSc6IHtcbiAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgIH0sXG4gICAgcGFkZGluZzogJzEwcHgnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gIH0sXG4gIGxpbms6IHtcbiAgICBjb2xvcjogJ3doaXRlJ1xuICB9LFxuICBqdXN0aWZ5OiB7XG4gICAgdGV4dEFsaWduOiAnanVzdGlmeSdcbiAgfSxcbiAgYWN0aXZlOiB7XG4gICAgICBwYWRkaW5nTGVmdDogJzIwcHgnLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAnMjBweCcsXG4gICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gICAgICB0ZXh0RGVjb3JhdGlvbkxpbmU6ICd1bmRlcmxpbmUnXG4gIH0sXG4gIGluYWN0aXZlOiB7XG4gICAgICBwYWRkaW5nTGVmdDogJzIwcHgnLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAnMjBweCcsXG4gICAgICB0ZXh0RGVjb3JhdGlvbkxpbmU6ICdub25lJ1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGl1bShQdXJjaGFzZV9mcik7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvcGFnZXMvUHVyY2hhc2VfZnIuanMiLCJpbXBvcnQgUmVhY3QgICAgICAgICBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmFkaXVtICAgICAgICBmcm9tICdyYWRpdW0nO1xuXG5pbXBvcnQge1xuICBOYXYsXG4gIE5hdkxpZ2h0LFxuICBGb290ZXIsXG4gIEhlcm9WaWRlbyxcbiAgVGl0bGUsXG4gIFRleHQsXG4gIFNlY3Rpb24sXG4gIEltYWdlU3BsaXQsXG4gIEZlYXR1cmVzLFxuICBQZW9wbGUsXG4gIERldmljZUxvb2t1cCxcbiAgRGV0YWlsc0lucHV0LFxuICBCdXlCdXR0b24sXG4gIFlvdVR1YmUsXG4gIEluVGhlQm94X2dyLFxuICBUZWNoU3BlY3NfZ3IsXG4gIEltYWdlU3BsaXRQaG9uZVxufSAgICAgICAgICAgIGZyb20gJy4uL2NvbXBvbmVudHMnO1xuXG5jbGFzcyBQdXJjaGFzZV9nciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHNob3dUZWNoOiBmYWxzZTtcbiAgICBpc1RlY2hBY3RpdmU6IGZhbHNlO1xuICB9XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsLmJpbmQodGhpcykpO1xuICB9XG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsLmJpbmQodGhpcykpO1xuICB9XG4gIGhhbmRsZVNjcm9sbChldmVudCkge1xuICAgICAgbGV0IHNjcm9sbFRvcCA9IGV2ZW50LnNyY0VsZW1lbnQuYm9keS5zY3JvbGxUb3A7XG4gICAgICBpZiAoc2Nyb2xsVG9wIDwgMTAgIT0gdGhpcy5zdGF0ZS5hdFRvcCkge1xuICAgICAgICAvKiBPbmx5IG1ha2UgY2FsbCB0byBzZXRzdGF0ZSB3aGVuIHZhbHVlIGlzIGRpZmZlcmVudCAqL1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBhdFRvcDogc2Nyb2xsVG9wIDwgMTAsXG5cbiAgICAgICAgfSk7XG4gICAgICB9XG4gIH1cbiAgcmVuZGVyVGVjaFNwZWNzKCl7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBzaG93VGVjaDogdHJ1ZSxcbiAgICAgICAgICBpc1RlY2hBY3RpdmU6IHRydWVcbiAgICAgIH0pXG4gIH1cblxuICByZW5kZXJCb3goKXtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHNob3dUZWNoOiBmYWxzZSxcbiAgICAgICAgICBpc1RlY2hBY3RpdmU6IGZhbHNlXG4gICAgICB9KVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHthdFRvcH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHtjb25maWd9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IG5hdkxpbmtzID0ge1xuICAgICAgSG9tZTogXCIvXCIsXG4gICAgICBQcm9kdWN0OiAgIFwiL3Byb2R1Y3RcIixcbiAgICAgIGFib3V0OiAgICBcIi9hYm91dFwiXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICAgIHsvKiBjb21tZW50ICovfVxuICAgICAgICA8TmF2TGlnaHQgbGlua3M9e25hdkxpbmtzfSBidXlMaW5rPXtjb25maWcubGlua3MuYnV5fS8+XG4gICAgICAgIDxIZXJvVmlkZW9cbiAgICAgICAgICBzdHlsZT17c3R5bGVzLnNlY3Rpb259XG4gICAgICAgICAgcHJldmlldz1cImltZy8yMS5wbmdcIlxuICAgICAgICAgIHZpZGVvSWQ9e2NvbmZpZy52aWRlb3MudW5ib3h9XG4gICAgICAgICAgZG93bkxpbms9eycjJyArIG5hdkxpbmtzLmZlYXR1cmVzfVxuICAgICAgICAvPlxuICAgICAgICA8U2VjdGlvbiBzdHlsZT17c3R5bGVzLmxpZ2h0fSA+XG4gICAgICAgICAgICA8VGl0bGU+SXN0IGRlaW4gTGFwdG9wLUFkYXB0ZXIgaW4gZGVyIFZlcnBhY2t1bmc/PC9UaXRsZT5cbiAgICAgICAgICAgIDxUZXh0PlxuICAgICAgICAgICAgTEFFUiBiZWluaGFsdGV0IEFkYXB0ZXIgZsO8ciBkaWUgbWVpc3RlbiBMYXB0b3AgTWFya2VuIHVuZCBNb2RlbGxlLlxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPFRleHQ+XG4gICAgICAgICAgICBCaXR0ZSBiZXN0w6R0aWdlIG1pdCBIaWxmZSBkZXMgZm9sZ2VuZGVuIEZvcm11bGFycywgZGFzcyBkZWluIExhcHRvcC1BZGFwdGVyIGluIGRlciBWZXJwYWNrdW5nIGVudGhhbHRlbiBpc3QuIElzdCBkaWVzIG5pY2h0IGRlciBGYWxsLCBzbyBrYW5uc3QgZHUgYXVmIHVuc2VyZXIgV2Vic2l0ZSB1bnRlciB3d3cuYXJyb2UuY28gZWluZW4gcGFzc2VuZGVuIEFkYXB0ZXIgZsO8ciBkZWluZW4gTGFwdG9wIGJlc3RlbGxlbi48L1RleHQ+XG4gICAgICAgICAgICA8RGV2aWNlTG9va3VwIGRldmljZXM9e2NvbmZpZy5kZXZpY2VzfSAvPlxuICAgICAgICAgIDxiciAvPlxuICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgIDxTZWN0aW9uIHN0eWxlPXtzdHlsZXMubGlnaHR9ID5cbiAgICAgICAgICB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhjb25maWcuc2VjdGlvbnMucHVyY2hhc2VfZ3IpLm1hcCgodGl0bGUsIGspID0+IHtcbiAgICAgICAgICAgICAgbGV0IGRpciA9IGsgJSAyID09PSAwID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgICAgICAgbGV0IHt0ZXh0LCBzcmN9ID0gY29uZmlnLnNlY3Rpb25zLnB1cmNoYXNlX2dyW3RpdGxlXTtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8SW1hZ2VTcGxpdCBrZXk9e2t9IHRpdGxlPXt0aXRsZX0gZGlyZWN0aW9uPXtkaXJ9IHRleHQ9e3RleHR9IHNyYz17c3JjfSAvPlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICA8U2VjdGlvbiBzdHlsZT17c3R5bGVzLmRhcmt9ID5cbiAgICAgICAgPFRpdGxlPk1hY2ggZGlyIG5pZSB3aWVkZXIgU29yZ2VuIHVtIGRlaW5lbiBBa2t1LjwvVGl0bGU+XG5cbiAgICAgICAgICB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhjb25maWcuc2VjdGlvbnMuYXBwU2VjdGlvbl9ncikubWFwKChpLCBrKSA9PiB7XG4gICAgICAgICAgICAgIGxldCB7dGV4dCwgc3JjfSA9IGNvbmZpZy5zZWN0aW9ucy5hcHBTZWN0aW9uX2dyW2ldO1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxJbWFnZVNwbGl0UGhvbmUga2V5PXtrfSAgZGlyZWN0aW9uPSdsZWZ0JyB0ZXh0PXt0ZXh0fSBzcmM9e3NyY30gLz5cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIDwvU2VjdGlvbj5cblxuICAgICAgICA8U2VjdGlvbiBzdHlsZT17c3R5bGVzLmxpZ2h0fSA+XG4gICAgICAgICAge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoY29uZmlnLnNlY3Rpb25zLmluc2lkZWJveF9ncikubWFwKChpLCBrKSA9PiB7XG4gICAgICAgICAgICAgIGxldCBkaXIgPSBrICUgMiA9PT0gMCA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICAgICAgICAgIGxldCB7dGV4dCwgc3JjfSA9IGNvbmZpZy5zZWN0aW9ucy5pbnNpZGVib3hfZ3JbaV07XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPEltYWdlU3BsaXQga2V5PXtrfSAgZGlyZWN0aW9uPXtkaXJ9IHRleHQ9e3RleHR9IHNyYz17c3JjfSAvPlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICA8U2VjdGlvbj5cbiAgICAgICAgICAgIDxhIHN0eWxlPXt0aGlzLnN0YXRlLmlzVGVjaEFjdGl2ZSA/IHN0eWxlcy5pbmFjdGl2ZSA6IHN0eWxlcy5hY3RpdmV9IG9uQ2xpY2s9eygpPT50aGlzLnJlbmRlckJveCgpfT5JbiBkZXIgVmVycGFja3VuZzwvYT5cbiAgICAgICAgICAgIDxhIHN0eWxlPXt0aGlzLnN0YXRlLmlzVGVjaEFjdGl2ZSA/IHN0eWxlcy5hY3RpdmUgOiBzdHlsZXMuaW5hY3RpdmV9IG9uQ2xpY2s9eygpPT50aGlzLnJlbmRlclRlY2hTcGVjcygpfT4gRWluemVsaGVpdGVuPC9hPlxuICAgICAgICA8L1NlY3Rpb24+XG4gICAgICAgIDxTZWN0aW9uIHN0eWxlPXtzdHlsZXMubGlnaHR9ID5cbiAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2hvd1RlY2g/XG4gICAgICAgICAgICAgICAgPFRlY2hTcGVjc19nciAvPlxuICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8SW5UaGVCb3hfZ3IgIHNyYz17Y29uZmlnLnRlY2hJbWcuc3JjfS8+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIH1cbiAgICAgICAgPC9TZWN0aW9uPlxuICAgICAgICA8Rm9vdGVyIGxpbmtzPXtjb25maWcubWVkaWF9IC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgZmVhdHVyZXM6IHtcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6ICd1cmwoaW1nL2hlcm8taW1hZ2UuanBnKScsXG4gICAgYmFja2dyb3VuZFNpemU6ICdjb3ZlcicsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICBoZWlnaHQ6ICcxMDB2aCdcbiAgfSxcbiAgcGxheWJ1dHRvbjoge1xuICAgIHdpZHRoOiAnMTAwcHgnXG4gIH0sXG4gIGxpZ2h0OiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgIGNvbG9yOiAnYmxhY2snXG4gIH0sXG4gIGRhcms6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMGQxMjFiJyxcbiAgICBjb2xvcjogJ3doaXRlJ1xuICB9LFxuICBmZWF0dXJlc3ZpZGVvOiB7XG4gICAgd2lkdGg6ICc3NjBweCcsXG4gICAgaGVpZ2h0OiAnNDAwcHgnLFxuICAgIG1hcmdpbjogJzIwcHggYXV0byA0MHB4JyxcbiAgICBtYXhXaWR0aDogJzEwMCUnXG4gIH0sXG4gIGJ1eWJhbm5lcjoge1xuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIGJvdHRvbTogJzAnLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnIzFlMWUxZScsXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAnQG1lZGlhIChtaW4td2lkdGg6IDYwMXB4KSc6IHtcbiAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgIH0sXG4gICAgcGFkZGluZzogJzEwcHgnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gIH0sXG4gIGxpbms6IHtcbiAgICBjb2xvcjogJ3doaXRlJ1xuICB9LFxuICBqdXN0aWZ5OiB7XG4gICAgdGV4dEFsaWduOiAnanVzdGlmeSdcbiAgfSxcbiAgYWN0aXZlOiB7XG4gICAgICBwYWRkaW5nTGVmdDogJzIwcHgnLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAnMjBweCcsXG4gICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gICAgICB0ZXh0RGVjb3JhdGlvbkxpbmU6ICd1bmRlcmxpbmUnXG4gIH0sXG4gIGluYWN0aXZlOiB7XG4gICAgICBwYWRkaW5nTGVmdDogJzIwcHgnLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAnMjBweCcsXG4gICAgICB0ZXh0RGVjb3JhdGlvbkxpbmU6ICdub25lJ1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGl1bShQdXJjaGFzZV9ncik7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvcGFnZXMvUHVyY2hhc2VfZ3IuanMiLCJpbXBvcnQgSG9tZSAgICAgZnJvbSAnLi9Ib21lJztcbmltcG9ydCBOb3RGb3VuZCBmcm9tICcuL05vdEZvdW5kJztcbmltcG9ydCBQcml2YWN5ICBmcm9tICcuL1ByaXZhY3knO1xuaW1wb3J0IFByb2R1Y3QgIGZyb20gJy4vUHJvZHVjdCc7XG5pbXBvcnQgQWJvdXQgIGZyb20gJy4vQWJvdXQnO1xuaW1wb3J0IFB1cmNoYXNlIGZyb20gJy4vUHVyY2hhc2UnO1xuaW1wb3J0IFB1cmNoYXNlX2ZyIGZyb20gJy4vUHVyY2hhc2VfZnInO1xuaW1wb3J0IFB1cmNoYXNlX2dyIGZyb20gJy4vUHVyY2hhc2VfZ3InO1xuXG5cblxuZXhwb3J0IHtcbiAgSG9tZSxcbiAgTm90Rm91bmQsXG4gIFByaXZhY3ksXG4gIFByb2R1Y3QsXG4gIEFib3V0LFxuICBQdXJjaGFzZSxcbiAgUHVyY2hhc2VfZnIsXG4gIFB1cmNoYXNlX2dyXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL3BhZ2VzL2luZGV4LmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtcbiAgU3dpdGNoLFxuICBSb3V0ZSxcbiAgTGluayxcbiAgUmVkaXJlY3Rcbn0gICAgICAgICAgICAgICAgZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmltcG9ydCB7XG4gIEhvbWUsXG4gIE5vdEZvdW5kLFxuICBQcml2YWN5LFxuICBQcm9kdWN0LFxuICBBYm91dCxcbiAgUHVyY2hhc2UsXG4gIFB1cmNoYXNlX2ZyLFxuICBQdXJjaGFzZV9nclxufSAgICAgICAgICAgICAgICBmcm9tICcuL3BhZ2VzJztcblxuZXhwb3J0IGRlZmF1bHQgKGNvbmZpZykgPT4gKFxuICA8U3dpdGNoPlxuICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL1wiPlxuICAgICAgPEhvbWUgY29uZmlnPXtjb25maWd9IC8+XG4gICAgPC9Sb3V0ZT5cbiAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9wcml2YWN5XCI+XG4gICAgICA8UHJpdmFjeSBjb25maWc9e2NvbmZpZ30gLz5cbiAgICA8L1JvdXRlPlxuICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL3Byb2R1Y3RcIj5cbiAgICAgIDxQcm9kdWN0IGNvbmZpZz17Y29uZmlnfSAvPlxuICAgIDwvUm91dGU+XG4gICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvYWJvdXRcIj5cbiAgICAgIDxBYm91dCBjb25maWc9e2NvbmZpZ30gLz5cbiAgICA8L1JvdXRlPlxuICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL3B1cmNoYXNlXCI+XG4gICAgICA8UHVyY2hhc2UgY29uZmlnPXtjb25maWd9IC8+XG4gICAgPC9Sb3V0ZT5cbiAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9wdXJjaGFzZV9mclwiPlxuICAgICAgPFB1cmNoYXNlX2ZyIGNvbmZpZz17Y29uZmlnfSAvPlxuICAgIDwvUm91dGU+XG4gICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvcHVyY2hhc2VfZ3JcIj5cbiAgICAgIDxQdXJjaGFzZV9nciBjb25maWc9e2NvbmZpZ30gLz5cbiAgICA8L1JvdXRlPlxuICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiLzQwNFwiPlxuICAgICAgPE5vdEZvdW5kIGNvbmZpZz17Y29uZmlnfSAvPlxuICAgIDwvUm91dGU+XG4gICAgPFJvdXRlPlxuICAgICAgPFJlZGlyZWN0IGNvbmZpZz17Y29uZmlnfSAgdG89XCIvNDA0XCIgLz5cbiAgICA8L1JvdXRlPlxuICA8L1N3aXRjaD5cbik7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvcm91dGVzLmpzIiwiaW1wb3J0IFJlYWN0ICAgICAgICAgICAgIGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSAgICAgICAgICBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IEFwcCAgICAgICAgICAgICAgIGZyb20gJy4vYXBwL2NvbXBvbmVudHMvQXBwJztcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuaW1wb3J0IGF4aW9zICAgICAgICAgICAgIGZyb20gJ2F4aW9zJztcblxuXG53aW5kb3cub25sb2FkID0gKCkgPT4ge1xuICBheGlvcy5nZXQoJy9zdHJpbmdzLWZyLmpzb24nKVxuICAgIC50aGVuKChjb25maWcpID0+IHtcbiAgICAgIGxldCBhID0gKFxuICAgICAgICA8QnJvd3NlclJvdXRlcj48QXBwIGNvbmZpZz17Y29uZmlnLmRhdGF9IC8+PC9Ccm93c2VyUm91dGVyPlxuICAgICAgKTtcbiAgICAgIFJlYWN0RE9NLnJlbmRlcihhLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbicpKTtcbiAgICB9KVxufTtcblxud2luZG93Lm9ubG9hZCA9ICgpID0+IHtcbiAgYXhpb3MuZ2V0KCcvc3RyaW5ncy1lbi5qc29uJylcbiAgICAudGhlbigoY29uZmlnKSA9PiB7XG4gICAgICBsZXQgciA9IChcbiAgICAgICAgPEJyb3dzZXJSb3V0ZXI+PEFwcCBjb25maWc9e2NvbmZpZy5kYXRhfSAvPjwvQnJvd3NlclJvdXRlcj5cbiAgICAgICk7XG4gICAgICBSZWFjdERPTS5yZW5kZXIociwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21haW4nKSk7XG4gICAgfSlcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY2xpZW50LmpzIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZSh1dGlscy5tZXJnZShkZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvYXhpb3MuanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSB1dGlscy5tZXJnZSh7XG4gICAgICB1cmw6IGFyZ3VtZW50c1swXVxuICAgIH0sIGFyZ3VtZW50c1sxXSk7XG4gIH1cblxuICBjb25maWcgPSB1dGlscy5tZXJnZShkZWZhdWx0cywgdGhpcy5kZWZhdWx0cywgeyBtZXRob2Q6ICdnZXQnIH0sIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnMgfHwge31cbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICByZXR1cm4gZXJyb3I7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIC8vIE5vdGU6IHN0YXR1cyBpcyBub3QgZXhwb3NlZCBieSBYRG9tYWluUmVxdWVzdFxuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIid1c2Ugc3RyaWN0JztcblxuLy8gYnRvYSBwb2x5ZmlsbCBmb3IgSUU8MTAgY291cnRlc3kgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkY2hhbWJlcnMvQmFzZTY0LmpzXG5cbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbmZ1bmN0aW9uIEUoKSB7XG4gIHRoaXMubWVzc2FnZSA9ICdTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXInO1xufVxuRS5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG5FLnByb3RvdHlwZS5jb2RlID0gNTtcbkUucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuZnVuY3Rpb24gYnRvYShpbnB1dCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcbiAgdmFyIG91dHB1dCA9ICcnO1xuICBmb3IgKFxuICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgdmFyIGJsb2NrLCBjaGFyQ29kZSwgaWR4ID0gMCwgbWFwID0gY2hhcnM7XG4gICAgLy8gaWYgdGhlIG5leHQgc3RyIGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgLy8gICBjaGVjayBpZiBkIGhhcyBubyBmcmFjdGlvbmFsIGRpZ2l0c1xuICAgIHN0ci5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcbiAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgKSB7XG4gICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMyAvIDQpO1xuICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgIHRocm93IG5ldyBFKCk7XG4gICAgfVxuICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnRvYTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvbGliL2hlbHBlcnMvYnRvYS5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9XG5cbiAgICAgIGlmICghdXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICB9LFxuXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfSkoKVxuKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKVxuKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIi8qIVxuICogQm93c2VyIC0gYSBicm93c2VyIGRldGVjdG9yXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZGVkL2Jvd3NlclxuICogTUlUIExpY2Vuc2UgfCAoYykgRHVzdGluIERpYXogMjAxNVxuICovXG5cbiFmdW5jdGlvbiAocm9vdCwgbmFtZSwgZGVmaW5pdGlvbikge1xuICBpZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKClcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIGRlZmluZShuYW1lLCBkZWZpbml0aW9uKVxuICBlbHNlIHJvb3RbbmFtZV0gPSBkZWZpbml0aW9uKClcbn0odGhpcywgJ2Jvd3NlcicsIGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAgKiBTZWUgdXNlcmFnZW50cy5qcyBmb3IgZXhhbXBsZXMgb2YgbmF2aWdhdG9yLnVzZXJBZ2VudFxuICAgICovXG5cbiAgdmFyIHQgPSB0cnVlXG5cbiAgZnVuY3Rpb24gZGV0ZWN0KHVhKSB7XG5cbiAgICBmdW5jdGlvbiBnZXRGaXJzdE1hdGNoKHJlZ2V4KSB7XG4gICAgICB2YXIgbWF0Y2ggPSB1YS5tYXRjaChyZWdleCk7XG4gICAgICByZXR1cm4gKG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEgJiYgbWF0Y2hbMV0pIHx8ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNlY29uZE1hdGNoKHJlZ2V4KSB7XG4gICAgICB2YXIgbWF0Y2ggPSB1YS5tYXRjaChyZWdleCk7XG4gICAgICByZXR1cm4gKG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEgJiYgbWF0Y2hbMl0pIHx8ICcnO1xuICAgIH1cblxuICAgIHZhciBpb3NkZXZpY2UgPSBnZXRGaXJzdE1hdGNoKC8oaXBvZHxpcGhvbmV8aXBhZCkvaSkudG9Mb3dlckNhc2UoKVxuICAgICAgLCBsaWtlQW5kcm9pZCA9IC9saWtlIGFuZHJvaWQvaS50ZXN0KHVhKVxuICAgICAgLCBhbmRyb2lkID0gIWxpa2VBbmRyb2lkICYmIC9hbmRyb2lkL2kudGVzdCh1YSlcbiAgICAgICwgbmV4dXNNb2JpbGUgPSAvbmV4dXNcXHMqWzAtNl1cXHMqL2kudGVzdCh1YSlcbiAgICAgICwgbmV4dXNUYWJsZXQgPSAhbmV4dXNNb2JpbGUgJiYgL25leHVzXFxzKlswLTldKy9pLnRlc3QodWEpXG4gICAgICAsIGNocm9tZW9zID0gL0NyT1MvLnRlc3QodWEpXG4gICAgICAsIHNpbGsgPSAvc2lsay9pLnRlc3QodWEpXG4gICAgICAsIHNhaWxmaXNoID0gL3NhaWxmaXNoL2kudGVzdCh1YSlcbiAgICAgICwgdGl6ZW4gPSAvdGl6ZW4vaS50ZXN0KHVhKVxuICAgICAgLCB3ZWJvcyA9IC8od2VifGhwdykob3wwKXMvaS50ZXN0KHVhKVxuICAgICAgLCB3aW5kb3dzcGhvbmUgPSAvd2luZG93cyBwaG9uZS9pLnRlc3QodWEpXG4gICAgICAsIHNhbXN1bmdCcm93c2VyID0gL1NhbXN1bmdCcm93c2VyL2kudGVzdCh1YSlcbiAgICAgICwgd2luZG93cyA9ICF3aW5kb3dzcGhvbmUgJiYgL3dpbmRvd3MvaS50ZXN0KHVhKVxuICAgICAgLCBtYWMgPSAhaW9zZGV2aWNlICYmICFzaWxrICYmIC9tYWNpbnRvc2gvaS50ZXN0KHVhKVxuICAgICAgLCBsaW51eCA9ICFhbmRyb2lkICYmICFzYWlsZmlzaCAmJiAhdGl6ZW4gJiYgIXdlYm9zICYmIC9saW51eC9pLnRlc3QodWEpXG4gICAgICAsIGVkZ2VWZXJzaW9uID0gZ2V0U2Vjb25kTWF0Y2goL2VkZyhbZWFdfGlvcylcXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICAsIHZlcnNpb25JZGVudGlmaWVyID0gZ2V0Rmlyc3RNYXRjaCgvdmVyc2lvblxcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgICwgdGFibGV0ID0gL3RhYmxldC9pLnRlc3QodWEpICYmICEvdGFibGV0IHBjL2kudGVzdCh1YSlcbiAgICAgICwgbW9iaWxlID0gIXRhYmxldCAmJiAvW14tXW1vYmkvaS50ZXN0KHVhKVxuICAgICAgLCB4Ym94ID0gL3hib3gvaS50ZXN0KHVhKVxuICAgICAgLCByZXN1bHRcblxuICAgIGlmICgvb3BlcmEvaS50ZXN0KHVhKSkge1xuICAgICAgLy8gIGFuIG9sZCBPcGVyYVxuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnT3BlcmEnXG4gICAgICAsIG9wZXJhOiB0XG4gICAgICAsIHZlcnNpb246IHZlcnNpb25JZGVudGlmaWVyIHx8IGdldEZpcnN0TWF0Y2goLyg/Om9wZXJhfG9wcnxvcGlvcylbXFxzXFwvXShcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKC9vcHJcXC98b3Bpb3MvaS50ZXN0KHVhKSkge1xuICAgICAgLy8gYSBuZXcgT3BlcmFcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ09wZXJhJ1xuICAgICAgICAsIG9wZXJhOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86b3ByfG9waW9zKVtcXHNcXC9dKFxcZCsoXFwuXFxkKyk/KS9pKSB8fCB2ZXJzaW9uSWRlbnRpZmllclxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvU2Ftc3VuZ0Jyb3dzZXIvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnU2Ftc3VuZyBJbnRlcm5ldCBmb3IgQW5kcm9pZCdcbiAgICAgICAgLCBzYW1zdW5nQnJvd3NlcjogdFxuICAgICAgICAsIHZlcnNpb246IHZlcnNpb25JZGVudGlmaWVyIHx8IGdldEZpcnN0TWF0Y2goLyg/OlNhbXN1bmdCcm93c2VyKVtcXHNcXC9dKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvV2hhbGUvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnTkFWRVIgV2hhbGUgYnJvd3NlcidcbiAgICAgICAgLCB3aGFsZTogdFxuICAgICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/OndoYWxlKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKSspL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9NWkJyb3dzZXIvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnTVogQnJvd3NlcidcbiAgICAgICAgLCBtemJyb3dzZXI6IHRcbiAgICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzpNWkJyb3dzZXIpW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL2NvYXN0L2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ09wZXJhIENvYXN0J1xuICAgICAgICAsIGNvYXN0OiB0XG4gICAgICAgICwgdmVyc2lvbjogdmVyc2lvbklkZW50aWZpZXIgfHwgZ2V0Rmlyc3RNYXRjaCgvKD86Y29hc3QpW1xcc1xcL10oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9mb2N1cy9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdGb2N1cydcbiAgICAgICAgLCBmb2N1czogdFxuICAgICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/OmZvY3VzKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKSspL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC95YWJyb3dzZXIvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnWWFuZGV4IEJyb3dzZXInXG4gICAgICAsIHlhbmRleGJyb3dzZXI6IHRcbiAgICAgICwgdmVyc2lvbjogdmVyc2lvbklkZW50aWZpZXIgfHwgZ2V0Rmlyc3RNYXRjaCgvKD86eWFicm93c2VyKVtcXHNcXC9dKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvdWNicm93c2VyL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICBuYW1lOiAnVUMgQnJvd3NlcidcbiAgICAgICAgLCB1Y2Jyb3dzZXI6IHRcbiAgICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzp1Y2Jyb3dzZXIpW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL214aW9zL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ01heHRob24nXG4gICAgICAgICwgbWF4dGhvbjogdFxuICAgICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/Om14aW9zKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKSspL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9lcGlwaGFueS9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdFcGlwaGFueSdcbiAgICAgICAgLCBlcGlwaGFueTogdFxuICAgICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/OmVwaXBoYW55KVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKSspL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9wdWZmaW4vaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnUHVmZmluJ1xuICAgICAgICAsIHB1ZmZpbjogdFxuICAgICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/OnB1ZmZpbilbXFxzXFwvXShcXGQrKD86XFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvc2xlaXBuaXIvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnU2xlaXBuaXInXG4gICAgICAgICwgc2xlaXBuaXI6IHRcbiAgICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzpzbGVpcG5pcilbXFxzXFwvXShcXGQrKD86XFwuXFxkKykrKS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvay1tZWxlb24vaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnSy1NZWxlb24nXG4gICAgICAgICwga01lbGVvbjogdFxuICAgICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/OmstbWVsZW9uKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKSspL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHdpbmRvd3NwaG9uZSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnV2luZG93cyBQaG9uZSdcbiAgICAgICwgb3NuYW1lOiAnV2luZG93cyBQaG9uZSdcbiAgICAgICwgd2luZG93c3Bob25lOiB0XG4gICAgICB9XG4gICAgICBpZiAoZWRnZVZlcnNpb24pIHtcbiAgICAgICAgcmVzdWx0Lm1zZWRnZSA9IHRcbiAgICAgICAgcmVzdWx0LnZlcnNpb24gPSBlZGdlVmVyc2lvblxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlc3VsdC5tc2llID0gdFxuICAgICAgICByZXN1bHQudmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goL2llbW9iaWxlXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvbXNpZXx0cmlkZW50L2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ0ludGVybmV0IEV4cGxvcmVyJ1xuICAgICAgLCBtc2llOiB0XG4gICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/Om1zaWUgfHJ2OikoXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaHJvbWVvcykge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnQ2hyb21lJ1xuICAgICAgLCBvc25hbWU6ICdDaHJvbWUgT1MnXG4gICAgICAsIGNocm9tZW9zOiB0XG4gICAgICAsIGNocm9tZUJvb2s6IHRcbiAgICAgICwgY2hyb21lOiB0XG4gICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/OmNocm9tZXxjcmlvc3xjcm1vKVxcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKC9lZGcoW2VhXXxpb3MpL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ01pY3Jvc29mdCBFZGdlJ1xuICAgICAgLCBtc2VkZ2U6IHRcbiAgICAgICwgdmVyc2lvbjogZWRnZVZlcnNpb25cbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL3ZpdmFsZGkvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnVml2YWxkaSdcbiAgICAgICAgLCB2aXZhbGRpOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvdml2YWxkaVxcLyhcXGQrKFxcLlxcZCspPykvaSkgfHwgdmVyc2lvbklkZW50aWZpZXJcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoc2FpbGZpc2gpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ1NhaWxmaXNoJ1xuICAgICAgLCBvc25hbWU6ICdTYWlsZmlzaCBPUydcbiAgICAgICwgc2FpbGZpc2g6IHRcbiAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvc2FpbGZpc2hcXHM/YnJvd3NlclxcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL3NlYW1vbmtleVxcLy9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdTZWFNb25rZXknXG4gICAgICAsIHNlYW1vbmtleTogdFxuICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC9zZWFtb25rZXlcXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9maXJlZm94fGljZXdlYXNlbHxmeGlvcy9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdGaXJlZm94J1xuICAgICAgLCBmaXJlZm94OiB0XG4gICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/OmZpcmVmb3h8aWNld2Vhc2VsfGZ4aW9zKVsgXFwvXShcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICAgIGlmICgvXFwoKG1vYmlsZXx0YWJsZXQpO1teXFwpXSpydjpbXFxkXFwuXStcXCkvaS50ZXN0KHVhKSkge1xuICAgICAgICByZXN1bHQuZmlyZWZveG9zID0gdFxuICAgICAgICByZXN1bHQub3NuYW1lID0gJ0ZpcmVmb3ggT1MnXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHNpbGspIHtcbiAgICAgIHJlc3VsdCA9ICB7XG4gICAgICAgIG5hbWU6ICdBbWF6b24gU2lsaydcbiAgICAgICwgc2lsazogdFxuICAgICAgLCB2ZXJzaW9uIDogZ2V0Rmlyc3RNYXRjaCgvc2lsa1xcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL3BoYW50b20vaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnUGhhbnRvbUpTJ1xuICAgICAgLCBwaGFudG9tOiB0XG4gICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goL3BoYW50b21qc1xcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL3NsaW1lcmpzL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ1NsaW1lckpTJ1xuICAgICAgICAsIHNsaW1lcjogdFxuICAgICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goL3NsaW1lcmpzXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvYmxhY2tiZXJyeXxcXGJiYlxcZCsvaS50ZXN0KHVhKSB8fCAvcmltXFxzdGFibGV0L2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ0JsYWNrQmVycnknXG4gICAgICAsIG9zbmFtZTogJ0JsYWNrQmVycnkgT1MnXG4gICAgICAsIGJsYWNrYmVycnk6IHRcbiAgICAgICwgdmVyc2lvbjogdmVyc2lvbklkZW50aWZpZXIgfHwgZ2V0Rmlyc3RNYXRjaCgvYmxhY2tiZXJyeVtcXGRdK1xcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAod2Vib3MpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ1dlYk9TJ1xuICAgICAgLCBvc25hbWU6ICdXZWJPUydcbiAgICAgICwgd2Vib3M6IHRcbiAgICAgICwgdmVyc2lvbjogdmVyc2lvbklkZW50aWZpZXIgfHwgZ2V0Rmlyc3RNYXRjaCgvdyg/OmViKT9vc2Jyb3dzZXJcXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9O1xuICAgICAgL3RvdWNocGFkXFwvL2kudGVzdCh1YSkgJiYgKHJlc3VsdC50b3VjaHBhZCA9IHQpXG4gICAgfVxuICAgIGVsc2UgaWYgKC9iYWRhL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ0JhZGEnXG4gICAgICAsIG9zbmFtZTogJ0JhZGEnXG4gICAgICAsIGJhZGE6IHRcbiAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvZG9sZmluXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGl6ZW4pIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ1RpemVuJ1xuICAgICAgLCBvc25hbWU6ICdUaXplbidcbiAgICAgICwgdGl6ZW46IHRcbiAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86dGl6ZW5cXHM/KT9icm93c2VyXFwvKFxcZCsoXFwuXFxkKyk/KS9pKSB8fCB2ZXJzaW9uSWRlbnRpZmllclxuICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoL3F1cHppbGxhL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ1F1cFppbGxhJ1xuICAgICAgICAsIHF1cHppbGxhOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86cXVwemlsbGEpW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSkgfHwgdmVyc2lvbklkZW50aWZpZXJcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL2Nocm9taXVtL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ0Nocm9taXVtJ1xuICAgICAgICAsIGNocm9taXVtOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86Y2hyb21pdW0pW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspPykvaSkgfHwgdmVyc2lvbklkZW50aWZpZXJcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL2Nocm9tZXxjcmlvc3xjcm1vL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ0Nocm9tZSdcbiAgICAgICAgLCBjaHJvbWU6IHRcbiAgICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzpjaHJvbWV8Y3Jpb3N8Y3JtbylcXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGFuZHJvaWQpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ0FuZHJvaWQnXG4gICAgICAgICwgdmVyc2lvbjogdmVyc2lvbklkZW50aWZpZXJcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL3NhZmFyaXxhcHBsZXdlYmtpdC9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdTYWZhcmknXG4gICAgICAsIHNhZmFyaTogdFxuICAgICAgfVxuICAgICAgaWYgKHZlcnNpb25JZGVudGlmaWVyKSB7XG4gICAgICAgIHJlc3VsdC52ZXJzaW9uID0gdmVyc2lvbklkZW50aWZpZXJcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaW9zZGV2aWNlKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWUgOiBpb3NkZXZpY2UgPT0gJ2lwaG9uZScgPyAnaVBob25lJyA6IGlvc2RldmljZSA9PSAnaXBhZCcgPyAnaVBhZCcgOiAnaVBvZCdcbiAgICAgIH1cbiAgICAgIC8vIFdURjogdmVyc2lvbiBpcyBub3QgcGFydCBvZiB1c2VyIGFnZW50IGluIHdlYiBhcHBzXG4gICAgICBpZiAodmVyc2lvbklkZW50aWZpZXIpIHtcbiAgICAgICAgcmVzdWx0LnZlcnNpb24gPSB2ZXJzaW9uSWRlbnRpZmllclxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmKC9nb29nbGVib3QvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnR29vZ2xlYm90J1xuICAgICAgLCBnb29nbGVib3Q6IHRcbiAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvZ29vZ2xlYm90XFwvKFxcZCsoXFwuXFxkKykpL2kpIHx8IHZlcnNpb25JZGVudGlmaWVyXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiBnZXRGaXJzdE1hdGNoKC9eKC4qKVxcLyguKikgLyksXG4gICAgICAgIHZlcnNpb246IGdldFNlY29uZE1hdGNoKC9eKC4qKVxcLyguKikgLylcbiAgICAgfTtcbiAgIH1cblxuICAgIC8vIHNldCB3ZWJraXQgb3IgZ2Vja28gZmxhZyBmb3IgYnJvd3NlcnMgYmFzZWQgb24gdGhlc2UgZW5naW5lc1xuICAgIGlmICghcmVzdWx0Lm1zZWRnZSAmJiAvKGFwcGxlKT93ZWJraXQvaS50ZXN0KHVhKSkge1xuICAgICAgaWYgKC8oYXBwbGUpP3dlYmtpdFxcLzUzN1xcLjM2L2kudGVzdCh1YSkpIHtcbiAgICAgICAgcmVzdWx0Lm5hbWUgPSByZXN1bHQubmFtZSB8fCBcIkJsaW5rXCJcbiAgICAgICAgcmVzdWx0LmJsaW5rID0gdFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0Lm5hbWUgPSByZXN1bHQubmFtZSB8fCBcIldlYmtpdFwiXG4gICAgICAgIHJlc3VsdC53ZWJraXQgPSB0XG4gICAgICB9XG4gICAgICBpZiAoIXJlc3VsdC52ZXJzaW9uICYmIHZlcnNpb25JZGVudGlmaWVyKSB7XG4gICAgICAgIHJlc3VsdC52ZXJzaW9uID0gdmVyc2lvbklkZW50aWZpZXJcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFyZXN1bHQub3BlcmEgJiYgL2dlY2tvXFwvL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdC5uYW1lID0gcmVzdWx0Lm5hbWUgfHwgXCJHZWNrb1wiXG4gICAgICByZXN1bHQuZ2Vja28gPSB0XG4gICAgICByZXN1bHQudmVyc2lvbiA9IHJlc3VsdC52ZXJzaW9uIHx8IGdldEZpcnN0TWF0Y2goL2dlY2tvXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgIH1cblxuICAgIC8vIHNldCBPUyBmbGFncyBmb3IgcGxhdGZvcm1zIHRoYXQgaGF2ZSBtdWx0aXBsZSBicm93c2Vyc1xuICAgIGlmICghcmVzdWx0LndpbmRvd3NwaG9uZSAmJiAoYW5kcm9pZCB8fCByZXN1bHQuc2lsaykpIHtcbiAgICAgIHJlc3VsdC5hbmRyb2lkID0gdFxuICAgICAgcmVzdWx0Lm9zbmFtZSA9ICdBbmRyb2lkJ1xuICAgIH0gZWxzZSBpZiAoIXJlc3VsdC53aW5kb3dzcGhvbmUgJiYgaW9zZGV2aWNlKSB7XG4gICAgICByZXN1bHRbaW9zZGV2aWNlXSA9IHRcbiAgICAgIHJlc3VsdC5pb3MgPSB0XG4gICAgICByZXN1bHQub3NuYW1lID0gJ2lPUydcbiAgICB9IGVsc2UgaWYgKG1hYykge1xuICAgICAgcmVzdWx0Lm1hYyA9IHRcbiAgICAgIHJlc3VsdC5vc25hbWUgPSAnbWFjT1MnXG4gICAgfSBlbHNlIGlmICh4Ym94KSB7XG4gICAgICByZXN1bHQueGJveCA9IHRcbiAgICAgIHJlc3VsdC5vc25hbWUgPSAnWGJveCdcbiAgICB9IGVsc2UgaWYgKHdpbmRvd3MpIHtcbiAgICAgIHJlc3VsdC53aW5kb3dzID0gdFxuICAgICAgcmVzdWx0Lm9zbmFtZSA9ICdXaW5kb3dzJ1xuICAgIH0gZWxzZSBpZiAobGludXgpIHtcbiAgICAgIHJlc3VsdC5saW51eCA9IHRcbiAgICAgIHJlc3VsdC5vc25hbWUgPSAnTGludXgnXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0V2luZG93c1ZlcnNpb24gKHMpIHtcbiAgICAgIHN3aXRjaCAocykge1xuICAgICAgICBjYXNlICdOVCc6IHJldHVybiAnTlQnXG4gICAgICAgIGNhc2UgJ1hQJzogcmV0dXJuICdYUCdcbiAgICAgICAgY2FzZSAnTlQgNS4wJzogcmV0dXJuICcyMDAwJ1xuICAgICAgICBjYXNlICdOVCA1LjEnOiByZXR1cm4gJ1hQJ1xuICAgICAgICBjYXNlICdOVCA1LjInOiByZXR1cm4gJzIwMDMnXG4gICAgICAgIGNhc2UgJ05UIDYuMCc6IHJldHVybiAnVmlzdGEnXG4gICAgICAgIGNhc2UgJ05UIDYuMSc6IHJldHVybiAnNydcbiAgICAgICAgY2FzZSAnTlQgNi4yJzogcmV0dXJuICc4J1xuICAgICAgICBjYXNlICdOVCA2LjMnOiByZXR1cm4gJzguMSdcbiAgICAgICAgY2FzZSAnTlQgMTAuMCc6IHJldHVybiAnMTAnXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiB1bmRlZmluZWRcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPUyB2ZXJzaW9uIGV4dHJhY3Rpb25cbiAgICB2YXIgb3NWZXJzaW9uID0gJyc7XG4gICAgaWYgKHJlc3VsdC53aW5kb3dzKSB7XG4gICAgICBvc1ZlcnNpb24gPSBnZXRXaW5kb3dzVmVyc2lvbihnZXRGaXJzdE1hdGNoKC9XaW5kb3dzICgoTlR8WFApKCBcXGRcXGQ/LlxcZCk/KS9pKSlcbiAgICB9IGVsc2UgaWYgKHJlc3VsdC53aW5kb3dzcGhvbmUpIHtcbiAgICAgIG9zVmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goL3dpbmRvd3MgcGhvbmUgKD86b3MpP1xccz8oXFxkKyhcXC5cXGQrKSopL2kpO1xuICAgIH0gZWxzZSBpZiAocmVzdWx0Lm1hYykge1xuICAgICAgb3NWZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvTWFjIE9TIFggKFxcZCsoW19cXC5cXHNdXFxkKykqKS9pKTtcbiAgICAgIG9zVmVyc2lvbiA9IG9zVmVyc2lvbi5yZXBsYWNlKC9bX1xcc10vZywgJy4nKTtcbiAgICB9IGVsc2UgaWYgKGlvc2RldmljZSkge1xuICAgICAgb3NWZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvb3MgKFxcZCsoW19cXHNdXFxkKykqKSBsaWtlIG1hYyBvcyB4L2kpO1xuICAgICAgb3NWZXJzaW9uID0gb3NWZXJzaW9uLnJlcGxhY2UoL1tfXFxzXS9nLCAnLicpO1xuICAgIH0gZWxzZSBpZiAoYW5kcm9pZCkge1xuICAgICAgb3NWZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvYW5kcm9pZFsgXFwvLV0oXFxkKyhcXC5cXGQrKSopL2kpO1xuICAgIH0gZWxzZSBpZiAocmVzdWx0LndlYm9zKSB7XG4gICAgICBvc1ZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC8oPzp3ZWJ8aHB3KW9zXFwvKFxcZCsoXFwuXFxkKykqKS9pKTtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdC5ibGFja2JlcnJ5KSB7XG4gICAgICBvc1ZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC9yaW1cXHN0YWJsZXRcXHNvc1xccyhcXGQrKFxcLlxcZCspKikvaSk7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQuYmFkYSkge1xuICAgICAgb3NWZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvYmFkYVxcLyhcXGQrKFxcLlxcZCspKikvaSk7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQudGl6ZW4pIHtcbiAgICAgIG9zVmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goL3RpemVuW1xcL1xcc10oXFxkKyhcXC5cXGQrKSopL2kpO1xuICAgIH1cbiAgICBpZiAob3NWZXJzaW9uKSB7XG4gICAgICByZXN1bHQub3N2ZXJzaW9uID0gb3NWZXJzaW9uO1xuICAgIH1cblxuICAgIC8vIGRldmljZSB0eXBlIGV4dHJhY3Rpb25cbiAgICB2YXIgb3NNYWpvclZlcnNpb24gPSAhcmVzdWx0LndpbmRvd3MgJiYgb3NWZXJzaW9uLnNwbGl0KCcuJylbMF07XG4gICAgaWYgKFxuICAgICAgICAgdGFibGV0XG4gICAgICB8fCBuZXh1c1RhYmxldFxuICAgICAgfHwgaW9zZGV2aWNlID09ICdpcGFkJ1xuICAgICAgfHwgKGFuZHJvaWQgJiYgKG9zTWFqb3JWZXJzaW9uID09IDMgfHwgKG9zTWFqb3JWZXJzaW9uID49IDQgJiYgIW1vYmlsZSkpKVxuICAgICAgfHwgcmVzdWx0LnNpbGtcbiAgICApIHtcbiAgICAgIHJlc3VsdC50YWJsZXQgPSB0XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgIG1vYmlsZVxuICAgICAgfHwgaW9zZGV2aWNlID09ICdpcGhvbmUnXG4gICAgICB8fCBpb3NkZXZpY2UgPT0gJ2lwb2QnXG4gICAgICB8fCBhbmRyb2lkXG4gICAgICB8fCBuZXh1c01vYmlsZVxuICAgICAgfHwgcmVzdWx0LmJsYWNrYmVycnlcbiAgICAgIHx8IHJlc3VsdC53ZWJvc1xuICAgICAgfHwgcmVzdWx0LmJhZGFcbiAgICApIHtcbiAgICAgIHJlc3VsdC5tb2JpbGUgPSB0XG4gICAgfVxuXG4gICAgLy8gR3JhZGVkIEJyb3dzZXIgU3VwcG9ydFxuICAgIC8vIGh0dHA6Ly9kZXZlbG9wZXIueWFob28uY29tL3l1aS9hcnRpY2xlcy9nYnNcbiAgICBpZiAocmVzdWx0Lm1zZWRnZSB8fFxuICAgICAgICAocmVzdWx0Lm1zaWUgJiYgcmVzdWx0LnZlcnNpb24gPj0gMTApIHx8XG4gICAgICAgIChyZXN1bHQueWFuZGV4YnJvd3NlciAmJiByZXN1bHQudmVyc2lvbiA+PSAxNSkgfHxcblx0XHQgICAgKHJlc3VsdC52aXZhbGRpICYmIHJlc3VsdC52ZXJzaW9uID49IDEuMCkgfHxcbiAgICAgICAgKHJlc3VsdC5jaHJvbWUgJiYgcmVzdWx0LnZlcnNpb24gPj0gMjApIHx8XG4gICAgICAgIChyZXN1bHQuc2Ftc3VuZ0Jyb3dzZXIgJiYgcmVzdWx0LnZlcnNpb24gPj0gNCkgfHxcbiAgICAgICAgKHJlc3VsdC53aGFsZSAmJiBjb21wYXJlVmVyc2lvbnMoW3Jlc3VsdC52ZXJzaW9uLCAnMS4wJ10pID09PSAxKSB8fFxuICAgICAgICAocmVzdWx0Lm16YnJvd3NlciAmJiBjb21wYXJlVmVyc2lvbnMoW3Jlc3VsdC52ZXJzaW9uLCAnNi4wJ10pID09PSAxKSB8fFxuICAgICAgICAocmVzdWx0LmZvY3VzICYmIGNvbXBhcmVWZXJzaW9ucyhbcmVzdWx0LnZlcnNpb24sICcxLjAnXSkgPT09IDEpIHx8XG4gICAgICAgIChyZXN1bHQuZmlyZWZveCAmJiByZXN1bHQudmVyc2lvbiA+PSAyMC4wKSB8fFxuICAgICAgICAocmVzdWx0LnNhZmFyaSAmJiByZXN1bHQudmVyc2lvbiA+PSA2KSB8fFxuICAgICAgICAocmVzdWx0Lm9wZXJhICYmIHJlc3VsdC52ZXJzaW9uID49IDEwLjApIHx8XG4gICAgICAgIChyZXN1bHQuaW9zICYmIHJlc3VsdC5vc3ZlcnNpb24gJiYgcmVzdWx0Lm9zdmVyc2lvbi5zcGxpdChcIi5cIilbMF0gPj0gNikgfHxcbiAgICAgICAgKHJlc3VsdC5ibGFja2JlcnJ5ICYmIHJlc3VsdC52ZXJzaW9uID49IDEwLjEpXG4gICAgICAgIHx8IChyZXN1bHQuY2hyb21pdW0gJiYgcmVzdWx0LnZlcnNpb24gPj0gMjApXG4gICAgICAgICkge1xuICAgICAgcmVzdWx0LmEgPSB0O1xuICAgIH1cbiAgICBlbHNlIGlmICgocmVzdWx0Lm1zaWUgJiYgcmVzdWx0LnZlcnNpb24gPCAxMCkgfHxcbiAgICAgICAgKHJlc3VsdC5jaHJvbWUgJiYgcmVzdWx0LnZlcnNpb24gPCAyMCkgfHxcbiAgICAgICAgKHJlc3VsdC5maXJlZm94ICYmIHJlc3VsdC52ZXJzaW9uIDwgMjAuMCkgfHxcbiAgICAgICAgKHJlc3VsdC5zYWZhcmkgJiYgcmVzdWx0LnZlcnNpb24gPCA2KSB8fFxuICAgICAgICAocmVzdWx0Lm9wZXJhICYmIHJlc3VsdC52ZXJzaW9uIDwgMTAuMCkgfHxcbiAgICAgICAgKHJlc3VsdC5pb3MgJiYgcmVzdWx0Lm9zdmVyc2lvbiAmJiByZXN1bHQub3N2ZXJzaW9uLnNwbGl0KFwiLlwiKVswXSA8IDYpXG4gICAgICAgIHx8IChyZXN1bHQuY2hyb21pdW0gJiYgcmVzdWx0LnZlcnNpb24gPCAyMClcbiAgICAgICAgKSB7XG4gICAgICByZXN1bHQuYyA9IHRcbiAgICB9IGVsc2UgcmVzdWx0LnggPSB0XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICB2YXIgYm93c2VyID0gZGV0ZWN0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnID8gbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJyA6ICcnKVxuXG4gIGJvd3Nlci50ZXN0ID0gZnVuY3Rpb24gKGJyb3dzZXJMaXN0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBicm93c2VyTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGJyb3dzZXJJdGVtID0gYnJvd3Nlckxpc3RbaV07XG4gICAgICBpZiAodHlwZW9mIGJyb3dzZXJJdGVtPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChicm93c2VySXRlbSBpbiBib3dzZXIpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHZlcnNpb24gcHJlY2lzaW9ucyBjb3VudFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgIGdldFZlcnNpb25QcmVjaXNpb24oXCIxLjEwLjNcIikgLy8gM1xuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHZlcnNpb25cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0VmVyc2lvblByZWNpc2lvbih2ZXJzaW9uKSB7XG4gICAgcmV0dXJuIHZlcnNpb24uc3BsaXQoXCIuXCIpLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcnJheTo6bWFwIHBvbHlmaWxsXG4gICAqXG4gICAqIEBwYXJhbSAge0FycmF5fSBhcnJcbiAgICogQHBhcmFtICB7RnVuY3Rpb259IGl0ZXJhdG9yXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgZnVuY3Rpb24gbWFwKGFyciwgaXRlcmF0b3IpIHtcbiAgICB2YXIgcmVzdWx0ID0gW10sIGk7XG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5tYXApIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoYXJyLCBpdGVyYXRvcik7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdC5wdXNoKGl0ZXJhdG9yKGFycltpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBicm93c2VyIHZlcnNpb24gd2VpZ2h0XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICAgY29tcGFyZVZlcnNpb25zKFsnMS4xMC4yLjEnLCAgJzEuOC4yLjEuOTAnXSkgICAgLy8gMVxuICAgKiAgIGNvbXBhcmVWZXJzaW9ucyhbJzEuMDEwLjIuMScsICcxLjA5LjIuMS45MCddKTsgIC8vIDFcbiAgICogICBjb21wYXJlVmVyc2lvbnMoWycxLjEwLjIuMScsICAnMS4xMC4yLjEnXSk7ICAgICAvLyAwXG4gICAqICAgY29tcGFyZVZlcnNpb25zKFsnMS4xMC4yLjEnLCAgJzEuMDgwMC4yJ10pOyAgICAgLy8gLTFcbiAgICpcbiAgICogQHBhcmFtICB7QXJyYXk8U3RyaW5nPn0gdmVyc2lvbnMgdmVyc2lvbnMgdG8gY29tcGFyZVxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGNvbXBhcmlzb24gcmVzdWx0XG4gICAqL1xuICBmdW5jdGlvbiBjb21wYXJlVmVyc2lvbnModmVyc2lvbnMpIHtcbiAgICAvLyAxKSBnZXQgY29tbW9uIHByZWNpc2lvbiBmb3IgYm90aCB2ZXJzaW9ucywgZm9yIGV4YW1wbGUgZm9yIFwiMTAuMFwiIGFuZCBcIjlcIiBpdCBzaG91bGQgYmUgMlxuICAgIHZhciBwcmVjaXNpb24gPSBNYXRoLm1heChnZXRWZXJzaW9uUHJlY2lzaW9uKHZlcnNpb25zWzBdKSwgZ2V0VmVyc2lvblByZWNpc2lvbih2ZXJzaW9uc1sxXSkpO1xuICAgIHZhciBjaHVua3MgPSBtYXAodmVyc2lvbnMsIGZ1bmN0aW9uICh2ZXJzaW9uKSB7XG4gICAgICB2YXIgZGVsdGEgPSBwcmVjaXNpb24gLSBnZXRWZXJzaW9uUHJlY2lzaW9uKHZlcnNpb24pO1xuXG4gICAgICAvLyAyKSBcIjlcIiAtPiBcIjkuMFwiIChmb3IgcHJlY2lzaW9uID0gMilcbiAgICAgIHZlcnNpb24gPSB2ZXJzaW9uICsgbmV3IEFycmF5KGRlbHRhICsgMSkuam9pbihcIi4wXCIpO1xuXG4gICAgICAvLyAzKSBcIjkuMFwiIC0+IFtcIjAwMDAwMDAwMFwiXCIsIFwiMDAwMDAwMDA5XCJdXG4gICAgICByZXR1cm4gbWFwKHZlcnNpb24uc3BsaXQoXCIuXCIpLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBcnJheSgyMCAtIGNodW5rLmxlbmd0aCkuam9pbihcIjBcIikgKyBjaHVuaztcbiAgICAgIH0pLnJldmVyc2UoKTtcbiAgICB9KTtcblxuICAgIC8vIGl0ZXJhdGUgaW4gcmV2ZXJzZSBvcmRlciBieSByZXZlcnNlZCBjaHVua3MgYXJyYXlcbiAgICB3aGlsZSAoLS1wcmVjaXNpb24gPj0gMCkge1xuICAgICAgLy8gNCkgY29tcGFyZTogXCIwMDAwMDAwMDlcIiA+IFwiMDAwMDAwMDEwXCIgPSBmYWxzZSAoYnV0IFwiOVwiID4gXCIxMFwiID0gdHJ1ZSlcbiAgICAgIGlmIChjaHVua3NbMF1bcHJlY2lzaW9uXSA+IGNodW5rc1sxXVtwcmVjaXNpb25dKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoY2h1bmtzWzBdW3ByZWNpc2lvbl0gPT09IGNodW5rc1sxXVtwcmVjaXNpb25dKSB7XG4gICAgICAgIGlmIChwcmVjaXNpb24gPT09IDApIHtcbiAgICAgICAgICAvLyBhbGwgdmVyc2lvbiBjaHVua3MgYXJlIHNhbWVcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYnJvd3NlciBpcyB1bnN1cHBvcnRlZFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgIGJvd3Nlci5pc1Vuc3VwcG9ydGVkQnJvd3Nlcih7XG4gICAqICAgICBtc2llOiBcIjEwXCIsXG4gICAqICAgICBmaXJlZm94OiBcIjIzXCIsXG4gICAqICAgICBjaHJvbWU6IFwiMjlcIixcbiAgICogICAgIHNhZmFyaTogXCI1LjFcIixcbiAgICogICAgIG9wZXJhOiBcIjE2XCIsXG4gICAqICAgICBwaGFudG9tOiBcIjUzNFwiXG4gICAqICAgfSk7XG4gICAqXG4gICAqIEBwYXJhbSAge09iamVjdH0gIG1pblZlcnNpb25zIG1hcCBvZiBtaW5pbWFsIHZlcnNpb24gdG8gYnJvd3NlclxuICAgKiBAcGFyYW0gIHtCb29sZWFufSBbc3RyaWN0TW9kZSA9IGZhbHNlXSBmbGFnIHRvIHJldHVybiBmYWxzZSBpZiBicm93c2VyIHdhc24ndCBmb3VuZCBpbiBtYXBcbiAgICogQHBhcmFtICB7U3RyaW5nfSAgW3VhXSB1c2VyIGFnZW50IHN0cmluZ1xuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gaXNVbnN1cHBvcnRlZEJyb3dzZXIobWluVmVyc2lvbnMsIHN0cmljdE1vZGUsIHVhKSB7XG4gICAgdmFyIF9ib3dzZXIgPSBib3dzZXI7XG5cbiAgICAvLyBtYWtlIHN0cmljdE1vZGUgcGFyYW0gb3B0aW9uYWwgd2l0aCB1YSBwYXJhbSB1c2FnZVxuICAgIGlmICh0eXBlb2Ygc3RyaWN0TW9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHVhID0gc3RyaWN0TW9kZTtcbiAgICAgIHN0cmljdE1vZGUgPSB2b2lkKDApO1xuICAgIH1cblxuICAgIGlmIChzdHJpY3RNb2RlID09PSB2b2lkKDApKSB7XG4gICAgICBzdHJpY3RNb2RlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICh1YSkge1xuICAgICAgX2Jvd3NlciA9IGRldGVjdCh1YSk7XG4gICAgfVxuXG4gICAgdmFyIHZlcnNpb24gPSBcIlwiICsgX2Jvd3Nlci52ZXJzaW9uO1xuICAgIGZvciAodmFyIGJyb3dzZXIgaW4gbWluVmVyc2lvbnMpIHtcbiAgICAgIGlmIChtaW5WZXJzaW9ucy5oYXNPd25Qcm9wZXJ0eShicm93c2VyKSkge1xuICAgICAgICBpZiAoX2Jvd3Nlclticm93c2VyXSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgbWluVmVyc2lvbnNbYnJvd3Nlcl0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jyb3dzZXIgdmVyc2lvbiBpbiB0aGUgbWluVmVyc2lvbiBtYXAgc2hvdWxkIGJlIGEgc3RyaW5nOiAnICsgYnJvd3NlciArICc6ICcgKyBTdHJpbmcobWluVmVyc2lvbnMpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBicm93c2VyIHZlcnNpb24gYW5kIG1pbiBzdXBwb3J0ZWQgdmVyc2lvbi5cbiAgICAgICAgICByZXR1cm4gY29tcGFyZVZlcnNpb25zKFt2ZXJzaW9uLCBtaW5WZXJzaW9uc1ticm93c2VyXV0pIDwgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHJpY3RNb2RlOyAvLyBub3QgZm91bmRcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBicm93c2VyIGlzIHN1cHBvcnRlZFxuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG1pblZlcnNpb25zIG1hcCBvZiBtaW5pbWFsIHZlcnNpb24gdG8gYnJvd3NlclxuICAgKiBAcGFyYW0gIHtCb29sZWFufSBbc3RyaWN0TW9kZSA9IGZhbHNlXSBmbGFnIHRvIHJldHVybiBmYWxzZSBpZiBicm93c2VyIHdhc24ndCBmb3VuZCBpbiBtYXBcbiAgICogQHBhcmFtICB7U3RyaW5nfSAgW3VhXSB1c2VyIGFnZW50IHN0cmluZ1xuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gY2hlY2sobWluVmVyc2lvbnMsIHN0cmljdE1vZGUsIHVhKSB7XG4gICAgcmV0dXJuICFpc1Vuc3VwcG9ydGVkQnJvd3NlcihtaW5WZXJzaW9ucywgc3RyaWN0TW9kZSwgdWEpO1xuICB9XG5cbiAgYm93c2VyLmlzVW5zdXBwb3J0ZWRCcm93c2VyID0gaXNVbnN1cHBvcnRlZEJyb3dzZXI7XG4gIGJvd3Nlci5jb21wYXJlVmVyc2lvbnMgPSBjb21wYXJlVmVyc2lvbnM7XG4gIGJvd3Nlci5jaGVjayA9IGNoZWNrO1xuXG4gIC8qXG4gICAqIFNldCBvdXIgZGV0ZWN0IG1ldGhvZCB0byB0aGUgbWFpbiBib3dzZXIgb2JqZWN0IHNvIHdlIGNhblxuICAgKiByZXVzZSBpdCB0byB0ZXN0IG90aGVyIHVzZXIgYWdlbnRzLlxuICAgKiBUaGlzIGlzIG5lZWRlZCB0byBpbXBsZW1lbnQgZnV0dXJlIHRlc3RzLlxuICAgKi9cbiAgYm93c2VyLl9kZXRlY3QgPSBkZXRlY3Q7XG5cbiAgLypcbiAgICogU2V0IG91ciBkZXRlY3QgcHVibGljIG1ldGhvZCB0byB0aGUgbWFpbiBib3dzZXIgb2JqZWN0XG4gICAqIFRoaXMgaXMgbmVlZGVkIHRvIGltcGxlbWVudCBib3dzZXIgaW4gc2VydmVyIHNpZGVcbiAgICovXG4gIGJvd3Nlci5kZXRlY3QgPSBkZXRlY3Q7XG4gIHJldHVybiBib3dzZXJcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9ib3dzZXIvc3JjL2Jvd3Nlci5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5T2JqZWN0Jyk7XG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbn1cblxudmFyIE1JWElOU19LRVkgPSAnbWl4aW5zJztcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGFsbG93IHRoZSBjcmVhdGlvbiBvZiBhbm9ueW1vdXMgZnVuY3Rpb25zIHdoaWNoIGRvIG5vdFxuLy8gaGF2ZSAubmFtZSBzZXQgdG8gdGhlIG5hbWUgb2YgdGhlIHZhcmlhYmxlIGJlaW5nIGFzc2lnbmVkIHRvLlxuZnVuY3Rpb24gaWRlbnRpdHkoZm4pIHtcbiAgcmV0dXJuIGZuO1xufVxuXG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXM7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHtcbiAgICBwcm9wOiAncHJvcCcsXG4gICAgY29udGV4dDogJ2NvbnRleHQnLFxuICAgIGNoaWxkQ29udGV4dDogJ2NoaWxkIGNvbnRleHQnXG4gIH07XG59IGVsc2Uge1xuICBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHt9O1xufVxuXG5mdW5jdGlvbiBmYWN0b3J5KFJlYWN0Q29tcG9uZW50LCBpc1ZhbGlkRWxlbWVudCwgUmVhY3ROb29wVXBkYXRlUXVldWUpIHtcbiAgLyoqXG4gICAqIFBvbGljaWVzIHRoYXQgZGVzY3JpYmUgbWV0aG9kcyBpbiBgUmVhY3RDbGFzc0ludGVyZmFjZWAuXG4gICAqL1xuXG4gIHZhciBpbmplY3RlZE1peGlucyA9IFtdO1xuXG4gIC8qKlxuICAgKiBDb21wb3NpdGUgY29tcG9uZW50cyBhcmUgaGlnaGVyLWxldmVsIGNvbXBvbmVudHMgdGhhdCBjb21wb3NlIG90aGVyIGNvbXBvc2l0ZVxuICAgKiBvciBob3N0IGNvbXBvbmVudHMuXG4gICAqXG4gICAqIFRvIGNyZWF0ZSBhIG5ldyB0eXBlIG9mIGBSZWFjdENsYXNzYCwgcGFzcyBhIHNwZWNpZmljYXRpb24gb2ZcbiAgICogeW91ciBuZXcgY2xhc3MgdG8gYFJlYWN0LmNyZWF0ZUNsYXNzYC4gVGhlIG9ubHkgcmVxdWlyZW1lbnQgb2YgeW91ciBjbGFzc1xuICAgKiBzcGVjaWZpY2F0aW9uIGlzIHRoYXQgeW91IGltcGxlbWVudCBhIGByZW5kZXJgIG1ldGhvZC5cbiAgICpcbiAgICogICB2YXIgTXlDb21wb25lbnQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgKiAgICAgICByZXR1cm4gPGRpdj5IZWxsbyBXb3JsZDwvZGl2PjtcbiAgICogICAgIH1cbiAgICogICB9KTtcbiAgICpcbiAgICogVGhlIGNsYXNzIHNwZWNpZmljYXRpb24gc3VwcG9ydHMgYSBzcGVjaWZpYyBwcm90b2NvbCBvZiBtZXRob2RzIHRoYXQgaGF2ZVxuICAgKiBzcGVjaWFsIG1lYW5pbmcgKGUuZy4gYHJlbmRlcmApLiBTZWUgYFJlYWN0Q2xhc3NJbnRlcmZhY2VgIGZvclxuICAgKiBtb3JlIHRoZSBjb21wcmVoZW5zaXZlIHByb3RvY29sLiBBbnkgb3RoZXIgcHJvcGVydGllcyBhbmQgbWV0aG9kcyBpbiB0aGVcbiAgICogY2xhc3Mgc3BlY2lmaWNhdGlvbiB3aWxsIGJlIGF2YWlsYWJsZSBvbiB0aGUgcHJvdG90eXBlLlxuICAgKlxuICAgKiBAaW50ZXJmYWNlIFJlYWN0Q2xhc3NJbnRlcmZhY2VcbiAgICogQGludGVybmFsXG4gICAqL1xuICB2YXIgUmVhY3RDbGFzc0ludGVyZmFjZSA9IHtcbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBNaXhpbiBvYmplY3RzIHRvIGluY2x1ZGUgd2hlbiBkZWZpbmluZyB5b3VyIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHthcnJheX1cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBtaXhpbnM6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3QgY29udGFpbmluZyBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIHRoYXQgc2hvdWxkIGJlIGRlZmluZWQgb25cbiAgICAgKiB0aGUgY29tcG9uZW50J3MgY29uc3RydWN0b3IgaW5zdGVhZCBvZiBpdHMgcHJvdG90eXBlIChzdGF0aWMgbWV0aG9kcykuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIHN0YXRpY3M6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvKipcbiAgICAgKiBEZWZpbml0aW9uIG9mIHByb3AgdHlwZXMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBwcm9wVHlwZXM6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvKipcbiAgICAgKiBEZWZpbml0aW9uIG9mIGNvbnRleHQgdHlwZXMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBjb250ZXh0VHlwZXM6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvKipcbiAgICAgKiBEZWZpbml0aW9uIG9mIGNvbnRleHQgdHlwZXMgdGhpcyBjb21wb25lbnQgc2V0cyBmb3IgaXRzIGNoaWxkcmVuLlxuICAgICAqXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBjaGlsZENvbnRleHRUeXBlczogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8vID09PT0gRGVmaW5pdGlvbiBtZXRob2RzID09PT1cblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQuIFZhbHVlcyBpbiB0aGUgbWFwcGluZyB3aWxsIGJlIHNldCBvblxuICAgICAqIGB0aGlzLnByb3BzYCBpZiB0aGF0IHByb3AgaXMgbm90IHNwZWNpZmllZCAoaS5lLiB1c2luZyBhbiBgaW5gIGNoZWNrKS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGludm9rZWQgYmVmb3JlIGBnZXRJbml0aWFsU3RhdGVgIGFuZCB0aGVyZWZvcmUgY2Fubm90IHJlbHlcbiAgICAgKiBvbiBgdGhpcy5zdGF0ZWAgb3IgdXNlIGB0aGlzLnNldFN0YXRlYC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge29iamVjdH1cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBnZXREZWZhdWx0UHJvcHM6ICdERUZJTkVfTUFOWV9NRVJHRUQnLFxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCBvbmNlIGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQuIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBiZSB1c2VkXG4gICAgICogYXMgdGhlIGluaXRpYWwgdmFsdWUgb2YgYHRoaXMuc3RhdGVgLlxuICAgICAqXG4gICAgICogICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAqICAgICByZXR1cm4ge1xuICAgICAqICAgICAgIGlzT246IGZhbHNlLFxuICAgICAqICAgICAgIGZvb0JhejogbmV3IEJhekZvbygpXG4gICAgICogICAgIH1cbiAgICAgKiAgIH1cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge29iamVjdH1cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBnZXRJbml0aWFsU3RhdGU6ICdERUZJTkVfTUFOWV9NRVJHRUQnLFxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGdldENoaWxkQ29udGV4dDogJ0RFRklORV9NQU5ZX01FUkdFRCcsXG5cbiAgICAvKipcbiAgICAgKiBVc2VzIHByb3BzIGZyb20gYHRoaXMucHJvcHNgIGFuZCBzdGF0ZSBmcm9tIGB0aGlzLnN0YXRlYCB0byByZW5kZXIgdGhlXG4gICAgICogc3RydWN0dXJlIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBObyBndWFyYW50ZWVzIGFyZSBtYWRlIGFib3V0IHdoZW4gb3IgaG93IG9mdGVuIHRoaXMgbWV0aG9kIGlzIGludm9rZWQsIHNvXG4gICAgICogaXQgbXVzdCBub3QgaGF2ZSBzaWRlIGVmZmVjdHMuXG4gICAgICpcbiAgICAgKiAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIHZhciBuYW1lID0gdGhpcy5wcm9wcy5uYW1lO1xuICAgICAqICAgICByZXR1cm4gPGRpdj5IZWxsbywge25hbWV9ITwvZGl2PjtcbiAgICAgKiAgIH1cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fVxuICAgICAqIEByZXF1aXJlZFxuICAgICAqL1xuICAgIHJlbmRlcjogJ0RFRklORV9PTkNFJyxcblxuICAgIC8vID09PT0gRGVsZWdhdGUgbWV0aG9kcyA9PT09XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBpbml0aWFsbHkgY3JlYXRlZCBhbmQgYWJvdXQgdG8gYmUgbW91bnRlZC5cbiAgICAgKiBUaGlzIG1heSBoYXZlIHNpZGUgZWZmZWN0cywgYnV0IGFueSBleHRlcm5hbCBzdWJzY3JpcHRpb25zIG9yIGRhdGEgY3JlYXRlZFxuICAgICAqIGJ5IHRoaXMgbWV0aG9kIG11c3QgYmUgY2xlYW5lZCB1cCBpbiBgY29tcG9uZW50V2lsbFVubW91bnRgLlxuICAgICAqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY29tcG9uZW50V2lsbE1vdW50OiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gbW91bnRlZCBhbmQgaGFzIGEgRE9NIHJlcHJlc2VudGF0aW9uLlxuICAgICAqIEhvd2V2ZXIsIHRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IHRoZSBET00gbm9kZSBpcyBpbiB0aGUgZG9jdW1lbnQuXG4gICAgICpcbiAgICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBvcGVyYXRlIG9uIHRoZSBET00gd2hlbiB0aGUgY29tcG9uZW50IGhhc1xuICAgICAqIGJlZW4gbW91bnRlZCAoaW5pdGlhbGl6ZWQgYW5kIHJlbmRlcmVkKSBmb3IgdGhlIGZpcnN0IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHJvb3ROb2RlIERPTSBlbGVtZW50IHJlcHJlc2VudGluZyB0aGUgY29tcG9uZW50LlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGNvbXBvbmVudERpZE1vdW50OiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCByZWNlaXZlcyBuZXcgcHJvcHMuXG4gICAgICpcbiAgICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byByZWFjdCB0byBhIHByb3AgdHJhbnNpdGlvbiBieSB1cGRhdGluZyB0aGVcbiAgICAgKiBzdGF0ZSB1c2luZyBgdGhpcy5zZXRTdGF0ZWAuIEN1cnJlbnQgcHJvcHMgYXJlIGFjY2Vzc2VkIHZpYSBgdGhpcy5wcm9wc2AuXG4gICAgICpcbiAgICAgKiAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICAgKiAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICogICAgICAgbGlrZXNJbmNyZWFzaW5nOiBuZXh0UHJvcHMubGlrZUNvdW50ID4gdGhpcy5wcm9wcy5saWtlQ291bnRcbiAgICAgKiAgICAgfSk7XG4gICAgICogICB9XG4gICAgICpcbiAgICAgKiBOT1RFOiBUaGVyZSBpcyBubyBlcXVpdmFsZW50IGBjb21wb25lbnRXaWxsUmVjZWl2ZVN0YXRlYC4gQW4gaW5jb21pbmcgcHJvcFxuICAgICAqIHRyYW5zaXRpb24gbWF5IGNhdXNlIGEgc3RhdGUgY2hhbmdlLCBidXQgdGhlIG9wcG9zaXRlIGlzIG5vdCB0cnVlLiBJZiB5b3VcbiAgICAgKiBuZWVkIGl0LCB5b3UgYXJlIHByb2JhYmx5IGxvb2tpbmcgZm9yIGBjb21wb25lbnRXaWxsVXBkYXRlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGlsZSBkZWNpZGluZyBpZiB0aGUgY29tcG9uZW50IHNob3VsZCBiZSB1cGRhdGVkIGFzIGEgcmVzdWx0IG9mXG4gICAgICogcmVjZWl2aW5nIG5ldyBwcm9wcywgc3RhdGUgYW5kL29yIGNvbnRleHQuXG4gICAgICpcbiAgICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBgcmV0dXJuIGZhbHNlYCB3aGVuIHlvdSdyZSBjZXJ0YWluIHRoYXQgdGhlXG4gICAgICogdHJhbnNpdGlvbiB0byB0aGUgbmV3IHByb3BzL3N0YXRlL2NvbnRleHQgd2lsbCBub3QgcmVxdWlyZSBhIGNvbXBvbmVudFxuICAgICAqIHVwZGF0ZS5cbiAgICAgKlxuICAgICAqICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbihuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpIHtcbiAgICAgKiAgICAgcmV0dXJuICFlcXVhbChuZXh0UHJvcHMsIHRoaXMucHJvcHMpIHx8XG4gICAgICogICAgICAgIWVxdWFsKG5leHRTdGF0ZSwgdGhpcy5zdGF0ZSkgfHxcbiAgICAgKiAgICAgICAhZXF1YWwobmV4dENvbnRleHQsIHRoaXMuY29udGV4dCk7XG4gICAgICogICB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0U3RhdGVcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDb250ZXh0XG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY29tcG9uZW50IHNob3VsZCB1cGRhdGUuXG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiAnREVGSU5FX09OQ0UnLFxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgYWJvdXQgdG8gdXBkYXRlIGR1ZSB0byBhIHRyYW5zaXRpb24gZnJvbVxuICAgICAqIGB0aGlzLnByb3BzYCwgYHRoaXMuc3RhdGVgIGFuZCBgdGhpcy5jb250ZXh0YCB0byBgbmV4dFByb3BzYCwgYG5leHRTdGF0ZWBcbiAgICAgKiBhbmQgYG5leHRDb250ZXh0YC5cbiAgICAgKlxuICAgICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHBlcmZvcm0gcHJlcGFyYXRpb24gYmVmb3JlIGFuIHVwZGF0ZSBvY2N1cnMuXG4gICAgICpcbiAgICAgKiBOT1RFOiBZb3UgKipjYW5ub3QqKiB1c2UgYHRoaXMuc2V0U3RhdGUoKWAgaW4gdGhpcyBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0U3RhdGVcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDb250ZXh0XG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGNvbXBvbmVudFdpbGxVcGRhdGU6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCdzIERPTSByZXByZXNlbnRhdGlvbiBoYXMgYmVlbiB1cGRhdGVkLlxuICAgICAqXG4gICAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gb3BlcmF0ZSBvbiB0aGUgRE9NIHdoZW4gdGhlIGNvbXBvbmVudCBoYXNcbiAgICAgKiBiZWVuIHVwZGF0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcHJldlByb3BzXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2U3RhdGVcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IHByZXZDb250ZXh0XG4gICAgICogQHBhcmFtIHtET01FbGVtZW50fSByb290Tm9kZSBET00gZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIGNvbXBvbmVudC5cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBjb21wb25lbnREaWRVcGRhdGU6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBhYm91dCB0byBiZSByZW1vdmVkIGZyb20gaXRzIHBhcmVudCBhbmQgaGF2ZVxuICAgICAqIGl0cyBET00gcmVwcmVzZW50YXRpb24gZGVzdHJveWVkLlxuICAgICAqXG4gICAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gZGVhbGxvY2F0ZSBhbnkgZXh0ZXJuYWwgcmVzb3VyY2VzLlxuICAgICAqXG4gICAgICogTk9URTogVGhlcmUgaXMgbm8gYGNvbXBvbmVudERpZFVubW91bnRgIHNpbmNlIHlvdXIgY29tcG9uZW50IHdpbGwgaGF2ZSBiZWVuXG4gICAgICogZGVzdHJveWVkIGJ5IHRoYXQgcG9pbnQuXG4gICAgICpcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudDogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VtZW50IGZvciAoZGVwcmVjYXRlZCkgYGNvbXBvbmVudFdpbGxNb3VudGAuXG4gICAgICpcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50OiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZW1lbnQgZm9yIChkZXByZWNhdGVkKSBgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc2AuXG4gICAgICpcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VtZW50IGZvciAoZGVwcmVjYXRlZCkgYGNvbXBvbmVudFdpbGxVcGRhdGVgLlxuICAgICAqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGU6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvLyA9PT09IEFkdmFuY2VkIG1ldGhvZHMgPT09PVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY29tcG9uZW50J3MgY3VycmVudGx5IG1vdW50ZWQgRE9NIHJlcHJlc2VudGF0aW9uLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgdGhpcyBpbXBsZW1lbnRzIFJlYWN0J3MgcmVuZGVyaW5nIGFuZCByZWNvbmNpbGlhdGlvbiBhbGdvcml0aG0uXG4gICAgICogU29waGlzdGljYXRlZCBjbGllbnRzIG1heSB3aXNoIHRvIG92ZXJyaWRlIHRoaXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQGludGVybmFsXG4gICAgICogQG92ZXJyaWRhYmxlXG4gICAgICovXG4gICAgdXBkYXRlQ29tcG9uZW50OiAnT1ZFUlJJREVfQkFTRSdcbiAgfTtcblxuICAvKipcbiAgICogU2ltaWxhciB0byBSZWFjdENsYXNzSW50ZXJmYWNlIGJ1dCBmb3Igc3RhdGljIG1ldGhvZHMuXG4gICAqL1xuICB2YXIgUmVhY3RDbGFzc1N0YXRpY0ludGVyZmFjZSA9IHtcbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBpbnZva2VkIGFmdGVyIGEgY29tcG9uZW50IGlzIGluc3RhbnRpYXRlZCBhbmQgd2hlbiBpdFxuICAgICAqIHJlY2VpdmVzIG5ldyBwcm9wcy4gUmV0dXJuIGFuIG9iamVjdCB0byB1cGRhdGUgc3RhdGUgaW4gcmVzcG9uc2UgdG9cbiAgICAgKiBwcm9wIGNoYW5nZXMuIFJldHVybiBudWxsIHRvIGluZGljYXRlIG5vIGNoYW5nZSB0byBzdGF0ZS5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyByZXR1cm5lZCwgaXRzIGtleXMgd2lsbCBiZSBtZXJnZWQgaW50byB0aGUgZXhpc3Rpbmcgc3RhdGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtvYmplY3QgfHwgbnVsbH1cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6ICdERUZJTkVfTUFOWV9NRVJHRUQnXG4gIH07XG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBjbGFzcyBzcGVjaWZpY2F0aW9uIGtleXMgdG8gc3BlY2lhbCBwcm9jZXNzaW5nIGZ1bmN0aW9ucy5cbiAgICpcbiAgICogQWx0aG91Z2ggdGhlc2UgYXJlIGRlY2xhcmVkIGxpa2UgaW5zdGFuY2UgcHJvcGVydGllcyBpbiB0aGUgc3BlY2lmaWNhdGlvblxuICAgKiB3aGVuIGRlZmluaW5nIGNsYXNzZXMgdXNpbmcgYFJlYWN0LmNyZWF0ZUNsYXNzYCwgdGhleSBhcmUgYWN0dWFsbHkgc3RhdGljXG4gICAqIGFuZCBhcmUgYWNjZXNzaWJsZSBvbiB0aGUgY29uc3RydWN0b3IgaW5zdGVhZCBvZiB0aGUgcHJvdG90eXBlLiBEZXNwaXRlXG4gICAqIGJlaW5nIHN0YXRpYywgdGhleSBtdXN0IGJlIGRlZmluZWQgb3V0c2lkZSBvZiB0aGUgXCJzdGF0aWNzXCIga2V5IHVuZGVyXG4gICAqIHdoaWNoIGFsbCBvdGhlciBzdGF0aWMgbWV0aG9kcyBhcmUgZGVmaW5lZC5cbiAgICovXG4gIHZhciBSRVNFUlZFRF9TUEVDX0tFWVMgPSB7XG4gICAgZGlzcGxheU5hbWU6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBkaXNwbGF5TmFtZSkge1xuICAgICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICB9LFxuICAgIG1peGluczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIG1peGlucykge1xuICAgICAgaWYgKG1peGlucykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1peGlucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBtaXhpbnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjaGlsZENvbnRleHRUeXBlczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGNoaWxkQ29udGV4dFR5cGVzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YWxpZGF0ZVR5cGVEZWYoQ29uc3RydWN0b3IsIGNoaWxkQ29udGV4dFR5cGVzLCAnY2hpbGRDb250ZXh0Jyk7XG4gICAgICB9XG4gICAgICBDb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyA9IF9hc3NpZ24oXG4gICAgICAgIHt9LFxuICAgICAgICBDb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyxcbiAgICAgICAgY2hpbGRDb250ZXh0VHlwZXNcbiAgICAgICk7XG4gICAgfSxcbiAgICBjb250ZXh0VHlwZXM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBjb250ZXh0VHlwZXMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgY29udGV4dFR5cGVzLCAnY29udGV4dCcpO1xuICAgICAgfVxuICAgICAgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzID0gX2Fzc2lnbihcbiAgICAgICAge30sXG4gICAgICAgIENvbnN0cnVjdG9yLmNvbnRleHRUeXBlcyxcbiAgICAgICAgY29udGV4dFR5cGVzXG4gICAgICApO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogU3BlY2lhbCBjYXNlIGdldERlZmF1bHRQcm9wcyB3aGljaCBzaG91bGQgbW92ZSBpbnRvIHN0YXRpY3MgYnV0IHJlcXVpcmVzXG4gICAgICogYXV0b21hdGljIG1lcmdpbmcuXG4gICAgICovXG4gICAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyA9IGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKFxuICAgICAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyxcbiAgICAgICAgICBnZXREZWZhdWx0UHJvcHNcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyA9IGdldERlZmF1bHRQcm9wcztcbiAgICAgIH1cbiAgICB9LFxuICAgIHByb3BUeXBlczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIHByb3BUeXBlcykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCBwcm9wVHlwZXMsICdwcm9wJyk7XG4gICAgICB9XG4gICAgICBDb25zdHJ1Y3Rvci5wcm9wVHlwZXMgPSBfYXNzaWduKHt9LCBDb25zdHJ1Y3Rvci5wcm9wVHlwZXMsIHByb3BUeXBlcyk7XG4gICAgfSxcbiAgICBzdGF0aWNzOiBmdW5jdGlvbihDb25zdHJ1Y3Rvciwgc3RhdGljcykge1xuICAgICAgbWl4U3RhdGljU3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHN0YXRpY3MpO1xuICAgIH0sXG4gICAgYXV0b2JpbmQ6IGZ1bmN0aW9uKCkge31cbiAgfTtcblxuICBmdW5jdGlvbiB2YWxpZGF0ZVR5cGVEZWYoQ29uc3RydWN0b3IsIHR5cGVEZWYsIGxvY2F0aW9uKSB7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gdHlwZURlZikge1xuICAgICAgaWYgKHR5cGVEZWYuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIC8vIHVzZSBhIHdhcm5pbmcgaW5zdGVhZCBvZiBhbiBfaW52YXJpYW50IHNvIGNvbXBvbmVudHNcbiAgICAgICAgLy8gZG9uJ3Qgc2hvdyB1cCBpbiBwcm9kIGJ1dCBvbmx5IGluIF9fREVWX19cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgICAgdHlwZW9mIHR5cGVEZWZbcHJvcE5hbWVdID09PSAnZnVuY3Rpb24nLFxuICAgICAgICAgICAgJyVzOiAlcyB0eXBlIGAlc2AgaXMgaW52YWxpZDsgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gJyArXG4gICAgICAgICAgICAgICdSZWFjdC5Qcm9wVHlwZXMuJyxcbiAgICAgICAgICAgIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENsYXNzJyxcbiAgICAgICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSxcbiAgICAgICAgICAgIHByb3BOYW1lXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGUoaXNBbHJlYWR5RGVmaW5lZCwgbmFtZSkge1xuICAgIHZhciBzcGVjUG9saWN5ID0gUmVhY3RDbGFzc0ludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShuYW1lKVxuICAgICAgPyBSZWFjdENsYXNzSW50ZXJmYWNlW25hbWVdXG4gICAgICA6IG51bGw7XG5cbiAgICAvLyBEaXNhbGxvdyBvdmVycmlkaW5nIG9mIGJhc2UgY2xhc3MgbWV0aG9kcyB1bmxlc3MgZXhwbGljaXRseSBhbGxvd2VkLlxuICAgIGlmIChSZWFjdENsYXNzTWl4aW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIF9pbnZhcmlhbnQoXG4gICAgICAgIHNwZWNQb2xpY3kgPT09ICdPVkVSUklERV9CQVNFJyxcbiAgICAgICAgJ1JlYWN0Q2xhc3NJbnRlcmZhY2U6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBvdmVycmlkZSAnICtcbiAgICAgICAgICAnYCVzYCBmcm9tIHlvdXIgY2xhc3Mgc3BlY2lmaWNhdGlvbi4gRW5zdXJlIHRoYXQgeW91ciBtZXRob2QgbmFtZXMgJyArXG4gICAgICAgICAgJ2RvIG5vdCBvdmVybGFwIHdpdGggUmVhY3QgbWV0aG9kcy4nLFxuICAgICAgICBuYW1lXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIERpc2FsbG93IGRlZmluaW5nIG1ldGhvZHMgbW9yZSB0aGFuIG9uY2UgdW5sZXNzIGV4cGxpY2l0bHkgYWxsb3dlZC5cbiAgICBpZiAoaXNBbHJlYWR5RGVmaW5lZCkge1xuICAgICAgX2ludmFyaWFudChcbiAgICAgICAgc3BlY1BvbGljeSA9PT0gJ0RFRklORV9NQU5ZJyB8fCBzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTllfTUVSR0VEJyxcbiAgICAgICAgJ1JlYWN0Q2xhc3NJbnRlcmZhY2U6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgJyArXG4gICAgICAgICAgJ2Alc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlIGR1ZSAnICtcbiAgICAgICAgICAndG8gYSBtaXhpbi4nLFxuICAgICAgICBuYW1lXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNaXhpbiBoZWxwZXIgd2hpY2ggaGFuZGxlcyBwb2xpY3kgdmFsaWRhdGlvbiBhbmQgcmVzZXJ2ZWRcbiAgICogc3BlY2lmaWNhdGlvbiBrZXlzIHdoZW4gYnVpbGRpbmcgUmVhY3QgY2xhc3Nlcy5cbiAgICovXG4gIGZ1bmN0aW9uIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzcGVjKSB7XG4gICAgaWYgKCFzcGVjKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgdHlwZW9mU3BlYyA9IHR5cGVvZiBzcGVjO1xuICAgICAgICB2YXIgaXNNaXhpblZhbGlkID0gdHlwZW9mU3BlYyA9PT0gJ29iamVjdCcgJiYgc3BlYyAhPT0gbnVsbDtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgICBpc01peGluVmFsaWQsXG4gICAgICAgICAgICBcIiVzOiBZb3UncmUgYXR0ZW1wdGluZyB0byBpbmNsdWRlIGEgbWl4aW4gdGhhdCBpcyBlaXRoZXIgbnVsbCBcIiArXG4gICAgICAgICAgICAgICdvciBub3QgYW4gb2JqZWN0LiBDaGVjayB0aGUgbWl4aW5zIGluY2x1ZGVkIGJ5IHRoZSBjb21wb25lbnQsICcgK1xuICAgICAgICAgICAgICAnYXMgd2VsbCBhcyBhbnkgbWl4aW5zIHRoZXkgaW5jbHVkZSB0aGVtc2VsdmVzLiAnICtcbiAgICAgICAgICAgICAgJ0V4cGVjdGVkIG9iamVjdCBidXQgZ290ICVzLicsXG4gICAgICAgICAgICBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnUmVhY3RDbGFzcycsXG4gICAgICAgICAgICBzcGVjID09PSBudWxsID8gbnVsbCA6IHR5cGVvZlNwZWNcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBfaW52YXJpYW50KFxuICAgICAgdHlwZW9mIHNwZWMgIT09ICdmdW5jdGlvbicsXG4gICAgICBcIlJlYWN0Q2xhc3M6IFlvdSdyZSBhdHRlbXB0aW5nIHRvIFwiICtcbiAgICAgICAgJ3VzZSBhIGNvbXBvbmVudCBjbGFzcyBvciBmdW5jdGlvbiBhcyBhIG1peGluLiBJbnN0ZWFkLCBqdXN0IHVzZSBhICcgK1xuICAgICAgICAncmVndWxhciBvYmplY3QuJ1xuICAgICk7XG4gICAgX2ludmFyaWFudChcbiAgICAgICFpc1ZhbGlkRWxlbWVudChzcGVjKSxcbiAgICAgIFwiUmVhY3RDbGFzczogWW91J3JlIGF0dGVtcHRpbmcgdG8gXCIgK1xuICAgICAgICAndXNlIGEgY29tcG9uZW50IGFzIGEgbWl4aW4uIEluc3RlYWQsIGp1c3QgdXNlIGEgcmVndWxhciBvYmplY3QuJ1xuICAgICk7XG5cbiAgICB2YXIgcHJvdG8gPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgdmFyIGF1dG9CaW5kUGFpcnMgPSBwcm90by5fX3JlYWN0QXV0b0JpbmRQYWlycztcblxuICAgIC8vIEJ5IGhhbmRsaW5nIG1peGlucyBiZWZvcmUgYW55IG90aGVyIHByb3BlcnRpZXMsIHdlIGVuc3VyZSB0aGUgc2FtZVxuICAgIC8vIGNoYWluaW5nIG9yZGVyIGlzIGFwcGxpZWQgdG8gbWV0aG9kcyB3aXRoIERFRklORV9NQU5ZIHBvbGljeSwgd2hldGhlclxuICAgIC8vIG1peGlucyBhcmUgbGlzdGVkIGJlZm9yZSBvciBhZnRlciB0aGVzZSBtZXRob2RzIGluIHRoZSBzcGVjLlxuICAgIGlmIChzcGVjLmhhc093blByb3BlcnR5KE1JWElOU19LRVkpKSB7XG4gICAgICBSRVNFUlZFRF9TUEVDX0tFWVMubWl4aW5zKENvbnN0cnVjdG9yLCBzcGVjLm1peGlucyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBzcGVjKSB7XG4gICAgICBpZiAoIXNwZWMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChuYW1lID09PSBNSVhJTlNfS0VZKSB7XG4gICAgICAgIC8vIFdlIGhhdmUgYWxyZWFkeSBoYW5kbGVkIG1peGlucyBpbiBhIHNwZWNpYWwgY2FzZSBhYm92ZS5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9wZXJ0eSA9IHNwZWNbbmFtZV07XG4gICAgICB2YXIgaXNBbHJlYWR5RGVmaW5lZCA9IHByb3RvLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgICAgdmFsaWRhdGVNZXRob2RPdmVycmlkZShpc0FscmVhZHlEZWZpbmVkLCBuYW1lKTtcblxuICAgICAgaWYgKFJFU0VSVkVEX1NQRUNfS0VZUy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBSRVNFUlZFRF9TUEVDX0tFWVNbbmFtZV0oQ29uc3RydWN0b3IsIHByb3BlcnR5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNldHVwIG1ldGhvZHMgb24gcHJvdG90eXBlOlxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIG1lbWJlciBtZXRob2RzIHNob3VsZCBub3QgYmUgYXV0b21hdGljYWxseSBib3VuZDpcbiAgICAgICAgLy8gMS4gRXhwZWN0ZWQgUmVhY3RDbGFzcyBtZXRob2RzIChpbiB0aGUgXCJpbnRlcmZhY2VcIikuXG4gICAgICAgIC8vIDIuIE92ZXJyaWRkZW4gbWV0aG9kcyAodGhhdCB3ZXJlIG1peGVkIGluKS5cbiAgICAgICAgdmFyIGlzUmVhY3RDbGFzc01ldGhvZCA9IFJlYWN0Q2xhc3NJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgICAgIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHByb3BlcnR5ID09PSAnZnVuY3Rpb24nO1xuICAgICAgICB2YXIgc2hvdWxkQXV0b0JpbmQgPVxuICAgICAgICAgIGlzRnVuY3Rpb24gJiZcbiAgICAgICAgICAhaXNSZWFjdENsYXNzTWV0aG9kICYmXG4gICAgICAgICAgIWlzQWxyZWFkeURlZmluZWQgJiZcbiAgICAgICAgICBzcGVjLmF1dG9iaW5kICE9PSBmYWxzZTtcblxuICAgICAgICBpZiAoc2hvdWxkQXV0b0JpbmQpIHtcbiAgICAgICAgICBhdXRvQmluZFBhaXJzLnB1c2gobmFtZSwgcHJvcGVydHkpO1xuICAgICAgICAgIHByb3RvW25hbWVdID0gcHJvcGVydHk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGlzQWxyZWFkeURlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciBzcGVjUG9saWN5ID0gUmVhY3RDbGFzc0ludGVyZmFjZVtuYW1lXTtcblxuICAgICAgICAgICAgLy8gVGhlc2UgY2FzZXMgc2hvdWxkIGFscmVhZHkgYmUgY2F1Z2h0IGJ5IHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGUuXG4gICAgICAgICAgICBfaW52YXJpYW50KFxuICAgICAgICAgICAgICBpc1JlYWN0Q2xhc3NNZXRob2QgJiZcbiAgICAgICAgICAgICAgICAoc3BlY1BvbGljeSA9PT0gJ0RFRklORV9NQU5ZX01FUkdFRCcgfHxcbiAgICAgICAgICAgICAgICAgIHNwZWNQb2xpY3kgPT09ICdERUZJTkVfTUFOWScpLFxuICAgICAgICAgICAgICAnUmVhY3RDbGFzczogVW5leHBlY3RlZCBzcGVjIHBvbGljeSAlcyBmb3Iga2V5ICVzICcgK1xuICAgICAgICAgICAgICAgICd3aGVuIG1peGluZyBpbiBjb21wb25lbnQgc3BlY3MuJyxcbiAgICAgICAgICAgICAgc3BlY1BvbGljeSxcbiAgICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgLy8gRm9yIG1ldGhvZHMgd2hpY2ggYXJlIGRlZmluZWQgbW9yZSB0aGFuIG9uY2UsIGNhbGwgdGhlIGV4aXN0aW5nXG4gICAgICAgICAgICAvLyBtZXRob2RzIGJlZm9yZSBjYWxsaW5nIHRoZSBuZXcgcHJvcGVydHksIG1lcmdpbmcgaWYgYXBwcm9wcmlhdGUuXG4gICAgICAgICAgICBpZiAoc3BlY1BvbGljeSA9PT0gJ0RFRklORV9NQU5ZX01FUkdFRCcpIHtcbiAgICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihwcm90b1tuYW1lXSwgcHJvcGVydHkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTlknKSB7XG4gICAgICAgICAgICAgIHByb3RvW25hbWVdID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHByb3RvW25hbWVdLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3RvW25hbWVdID0gcHJvcGVydHk7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAvLyBBZGQgdmVyYm9zZSBkaXNwbGF5TmFtZSB0byB0aGUgZnVuY3Rpb24sIHdoaWNoIGhlbHBzIHdoZW4gbG9va2luZ1xuICAgICAgICAgICAgICAvLyBhdCBwcm9maWxpbmcgdG9vbHMuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbicgJiYgc3BlYy5kaXNwbGF5TmFtZSkge1xuICAgICAgICAgICAgICAgIHByb3RvW25hbWVdLmRpc3BsYXlOYW1lID0gc3BlYy5kaXNwbGF5TmFtZSArICdfJyArIG5hbWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3RhdGljcykge1xuICAgIGlmICghc3RhdGljcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3RhdGljcykge1xuICAgICAgdmFyIHByb3BlcnR5ID0gc3RhdGljc1tuYW1lXTtcbiAgICAgIGlmICghc3RhdGljcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzUmVzZXJ2ZWQgPSBuYW1lIGluIFJFU0VSVkVEX1NQRUNfS0VZUztcbiAgICAgIF9pbnZhcmlhbnQoXG4gICAgICAgICFpc1Jlc2VydmVkLFxuICAgICAgICAnUmVhY3RDbGFzczogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBhIHJlc2VydmVkICcgK1xuICAgICAgICAgICdwcm9wZXJ0eSwgYCVzYCwgdGhhdCBzaG91bGRuXFwndCBiZSBvbiB0aGUgXCJzdGF0aWNzXCIga2V5LiBEZWZpbmUgaXQgJyArXG4gICAgICAgICAgJ2FzIGFuIGluc3RhbmNlIHByb3BlcnR5IGluc3RlYWQ7IGl0IHdpbGwgc3RpbGwgYmUgYWNjZXNzaWJsZSBvbiB0aGUgJyArXG4gICAgICAgICAgJ2NvbnN0cnVjdG9yLicsXG4gICAgICAgIG5hbWVcbiAgICAgICk7XG5cbiAgICAgIHZhciBpc0FscmVhZHlEZWZpbmVkID0gbmFtZSBpbiBDb25zdHJ1Y3RvcjtcbiAgICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICAgIHZhciBzcGVjUG9saWN5ID0gUmVhY3RDbGFzc1N0YXRpY0ludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShuYW1lKVxuICAgICAgICAgID8gUmVhY3RDbGFzc1N0YXRpY0ludGVyZmFjZVtuYW1lXVxuICAgICAgICAgIDogbnVsbDtcblxuICAgICAgICBfaW52YXJpYW50KFxuICAgICAgICAgIHNwZWNQb2xpY3kgPT09ICdERUZJTkVfTUFOWV9NRVJHRUQnLFxuICAgICAgICAgICdSZWFjdENsYXNzOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lICcgK1xuICAgICAgICAgICAgJ2Alc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlICcgK1xuICAgICAgICAgICAgJ2R1ZSB0byBhIG1peGluLicsXG4gICAgICAgICAgbmFtZVxuICAgICAgICApO1xuXG4gICAgICAgIENvbnN0cnVjdG9yW25hbWVdID0gY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24oQ29uc3RydWN0b3JbbmFtZV0sIHByb3BlcnR5KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIENvbnN0cnVjdG9yW25hbWVdID0gcHJvcGVydHk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlIHR3byBvYmplY3RzLCBidXQgdGhyb3cgaWYgYm90aCBjb250YWluIHRoZSBzYW1lIGtleS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9uZSBUaGUgZmlyc3Qgb2JqZWN0LCB3aGljaCBpcyBtdXRhdGVkLlxuICAgKiBAcGFyYW0ge29iamVjdH0gdHdvIFRoZSBzZWNvbmQgb2JqZWN0XG4gICAqIEByZXR1cm4ge29iamVjdH0gb25lIGFmdGVyIGl0IGhhcyBiZWVuIG11dGF0ZWQgdG8gY29udGFpbiBldmVyeXRoaW5nIGluIHR3by5cbiAgICovXG4gIGZ1bmN0aW9uIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMob25lLCB0d28pIHtcbiAgICBfaW52YXJpYW50KFxuICAgICAgb25lICYmIHR3byAmJiB0eXBlb2Ygb25lID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdHdvID09PSAnb2JqZWN0JyxcbiAgICAgICdtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKCk6IENhbm5vdCBtZXJnZSBub24tb2JqZWN0cy4nXG4gICAgKTtcblxuICAgIGZvciAodmFyIGtleSBpbiB0d28pIHtcbiAgICAgIGlmICh0d28uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBfaW52YXJpYW50KFxuICAgICAgICAgIG9uZVtrZXldID09PSB1bmRlZmluZWQsXG4gICAgICAgICAgJ21lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogJyArXG4gICAgICAgICAgICAnVHJpZWQgdG8gbWVyZ2UgdHdvIG9iamVjdHMgd2l0aCB0aGUgc2FtZSBrZXk6IGAlc2AuIFRoaXMgY29uZmxpY3QgJyArXG4gICAgICAgICAgICAnbWF5IGJlIGR1ZSB0byBhIG1peGluOyBpbiBwYXJ0aWN1bGFyLCB0aGlzIG1heSBiZSBjYXVzZWQgYnkgdHdvICcgK1xuICAgICAgICAgICAgJ2dldEluaXRpYWxTdGF0ZSgpIG9yIGdldERlZmF1bHRQcm9wcygpIG1ldGhvZHMgcmV0dXJuaW5nIG9iamVjdHMgJyArXG4gICAgICAgICAgICAnd2l0aCBjbGFzaGluZyBrZXlzLicsXG4gICAgICAgICAga2V5XG4gICAgICAgICk7XG4gICAgICAgIG9uZVtrZXldID0gdHdvW2tleV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvbmU7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0d28gZnVuY3Rpb25zIGFuZCBtZXJnZXMgdGhlaXIgcmV0dXJuIHZhbHVlcy5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gb25lIEZ1bmN0aW9uIHRvIGludm9rZSBmaXJzdC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gdHdvIEZ1bmN0aW9uIHRvIGludm9rZSBzZWNvbmQuXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBGdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHR3byBhcmd1bWVudCBmdW5jdGlvbnMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihvbmUsIHR3bykge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRSZXN1bHQoKSB7XG4gICAgICB2YXIgYSA9IG9uZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgdmFyIGIgPSB0d28uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmIChhID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgICB9IGVsc2UgaWYgKGIgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICAgIHZhciBjID0ge307XG4gICAgICBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKGMsIGEpO1xuICAgICAgbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhjLCBiKTtcbiAgICAgIHJldHVybiBjO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0d28gZnVuY3Rpb25zIGFuZCBpZ25vcmVzIHRoZWlyIHJldHVybiB2YWxlcy5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gb25lIEZ1bmN0aW9uIHRvIGludm9rZSBmaXJzdC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gdHdvIEZ1bmN0aW9uIHRvIGludm9rZSBzZWNvbmQuXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBGdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHR3byBhcmd1bWVudCBmdW5jdGlvbnMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ob25lLCB0d28pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xuICAgICAgb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0d28uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmRzIGEgbWV0aG9kIHRvIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnQgQ29tcG9uZW50IHdob3NlIG1ldGhvZCBpcyBnb2luZyB0byBiZSBib3VuZC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWV0aG9kIE1ldGhvZCB0byBiZSBib3VuZC5cbiAgICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBib3VuZCBtZXRob2QuXG4gICAqL1xuICBmdW5jdGlvbiBiaW5kQXV0b0JpbmRNZXRob2QoY29tcG9uZW50LCBtZXRob2QpIHtcbiAgICB2YXIgYm91bmRNZXRob2QgPSBtZXRob2QuYmluZChjb21wb25lbnQpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRDb250ZXh0ID0gY29tcG9uZW50O1xuICAgICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuICAgICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gbnVsbDtcbiAgICAgIHZhciBjb21wb25lbnROYW1lID0gY29tcG9uZW50LmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lO1xuICAgICAgdmFyIF9iaW5kID0gYm91bmRNZXRob2QuYmluZDtcbiAgICAgIGJvdW5kTWV0aG9kLmJpbmQgPSBmdW5jdGlvbihuZXdUaGlzKSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgdmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSxcbiAgICAgICAgICAgIF9rZXkgPSAxO1xuICAgICAgICAgIF9rZXkgPCBfbGVuO1xuICAgICAgICAgIF9rZXkrK1xuICAgICAgICApIHtcbiAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVzZXIgaXMgdHJ5aW5nIHRvIGJpbmQoKSBhbiBhdXRvYm91bmQgbWV0aG9kOyB3ZSBlZmZlY3RpdmVseSB3aWxsXG4gICAgICAgIC8vIGlnbm9yZSB0aGUgdmFsdWUgb2YgXCJ0aGlzXCIgdGhhdCB0aGUgdXNlciBpcyB0cnlpbmcgdG8gdXNlLCBzb1xuICAgICAgICAvLyBsZXQncyB3YXJuLlxuICAgICAgICBpZiAobmV3VGhpcyAhPT0gY29tcG9uZW50ICYmIG5ld1RoaXMgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZyhcbiAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICdiaW5kKCk6IFJlYWN0IGNvbXBvbmVudCBtZXRob2RzIG1heSBvbmx5IGJlIGJvdW5kIHRvIHRoZSAnICtcbiAgICAgICAgICAgICAgICAnY29tcG9uZW50IGluc3RhbmNlLiBTZWUgJXMnLFxuICAgICAgICAgICAgICBjb21wb25lbnROYW1lXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZyhcbiAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICdiaW5kKCk6IFlvdSBhcmUgYmluZGluZyBhIGNvbXBvbmVudCBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC4gJyArXG4gICAgICAgICAgICAgICAgJ1JlYWN0IGRvZXMgdGhpcyBmb3IgeW91IGF1dG9tYXRpY2FsbHkgaW4gYSBoaWdoLXBlcmZvcm1hbmNlICcgK1xuICAgICAgICAgICAgICAgICd3YXksIHNvIHlvdSBjYW4gc2FmZWx5IHJlbW92ZSB0aGlzIGNhbGwuIFNlZSAlcycsXG4gICAgICAgICAgICAgIGNvbXBvbmVudE5hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBib3VuZE1ldGhvZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVib3VuZE1ldGhvZCA9IF9iaW5kLmFwcGx5KGJvdW5kTWV0aG9kLCBhcmd1bWVudHMpO1xuICAgICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuICAgICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZEFyZ3VtZW50cyA9IGFyZ3M7XG4gICAgICAgIHJldHVybiByZWJvdW5kTWV0aG9kO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGJvdW5kTWV0aG9kO1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmRzIGFsbCBhdXRvLWJvdW5kIG1ldGhvZHMgaW4gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnQgQ29tcG9uZW50IHdob3NlIG1ldGhvZCBpcyBnb2luZyB0byBiZSBib3VuZC5cbiAgICovXG4gIGZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZHMoY29tcG9uZW50KSB7XG4gICAgdmFyIHBhaXJzID0gY29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZFBhaXJzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgIHZhciBhdXRvQmluZEtleSA9IHBhaXJzW2ldO1xuICAgICAgdmFyIG1ldGhvZCA9IHBhaXJzW2kgKyAxXTtcbiAgICAgIGNvbXBvbmVudFthdXRvQmluZEtleV0gPSBiaW5kQXV0b0JpbmRNZXRob2QoY29tcG9uZW50LCBtZXRob2QpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBJc01vdW50ZWRQcmVNaXhpbiA9IHtcbiAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9faXNNb3VudGVkID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIElzTW91bnRlZFBvc3RNaXhpbiA9IHtcbiAgICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9faXNNb3VudGVkID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgbW9yZSB0byB0aGUgUmVhY3RDbGFzcyBiYXNlIGNsYXNzLiBUaGVzZSBhcmUgYWxsIGxlZ2FjeSBmZWF0dXJlcyBhbmRcbiAgICogdGhlcmVmb3JlIG5vdCBhbHJlYWR5IHBhcnQgb2YgdGhlIG1vZGVybiBSZWFjdENvbXBvbmVudC5cbiAgICovXG4gIHZhciBSZWFjdENsYXNzTWl4aW4gPSB7XG4gICAgLyoqXG4gICAgICogVE9ETzogVGhpcyB3aWxsIGJlIGRlcHJlY2F0ZWQgYmVjYXVzZSBzdGF0ZSBzaG91bGQgYWx3YXlzIGtlZXAgYSBjb25zaXN0ZW50XG4gICAgICogdHlwZSBzaWduYXR1cmUgYW5kIHRoZSBvbmx5IHVzZSBjYXNlIGZvciB0aGlzLCBpcyB0byBhdm9pZCB0aGF0LlxuICAgICAqL1xuICAgIHJlcGxhY2VTdGF0ZTogZnVuY3Rpb24obmV3U3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZVJlcGxhY2VTdGF0ZSh0aGlzLCBuZXdTdGF0ZSwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgdGhpcyBjb21wb3NpdGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBtb3VudGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBmaW5hbFxuICAgICAqL1xuICAgIGlzTW91bnRlZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgIHRoaXMuX19kaWRXYXJuSXNNb3VudGVkLFxuICAgICAgICAgICclczogaXNNb3VudGVkIGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQsIG1ha2Ugc3VyZSB0byBjbGVhbiB1cCAnICtcbiAgICAgICAgICAgICdzdWJzY3JpcHRpb25zIGFuZCBwZW5kaW5nIHJlcXVlc3RzIGluIGNvbXBvbmVudFdpbGxVbm1vdW50IHRvICcgK1xuICAgICAgICAgICAgJ3ByZXZlbnQgbWVtb3J5IGxlYWtzLicsXG4gICAgICAgICAgKHRoaXMuY29uc3RydWN0b3IgJiYgdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSkgfHxcbiAgICAgICAgICAgIHRoaXMubmFtZSB8fFxuICAgICAgICAgICAgJ0NvbXBvbmVudCdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fX2RpZFdhcm5Jc01vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuICEhdGhpcy5fX2lzTW91bnRlZDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIFJlYWN0Q2xhc3NDb21wb25lbnQgPSBmdW5jdGlvbigpIHt9O1xuICBfYXNzaWduKFxuICAgIFJlYWN0Q2xhc3NDb21wb25lbnQucHJvdG90eXBlLFxuICAgIFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZSxcbiAgICBSZWFjdENsYXNzTWl4aW5cbiAgKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNvbXBvc2l0ZSBjb21wb25lbnQgY2xhc3MgZ2l2ZW4gYSBjbGFzcyBzcGVjaWZpY2F0aW9uLlxuICAgKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3QuY3JlYXRlY2xhc3NcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHNwZWMgQ2xhc3Mgc3BlY2lmaWNhdGlvbiAod2hpY2ggbXVzdCBkZWZpbmUgYHJlbmRlcmApLlxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gQ29tcG9uZW50IGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICAgKiBAcHVibGljXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVDbGFzcyhzcGVjKSB7XG4gICAgLy8gVG8ga2VlcCBvdXIgd2FybmluZ3MgbW9yZSB1bmRlcnN0YW5kYWJsZSwgd2UnbGwgdXNlIGEgbGl0dGxlIGhhY2sgaGVyZSB0b1xuICAgIC8vIGVuc3VyZSB0aGF0IENvbnN0cnVjdG9yLm5hbWUgIT09ICdDb25zdHJ1Y3RvcicuIFRoaXMgbWFrZXMgc3VyZSB3ZSBkb24ndFxuICAgIC8vIHVubmVjZXNzYXJpbHkgaWRlbnRpZnkgYSBjbGFzcyB3aXRob3V0IGRpc3BsYXlOYW1lIGFzICdDb25zdHJ1Y3RvcicuXG4gICAgdmFyIENvbnN0cnVjdG9yID0gaWRlbnRpdHkoZnVuY3Rpb24ocHJvcHMsIGNvbnRleHQsIHVwZGF0ZXIpIHtcbiAgICAgIC8vIFRoaXMgY29uc3RydWN0b3IgZ2V0cyBvdmVycmlkZGVuIGJ5IG1vY2tzLiBUaGUgYXJndW1lbnQgaXMgdXNlZFxuICAgICAgLy8gYnkgbW9ja3MgdG8gYXNzZXJ0IG9uIHdoYXQgZ2V0cyBtb3VudGVkLlxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgIHRoaXMgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcixcbiAgICAgICAgICAnU29tZXRoaW5nIGlzIGNhbGxpbmcgYSBSZWFjdCBjb21wb25lbnQgZGlyZWN0bHkuIFVzZSBhIGZhY3Rvcnkgb3IgJyArXG4gICAgICAgICAgICAnSlNYIGluc3RlYWQuIFNlZTogaHR0cHM6Ly9mYi5tZS9yZWFjdC1sZWdhY3lmYWN0b3J5J1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBXaXJlIHVwIGF1dG8tYmluZGluZ1xuICAgICAgaWYgKHRoaXMuX19yZWFjdEF1dG9CaW5kUGFpcnMubGVuZ3RoKSB7XG4gICAgICAgIGJpbmRBdXRvQmluZE1ldGhvZHModGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgICAgIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG5cbiAgICAgIHRoaXMuc3RhdGUgPSBudWxsO1xuXG4gICAgICAvLyBSZWFjdENsYXNzZXMgZG9lc24ndCBoYXZlIGNvbnN0cnVjdG9ycy4gSW5zdGVhZCwgdGhleSB1c2UgdGhlXG4gICAgICAvLyBnZXRJbml0aWFsU3RhdGUgYW5kIGNvbXBvbmVudFdpbGxNb3VudCBtZXRob2RzIGZvciBpbml0aWFsaXphdGlvbi5cblxuICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IHRoaXMuZ2V0SW5pdGlhbFN0YXRlID8gdGhpcy5nZXRJbml0aWFsU3RhdGUoKSA6IG51bGw7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAvLyBXZSBhbGxvdyBhdXRvLW1vY2tzIHRvIHByb2NlZWQgYXMgaWYgdGhleSdyZSByZXR1cm5pbmcgbnVsbC5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGluaXRpYWxTdGF0ZSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgdGhpcy5nZXRJbml0aWFsU3RhdGUuX2lzTW9ja0Z1bmN0aW9uXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgcHJvYmFibHkgYmFkIHByYWN0aWNlLiBDb25zaWRlciB3YXJuaW5nIGhlcmUgYW5kXG4gICAgICAgICAgLy8gZGVwcmVjYXRpbmcgdGhpcyBjb252ZW5pZW5jZS5cbiAgICAgICAgICBpbml0aWFsU3RhdGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfaW52YXJpYW50KFxuICAgICAgICB0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpLFxuICAgICAgICAnJXMuZ2V0SW5pdGlhbFN0YXRlKCk6IG11c3QgcmV0dXJuIGFuIG9iamVjdCBvciBudWxsJyxcbiAgICAgICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50J1xuICAgICAgKTtcblxuICAgICAgdGhpcy5zdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICB9KTtcbiAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBuZXcgUmVhY3RDbGFzc0NvbXBvbmVudCgpO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5fX3JlYWN0QXV0b0JpbmRQYWlycyA9IFtdO1xuXG4gICAgaW5qZWN0ZWRNaXhpbnMuZm9yRWFjaChtaXhTcGVjSW50b0NvbXBvbmVudC5iaW5kKG51bGwsIENvbnN0cnVjdG9yKSk7XG5cbiAgICBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3RvciwgSXNNb3VudGVkUHJlTWl4aW4pO1xuICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzcGVjKTtcbiAgICBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3RvciwgSXNNb3VudGVkUG9zdE1peGluKTtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIGRlZmF1bHRQcm9wcyBwcm9wZXJ0eSBhZnRlciBhbGwgbWl4aW5zIGhhdmUgYmVlbiBtZXJnZWQuXG4gICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgQ29uc3RydWN0b3IuZGVmYXVsdFByb3BzID0gQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKCk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSB0YWcgdG8gaW5kaWNhdGUgdGhhdCB0aGUgdXNlIG9mIHRoZXNlIG1ldGhvZCBuYW1lcyBpcyBvayxcbiAgICAgIC8vIHNpbmNlIGl0J3MgdXNlZCB3aXRoIGNyZWF0ZUNsYXNzLiBJZiBpdCdzIG5vdCwgdGhlbiBpdCdzIGxpa2VseSBhXG4gICAgICAvLyBtaXN0YWtlIHNvIHdlJ2xsIHdhcm4geW91IHRvIHVzZSB0aGUgc3RhdGljIHByb3BlcnR5LCBwcm9wZXJ0eVxuICAgICAgLy8gaW5pdGlhbGl6ZXIgb3IgY29uc3RydWN0b3IgcmVzcGVjdGl2ZWx5LlxuICAgICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgICBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQgPSB7fTtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0SW5pdGlhbFN0YXRlKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWQgPSB7fTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfaW52YXJpYW50KFxuICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlLnJlbmRlcixcbiAgICAgICdjcmVhdGVDbGFzcyguLi4pOiBDbGFzcyBzcGVjaWZpY2F0aW9uIG11c3QgaW1wbGVtZW50IGEgYHJlbmRlcmAgbWV0aG9kLidcbiAgICApO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm5pbmcoXG4gICAgICAgICFDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29tcG9uZW50U2hvdWxkVXBkYXRlLFxuICAgICAgICAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICtcbiAgICAgICAgICAnY29tcG9uZW50U2hvdWxkVXBkYXRlKCkuIERpZCB5b3UgbWVhbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKT8gJyArXG4gICAgICAgICAgJ1RoZSBuYW1lIGlzIHBocmFzZWQgYXMgYSBxdWVzdGlvbiBiZWNhdXNlIHRoZSBmdW5jdGlvbiBpcyAnICtcbiAgICAgICAgICAnZXhwZWN0ZWQgdG8gcmV0dXJuIGEgdmFsdWUuJyxcbiAgICAgICAgc3BlYy5kaXNwbGF5TmFtZSB8fCAnQSBjb21wb25lbnQnXG4gICAgICApO1xuICAgICAgd2FybmluZyhcbiAgICAgICAgIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzLFxuICAgICAgICAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICtcbiAgICAgICAgICAnY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcygpLiBEaWQgeW91IG1lYW4gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpPycsXG4gICAgICAgIHNwZWMuZGlzcGxheU5hbWUgfHwgJ0EgY29tcG9uZW50J1xuICAgICAgKTtcbiAgICAgIHdhcm5pbmcoXG4gICAgICAgICFDb25zdHJ1Y3Rvci5wcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMsXG4gICAgICAgICclcyBoYXMgYSBtZXRob2QgY2FsbGVkIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzKCkuICcgK1xuICAgICAgICAgICdEaWQgeW91IG1lYW4gVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKT8nLFxuICAgICAgICBzcGVjLmRpc3BsYXlOYW1lIHx8ICdBIGNvbXBvbmVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gUmVkdWNlIHRpbWUgc3BlbnQgZG9pbmcgbG9va3VwcyBieSBzZXR0aW5nIHRoZXNlIG9uIHRoZSBwcm90b3R5cGUuXG4gICAgZm9yICh2YXIgbWV0aG9kTmFtZSBpbiBSZWFjdENsYXNzSW50ZXJmYWNlKSB7XG4gICAgICBpZiAoIUNvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSkge1xuICAgICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVDbGFzcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9jcmVhdGUtcmVhY3QtY2xhc3MvZmFjdG9yeS5qcyIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTUgSmVkIFdhdHNvbi5cbiAgQmFzZWQgb24gY29kZSB0aGF0IGlzIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGNhblVzZURPTSA9ICEhKFxuXHRcdHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG5cdFx0d2luZG93LmRvY3VtZW50ICYmXG5cdFx0d2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcblx0KTtcblxuXHR2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cblx0XHRjYW5Vc2VET006IGNhblVzZURPTSxcblxuXHRcdGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG5cdFx0Y2FuVXNlRXZlbnRMaXN0ZW5lcnM6XG5cdFx0XHRjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuXHRcdGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuXG5cblx0fTtcblxuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdGRlZmluZShmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gRXhlY3V0aW9uRW52aXJvbm1lbnQ7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5FeGVjdXRpb25FbnZpcm9ubWVudCA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXHR9XG5cbn0oKSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2V4ZW52L2luZGV4LmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgX2h5cGhlblBhdHRlcm4gPSAvLSguKS9nO1xuXG4vKipcbiAqIENhbWVsY2FzZXMgYSBoeXBoZW5hdGVkIHN0cmluZywgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGNhbWVsaXplKCdiYWNrZ3JvdW5kLWNvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmRDb2xvclwiXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjYW1lbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKF9oeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbiAoXywgY2hhcmFjdGVyKSB7XG4gICAgcmV0dXJuIGNoYXJhY3Rlci50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbGl6ZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2ZianMvbGliL2NhbWVsaXplLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhbWVsaXplID0gcmVxdWlyZSgnLi9jYW1lbGl6ZScpO1xuXG52YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcblxuLyoqXG4gKiBDYW1lbGNhc2VzIGEgaHlwaGVuYXRlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGNhbWVsaXplU3R5bGVOYW1lKCdiYWNrZ3JvdW5kLWNvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmRDb2xvclwiXG4gKiAgID4gY2FtZWxpemVTdHlsZU5hbWUoJy1tb3otdHJhbnNpdGlvbicpXG4gKiAgIDwgXCJNb3pUcmFuc2l0aW9uXCJcbiAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnLW1zLXRyYW5zaXRpb24nKVxuICogICA8IFwibXNUcmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBBbmRpIFNtaXRoIHN1Z2dlc3RzXG4gKiAoaHR0cDovL3d3dy5hbmRpc21pdGguY29tL2Jsb2cvMjAxMi8wMi9tb2Rlcm5penItcHJlZml4ZWQvKSwgYW4gYC1tc2AgcHJlZml4XG4gKiBpcyBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjYW1lbGl6ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGNhbWVsaXplKHN0cmluZy5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbGl6ZVN0eWxlTmFtZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2ZianMvbGliL2NhbWVsaXplU3R5bGVOYW1lLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZSgnLi9pc1RleHROb2RlJyk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIERPTSBub2RlIGNvbnRhaW5zIG9yIGlzIGFub3RoZXIgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZSkge1xuICBpZiAoIW91dGVyTm9kZSB8fCAhaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShvdXRlck5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUoaW5uZXJOb2RlKSkge1xuICAgIHJldHVybiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSk7XG4gIH0gZWxzZSBpZiAoJ2NvbnRhaW5zJyBpbiBvdXRlck5vZGUpIHtcbiAgICByZXR1cm4gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSk7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2ZianMvbGliL2NvbnRhaW5zTm9kZS5qcyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIENvbnZlcnQgYXJyYXktbGlrZSBvYmplY3RzIHRvIGFycmF5cy5cbiAqXG4gKiBUaGlzIEFQSSBhc3N1bWVzIHRoZSBjYWxsZXIga25vd3MgdGhlIGNvbnRlbnRzIG9mIHRoZSBkYXRhIHR5cGUuIEZvciBsZXNzXG4gKiB3ZWxsIGRlZmluZWQgaW5wdXRzIHVzZSBjcmVhdGVBcnJheUZyb21NaXhlZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbnxmaWxlbGlzdH0gb2JqXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gdG9BcnJheShvYmopIHtcbiAgdmFyIGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cbiAgLy8gU29tZSBicm93c2VycyBidWlsdGluIG9iamVjdHMgY2FuIHJlcG9ydCB0eXBlb2YgJ2Z1bmN0aW9uJyAoZS5nLiBOb2RlTGlzdFxuICAvLyBpbiBvbGQgdmVyc2lvbnMgb2YgU2FmYXJpKS5cbiAgISghQXJyYXkuaXNBcnJheShvYmopICYmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogQXJyYXktbGlrZSBvYmplY3QgZXhwZWN0ZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgISh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogT2JqZWN0IG5lZWRzIGEgbGVuZ3RoIHByb3BlcnR5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICEobGVuZ3RoID09PSAwIHx8IGxlbmd0aCAtIDEgaW4gb2JqKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0b0FycmF5OiBPYmplY3Qgc2hvdWxkIGhhdmUga2V5cyBmb3IgaW5kaWNlcycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAhKHR5cGVvZiBvYmouY2FsbGVlICE9PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0b0FycmF5OiBPYmplY3QgY2FuXFwndCBiZSBgYXJndW1lbnRzYC4gVXNlIHJlc3QgcGFyYW1zICcgKyAnKGZ1bmN0aW9uKC4uLmFyZ3MpIHt9KSBvciBBcnJheS5mcm9tKCkgaW5zdGVhZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgLy8gT2xkIElFIGRvZXNuJ3QgZ2l2ZSBjb2xsZWN0aW9ucyBhY2Nlc3MgdG8gaGFzT3duUHJvcGVydHkuIEFzc3VtZSBpbnB1dHNcbiAgLy8gd2l0aG91dCBtZXRob2Qgd2lsbCB0aHJvdyBkdXJpbmcgdGhlIHNsaWNlIGNhbGwgYW5kIHNraXAgc3RyYWlnaHQgdG8gdGhlXG4gIC8vIGZhbGxiYWNrLlxuICBpZiAob2JqLmhhc093blByb3BlcnR5KSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvYmopO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElFIDwgOSBkb2VzIG5vdCBzdXBwb3J0IEFycmF5I3NsaWNlIG9uIGNvbGxlY3Rpb25zIG9iamVjdHNcbiAgICB9XG4gIH1cblxuICAvLyBGYWxsIGJhY2sgdG8gY29weWluZyBrZXkgYnkga2V5LiBUaGlzIGFzc3VtZXMgYWxsIGtleXMgaGF2ZSBhIHZhbHVlLFxuICAvLyBzbyB3aWxsIG5vdCBwcmVzZXJ2ZSBzcGFyc2VseSBwb3B1bGF0ZWQgaW5wdXRzLlxuICB2YXIgcmV0ID0gQXJyYXkobGVuZ3RoKTtcbiAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGxlbmd0aDsgaWkrKykge1xuICAgIHJldFtpaV0gPSBvYmpbaWldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8qKlxuICogUGVyZm9ybSBhIGhldXJpc3RpYyB0ZXN0IHRvIGRldGVybWluZSBpZiBhbiBvYmplY3QgaXMgXCJhcnJheS1saWtlXCIuXG4gKlxuICogICBBIG1vbmsgYXNrZWQgSm9zaHUsIGEgWmVuIG1hc3RlciwgXCJIYXMgYSBkb2cgQnVkZGhhIG5hdHVyZT9cIlxuICogICBKb3NodSByZXBsaWVkOiBcIk11LlwiXG4gKlxuICogVGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIGlmIGl0cyBhcmd1bWVudCBoYXMgXCJhcnJheSBuYXR1cmVcIjogaXQgcmV0dXJuc1xuICogdHJ1ZSBpZiB0aGUgYXJndW1lbnQgaXMgYW4gYWN0dWFsIGFycmF5LCBhbiBgYXJndW1lbnRzJyBvYmplY3QsIG9yIGFuXG4gKiBIVE1MQ29sbGVjdGlvbiAoZS5nLiBub2RlLmNoaWxkTm9kZXMgb3Igbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgpKS5cbiAqXG4gKiBJdCB3aWxsIHJldHVybiBmYWxzZSBmb3Igb3RoZXIgYXJyYXktbGlrZSBvYmplY3RzIGxpa2UgRmlsZWxpc3QuXG4gKlxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGhhc0FycmF5TmF0dXJlKG9iaikge1xuICByZXR1cm4gKFxuICAgIC8vIG5vdCBudWxsL2ZhbHNlXG4gICAgISFvYmogJiYgKFxuICAgIC8vIGFycmF5cyBhcmUgb2JqZWN0cywgTm9kZUxpc3RzIGFyZSBmdW5jdGlvbnMgaW4gU2FmYXJpXG4gICAgdHlwZW9mIG9iaiA9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09ICdmdW5jdGlvbicpICYmXG4gICAgLy8gcXVhY2tzIGxpa2UgYW4gYXJyYXlcbiAgICAnbGVuZ3RoJyBpbiBvYmogJiZcbiAgICAvLyBub3Qgd2luZG93XG4gICAgISgnc2V0SW50ZXJ2YWwnIGluIG9iaikgJiZcbiAgICAvLyBubyBET00gbm9kZSBzaG91bGQgYmUgY29uc2lkZXJlZCBhbiBhcnJheS1saWtlXG4gICAgLy8gYSAnc2VsZWN0JyBlbGVtZW50IGhhcyAnbGVuZ3RoJyBhbmQgJ2l0ZW0nIHByb3BlcnRpZXMgb24gSUU4XG4gICAgdHlwZW9mIG9iai5ub2RlVHlwZSAhPSAnbnVtYmVyJyAmJiAoXG4gICAgLy8gYSByZWFsIGFycmF5XG4gICAgQXJyYXkuaXNBcnJheShvYmopIHx8XG4gICAgLy8gYXJndW1lbnRzXG4gICAgJ2NhbGxlZScgaW4gb2JqIHx8XG4gICAgLy8gSFRNTENvbGxlY3Rpb24vTm9kZUxpc3RcbiAgICAnaXRlbScgaW4gb2JqKVxuICApO1xufVxuXG4vKipcbiAqIEVuc3VyZSB0aGF0IHRoZSBhcmd1bWVudCBpcyBhbiBhcnJheSBieSB3cmFwcGluZyBpdCBpbiBhbiBhcnJheSBpZiBpdCBpcyBub3QuXG4gKiBDcmVhdGVzIGEgY29weSBvZiB0aGUgYXJndW1lbnQgaWYgaXQgaXMgYWxyZWFkeSBhbiBhcnJheS5cbiAqXG4gKiBUaGlzIGlzIG1vc3RseSB1c2VmdWwgaWRpb21hdGljYWxseTpcbiAqXG4gKiAgIHZhciBjcmVhdGVBcnJheUZyb21NaXhlZCA9IHJlcXVpcmUoJ2NyZWF0ZUFycmF5RnJvbU1peGVkJyk7XG4gKlxuICogICBmdW5jdGlvbiB0YWtlc09uZU9yTW9yZVRoaW5ncyh0aGluZ3MpIHtcbiAqICAgICB0aGluZ3MgPSBjcmVhdGVBcnJheUZyb21NaXhlZCh0aGluZ3MpO1xuICogICAgIC4uLlxuICogICB9XG4gKlxuICogVGhpcyBhbGxvd3MgeW91IHRvIHRyZWF0IGB0aGluZ3MnIGFzIGFuIGFycmF5LCBidXQgYWNjZXB0IHNjYWxhcnMgaW4gdGhlIEFQSS5cbiAqXG4gKiBJZiB5b3UgbmVlZCB0byBjb252ZXJ0IGFuIGFycmF5LWxpa2Ugb2JqZWN0LCBsaWtlIGBhcmd1bWVudHNgLCBpbnRvIGFuIGFycmF5XG4gKiB1c2UgdG9BcnJheSBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXJyYXlGcm9tTWl4ZWQob2JqKSB7XG4gIGlmICghaGFzQXJyYXlOYXR1cmUob2JqKSkge1xuICAgIHJldHVybiBbb2JqXTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICByZXR1cm4gb2JqLnNsaWNlKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRvQXJyYXkob2JqKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUFycmF5RnJvbU1peGVkO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZmJqcy9saWIvY3JlYXRlQXJyYXlGcm9tTWl4ZWQuanMiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIGZiLXd3dy91bnNhZmUtaHRtbCovXG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIGNyZWF0ZUFycmF5RnJvbU1peGVkID0gcmVxdWlyZSgnLi9jcmVhdGVBcnJheUZyb21NaXhlZCcpO1xudmFyIGdldE1hcmt1cFdyYXAgPSByZXF1aXJlKCcuL2dldE1hcmt1cFdyYXAnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIER1bW15IGNvbnRhaW5lciB1c2VkIHRvIHJlbmRlciBhbGwgbWFya3VwLlxuICovXG52YXIgZHVtbXlOb2RlID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuXG4vKipcbiAqIFBhdHRlcm4gdXNlZCBieSBgZ2V0Tm9kZU5hbWVgLlxuICovXG52YXIgbm9kZU5hbWVQYXR0ZXJuID0gL15cXHMqPChcXHcrKS87XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIGBub2RlTmFtZWAgb2YgdGhlIGZpcnN0IGVsZW1lbnQgaW4gYSBzdHJpbmcgb2YgbWFya3VwLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgU3RyaW5nIG9mIG1hcmt1cC5cbiAqIEByZXR1cm4gez9zdHJpbmd9IE5vZGUgbmFtZSBvZiB0aGUgc3VwcGxpZWQgbWFya3VwLlxuICovXG5mdW5jdGlvbiBnZXROb2RlTmFtZShtYXJrdXApIHtcbiAgdmFyIG5vZGVOYW1lTWF0Y2ggPSBtYXJrdXAubWF0Y2gobm9kZU5hbWVQYXR0ZXJuKTtcbiAgcmV0dXJuIG5vZGVOYW1lTWF0Y2ggJiYgbm9kZU5hbWVNYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbm9kZXMgcmVuZGVyZWQgZnJvbSB0aGUgc3VwcGxpZWQgbWFya3VwLiBUaGVcbiAqIG9wdGlvbmFsbHkgc3VwcGxpZWQgYGhhbmRsZVNjcmlwdGAgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIG9uY2UgZm9yIGVhY2hcbiAqIDxzY3JpcHQ+IGVsZW1lbnQgdGhhdCBpcyByZW5kZXJlZC4gSWYgbm8gYGhhbmRsZVNjcmlwdGAgZnVuY3Rpb24gaXMgc3VwcGxpZWQsXG4gKiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGlmIGFueSA8c2NyaXB0PiBlbGVtZW50cyBhcmUgcmVuZGVyZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBBIHN0cmluZyBvZiB2YWxpZCBIVE1MIG1hcmt1cC5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBoYW5kbGVTY3JpcHQgSW52b2tlZCBvbmNlIGZvciBlYWNoIHJlbmRlcmVkIDxzY3JpcHQ+LlxuICogQHJldHVybiB7YXJyYXk8RE9NRWxlbWVudHxET01UZXh0Tm9kZT59IEFuIGFycmF5IG9mIHJlbmRlcmVkIG5vZGVzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAobWFya3VwLCBoYW5kbGVTY3JpcHQpIHtcbiAgdmFyIG5vZGUgPSBkdW1teU5vZGU7XG4gICEhIWR1bW15Tm9kZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdjcmVhdGVOb2Rlc0Zyb21NYXJrdXAgZHVtbXkgbm90IGluaXRpYWxpemVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgbm9kZU5hbWUgPSBnZXROb2RlTmFtZShtYXJrdXApO1xuXG4gIHZhciB3cmFwID0gbm9kZU5hbWUgJiYgZ2V0TWFya3VwV3JhcChub2RlTmFtZSk7XG4gIGlmICh3cmFwKSB7XG4gICAgbm9kZS5pbm5lckhUTUwgPSB3cmFwWzFdICsgbWFya3VwICsgd3JhcFsyXTtcblxuICAgIHZhciB3cmFwRGVwdGggPSB3cmFwWzBdO1xuICAgIHdoaWxlICh3cmFwRGVwdGgtLSkge1xuICAgICAgbm9kZSA9IG5vZGUubGFzdENoaWxkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBub2RlLmlubmVySFRNTCA9IG1hcmt1cDtcbiAgfVxuXG4gIHZhciBzY3JpcHRzID0gbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XG4gIGlmIChzY3JpcHRzLmxlbmd0aCkge1xuICAgICFoYW5kbGVTY3JpcHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnY3JlYXRlTm9kZXNGcm9tTWFya3VwKC4uLik6IFVuZXhwZWN0ZWQgPHNjcmlwdD4gZWxlbWVudCByZW5kZXJlZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgY3JlYXRlQXJyYXlGcm9tTWl4ZWQoc2NyaXB0cykuZm9yRWFjaChoYW5kbGVTY3JpcHQpO1xuICB9XG5cbiAgdmFyIG5vZGVzID0gQXJyYXkuZnJvbShub2RlLmNoaWxkTm9kZXMpO1xuICB3aGlsZSAobm9kZS5sYXN0Q2hpbGQpIHtcbiAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUubGFzdENoaWxkKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZmJqcy9saWIvY3JlYXRlTm9kZXNGcm9tTWFya3VwLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIGZiLXd3dy91bnNhZmUtaHRtbCAqL1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIER1bW15IGNvbnRhaW5lciB1c2VkIHRvIGRldGVjdCB3aGljaCB3cmFwcyBhcmUgbmVjZXNzYXJ5LlxuICovXG52YXIgZHVtbXlOb2RlID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuXG4vKipcbiAqIFNvbWUgYnJvd3NlcnMgY2Fubm90IHVzZSBgaW5uZXJIVE1MYCB0byByZW5kZXIgY2VydGFpbiBlbGVtZW50cyBzdGFuZGFsb25lLFxuICogc28gd2Ugd3JhcCB0aGVtLCByZW5kZXIgdGhlIHdyYXBwZWQgbm9kZXMsIHRoZW4gZXh0cmFjdCB0aGUgZGVzaXJlZCBub2RlLlxuICpcbiAqIEluIElFOCwgY2VydGFpbiBlbGVtZW50cyBjYW5ub3QgcmVuZGVyIGFsb25lLCBzbyB3cmFwIGFsbCBlbGVtZW50cyAoJyonKS5cbiAqL1xuXG52YXIgc2hvdWxkV3JhcCA9IHt9O1xuXG52YXIgc2VsZWN0V3JhcCA9IFsxLCAnPHNlbGVjdCBtdWx0aXBsZT1cInRydWVcIj4nLCAnPC9zZWxlY3Q+J107XG52YXIgdGFibGVXcmFwID0gWzEsICc8dGFibGU+JywgJzwvdGFibGU+J107XG52YXIgdHJXcmFwID0gWzMsICc8dGFibGU+PHRib2R5Pjx0cj4nLCAnPC90cj48L3Rib2R5PjwvdGFibGU+J107XG5cbnZhciBzdmdXcmFwID0gWzEsICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj4nLCAnPC9zdmc+J107XG5cbnZhciBtYXJrdXBXcmFwID0ge1xuICAnKic6IFsxLCAnPzxkaXY+JywgJzwvZGl2PiddLFxuXG4gICdhcmVhJzogWzEsICc8bWFwPicsICc8L21hcD4nXSxcbiAgJ2NvbCc6IFsyLCAnPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAnbGVnZW5kJzogWzEsICc8ZmllbGRzZXQ+JywgJzwvZmllbGRzZXQ+J10sXG4gICdwYXJhbSc6IFsxLCAnPG9iamVjdD4nLCAnPC9vYmplY3Q+J10sXG4gICd0cic6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLFxuXG4gICdvcHRncm91cCc6IHNlbGVjdFdyYXAsXG4gICdvcHRpb24nOiBzZWxlY3RXcmFwLFxuXG4gICdjYXB0aW9uJzogdGFibGVXcmFwLFxuICAnY29sZ3JvdXAnOiB0YWJsZVdyYXAsXG4gICd0Ym9keSc6IHRhYmxlV3JhcCxcbiAgJ3Rmb290JzogdGFibGVXcmFwLFxuICAndGhlYWQnOiB0YWJsZVdyYXAsXG5cbiAgJ3RkJzogdHJXcmFwLFxuICAndGgnOiB0cldyYXBcbn07XG5cbi8vIEluaXRpYWxpemUgdGhlIFNWRyBlbGVtZW50cyBzaW5jZSB3ZSBrbm93IHRoZXknbGwgYWx3YXlzIG5lZWQgdG8gYmUgd3JhcHBlZFxuLy8gY29uc2lzdGVudGx5LiBJZiB0aGV5IGFyZSBjcmVhdGVkIGluc2lkZSBhIDxkaXY+IHRoZXkgd2lsbCBiZSBpbml0aWFsaXplZCBpblxuLy8gdGhlIHdyb25nIG5hbWVzcGFjZSAoYW5kIHdpbGwgbm90IGRpc3BsYXkpLlxudmFyIHN2Z0VsZW1lbnRzID0gWydjaXJjbGUnLCAnY2xpcFBhdGgnLCAnZGVmcycsICdlbGxpcHNlJywgJ2cnLCAnaW1hZ2UnLCAnbGluZScsICdsaW5lYXJHcmFkaWVudCcsICdtYXNrJywgJ3BhdGgnLCAncGF0dGVybicsICdwb2x5Z29uJywgJ3BvbHlsaW5lJywgJ3JhZGlhbEdyYWRpZW50JywgJ3JlY3QnLCAnc3RvcCcsICd0ZXh0JywgJ3RzcGFuJ107XG5zdmdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlTmFtZSkge1xuICBtYXJrdXBXcmFwW25vZGVOYW1lXSA9IHN2Z1dyYXA7XG4gIHNob3VsZFdyYXBbbm9kZU5hbWVdID0gdHJ1ZTtcbn0pO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcmt1cCB3cmFwIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBzdXBwbGllZCBgbm9kZU5hbWVgLlxuICpcbiAqIE5PVEU6IFRoaXMgbGF6aWx5IGRldGVjdHMgd2hpY2ggd3JhcHMgYXJlIG5lY2Vzc2FyeSBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbm9kZU5hbWUgTG93ZXJjYXNlIGBub2RlTmFtZWAuXG4gKiBAcmV0dXJuIHs/YXJyYXl9IE1hcmt1cCB3cmFwIGNvbmZpZ3VyYXRpb24sIGlmIGFwcGxpY2FibGUuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcmt1cFdyYXAobm9kZU5hbWUpIHtcbiAgISEhZHVtbXlOb2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ01hcmt1cCB3cmFwcGluZyBub2RlIG5vdCBpbml0aWFsaXplZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgaWYgKCFtYXJrdXBXcmFwLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSkge1xuICAgIG5vZGVOYW1lID0gJyonO1xuICB9XG4gIGlmICghc2hvdWxkV3JhcC5oYXNPd25Qcm9wZXJ0eShub2RlTmFtZSkpIHtcbiAgICBpZiAobm9kZU5hbWUgPT09ICcqJykge1xuICAgICAgZHVtbXlOb2RlLmlubmVySFRNTCA9ICc8bGluayAvPic7XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1bW15Tm9kZS5pbm5lckhUTUwgPSAnPCcgKyBub2RlTmFtZSArICc+PC8nICsgbm9kZU5hbWUgKyAnPic7XG4gICAgfVxuICAgIHNob3VsZFdyYXBbbm9kZU5hbWVdID0gIWR1bW15Tm9kZS5maXJzdENoaWxkO1xuICB9XG4gIHJldHVybiBzaG91bGRXcmFwW25vZGVOYW1lXSA/IG1hcmt1cFdyYXBbbm9kZU5hbWVdIDogbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXJrdXBXcmFwO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZmJqcy9saWIvZ2V0TWFya3VwV3JhcC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBzdXBwbGllZCBlbGVtZW50IG9yIHdpbmRvdy5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlcyBhcmUgdW5ib3VuZGVkLCB1bmxpa2UgYGdldFNjcm9sbFBvc2l0aW9uYC4gVGhpcyBtZWFucyB0aGV5XG4gKiBtYXkgYmUgbmVnYXRpdmUgb3IgZXhjZWVkIHRoZSBlbGVtZW50IGJvdW5kYXJpZXMgKHdoaWNoIGlzIHBvc3NpYmxlIHVzaW5nXG4gKiBpbmVydGlhbCBzY3JvbGxpbmcpLlxuICpcbiAqIEBwYXJhbSB7RE9NV2luZG93fERPTUVsZW1lbnR9IHNjcm9sbGFibGVcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwIHdpdGggYHhgIGFuZCBgeWAga2V5cy5cbiAqL1xuXG5mdW5jdGlvbiBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbihzY3JvbGxhYmxlKSB7XG4gIGlmIChzY3JvbGxhYmxlLldpbmRvdyAmJiBzY3JvbGxhYmxlIGluc3RhbmNlb2Ygc2Nyb2xsYWJsZS5XaW5kb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogc2Nyb2xsYWJsZS5wYWdlWE9mZnNldCB8fCBzY3JvbGxhYmxlLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgICAgeTogc2Nyb2xsYWJsZS5wYWdlWU9mZnNldCB8fCBzY3JvbGxhYmxlLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3BcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogc2Nyb2xsYWJsZS5zY3JvbGxMZWZ0LFxuICAgIHk6IHNjcm9sbGFibGUuc2Nyb2xsVG9wXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb247XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9mYmpzL2xpYi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbi5qcyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBfdXBwZXJjYXNlUGF0dGVybiA9IC8oW0EtWl0pL2c7XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKlxuICogRm9yIENTUyBzdHlsZSBuYW1lcywgdXNlIGBoeXBoZW5hdGVTdHlsZU5hbWVgIGluc3RlYWQgd2hpY2ggd29ya3MgcHJvcGVybHlcbiAqIHdpdGggYWxsIHZlbmRvciBwcmVmaXhlcywgaW5jbHVkaW5nIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShfdXBwZXJjYXNlUGF0dGVybiwgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZmJqcy9saWIvaHlwaGVuYXRlLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGh5cGhlbmF0ZSA9IHJlcXVpcmUoJy4vaHlwaGVuYXRlJyk7XG5cbnZhciBtc1BhdHRlcm4gPSAvXm1zLS87XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ2JhY2tncm91bmRDb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kLWNvbG9yXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ01velRyYW5zaXRpb24nKVxuICogICA8IFwiLW1vei10cmFuc2l0aW9uXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ21zVHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbXMtdHJhbnNpdGlvblwiXG4gKlxuICogQXMgTW9kZXJuaXpyIHN1Z2dlc3RzIChodHRwOi8vbW9kZXJuaXpyLmNvbS9kb2NzLyNwcmVmaXhlZCksIGFuIGBtc2AgcHJlZml4XG4gKiBpcyBjb252ZXJ0ZWQgdG8gYC1tcy1gLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gaHlwaGVuYXRlKHN0cmluZykucmVwbGFjZShtc1BhdHRlcm4sICctbXMtJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlU3R5bGVOYW1lO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZmJqcy9saWIvaHlwaGVuYXRlU3R5bGVOYW1lLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBpc05vZGUob2JqZWN0KSB7XG4gIHZhciBkb2MgPSBvYmplY3QgPyBvYmplY3Qub3duZXJEb2N1bWVudCB8fCBvYmplY3QgOiBkb2N1bWVudDtcbiAgdmFyIGRlZmF1bHRWaWV3ID0gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgcmV0dXJuICEhKG9iamVjdCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9mYmpzL2xpYi9pc05vZGUuanMiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9pc05vZGUnKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNZW1vaXplcyB0aGUgcmV0dXJuIHZhbHVlIG9mIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIG9uZSBzdHJpbmcgYXJndW1lbnQuXG4gKi9cblxuZnVuY3Rpb24gbWVtb2l6ZVN0cmluZ09ubHkoY2FsbGJhY2spIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgaWYgKCFjYWNoZS5oYXNPd25Qcm9wZXJ0eShzdHJpbmcpKSB7XG4gICAgICBjYWNoZVtzdHJpbmddID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzdHJpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbc3RyaW5nXTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplU3RyaW5nT25seTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2ZianMvbGliL21lbW9pemVTdHJpbmdPbmx5LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgcGVyZm9ybWFuY2U7XG5cbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2UgfHwgd2luZG93Lm1zUGVyZm9ybWFuY2UgfHwgd2luZG93LndlYmtpdFBlcmZvcm1hbmNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBlcmZvcm1hbmNlIHx8IHt9O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZmJqcy9saWIvcGVyZm9ybWFuY2UuanMiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgcGVyZm9ybWFuY2UgPSByZXF1aXJlKCcuL3BlcmZvcm1hbmNlJyk7XG5cbnZhciBwZXJmb3JtYW5jZU5vdztcblxuLyoqXG4gKiBEZXRlY3QgaWYgd2UgY2FuIHVzZSBgd2luZG93LnBlcmZvcm1hbmNlLm5vdygpYCBhbmQgZ3JhY2VmdWxseSBmYWxsYmFjayB0b1xuICogYERhdGUubm93KClgIGlmIGl0IGRvZXNuJ3QgZXhpc3QuIFdlIG5lZWQgdG8gc3VwcG9ydCBGaXJlZm94IDwgMTUgZm9yIG5vd1xuICogYmVjYXVzZSBvZiBGYWNlYm9vaydzIHRlc3RpbmcgaW5mcmFzdHJ1Y3R1cmUuXG4gKi9cbmlmIChwZXJmb3JtYW5jZS5ub3cpIHtcbiAgcGVyZm9ybWFuY2VOb3cgPSBmdW5jdGlvbiBwZXJmb3JtYW5jZU5vdygpIHtcbiAgICByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7XG4gIH07XG59IGVsc2Uge1xuICBwZXJmb3JtYW5jZU5vdyA9IGZ1bmN0aW9uIHBlcmZvcm1hbmNlTm93KCkge1xuICAgIHJldHVybiBEYXRlLm5vdygpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBlcmZvcm1hbmNlTm93O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZmJqcy9saWIvcGVyZm9ybWFuY2VOb3cuanMiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgICBtaXhpbnM6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgIG5hbWU6IHRydWUsXG4gICAgbGVuZ3RoOiB0cnVlLFxuICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICBjYWxsZXI6IHRydWUsXG4gICAgY2FsbGVlOiB0cnVlLFxuICAgIGFyZ3VtZW50czogdHJ1ZSxcbiAgICBhcml0eTogdHJ1ZVxufTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YgJiYgZ2V0UHJvdG90eXBlT2YoT2JqZWN0KTtcblxuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykgeyAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICBpZiAoIVJFQUNUX1NUQVRJQ1Nba2V5XSAmJiAhS05PV05fU1RBVElDU1trZXldICYmICghYmxhY2tsaXN0IHx8ICFibGFja2xpc3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG4gICAgICAgICAgICAgICAgdHJ5IHsgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG4vLyBzcGVjaWFsIGZsZXhib3ggc3BlY2lmaWNhdGlvbnNcblxuXG52YXIgX3ByZWZpeEFsbDIgPSByZXF1aXJlKCcuL3N0YXRpYy9wcmVmaXhBbGwnKTtcblxudmFyIF9wcmVmaXhBbGwzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJlZml4QWxsMik7XG5cbnZhciBfZ2V0QnJvd3NlckluZm9ybWF0aW9uID0gcmVxdWlyZSgnLi91dGlscy9nZXRCcm93c2VySW5mb3JtYXRpb24nKTtcblxudmFyIF9nZXRCcm93c2VySW5mb3JtYXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0QnJvd3NlckluZm9ybWF0aW9uKTtcblxudmFyIF9nZXRQcmVmaXhlZEtleWZyYW1lcyA9IHJlcXVpcmUoJy4vdXRpbHMvZ2V0UHJlZml4ZWRLZXlmcmFtZXMnKTtcblxudmFyIF9nZXRQcmVmaXhlZEtleWZyYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcmVmaXhlZEtleWZyYW1lcyk7XG5cbnZhciBfY2FwaXRhbGl6ZVN0cmluZyA9IHJlcXVpcmUoJy4vdXRpbHMvY2FwaXRhbGl6ZVN0cmluZycpO1xuXG52YXIgX2NhcGl0YWxpemVTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FwaXRhbGl6ZVN0cmluZyk7XG5cbnZhciBfc29ydFByZWZpeGVkU3R5bGUgPSByZXF1aXJlKCcuL3V0aWxzL3NvcnRQcmVmaXhlZFN0eWxlJyk7XG5cbnZhciBfc29ydFByZWZpeGVkU3R5bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc29ydFByZWZpeGVkU3R5bGUpO1xuXG52YXIgX3ByZWZpeFByb3BzID0gcmVxdWlyZSgnLi9wcmVmaXhQcm9wcycpO1xuXG52YXIgX3ByZWZpeFByb3BzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ByZWZpeFByb3BzKTtcblxudmFyIF9wb3NpdGlvbiA9IHJlcXVpcmUoJy4vcGx1Z2lucy9wb3NpdGlvbicpO1xuXG52YXIgX3Bvc2l0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc2l0aW9uKTtcblxudmFyIF9jYWxjID0gcmVxdWlyZSgnLi9wbHVnaW5zL2NhbGMnKTtcblxudmFyIF9jYWxjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhbGMpO1xuXG52YXIgX3pvb21DdXJzb3IgPSByZXF1aXJlKCcuL3BsdWdpbnMvem9vbUN1cnNvcicpO1xuXG52YXIgX3pvb21DdXJzb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfem9vbUN1cnNvcik7XG5cbnZhciBfZ3JhYkN1cnNvciA9IHJlcXVpcmUoJy4vcGx1Z2lucy9ncmFiQ3Vyc29yJyk7XG5cbnZhciBfZ3JhYkN1cnNvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ncmFiQ3Vyc29yKTtcblxudmFyIF9mbGV4ID0gcmVxdWlyZSgnLi9wbHVnaW5zL2ZsZXgnKTtcblxudmFyIF9mbGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZsZXgpO1xuXG52YXIgX3NpemluZyA9IHJlcXVpcmUoJy4vcGx1Z2lucy9zaXppbmcnKTtcblxudmFyIF9zaXppbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2l6aW5nKTtcblxudmFyIF9ncmFkaWVudCA9IHJlcXVpcmUoJy4vcGx1Z2lucy9ncmFkaWVudCcpO1xuXG52YXIgX2dyYWRpZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dyYWRpZW50KTtcblxudmFyIF90cmFuc2l0aW9uID0gcmVxdWlyZSgnLi9wbHVnaW5zL3RyYW5zaXRpb24nKTtcblxudmFyIF90cmFuc2l0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYW5zaXRpb24pO1xuXG52YXIgX2ZsZXhib3hJRSA9IHJlcXVpcmUoJy4vcGx1Z2lucy9mbGV4Ym94SUUnKTtcblxudmFyIF9mbGV4Ym94SUUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmxleGJveElFKTtcblxudmFyIF9mbGV4Ym94T2xkID0gcmVxdWlyZSgnLi9wbHVnaW5zL2ZsZXhib3hPbGQnKTtcblxudmFyIF9mbGV4Ym94T2xkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZsZXhib3hPbGQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgcGx1Z2lucyA9IFtfcG9zaXRpb24yLmRlZmF1bHQsIF9jYWxjMi5kZWZhdWx0LCBfem9vbUN1cnNvcjIuZGVmYXVsdCwgX2dyYWJDdXJzb3IyLmRlZmF1bHQsIF9zaXppbmcyLmRlZmF1bHQsIF9ncmFkaWVudDIuZGVmYXVsdCwgX3RyYW5zaXRpb24yLmRlZmF1bHQsIF9mbGV4Ym94SUUyLmRlZmF1bHQsIF9mbGV4Ym94T2xkMi5kZWZhdWx0LFxuLy8gdGhpcyBtdXN0IGJlIHJ1biBBRlRFUiB0aGUgZmxleGJveCBzcGVjc1xuX2ZsZXgyLmRlZmF1bHRdO1xuXG52YXIgUHJlZml4ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBJbnN0YW50aWFudGUgYSBuZXcgcHJlZml4ZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJBZ2VudCAtIHVzZXJBZ2VudCB0byBnYXRoZXIgcHJlZml4IGluZm9ybWF0aW9uIGFjY29yZGluZyB0byBjYW5pdXNlLmNvbVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2VlcFVucHJlZml4ZWQgLSBrZWVwcyB1bnByZWZpeGVkIHByb3BlcnRpZXMgYW5kIHZhbHVlc1xuICAgKi9cblxuICBmdW5jdGlvbiBQcmVmaXhlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcmVmaXhlcik7XG5cbiAgICB2YXIgZGVmYXVsdFVzZXJBZ2VudCA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnID8gbmF2aWdhdG9yLnVzZXJBZ2VudCA6IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuX3VzZXJBZ2VudCA9IG9wdGlvbnMudXNlckFnZW50IHx8IGRlZmF1bHRVc2VyQWdlbnQ7XG4gICAgdGhpcy5fa2VlcFVucHJlZml4ZWQgPSBvcHRpb25zLmtlZXBVbnByZWZpeGVkIHx8IGZhbHNlO1xuXG4gICAgdGhpcy5fYnJvd3NlckluZm8gPSAoMCwgX2dldEJyb3dzZXJJbmZvcm1hdGlvbjIuZGVmYXVsdCkodGhpcy5fdXNlckFnZW50KTtcblxuICAgIC8vIENoZWNrcyBpZiB0aGUgdXNlckFnZW50IHdhcyByZXNvbHZlZCBjb3JyZWN0bHlcbiAgICBpZiAodGhpcy5fYnJvd3NlckluZm8gJiYgdGhpcy5fYnJvd3NlckluZm8ucHJlZml4KSB7XG4gICAgICAvLyBzZXQgYWRkaXRpb25hbCBwcmVmaXggaW5mb3JtYXRpb25cbiAgICAgIHRoaXMuY3NzUHJlZml4ID0gdGhpcy5fYnJvd3NlckluZm8ucHJlZml4LmNzcztcbiAgICAgIHRoaXMuanNQcmVmaXggPSB0aGlzLl9icm93c2VySW5mby5wcmVmaXguaW5saW5lO1xuICAgICAgdGhpcy5wcmVmaXhlZEtleWZyYW1lcyA9ICgwLCBfZ2V0UHJlZml4ZWRLZXlmcmFtZXMyLmRlZmF1bHQpKHRoaXMuX2Jyb3dzZXJJbmZvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fdXNlUHJlZml4QWxsRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBkYXRhID0gdGhpcy5fYnJvd3NlckluZm8uYnJvd3NlciAmJiBfcHJlZml4UHJvcHMyLmRlZmF1bHRbdGhpcy5fYnJvd3NlckluZm8uYnJvd3Nlcl07XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHRoaXMuX3JlcXVpcmVzUHJlZml4ID0gT2JqZWN0LmtleXMoZGF0YSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIGRhdGFba2V5XSA+PSBfdGhpcy5fYnJvd3NlckluZm8udmVyc2lvbjtcbiAgICAgIH0pLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBuYW1lKSB7XG4gICAgICAgIHJlc3VsdFtuYW1lXSA9IHRydWU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9LCB7fSk7XG4gICAgICB0aGlzLl9oYXNQcm9wc1JlcXVpcmluZ1ByZWZpeCA9IE9iamVjdC5rZXlzKHRoaXMuX3JlcXVpcmVzUHJlZml4KS5sZW5ndGggPiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl91c2VQcmVmaXhBbGxGYWxsYmFjayA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBwcmVmaXhlZCB2ZXJzaW9uIG9mIHRoZSBzdHlsZSBvYmplY3RcbiAgICogQHBhcmFtIHtPYmplY3R9IHN0eWxlcyAtIFN0eWxlIG9iamVjdCB0aGF0IGdldHMgcHJlZml4ZWQgcHJvcGVydGllcyBhZGRlZFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIFN0eWxlIG9iamVjdCB3aXRoIHByZWZpeGVkIHByb3BlcnRpZXMgYW5kIHZhbHVlc1xuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhQcmVmaXhlciwgW3tcbiAgICBrZXk6ICdwcmVmaXgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVmaXgoc3R5bGVzKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgLy8gdXNlIHByZWZpeEFsbCBhcyBmYWxsYmFjayBpZiB1c2VyQWdlbnQgY2FuIG5vdCBiZSByZXNvbHZlZFxuICAgICAgaWYgKHRoaXMuX3VzZVByZWZpeEFsbEZhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiAoMCwgX3ByZWZpeEFsbDMuZGVmYXVsdCkoc3R5bGVzKTtcbiAgICAgIH1cblxuICAgICAgLy8gb25seSBhZGQgcHJlZml4ZXMgaWYgbmVlZGVkXG4gICAgICBpZiAoIXRoaXMuX2hhc1Byb3BzUmVxdWlyaW5nUHJlZml4KSB7XG4gICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc3R5bGVzW3Byb3BlcnR5XTtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIC8vIHJlY3Vyc2UgdGhyb3VnaCBuZXN0ZWQgc3R5bGUgb2JqZWN0c1xuICAgICAgICAgIHN0eWxlc1twcm9wZXJ0eV0gPSBfdGhpczIucHJlZml4KHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBhZGQgcHJlZml4ZXMgaWYgbmVlZGVkXG4gICAgICAgICAgaWYgKF90aGlzMi5fcmVxdWlyZXNQcmVmaXhbcHJvcGVydHldKSB7XG4gICAgICAgICAgICBzdHlsZXNbX3RoaXMyLmpzUHJlZml4ICsgKDAsIF9jYXBpdGFsaXplU3RyaW5nMi5kZWZhdWx0KShwcm9wZXJ0eSldID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAoIV90aGlzMi5fa2VlcFVucHJlZml4ZWQpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIHN0eWxlc1twcm9wZXJ0eV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICBbXS5jb25jYXQoc3R5bGVzW3Byb3BlcnR5XSkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAvLyByZXNvbHZlIHBsdWdpbnNcbiAgICAgICAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgICAgICAgLy8gZ2VuZXJhdGVzIGEgbmV3IHBsdWdpbiBpbnRlcmZhY2Ugd2l0aCBjdXJyZW50IGRhdGFcbiAgICAgICAgICAgIGFzc2lnblN0eWxlcyhzdHlsZXMsIHBsdWdpbih7XG4gICAgICAgICAgICAgIHByb3BlcnR5OiBwcm9wZXJ0eSxcbiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICAgICAgICAgICAgYnJvd3NlckluZm86IF90aGlzMi5fYnJvd3NlckluZm8sXG4gICAgICAgICAgICAgIHByZWZpeDoge1xuICAgICAgICAgICAgICAgIGpzOiBfdGhpczIuanNQcmVmaXgsXG4gICAgICAgICAgICAgICAgY3NzOiBfdGhpczIuY3NzUHJlZml4LFxuICAgICAgICAgICAgICAgIGtleWZyYW1lczogX3RoaXMyLnByZWZpeGVkS2V5ZnJhbWVzXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGtlZXBVbnByZWZpeGVkOiBfdGhpczIuX2tlZXBVbnByZWZpeGVkLFxuICAgICAgICAgICAgICByZXF1aXJlc1ByZWZpeDogX3RoaXMyLl9yZXF1aXJlc1ByZWZpeFxuICAgICAgICAgICAgfSksIHZhbHVlLCBfdGhpczIuX2tlZXBVbnByZWZpeGVkKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuICgwLCBfc29ydFByZWZpeGVkU3R5bGUyLmRlZmF1bHQpKHN0eWxlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHByZWZpeGVkIHZlcnNpb24gb2YgdGhlIHN0eWxlIG9iamVjdCB1c2luZyBhbGwgdmVuZG9yIHByZWZpeGVzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0eWxlcyAtIFN0eWxlIG9iamVjdCB0aGF0IGdldHMgcHJlZml4ZWQgcHJvcGVydGllcyBhZGRlZFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IC0gU3R5bGUgb2JqZWN0IHdpdGggcHJlZml4ZWQgcHJvcGVydGllcyBhbmQgdmFsdWVzXG4gICAgICovXG5cbiAgfV0sIFt7XG4gICAga2V5OiAncHJlZml4QWxsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJlZml4QWxsKHN0eWxlcykge1xuICAgICAgcmV0dXJuICgwLCBfcHJlZml4QWxsMy5kZWZhdWx0KShzdHlsZXMpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQcmVmaXhlcjtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUHJlZml4ZXI7XG5cblxuZnVuY3Rpb24gYXNzaWduU3R5bGVzKGJhc2UpIHtcbiAgdmFyIGV4dGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzFdO1xuICB2YXIgdmFsdWUgPSBhcmd1bWVudHNbMl07XG4gIHZhciBrZWVwVW5wcmVmaXhlZCA9IGFyZ3VtZW50c1szXTtcblxuICBPYmplY3Qua2V5cyhleHRlbmQpLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgdmFyIGJhc2VWYWx1ZSA9IGJhc2VbcHJvcGVydHldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGJhc2VWYWx1ZSkpIHtcbiAgICAgIFtdLmNvbmNhdChleHRlbmRbcHJvcGVydHldKS5mb3JFYWNoKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgaWYgKGJhc2VbcHJvcGVydHldLmluZGV4T2YodmFsKSA9PT0gLTEpIHtcbiAgICAgICAgICBiYXNlW3Byb3BlcnR5XS5zcGxpY2UoYmFzZVZhbHVlLmluZGV4T2YodmFsdWUpLCBrZWVwVW5wcmVmaXhlZCA/IDAgOiAxLCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZVtwcm9wZXJ0eV0gPSBleHRlbmRbcHJvcGVydHldO1xuICAgIH1cbiAgfSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvUHJlZml4ZXIuanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjYWxjO1xuXG52YXIgX2dldFByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCcuLi91dGlscy9nZXRQcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfZ2V0UHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcmVmaXhlZFZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gY2FsYyhfcmVmKSB7XG4gIHZhciBwcm9wZXJ0eSA9IF9yZWYucHJvcGVydHk7XG4gIHZhciB2YWx1ZSA9IF9yZWYudmFsdWU7XG4gIHZhciBfcmVmJGJyb3dzZXJJbmZvID0gX3JlZi5icm93c2VySW5mbztcbiAgdmFyIGJyb3dzZXIgPSBfcmVmJGJyb3dzZXJJbmZvLmJyb3dzZXI7XG4gIHZhciB2ZXJzaW9uID0gX3JlZiRicm93c2VySW5mby52ZXJzaW9uO1xuICB2YXIgY3NzID0gX3JlZi5wcmVmaXguY3NzO1xuICB2YXIga2VlcFVucHJlZml4ZWQgPSBfcmVmLmtlZXBVbnByZWZpeGVkO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmluZGV4T2YoJ2NhbGMoJykgPiAtMSAmJiAoYnJvd3NlciA9PT0gJ2ZpcmVmb3gnICYmIHZlcnNpb24gPCAxNSB8fCBicm93c2VyID09PSAnY2hyb21lJyAmJiB2ZXJzaW9uIDwgMjUgfHwgYnJvd3NlciA9PT0gJ3NhZmFyaScgJiYgdmVyc2lvbiA8IDYuMSB8fCBicm93c2VyID09PSAnaW9zX3NhZicgJiYgdmVyc2lvbiA8IDcpKSB7XG4gICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgcHJvcGVydHksICgwLCBfZ2V0UHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkodmFsdWUucmVwbGFjZSgvY2FsY1xcKC9nLCBjc3MgKyAnY2FsYygnKSwgdmFsdWUsIGtlZXBVbnByZWZpeGVkKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9wbHVnaW5zL2NhbGMuanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmbGV4O1xuXG52YXIgX2dldFByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCcuLi91dGlscy9nZXRQcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfZ2V0UHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcmVmaXhlZFZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHZhbHVlcyA9IHsgZmxleDogdHJ1ZSwgJ2lubGluZS1mbGV4JzogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBmbGV4KF9yZWYpIHtcbiAgdmFyIHByb3BlcnR5ID0gX3JlZi5wcm9wZXJ0eTtcbiAgdmFyIHZhbHVlID0gX3JlZi52YWx1ZTtcbiAgdmFyIF9yZWYkYnJvd3NlckluZm8gPSBfcmVmLmJyb3dzZXJJbmZvO1xuICB2YXIgYnJvd3NlciA9IF9yZWYkYnJvd3NlckluZm8uYnJvd3NlcjtcbiAgdmFyIHZlcnNpb24gPSBfcmVmJGJyb3dzZXJJbmZvLnZlcnNpb247XG4gIHZhciBjc3MgPSBfcmVmLnByZWZpeC5jc3M7XG4gIHZhciBrZWVwVW5wcmVmaXhlZCA9IF9yZWYua2VlcFVucHJlZml4ZWQ7XG5cbiAgaWYgKHByb3BlcnR5ID09PSAnZGlzcGxheScgJiYgdmFsdWVzW3ZhbHVlXSAmJiAoYnJvd3NlciA9PT0gJ2Nocm9tZScgJiYgdmVyc2lvbiA8IDI5ICYmIHZlcnNpb24gPiAyMCB8fCAoYnJvd3NlciA9PT0gJ3NhZmFyaScgfHwgYnJvd3NlciA9PT0gJ2lvc19zYWYnKSAmJiB2ZXJzaW9uIDwgOSAmJiB2ZXJzaW9uID4gNiB8fCBicm93c2VyID09PSAnb3BlcmEnICYmICh2ZXJzaW9uID09IDE1IHx8IHZlcnNpb24gPT0gMTYpKSkge1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwbGF5OiAoMCwgX2dldFByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKGNzcyArIHZhbHVlLCB2YWx1ZSwga2VlcFVucHJlZml4ZWQpXG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3BsdWdpbnMvZmxleC5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZsZXhib3hJRTtcblxudmFyIF9nZXRQcmVmaXhlZFZhbHVlID0gcmVxdWlyZSgnLi4vdXRpbHMvZ2V0UHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2dldFByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJlZml4ZWRWYWx1ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBhbHRlcm5hdGl2ZVZhbHVlcyA9IHtcbiAgJ3NwYWNlLWFyb3VuZCc6ICdkaXN0cmlidXRlJyxcbiAgJ3NwYWNlLWJldHdlZW4nOiAnanVzdGlmeScsXG4gICdmbGV4LXN0YXJ0JzogJ3N0YXJ0JyxcbiAgJ2ZsZXgtZW5kJzogJ2VuZCcsXG4gIGZsZXg6ICdmbGV4Ym94JyxcbiAgJ2lubGluZS1mbGV4JzogJ2lubGluZS1mbGV4Ym94J1xufTtcbnZhciBhbHRlcm5hdGl2ZVByb3BzID0ge1xuICBhbGlnbkNvbnRlbnQ6ICdtc0ZsZXhMaW5lUGFjaycsXG4gIGFsaWduU2VsZjogJ21zRmxleEl0ZW1BbGlnbicsXG4gIGFsaWduSXRlbXM6ICdtc0ZsZXhBbGlnbicsXG4gIGp1c3RpZnlDb250ZW50OiAnbXNGbGV4UGFjaycsXG4gIG9yZGVyOiAnbXNGbGV4T3JkZXInLFxuICBmbGV4R3JvdzogJ21zRmxleFBvc2l0aXZlJyxcbiAgZmxleFNocmluazogJ21zRmxleE5lZ2F0aXZlJyxcbiAgZmxleEJhc2lzOiAnbXNQcmVmZXJyZWRTaXplJ1xufTtcblxuZnVuY3Rpb24gZmxleGJveElFKF9yZWYpIHtcbiAgdmFyIHByb3BlcnR5ID0gX3JlZi5wcm9wZXJ0eTtcbiAgdmFyIHZhbHVlID0gX3JlZi52YWx1ZTtcbiAgdmFyIHN0eWxlcyA9IF9yZWYuc3R5bGVzO1xuICB2YXIgX3JlZiRicm93c2VySW5mbyA9IF9yZWYuYnJvd3NlckluZm87XG4gIHZhciBicm93c2VyID0gX3JlZiRicm93c2VySW5mby5icm93c2VyO1xuICB2YXIgdmVyc2lvbiA9IF9yZWYkYnJvd3NlckluZm8udmVyc2lvbjtcbiAgdmFyIGNzcyA9IF9yZWYucHJlZml4LmNzcztcbiAgdmFyIGtlZXBVbnByZWZpeGVkID0gX3JlZi5rZWVwVW5wcmVmaXhlZDtcblxuICBpZiAoKGFsdGVybmF0aXZlUHJvcHNbcHJvcGVydHldIHx8IHByb3BlcnR5ID09PSAnZGlzcGxheScgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5pbmRleE9mKCdmbGV4JykgPiAtMSkgJiYgKGJyb3dzZXIgPT09ICdpZV9tb2InIHx8IGJyb3dzZXIgPT09ICdpZScpICYmIHZlcnNpb24gPT0gMTApIHtcbiAgICBpZiAoIWtlZXBVbnByZWZpeGVkICYmICFBcnJheS5pc0FycmF5KHN0eWxlc1twcm9wZXJ0eV0pKSB7XG4gICAgICBkZWxldGUgc3R5bGVzW3Byb3BlcnR5XTtcbiAgICB9XG4gICAgaWYgKHByb3BlcnR5ID09PSAnZGlzcGxheScgJiYgYWx0ZXJuYXRpdmVWYWx1ZXNbdmFsdWVdKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXNwbGF5OiAoMCwgX2dldFByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKGNzcyArIGFsdGVybmF0aXZlVmFsdWVzW3ZhbHVlXSwgdmFsdWUsIGtlZXBVbnByZWZpeGVkKVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGFsdGVybmF0aXZlUHJvcHNbcHJvcGVydHldKSB7XG4gICAgICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBhbHRlcm5hdGl2ZVByb3BzW3Byb3BlcnR5XSwgYWx0ZXJuYXRpdmVWYWx1ZXNbdmFsdWVdIHx8IHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9wbHVnaW5zL2ZsZXhib3hJRS5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZsZXhib3hPbGQ7XG5cbnZhciBfZ2V0UHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2dldFByZWZpeGVkVmFsdWUnKTtcblxudmFyIF9nZXRQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgYWx0ZXJuYXRpdmVWYWx1ZXMgPSB7XG4gICdzcGFjZS1hcm91bmQnOiAnanVzdGlmeScsXG4gICdzcGFjZS1iZXR3ZWVuJzogJ2p1c3RpZnknLFxuICAnZmxleC1zdGFydCc6ICdzdGFydCcsXG4gICdmbGV4LWVuZCc6ICdlbmQnLFxuICAnd3JhcC1yZXZlcnNlJzogJ211bHRpcGxlJyxcbiAgd3JhcDogJ211bHRpcGxlJyxcbiAgZmxleDogJ2JveCcsXG4gICdpbmxpbmUtZmxleCc6ICdpbmxpbmUtYm94J1xufTtcblxudmFyIGFsdGVybmF0aXZlUHJvcHMgPSB7XG4gIGFsaWduSXRlbXM6ICdXZWJraXRCb3hBbGlnbicsXG4gIGp1c3RpZnlDb250ZW50OiAnV2Via2l0Qm94UGFjaycsXG4gIGZsZXhXcmFwOiAnV2Via2l0Qm94TGluZXMnXG59O1xuXG52YXIgb3RoZXJQcm9wcyA9IFsnYWxpZ25Db250ZW50JywgJ2FsaWduU2VsZicsICdvcmRlcicsICdmbGV4R3JvdycsICdmbGV4U2hyaW5rJywgJ2ZsZXhCYXNpcycsICdmbGV4RGlyZWN0aW9uJ107XG52YXIgcHJvcGVydGllcyA9IE9iamVjdC5rZXlzKGFsdGVybmF0aXZlUHJvcHMpLmNvbmNhdChvdGhlclByb3BzKTtcblxuZnVuY3Rpb24gZmxleGJveE9sZChfcmVmKSB7XG4gIHZhciBwcm9wZXJ0eSA9IF9yZWYucHJvcGVydHk7XG4gIHZhciB2YWx1ZSA9IF9yZWYudmFsdWU7XG4gIHZhciBzdHlsZXMgPSBfcmVmLnN0eWxlcztcbiAgdmFyIF9yZWYkYnJvd3NlckluZm8gPSBfcmVmLmJyb3dzZXJJbmZvO1xuICB2YXIgYnJvd3NlciA9IF9yZWYkYnJvd3NlckluZm8uYnJvd3NlcjtcbiAgdmFyIHZlcnNpb24gPSBfcmVmJGJyb3dzZXJJbmZvLnZlcnNpb247XG4gIHZhciBjc3MgPSBfcmVmLnByZWZpeC5jc3M7XG4gIHZhciBrZWVwVW5wcmVmaXhlZCA9IF9yZWYua2VlcFVucHJlZml4ZWQ7XG5cbiAgaWYgKChwcm9wZXJ0aWVzLmluZGV4T2YocHJvcGVydHkpID4gLTEgfHwgcHJvcGVydHkgPT09ICdkaXNwbGF5JyAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmluZGV4T2YoJ2ZsZXgnKSA+IC0xKSAmJiAoYnJvd3NlciA9PT0gJ2ZpcmVmb3gnICYmIHZlcnNpb24gPCAyMiB8fCBicm93c2VyID09PSAnY2hyb21lJyAmJiB2ZXJzaW9uIDwgMjEgfHwgKGJyb3dzZXIgPT09ICdzYWZhcmknIHx8IGJyb3dzZXIgPT09ICdpb3Nfc2FmJykgJiYgdmVyc2lvbiA8PSA2LjEgfHwgYnJvd3NlciA9PT0gJ2FuZHJvaWQnICYmIHZlcnNpb24gPCA0LjQgfHwgYnJvd3NlciA9PT0gJ2FuZF91YycpKSB7XG4gICAgaWYgKCFrZWVwVW5wcmVmaXhlZCAmJiAhQXJyYXkuaXNBcnJheShzdHlsZXNbcHJvcGVydHldKSkge1xuICAgICAgZGVsZXRlIHN0eWxlc1twcm9wZXJ0eV07XG4gICAgfVxuICAgIGlmIChwcm9wZXJ0eSA9PT0gJ2ZsZXhEaXJlY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFdlYmtpdEJveE9yaWVudDogdmFsdWUuaW5kZXhPZignY29sdW1uJykgPiAtMSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCcsXG4gICAgICAgIFdlYmtpdEJveERpcmVjdGlvbjogdmFsdWUuaW5kZXhPZigncmV2ZXJzZScpID4gLTEgPyAncmV2ZXJzZScgOiAnbm9ybWFsJ1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHByb3BlcnR5ID09PSAnZGlzcGxheScgJiYgYWx0ZXJuYXRpdmVWYWx1ZXNbdmFsdWVdKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXNwbGF5OiAoMCwgX2dldFByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKGNzcyArIGFsdGVybmF0aXZlVmFsdWVzW3ZhbHVlXSwgdmFsdWUsIGtlZXBVbnByZWZpeGVkKVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGFsdGVybmF0aXZlUHJvcHNbcHJvcGVydHldKSB7XG4gICAgICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBhbHRlcm5hdGl2ZVByb3BzW3Byb3BlcnR5XSwgYWx0ZXJuYXRpdmVWYWx1ZXNbdmFsdWVdIHx8IHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9wbHVnaW5zL2ZsZXhib3hPbGQuanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBncmFiQ3Vyc29yO1xuXG52YXIgX2dldFByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCcuLi91dGlscy9nZXRQcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfZ2V0UHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcmVmaXhlZFZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHZhbHVlcyA9IHsgZ3JhYjogdHJ1ZSwgZ3JhYmJpbmc6IHRydWUgfTtcblxuZnVuY3Rpb24gZ3JhYkN1cnNvcihfcmVmKSB7XG4gIHZhciBwcm9wZXJ0eSA9IF9yZWYucHJvcGVydHk7XG4gIHZhciB2YWx1ZSA9IF9yZWYudmFsdWU7XG4gIHZhciBicm93c2VyID0gX3JlZi5icm93c2VySW5mby5icm93c2VyO1xuICB2YXIgY3NzID0gX3JlZi5wcmVmaXguY3NzO1xuICB2YXIga2VlcFVucHJlZml4ZWQgPSBfcmVmLmtlZXBVbnByZWZpeGVkO1xuXG4gIC8vIGFkZHMgcHJlZml4ZXMgZm9yIGZpcmVmb3gsIGNocm9tZSwgc2FmYXJpLCBhbmQgb3BlcmEgcmVnYXJkbGVzcyBvZiB2ZXJzaW9uIHVudGlsIGEgcmVsaWFibGUgYnJ3b3NlciBzdXBwb3J0IGluZm8gY2FuIGJlIGZvdW5kIChzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9yb2ZyaXNjaG1hbm4vaW5saW5lLXN0eWxlLXByZWZpeGVyL2lzc3Vlcy83OSlcbiAgaWYgKHByb3BlcnR5ID09PSAnY3Vyc29yJyAmJiB2YWx1ZXNbdmFsdWVdICYmIChicm93c2VyID09PSAnZmlyZWZveCcgfHwgYnJvd3NlciA9PT0gJ2Nocm9tZScgfHwgYnJvd3NlciA9PT0gJ3NhZmFyaScgfHwgYnJvd3NlciA9PT0gJ29wZXJhJykpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY3Vyc29yOiAoMCwgX2dldFByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKGNzcyArIHZhbHVlLCB2YWx1ZSwga2VlcFVucHJlZml4ZWQpXG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3BsdWdpbnMvZ3JhYkN1cnNvci5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdyYWRpZW50O1xuXG52YXIgX2dldFByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCcuLi91dGlscy9nZXRQcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfZ2V0UHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcmVmaXhlZFZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIHZhbHVlcyA9IC9saW5lYXItZ3JhZGllbnR8cmFkaWFsLWdyYWRpZW50fHJlcGVhdGluZy1saW5lYXItZ3JhZGllbnR8cmVwZWF0aW5nLXJhZGlhbC1ncmFkaWVudC87XG5cbmZ1bmN0aW9uIGdyYWRpZW50KF9yZWYpIHtcbiAgdmFyIHByb3BlcnR5ID0gX3JlZi5wcm9wZXJ0eTtcbiAgdmFyIHZhbHVlID0gX3JlZi52YWx1ZTtcbiAgdmFyIF9yZWYkYnJvd3NlckluZm8gPSBfcmVmLmJyb3dzZXJJbmZvO1xuICB2YXIgYnJvd3NlciA9IF9yZWYkYnJvd3NlckluZm8uYnJvd3NlcjtcbiAgdmFyIHZlcnNpb24gPSBfcmVmJGJyb3dzZXJJbmZvLnZlcnNpb247XG4gIHZhciBjc3MgPSBfcmVmLnByZWZpeC5jc3M7XG4gIHZhciBrZWVwVW5wcmVmaXhlZCA9IF9yZWYua2VlcFVucHJlZml4ZWQ7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUubWF0Y2godmFsdWVzKSAhPT0gbnVsbCAmJiAoYnJvd3NlciA9PT0gJ2ZpcmVmb3gnICYmIHZlcnNpb24gPCAxNiB8fCBicm93c2VyID09PSAnY2hyb21lJyAmJiB2ZXJzaW9uIDwgMjYgfHwgKGJyb3dzZXIgPT09ICdzYWZhcmknIHx8IGJyb3dzZXIgPT09ICdpb3Nfc2FmJykgJiYgdmVyc2lvbiA8IDcgfHwgKGJyb3dzZXIgPT09ICdvcGVyYScgfHwgYnJvd3NlciA9PT0gJ29wX21pbmknKSAmJiB2ZXJzaW9uIDwgMTIuMSB8fCBicm93c2VyID09PSAnYW5kcm9pZCcgJiYgdmVyc2lvbiA8IDQuNCB8fCBicm93c2VyID09PSAnYW5kX3VjJykpIHtcbiAgICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBwcm9wZXJ0eSwgKDAsIF9nZXRQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KShjc3MgKyB2YWx1ZSwgdmFsdWUsIGtlZXBVbnByZWZpeGVkKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9wbHVnaW5zL2dyYWRpZW50LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcG9zaXRpb247XG5cbnZhciBfZ2V0UHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2dldFByZWZpeGVkVmFsdWUnKTtcblxudmFyIF9nZXRQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBwb3NpdGlvbihfcmVmKSB7XG4gIHZhciBwcm9wZXJ0eSA9IF9yZWYucHJvcGVydHk7XG4gIHZhciB2YWx1ZSA9IF9yZWYudmFsdWU7XG4gIHZhciBicm93c2VyID0gX3JlZi5icm93c2VySW5mby5icm93c2VyO1xuICB2YXIgY3NzID0gX3JlZi5wcmVmaXguY3NzO1xuICB2YXIga2VlcFVucHJlZml4ZWQgPSBfcmVmLmtlZXBVbnByZWZpeGVkO1xuXG4gIGlmIChwcm9wZXJ0eSA9PT0gJ3Bvc2l0aW9uJyAmJiB2YWx1ZSA9PT0gJ3N0aWNreScgJiYgKGJyb3dzZXIgPT09ICdzYWZhcmknIHx8IGJyb3dzZXIgPT09ICdpb3Nfc2FmJykpIHtcbiAgICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBwcm9wZXJ0eSwgKDAsIF9nZXRQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KShjc3MgKyB2YWx1ZSwgdmFsdWUsIGtlZXBVbnByZWZpeGVkKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9wbHVnaW5zL3Bvc2l0aW9uLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2l6aW5nO1xuXG52YXIgX2dldFByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCcuLi91dGlscy9nZXRQcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfZ2V0UHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcmVmaXhlZFZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIHByb3BlcnRpZXMgPSB7XG4gIG1heEhlaWdodDogdHJ1ZSxcbiAgbWF4V2lkdGg6IHRydWUsXG4gIHdpZHRoOiB0cnVlLFxuICBoZWlnaHQ6IHRydWUsXG4gIGNvbHVtbldpZHRoOiB0cnVlLFxuICBtaW5XaWR0aDogdHJ1ZSxcbiAgbWluSGVpZ2h0OiB0cnVlXG59O1xudmFyIHZhbHVlcyA9IHtcbiAgJ21pbi1jb250ZW50JzogdHJ1ZSxcbiAgJ21heC1jb250ZW50JzogdHJ1ZSxcbiAgJ2ZpbGwtYXZhaWxhYmxlJzogdHJ1ZSxcbiAgJ2ZpdC1jb250ZW50JzogdHJ1ZSxcbiAgJ2NvbnRhaW4tZmxvYXRzJzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gc2l6aW5nKF9yZWYpIHtcbiAgdmFyIHByb3BlcnR5ID0gX3JlZi5wcm9wZXJ0eTtcbiAgdmFyIHZhbHVlID0gX3JlZi52YWx1ZTtcbiAgdmFyIGNzcyA9IF9yZWYucHJlZml4LmNzcztcbiAgdmFyIGtlZXBVbnByZWZpeGVkID0gX3JlZi5rZWVwVW5wcmVmaXhlZDtcblxuICAvLyBUaGlzIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlXG4gIC8vIEtlZXAgYW4gZXllIG9uIGl0XG4gIGlmIChwcm9wZXJ0aWVzW3Byb3BlcnR5XSAmJiB2YWx1ZXNbdmFsdWVdKSB7XG4gICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgcHJvcGVydHksICgwLCBfZ2V0UHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkoY3NzICsgdmFsdWUsIHZhbHVlLCBrZWVwVW5wcmVmaXhlZCkpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvcGx1Z2lucy9zaXppbmcuanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzLmRlZmF1bHQgPSB0cmFuc2l0aW9uO1xuXG52YXIgX2h5cGhlbmF0ZVN0eWxlTmFtZSA9IHJlcXVpcmUoJ2h5cGhlbmF0ZS1zdHlsZS1uYW1lJyk7XG5cbnZhciBfaHlwaGVuYXRlU3R5bGVOYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2h5cGhlbmF0ZVN0eWxlTmFtZSk7XG5cbnZhciBfdW5wcmVmaXhQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL3V0aWxzL3VucHJlZml4UHJvcGVydHknKTtcblxudmFyIF91bnByZWZpeFByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VucHJlZml4UHJvcGVydHkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgcHJvcGVydGllcyA9IHsgdHJhbnNpdGlvbjogdHJ1ZSwgdHJhbnNpdGlvblByb3BlcnR5OiB0cnVlIH07XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb24oX3JlZikge1xuICB2YXIgcHJvcGVydHkgPSBfcmVmLnByb3BlcnR5O1xuICB2YXIgdmFsdWUgPSBfcmVmLnZhbHVlO1xuICB2YXIgY3NzID0gX3JlZi5wcmVmaXguY3NzO1xuICB2YXIgcmVxdWlyZXNQcmVmaXggPSBfcmVmLnJlcXVpcmVzUHJlZml4O1xuICB2YXIga2VlcFVucHJlZml4ZWQgPSBfcmVmLmtlZXBVbnByZWZpeGVkO1xuXG4gIC8vIGFsc28gY2hlY2sgZm9yIGFscmVhZHkgcHJlZml4ZWQgdHJhbnNpdGlvbnNcbiAgdmFyIHVucHJlZml4ZWRQcm9wZXJ0eSA9ICgwLCBfdW5wcmVmaXhQcm9wZXJ0eTIuZGVmYXVsdCkocHJvcGVydHkpO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHByb3BlcnRpZXNbdW5wcmVmaXhlZFByb3BlcnR5XSkge1xuICAgIHZhciBfcmV0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVE9ETzogbWVtb2l6ZSB0aGlzIGFycmF5XG4gICAgICB2YXIgcmVxdWlyZXNQcmVmaXhEYXNoQ2FzZWQgPSBPYmplY3Qua2V5cyhyZXF1aXJlc1ByZWZpeCkubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2h5cGhlbmF0ZVN0eWxlTmFtZTIuZGVmYXVsdCkocHJvcCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gb25seSBzcGxpdCBtdWx0aSB2YWx1ZXMsIG5vdCBjdWJpYyBiZXppZXJzXG4gICAgICB2YXIgbXVsdGlwbGVWYWx1ZXMgPSB2YWx1ZS5zcGxpdCgvLCg/IVteKCldKig/OlxcKFteKCldKlxcKSk/XFwpKS9nKTtcblxuICAgICAgcmVxdWlyZXNQcmVmaXhEYXNoQ2FzZWQuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICBtdWx0aXBsZVZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGluZGV4KSB7XG4gICAgICAgICAgaWYgKHZhbC5pbmRleE9mKHByb3ApID4gLTEgJiYgcHJvcCAhPT0gJ29yZGVyJykge1xuICAgICAgICAgICAgbXVsdGlwbGVWYWx1ZXNbaW5kZXhdID0gdmFsLnJlcGxhY2UocHJvcCwgY3NzICsgcHJvcCkgKyAoa2VlcFVucHJlZml4ZWQgPyAnLCcgKyB2YWwgOiAnJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB2OiBfZGVmaW5lUHJvcGVydHkoe30sIHByb3BlcnR5LCBtdWx0aXBsZVZhbHVlcy5qb2luKCcsJykpXG4gICAgICB9O1xuICAgIH0oKTtcblxuICAgIGlmICgodHlwZW9mIF9yZXQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKF9yZXQpKSA9PT0gXCJvYmplY3RcIikgcmV0dXJuIF9yZXQudjtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3BsdWdpbnMvdHJhbnNpdGlvbi5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHpvb21DdXJzb3I7XG5cbnZhciBfZ2V0UHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2dldFByZWZpeGVkVmFsdWUnKTtcblxudmFyIF9nZXRQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgdmFsdWVzID0geyAnem9vbS1pbic6IHRydWUsICd6b29tLW91dCc6IHRydWUgfTtcblxuZnVuY3Rpb24gem9vbUN1cnNvcihfcmVmKSB7XG4gIHZhciBwcm9wZXJ0eSA9IF9yZWYucHJvcGVydHk7XG4gIHZhciB2YWx1ZSA9IF9yZWYudmFsdWU7XG4gIHZhciBfcmVmJGJyb3dzZXJJbmZvID0gX3JlZi5icm93c2VySW5mbztcbiAgdmFyIGJyb3dzZXIgPSBfcmVmJGJyb3dzZXJJbmZvLmJyb3dzZXI7XG4gIHZhciB2ZXJzaW9uID0gX3JlZiRicm93c2VySW5mby52ZXJzaW9uO1xuICB2YXIgY3NzID0gX3JlZi5wcmVmaXguY3NzO1xuICB2YXIga2VlcFVucHJlZml4ZWQgPSBfcmVmLmtlZXBVbnByZWZpeGVkO1xuXG4gIGlmIChwcm9wZXJ0eSA9PT0gJ2N1cnNvcicgJiYgdmFsdWVzW3ZhbHVlXSAmJiAoYnJvd3NlciA9PT0gJ2ZpcmVmb3gnICYmIHZlcnNpb24gPCAyNCB8fCBicm93c2VyID09PSAnY2hyb21lJyAmJiB2ZXJzaW9uIDwgMzcgfHwgYnJvd3NlciA9PT0gJ3NhZmFyaScgJiYgdmVyc2lvbiA8IDkgfHwgYnJvd3NlciA9PT0gJ29wZXJhJyAmJiB2ZXJzaW9uIDwgMjQpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnNvcjogKDAsIF9nZXRQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KShjc3MgKyB2YWx1ZSwgdmFsdWUsIGtlZXBVbnByZWZpeGVkKVxuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9wbHVnaW5zL3pvb21DdXJzb3IuanMiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHsgXCJjaHJvbWVcIjogeyBcInRyYW5zZm9ybVwiOiAzNSwgXCJ0cmFuc2Zvcm1PcmlnaW5cIjogMzUsIFwidHJhbnNmb3JtT3JpZ2luWFwiOiAzNSwgXCJ0cmFuc2Zvcm1PcmlnaW5ZXCI6IDM1LCBcImJhY2tmYWNlVmlzaWJpbGl0eVwiOiAzNSwgXCJwZXJzcGVjdGl2ZVwiOiAzNSwgXCJwZXJzcGVjdGl2ZU9yaWdpblwiOiAzNSwgXCJ0cmFuc2Zvcm1TdHlsZVwiOiAzNSwgXCJ0cmFuc2Zvcm1PcmlnaW5aXCI6IDM1LCBcImFuaW1hdGlvblwiOiA0MiwgXCJhbmltYXRpb25EZWxheVwiOiA0MiwgXCJhbmltYXRpb25EaXJlY3Rpb25cIjogNDIsIFwiYW5pbWF0aW9uRmlsbE1vZGVcIjogNDIsIFwiYW5pbWF0aW9uRHVyYXRpb25cIjogNDIsIFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogNDIsIFwiYW5pbWF0aW9uTmFtZVwiOiA0MiwgXCJhbmltYXRpb25QbGF5U3RhdGVcIjogNDIsIFwiYW5pbWF0aW9uVGltaW5nRnVuY3Rpb25cIjogNDIsIFwiYXBwZWFyYW5jZVwiOiA1NSwgXCJ1c2VyU2VsZWN0XCI6IDU1LCBcImZvbnRLZXJuaW5nXCI6IDMyLCBcInRleHRFbXBoYXNpc1Bvc2l0aW9uXCI6IDU1LCBcInRleHRFbXBoYXNpc1wiOiA1NSwgXCJ0ZXh0RW1waGFzaXNTdHlsZVwiOiA1NSwgXCJ0ZXh0RW1waGFzaXNDb2xvclwiOiA1NSwgXCJib3hEZWNvcmF0aW9uQnJlYWtcIjogNTUsIFwiY2xpcFBhdGhcIjogNTUsIFwibWFza0ltYWdlXCI6IDU1LCBcIm1hc2tNb2RlXCI6IDU1LCBcIm1hc2tSZXBlYXRcIjogNTUsIFwibWFza1Bvc2l0aW9uXCI6IDU1LCBcIm1hc2tDbGlwXCI6IDU1LCBcIm1hc2tPcmlnaW5cIjogNTUsIFwibWFza1NpemVcIjogNTUsIFwibWFza0NvbXBvc2l0ZVwiOiA1NSwgXCJtYXNrXCI6IDU1LCBcIm1hc2tCb3JkZXJTb3VyY2VcIjogNTUsIFwibWFza0JvcmRlck1vZGVcIjogNTUsIFwibWFza0JvcmRlclNsaWNlXCI6IDU1LCBcIm1hc2tCb3JkZXJXaWR0aFwiOiA1NSwgXCJtYXNrQm9yZGVyT3V0c2V0XCI6IDU1LCBcIm1hc2tCb3JkZXJSZXBlYXRcIjogNTUsIFwibWFza0JvcmRlclwiOiA1NSwgXCJtYXNrVHlwZVwiOiA1NSwgXCJ0ZXh0RGVjb3JhdGlvblN0eWxlXCI6IDU1LCBcInRleHREZWNvcmF0aW9uU2tpcFwiOiA1NSwgXCJ0ZXh0RGVjb3JhdGlvbkxpbmVcIjogNTUsIFwidGV4dERlY29yYXRpb25Db2xvclwiOiA1NSwgXCJmaWx0ZXJcIjogNTIsIFwiZm9udEZlYXR1cmVTZXR0aW5nc1wiOiA0NywgXCJicmVha0FmdGVyXCI6IDQ5LCBcImJyZWFrQmVmb3JlXCI6IDQ5LCBcImJyZWFrSW5zaWRlXCI6IDQ5LCBcImNvbHVtbkNvdW50XCI6IDQ5LCBcImNvbHVtbkZpbGxcIjogNDksIFwiY29sdW1uR2FwXCI6IDQ5LCBcImNvbHVtblJ1bGVcIjogNDksIFwiY29sdW1uUnVsZUNvbG9yXCI6IDQ5LCBcImNvbHVtblJ1bGVTdHlsZVwiOiA0OSwgXCJjb2x1bW5SdWxlV2lkdGhcIjogNDksIFwiY29sdW1uc1wiOiA0OSwgXCJjb2x1bW5TcGFuXCI6IDQ5LCBcImNvbHVtbldpZHRoXCI6IDQ5IH0sIFwic2FmYXJpXCI6IHsgXCJmbGV4XCI6IDgsIFwiZmxleEJhc2lzXCI6IDgsIFwiZmxleERpcmVjdGlvblwiOiA4LCBcImZsZXhHcm93XCI6IDgsIFwiZmxleEZsb3dcIjogOCwgXCJmbGV4U2hyaW5rXCI6IDgsIFwiZmxleFdyYXBcIjogOCwgXCJhbGlnbkNvbnRlbnRcIjogOCwgXCJhbGlnbkl0ZW1zXCI6IDgsIFwiYWxpZ25TZWxmXCI6IDgsIFwianVzdGlmeUNvbnRlbnRcIjogOCwgXCJvcmRlclwiOiA4LCBcInRyYW5zaXRpb25cIjogNiwgXCJ0cmFuc2l0aW9uRGVsYXlcIjogNiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIjogNiwgXCJ0cmFuc2l0aW9uUHJvcGVydHlcIjogNiwgXCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cIjogNiwgXCJ0cmFuc2Zvcm1cIjogOCwgXCJ0cmFuc2Zvcm1PcmlnaW5cIjogOCwgXCJ0cmFuc2Zvcm1PcmlnaW5YXCI6IDgsIFwidHJhbnNmb3JtT3JpZ2luWVwiOiA4LCBcImJhY2tmYWNlVmlzaWJpbGl0eVwiOiA4LCBcInBlcnNwZWN0aXZlXCI6IDgsIFwicGVyc3BlY3RpdmVPcmlnaW5cIjogOCwgXCJ0cmFuc2Zvcm1TdHlsZVwiOiA4LCBcInRyYW5zZm9ybU9yaWdpblpcIjogOCwgXCJhbmltYXRpb25cIjogOCwgXCJhbmltYXRpb25EZWxheVwiOiA4LCBcImFuaW1hdGlvbkRpcmVjdGlvblwiOiA4LCBcImFuaW1hdGlvbkZpbGxNb2RlXCI6IDgsIFwiYW5pbWF0aW9uRHVyYXRpb25cIjogOCwgXCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiA4LCBcImFuaW1hdGlvbk5hbWVcIjogOCwgXCJhbmltYXRpb25QbGF5U3RhdGVcIjogOCwgXCJhbmltYXRpb25UaW1pbmdGdW5jdGlvblwiOiA4LCBcImFwcGVhcmFuY2VcIjogMTAsIFwidXNlclNlbGVjdFwiOiAxMCwgXCJiYWNrZHJvcEZpbHRlclwiOiAxMCwgXCJmb250S2VybmluZ1wiOiA5LCBcInNjcm9sbFNuYXBUeXBlXCI6IDEwLCBcInNjcm9sbFNuYXBQb2ludHNYXCI6IDEwLCBcInNjcm9sbFNuYXBQb2ludHNZXCI6IDEwLCBcInNjcm9sbFNuYXBEZXN0aW5hdGlvblwiOiAxMCwgXCJzY3JvbGxTbmFwQ29vcmRpbmF0ZVwiOiAxMCwgXCJ0ZXh0RW1waGFzaXNQb3NpdGlvblwiOiA3LCBcInRleHRFbXBoYXNpc1wiOiA3LCBcInRleHRFbXBoYXNpc1N0eWxlXCI6IDcsIFwidGV4dEVtcGhhc2lzQ29sb3JcIjogNywgXCJib3hEZWNvcmF0aW9uQnJlYWtcIjogMTAsIFwiY2xpcFBhdGhcIjogMTAsIFwibWFza0ltYWdlXCI6IDEwLCBcIm1hc2tNb2RlXCI6IDEwLCBcIm1hc2tSZXBlYXRcIjogMTAsIFwibWFza1Bvc2l0aW9uXCI6IDEwLCBcIm1hc2tDbGlwXCI6IDEwLCBcIm1hc2tPcmlnaW5cIjogMTAsIFwibWFza1NpemVcIjogMTAsIFwibWFza0NvbXBvc2l0ZVwiOiAxMCwgXCJtYXNrXCI6IDEwLCBcIm1hc2tCb3JkZXJTb3VyY2VcIjogMTAsIFwibWFza0JvcmRlck1vZGVcIjogMTAsIFwibWFza0JvcmRlclNsaWNlXCI6IDEwLCBcIm1hc2tCb3JkZXJXaWR0aFwiOiAxMCwgXCJtYXNrQm9yZGVyT3V0c2V0XCI6IDEwLCBcIm1hc2tCb3JkZXJSZXBlYXRcIjogMTAsIFwibWFza0JvcmRlclwiOiAxMCwgXCJtYXNrVHlwZVwiOiAxMCwgXCJ0ZXh0RGVjb3JhdGlvblN0eWxlXCI6IDEwLCBcInRleHREZWNvcmF0aW9uU2tpcFwiOiAxMCwgXCJ0ZXh0RGVjb3JhdGlvbkxpbmVcIjogMTAsIFwidGV4dERlY29yYXRpb25Db2xvclwiOiAxMCwgXCJzaGFwZUltYWdlVGhyZXNob2xkXCI6IDEwLCBcInNoYXBlSW1hZ2VNYXJnaW5cIjogMTAsIFwic2hhcGVJbWFnZU91dHNpZGVcIjogMTAsIFwiZmlsdGVyXCI6IDksIFwiaHlwaGVuc1wiOiAxMCwgXCJmbG93SW50b1wiOiAxMCwgXCJmbG93RnJvbVwiOiAxMCwgXCJicmVha0JlZm9yZVwiOiA4LCBcImJyZWFrQWZ0ZXJcIjogOCwgXCJicmVha0luc2lkZVwiOiA4LCBcInJlZ2lvbkZyYWdtZW50XCI6IDEwLCBcImNvbHVtbkNvdW50XCI6IDgsIFwiY29sdW1uRmlsbFwiOiA4LCBcImNvbHVtbkdhcFwiOiA4LCBcImNvbHVtblJ1bGVcIjogOCwgXCJjb2x1bW5SdWxlQ29sb3JcIjogOCwgXCJjb2x1bW5SdWxlU3R5bGVcIjogOCwgXCJjb2x1bW5SdWxlV2lkdGhcIjogOCwgXCJjb2x1bW5zXCI6IDgsIFwiY29sdW1uU3BhblwiOiA4LCBcImNvbHVtbldpZHRoXCI6IDggfSwgXCJmaXJlZm94XCI6IHsgXCJhcHBlYXJhbmNlXCI6IDUxLCBcInVzZXJTZWxlY3RcIjogNTEsIFwiYm94U2l6aW5nXCI6IDI4LCBcInRleHRBbGlnbkxhc3RcIjogNDgsIFwidGV4dERlY29yYXRpb25TdHlsZVwiOiAzNSwgXCJ0ZXh0RGVjb3JhdGlvblNraXBcIjogMzUsIFwidGV4dERlY29yYXRpb25MaW5lXCI6IDM1LCBcInRleHREZWNvcmF0aW9uQ29sb3JcIjogMzUsIFwidGFiU2l6ZVwiOiA1MSwgXCJoeXBoZW5zXCI6IDQyLCBcImZvbnRGZWF0dXJlU2V0dGluZ3NcIjogMzMsIFwiYnJlYWtBZnRlclwiOiA1MSwgXCJicmVha0JlZm9yZVwiOiA1MSwgXCJicmVha0luc2lkZVwiOiA1MSwgXCJjb2x1bW5Db3VudFwiOiA1MSwgXCJjb2x1bW5GaWxsXCI6IDUxLCBcImNvbHVtbkdhcFwiOiA1MSwgXCJjb2x1bW5SdWxlXCI6IDUxLCBcImNvbHVtblJ1bGVDb2xvclwiOiA1MSwgXCJjb2x1bW5SdWxlU3R5bGVcIjogNTEsIFwiY29sdW1uUnVsZVdpZHRoXCI6IDUxLCBcImNvbHVtbnNcIjogNTEsIFwiY29sdW1uU3BhblwiOiA1MSwgXCJjb2x1bW5XaWR0aFwiOiA1MSB9LCBcIm9wZXJhXCI6IHsgXCJmbGV4XCI6IDE2LCBcImZsZXhCYXNpc1wiOiAxNiwgXCJmbGV4RGlyZWN0aW9uXCI6IDE2LCBcImZsZXhHcm93XCI6IDE2LCBcImZsZXhGbG93XCI6IDE2LCBcImZsZXhTaHJpbmtcIjogMTYsIFwiZmxleFdyYXBcIjogMTYsIFwiYWxpZ25Db250ZW50XCI6IDE2LCBcImFsaWduSXRlbXNcIjogMTYsIFwiYWxpZ25TZWxmXCI6IDE2LCBcImp1c3RpZnlDb250ZW50XCI6IDE2LCBcIm9yZGVyXCI6IDE2LCBcInRyYW5zZm9ybVwiOiAyMiwgXCJ0cmFuc2Zvcm1PcmlnaW5cIjogMjIsIFwidHJhbnNmb3JtT3JpZ2luWFwiOiAyMiwgXCJ0cmFuc2Zvcm1PcmlnaW5ZXCI6IDIyLCBcImJhY2tmYWNlVmlzaWJpbGl0eVwiOiAyMiwgXCJwZXJzcGVjdGl2ZVwiOiAyMiwgXCJwZXJzcGVjdGl2ZU9yaWdpblwiOiAyMiwgXCJ0cmFuc2Zvcm1TdHlsZVwiOiAyMiwgXCJ0cmFuc2Zvcm1PcmlnaW5aXCI6IDIyLCBcImFuaW1hdGlvblwiOiAyOSwgXCJhbmltYXRpb25EZWxheVwiOiAyOSwgXCJhbmltYXRpb25EaXJlY3Rpb25cIjogMjksIFwiYW5pbWF0aW9uRmlsbE1vZGVcIjogMjksIFwiYW5pbWF0aW9uRHVyYXRpb25cIjogMjksIFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogMjksIFwiYW5pbWF0aW9uTmFtZVwiOiAyOSwgXCJhbmltYXRpb25QbGF5U3RhdGVcIjogMjksIFwiYW5pbWF0aW9uVGltaW5nRnVuY3Rpb25cIjogMjksIFwiYXBwZWFyYW5jZVwiOiA0MSwgXCJ1c2VyU2VsZWN0XCI6IDQxLCBcImZvbnRLZXJuaW5nXCI6IDE5LCBcInRleHRFbXBoYXNpc1Bvc2l0aW9uXCI6IDQxLCBcInRleHRFbXBoYXNpc1wiOiA0MSwgXCJ0ZXh0RW1waGFzaXNTdHlsZVwiOiA0MSwgXCJ0ZXh0RW1waGFzaXNDb2xvclwiOiA0MSwgXCJib3hEZWNvcmF0aW9uQnJlYWtcIjogNDEsIFwiY2xpcFBhdGhcIjogNDEsIFwibWFza0ltYWdlXCI6IDQxLCBcIm1hc2tNb2RlXCI6IDQxLCBcIm1hc2tSZXBlYXRcIjogNDEsIFwibWFza1Bvc2l0aW9uXCI6IDQxLCBcIm1hc2tDbGlwXCI6IDQxLCBcIm1hc2tPcmlnaW5cIjogNDEsIFwibWFza1NpemVcIjogNDEsIFwibWFza0NvbXBvc2l0ZVwiOiA0MSwgXCJtYXNrXCI6IDQxLCBcIm1hc2tCb3JkZXJTb3VyY2VcIjogNDEsIFwibWFza0JvcmRlck1vZGVcIjogNDEsIFwibWFza0JvcmRlclNsaWNlXCI6IDQxLCBcIm1hc2tCb3JkZXJXaWR0aFwiOiA0MSwgXCJtYXNrQm9yZGVyT3V0c2V0XCI6IDQxLCBcIm1hc2tCb3JkZXJSZXBlYXRcIjogNDEsIFwibWFza0JvcmRlclwiOiA0MSwgXCJtYXNrVHlwZVwiOiA0MSwgXCJ0ZXh0RGVjb3JhdGlvblN0eWxlXCI6IDQxLCBcInRleHREZWNvcmF0aW9uU2tpcFwiOiA0MSwgXCJ0ZXh0RGVjb3JhdGlvbkxpbmVcIjogNDEsIFwidGV4dERlY29yYXRpb25Db2xvclwiOiA0MSwgXCJmaWx0ZXJcIjogMzksIFwiZm9udEZlYXR1cmVTZXR0aW5nc1wiOiAzNCwgXCJicmVha0FmdGVyXCI6IDM2LCBcImJyZWFrQmVmb3JlXCI6IDM2LCBcImJyZWFrSW5zaWRlXCI6IDM2LCBcImNvbHVtbkNvdW50XCI6IDM2LCBcImNvbHVtbkZpbGxcIjogMzYsIFwiY29sdW1uR2FwXCI6IDM2LCBcImNvbHVtblJ1bGVcIjogMzYsIFwiY29sdW1uUnVsZUNvbG9yXCI6IDM2LCBcImNvbHVtblJ1bGVTdHlsZVwiOiAzNiwgXCJjb2x1bW5SdWxlV2lkdGhcIjogMzYsIFwiY29sdW1uc1wiOiAzNiwgXCJjb2x1bW5TcGFuXCI6IDM2LCBcImNvbHVtbldpZHRoXCI6IDM2IH0sIFwiaWVcIjogeyBcImZsZXhcIjogMTAsIFwiZmxleERpcmVjdGlvblwiOiAxMCwgXCJmbGV4Rmxvd1wiOiAxMCwgXCJmbGV4V3JhcFwiOiAxMCwgXCJ0cmFuc2Zvcm1cIjogOSwgXCJ0cmFuc2Zvcm1PcmlnaW5cIjogOSwgXCJ0cmFuc2Zvcm1PcmlnaW5YXCI6IDksIFwidHJhbnNmb3JtT3JpZ2luWVwiOiA5LCBcInVzZXJTZWxlY3RcIjogMTEsIFwid3JhcEZsb3dcIjogMTEsIFwid3JhcFRocm91Z2hcIjogMTEsIFwid3JhcE1hcmdpblwiOiAxMSwgXCJzY3JvbGxTbmFwVHlwZVwiOiAxMSwgXCJzY3JvbGxTbmFwUG9pbnRzWFwiOiAxMSwgXCJzY3JvbGxTbmFwUG9pbnRzWVwiOiAxMSwgXCJzY3JvbGxTbmFwRGVzdGluYXRpb25cIjogMTEsIFwic2Nyb2xsU25hcENvb3JkaW5hdGVcIjogMTEsIFwidG91Y2hBY3Rpb25cIjogMTAsIFwiaHlwaGVuc1wiOiAxMSwgXCJmbG93SW50b1wiOiAxMSwgXCJmbG93RnJvbVwiOiAxMSwgXCJicmVha0JlZm9yZVwiOiAxMSwgXCJicmVha0FmdGVyXCI6IDExLCBcImJyZWFrSW5zaWRlXCI6IDExLCBcInJlZ2lvbkZyYWdtZW50XCI6IDExLCBcImdyaWRUZW1wbGF0ZUNvbHVtbnNcIjogMTEsIFwiZ3JpZFRlbXBsYXRlUm93c1wiOiAxMSwgXCJncmlkVGVtcGxhdGVBcmVhc1wiOiAxMSwgXCJncmlkVGVtcGxhdGVcIjogMTEsIFwiZ3JpZEF1dG9Db2x1bW5zXCI6IDExLCBcImdyaWRBdXRvUm93c1wiOiAxMSwgXCJncmlkQXV0b0Zsb3dcIjogMTEsIFwiZ3JpZFwiOiAxMSwgXCJncmlkUm93U3RhcnRcIjogMTEsIFwiZ3JpZENvbHVtblN0YXJ0XCI6IDExLCBcImdyaWRSb3dFbmRcIjogMTEsIFwiZ3JpZFJvd1wiOiAxMSwgXCJncmlkQ29sdW1uXCI6IDExLCBcImdyaWRDb2x1bW5FbmRcIjogMTEsIFwiZ3JpZENvbHVtbkdhcFwiOiAxMSwgXCJncmlkUm93R2FwXCI6IDExLCBcImdyaWRBcmVhXCI6IDExLCBcImdyaWRHYXBcIjogMTEsIFwidGV4dFNpemVBZGp1c3RcIjogMTEgfSwgXCJlZGdlXCI6IHsgXCJ1c2VyU2VsZWN0XCI6IDE0LCBcIndyYXBGbG93XCI6IDE0LCBcIndyYXBUaHJvdWdoXCI6IDE0LCBcIndyYXBNYXJnaW5cIjogMTQsIFwic2Nyb2xsU25hcFR5cGVcIjogMTQsIFwic2Nyb2xsU25hcFBvaW50c1hcIjogMTQsIFwic2Nyb2xsU25hcFBvaW50c1lcIjogMTQsIFwic2Nyb2xsU25hcERlc3RpbmF0aW9uXCI6IDE0LCBcInNjcm9sbFNuYXBDb29yZGluYXRlXCI6IDE0LCBcImh5cGhlbnNcIjogMTQsIFwiZmxvd0ludG9cIjogMTQsIFwiZmxvd0Zyb21cIjogMTQsIFwiYnJlYWtCZWZvcmVcIjogMTQsIFwiYnJlYWtBZnRlclwiOiAxNCwgXCJicmVha0luc2lkZVwiOiAxNCwgXCJyZWdpb25GcmFnbWVudFwiOiAxNCwgXCJncmlkVGVtcGxhdGVDb2x1bW5zXCI6IDE0LCBcImdyaWRUZW1wbGF0ZVJvd3NcIjogMTQsIFwiZ3JpZFRlbXBsYXRlQXJlYXNcIjogMTQsIFwiZ3JpZFRlbXBsYXRlXCI6IDE0LCBcImdyaWRBdXRvQ29sdW1uc1wiOiAxNCwgXCJncmlkQXV0b1Jvd3NcIjogMTQsIFwiZ3JpZEF1dG9GbG93XCI6IDE0LCBcImdyaWRcIjogMTQsIFwiZ3JpZFJvd1N0YXJ0XCI6IDE0LCBcImdyaWRDb2x1bW5TdGFydFwiOiAxNCwgXCJncmlkUm93RW5kXCI6IDE0LCBcImdyaWRSb3dcIjogMTQsIFwiZ3JpZENvbHVtblwiOiAxNCwgXCJncmlkQ29sdW1uRW5kXCI6IDE0LCBcImdyaWRDb2x1bW5HYXBcIjogMTQsIFwiZ3JpZFJvd0dhcFwiOiAxNCwgXCJncmlkQXJlYVwiOiAxNCwgXCJncmlkR2FwXCI6IDE0IH0sIFwiaW9zX3NhZlwiOiB7IFwiZmxleFwiOiA4LjEsIFwiZmxleEJhc2lzXCI6IDguMSwgXCJmbGV4RGlyZWN0aW9uXCI6IDguMSwgXCJmbGV4R3Jvd1wiOiA4LjEsIFwiZmxleEZsb3dcIjogOC4xLCBcImZsZXhTaHJpbmtcIjogOC4xLCBcImZsZXhXcmFwXCI6IDguMSwgXCJhbGlnbkNvbnRlbnRcIjogOC4xLCBcImFsaWduSXRlbXNcIjogOC4xLCBcImFsaWduU2VsZlwiOiA4LjEsIFwianVzdGlmeUNvbnRlbnRcIjogOC4xLCBcIm9yZGVyXCI6IDguMSwgXCJ0cmFuc2l0aW9uXCI6IDYsIFwidHJhbnNpdGlvbkRlbGF5XCI6IDYsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCI6IDYsIFwidHJhbnNpdGlvblByb3BlcnR5XCI6IDYsIFwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXCI6IDYsIFwidHJhbnNmb3JtXCI6IDguMSwgXCJ0cmFuc2Zvcm1PcmlnaW5cIjogOC4xLCBcInRyYW5zZm9ybU9yaWdpblhcIjogOC4xLCBcInRyYW5zZm9ybU9yaWdpbllcIjogOC4xLCBcImJhY2tmYWNlVmlzaWJpbGl0eVwiOiA4LjEsIFwicGVyc3BlY3RpdmVcIjogOC4xLCBcInBlcnNwZWN0aXZlT3JpZ2luXCI6IDguMSwgXCJ0cmFuc2Zvcm1TdHlsZVwiOiA4LjEsIFwidHJhbnNmb3JtT3JpZ2luWlwiOiA4LjEsIFwiYW5pbWF0aW9uXCI6IDguMSwgXCJhbmltYXRpb25EZWxheVwiOiA4LjEsIFwiYW5pbWF0aW9uRGlyZWN0aW9uXCI6IDguMSwgXCJhbmltYXRpb25GaWxsTW9kZVwiOiA4LjEsIFwiYW5pbWF0aW9uRHVyYXRpb25cIjogOC4xLCBcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IDguMSwgXCJhbmltYXRpb25OYW1lXCI6IDguMSwgXCJhbmltYXRpb25QbGF5U3RhdGVcIjogOC4xLCBcImFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uXCI6IDguMSwgXCJhcHBlYXJhbmNlXCI6IDkuMywgXCJ1c2VyU2VsZWN0XCI6IDkuMywgXCJiYWNrZHJvcEZpbHRlclwiOiA5LjMsIFwiZm9udEtlcm5pbmdcIjogOS4zLCBcInNjcm9sbFNuYXBUeXBlXCI6IDkuMywgXCJzY3JvbGxTbmFwUG9pbnRzWFwiOiA5LjMsIFwic2Nyb2xsU25hcFBvaW50c1lcIjogOS4zLCBcInNjcm9sbFNuYXBEZXN0aW5hdGlvblwiOiA5LjMsIFwic2Nyb2xsU25hcENvb3JkaW5hdGVcIjogOS4zLCBcImJveERlY29yYXRpb25CcmVha1wiOiA5LjMsIFwiY2xpcFBhdGhcIjogOS4zLCBcIm1hc2tJbWFnZVwiOiA5LjMsIFwibWFza01vZGVcIjogOS4zLCBcIm1hc2tSZXBlYXRcIjogOS4zLCBcIm1hc2tQb3NpdGlvblwiOiA5LjMsIFwibWFza0NsaXBcIjogOS4zLCBcIm1hc2tPcmlnaW5cIjogOS4zLCBcIm1hc2tTaXplXCI6IDkuMywgXCJtYXNrQ29tcG9zaXRlXCI6IDkuMywgXCJtYXNrXCI6IDkuMywgXCJtYXNrQm9yZGVyU291cmNlXCI6IDkuMywgXCJtYXNrQm9yZGVyTW9kZVwiOiA5LjMsIFwibWFza0JvcmRlclNsaWNlXCI6IDkuMywgXCJtYXNrQm9yZGVyV2lkdGhcIjogOS4zLCBcIm1hc2tCb3JkZXJPdXRzZXRcIjogOS4zLCBcIm1hc2tCb3JkZXJSZXBlYXRcIjogOS4zLCBcIm1hc2tCb3JkZXJcIjogOS4zLCBcIm1hc2tUeXBlXCI6IDkuMywgXCJ0ZXh0U2l6ZUFkanVzdFwiOiA5LjMsIFwidGV4dERlY29yYXRpb25TdHlsZVwiOiA5LjMsIFwidGV4dERlY29yYXRpb25Ta2lwXCI6IDkuMywgXCJ0ZXh0RGVjb3JhdGlvbkxpbmVcIjogOS4zLCBcInRleHREZWNvcmF0aW9uQ29sb3JcIjogOS4zLCBcInNoYXBlSW1hZ2VUaHJlc2hvbGRcIjogOS4zLCBcInNoYXBlSW1hZ2VNYXJnaW5cIjogOS4zLCBcInNoYXBlSW1hZ2VPdXRzaWRlXCI6IDkuMywgXCJmaWx0ZXJcIjogOSwgXCJoeXBoZW5zXCI6IDkuMywgXCJmbG93SW50b1wiOiA5LjMsIFwiZmxvd0Zyb21cIjogOS4zLCBcImJyZWFrQmVmb3JlXCI6IDguMSwgXCJicmVha0FmdGVyXCI6IDguMSwgXCJicmVha0luc2lkZVwiOiA4LjEsIFwicmVnaW9uRnJhZ21lbnRcIjogOS4zLCBcImNvbHVtbkNvdW50XCI6IDguMSwgXCJjb2x1bW5GaWxsXCI6IDguMSwgXCJjb2x1bW5HYXBcIjogOC4xLCBcImNvbHVtblJ1bGVcIjogOC4xLCBcImNvbHVtblJ1bGVDb2xvclwiOiA4LjEsIFwiY29sdW1uUnVsZVN0eWxlXCI6IDguMSwgXCJjb2x1bW5SdWxlV2lkdGhcIjogOC4xLCBcImNvbHVtbnNcIjogOC4xLCBcImNvbHVtblNwYW5cIjogOC4xLCBcImNvbHVtbldpZHRoXCI6IDguMSB9LCBcImFuZHJvaWRcIjogeyBcImZsZXhcIjogNC4yLCBcImZsZXhCYXNpc1wiOiA0LjIsIFwiZmxleERpcmVjdGlvblwiOiA0LjIsIFwiZmxleEdyb3dcIjogNC4yLCBcImZsZXhGbG93XCI6IDQuMiwgXCJmbGV4U2hyaW5rXCI6IDQuMiwgXCJmbGV4V3JhcFwiOiA0LjIsIFwiYWxpZ25Db250ZW50XCI6IDQuMiwgXCJhbGlnbkl0ZW1zXCI6IDQuMiwgXCJhbGlnblNlbGZcIjogNC4yLCBcImp1c3RpZnlDb250ZW50XCI6IDQuMiwgXCJvcmRlclwiOiA0LjIsIFwidHJhbnNpdGlvblwiOiA0LjIsIFwidHJhbnNpdGlvbkRlbGF5XCI6IDQuMiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIjogNC4yLCBcInRyYW5zaXRpb25Qcm9wZXJ0eVwiOiA0LjIsIFwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXCI6IDQuMiwgXCJ0cmFuc2Zvcm1cIjogNC40LCBcInRyYW5zZm9ybU9yaWdpblwiOiA0LjQsIFwidHJhbnNmb3JtT3JpZ2luWFwiOiA0LjQsIFwidHJhbnNmb3JtT3JpZ2luWVwiOiA0LjQsIFwiYmFja2ZhY2VWaXNpYmlsaXR5XCI6IDQuNCwgXCJwZXJzcGVjdGl2ZVwiOiA0LjQsIFwicGVyc3BlY3RpdmVPcmlnaW5cIjogNC40LCBcInRyYW5zZm9ybVN0eWxlXCI6IDQuNCwgXCJ0cmFuc2Zvcm1PcmlnaW5aXCI6IDQuNCwgXCJhbmltYXRpb25cIjogNC40LCBcImFuaW1hdGlvbkRlbGF5XCI6IDQuNCwgXCJhbmltYXRpb25EaXJlY3Rpb25cIjogNC40LCBcImFuaW1hdGlvbkZpbGxNb2RlXCI6IDQuNCwgXCJhbmltYXRpb25EdXJhdGlvblwiOiA0LjQsIFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogNC40LCBcImFuaW1hdGlvbk5hbWVcIjogNC40LCBcImFuaW1hdGlvblBsYXlTdGF0ZVwiOiA0LjQsIFwiYW5pbWF0aW9uVGltaW5nRnVuY3Rpb25cIjogNC40LCBcImFwcGVhcmFuY2VcIjogNTEsIFwidXNlclNlbGVjdFwiOiA1MSwgXCJmb250S2VybmluZ1wiOiA0LjQsIFwidGV4dEVtcGhhc2lzUG9zaXRpb25cIjogNTEsIFwidGV4dEVtcGhhc2lzXCI6IDUxLCBcInRleHRFbXBoYXNpc1N0eWxlXCI6IDUxLCBcInRleHRFbXBoYXNpc0NvbG9yXCI6IDUxLCBcImJveERlY29yYXRpb25CcmVha1wiOiA1MSwgXCJjbGlwUGF0aFwiOiA1MSwgXCJtYXNrSW1hZ2VcIjogNTEsIFwibWFza01vZGVcIjogNTEsIFwibWFza1JlcGVhdFwiOiA1MSwgXCJtYXNrUG9zaXRpb25cIjogNTEsIFwibWFza0NsaXBcIjogNTEsIFwibWFza09yaWdpblwiOiA1MSwgXCJtYXNrU2l6ZVwiOiA1MSwgXCJtYXNrQ29tcG9zaXRlXCI6IDUxLCBcIm1hc2tcIjogNTEsIFwibWFza0JvcmRlclNvdXJjZVwiOiA1MSwgXCJtYXNrQm9yZGVyTW9kZVwiOiA1MSwgXCJtYXNrQm9yZGVyU2xpY2VcIjogNTEsIFwibWFza0JvcmRlcldpZHRoXCI6IDUxLCBcIm1hc2tCb3JkZXJPdXRzZXRcIjogNTEsIFwibWFza0JvcmRlclJlcGVhdFwiOiA1MSwgXCJtYXNrQm9yZGVyXCI6IDUxLCBcIm1hc2tUeXBlXCI6IDUxLCBcImZpbHRlclwiOiA1MSwgXCJmb250RmVhdHVyZVNldHRpbmdzXCI6IDQuNCwgXCJicmVha0FmdGVyXCI6IDUxLCBcImJyZWFrQmVmb3JlXCI6IDUxLCBcImJyZWFrSW5zaWRlXCI6IDUxLCBcImNvbHVtbkNvdW50XCI6IDUxLCBcImNvbHVtbkZpbGxcIjogNTEsIFwiY29sdW1uR2FwXCI6IDUxLCBcImNvbHVtblJ1bGVcIjogNTEsIFwiY29sdW1uUnVsZUNvbG9yXCI6IDUxLCBcImNvbHVtblJ1bGVTdHlsZVwiOiA1MSwgXCJjb2x1bW5SdWxlV2lkdGhcIjogNTEsIFwiY29sdW1uc1wiOiA1MSwgXCJjb2x1bW5TcGFuXCI6IDUxLCBcImNvbHVtbldpZHRoXCI6IDUxIH0sIFwiYW5kX2NoclwiOiB7IFwiYXBwZWFyYW5jZVwiOiA1MSwgXCJ1c2VyU2VsZWN0XCI6IDUxLCBcInRleHRFbXBoYXNpc1Bvc2l0aW9uXCI6IDUxLCBcInRleHRFbXBoYXNpc1wiOiA1MSwgXCJ0ZXh0RW1waGFzaXNTdHlsZVwiOiA1MSwgXCJ0ZXh0RW1waGFzaXNDb2xvclwiOiA1MSwgXCJib3hEZWNvcmF0aW9uQnJlYWtcIjogNTEsIFwiY2xpcFBhdGhcIjogNTEsIFwibWFza0ltYWdlXCI6IDUxLCBcIm1hc2tNb2RlXCI6IDUxLCBcIm1hc2tSZXBlYXRcIjogNTEsIFwibWFza1Bvc2l0aW9uXCI6IDUxLCBcIm1hc2tDbGlwXCI6IDUxLCBcIm1hc2tPcmlnaW5cIjogNTEsIFwibWFza1NpemVcIjogNTEsIFwibWFza0NvbXBvc2l0ZVwiOiA1MSwgXCJtYXNrXCI6IDUxLCBcIm1hc2tCb3JkZXJTb3VyY2VcIjogNTEsIFwibWFza0JvcmRlck1vZGVcIjogNTEsIFwibWFza0JvcmRlclNsaWNlXCI6IDUxLCBcIm1hc2tCb3JkZXJXaWR0aFwiOiA1MSwgXCJtYXNrQm9yZGVyT3V0c2V0XCI6IDUxLCBcIm1hc2tCb3JkZXJSZXBlYXRcIjogNTEsIFwibWFza0JvcmRlclwiOiA1MSwgXCJtYXNrVHlwZVwiOiA1MSwgXCJ0ZXh0RGVjb3JhdGlvblN0eWxlXCI6IDUxLCBcInRleHREZWNvcmF0aW9uU2tpcFwiOiA1MSwgXCJ0ZXh0RGVjb3JhdGlvbkxpbmVcIjogNTEsIFwidGV4dERlY29yYXRpb25Db2xvclwiOiA1MSwgXCJmaWx0ZXJcIjogNTEgfSwgXCJhbmRfdWNcIjogeyBcImZsZXhcIjogOS45LCBcImZsZXhCYXNpc1wiOiA5LjksIFwiZmxleERpcmVjdGlvblwiOiA5LjksIFwiZmxleEdyb3dcIjogOS45LCBcImZsZXhGbG93XCI6IDkuOSwgXCJmbGV4U2hyaW5rXCI6IDkuOSwgXCJmbGV4V3JhcFwiOiA5LjksIFwiYWxpZ25Db250ZW50XCI6IDkuOSwgXCJhbGlnbkl0ZW1zXCI6IDkuOSwgXCJhbGlnblNlbGZcIjogOS45LCBcImp1c3RpZnlDb250ZW50XCI6IDkuOSwgXCJvcmRlclwiOiA5LjksIFwidHJhbnNpdGlvblwiOiA5LjksIFwidHJhbnNpdGlvbkRlbGF5XCI6IDkuOSwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIjogOS45LCBcInRyYW5zaXRpb25Qcm9wZXJ0eVwiOiA5LjksIFwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXCI6IDkuOSwgXCJ0cmFuc2Zvcm1cIjogOS45LCBcInRyYW5zZm9ybU9yaWdpblwiOiA5LjksIFwidHJhbnNmb3JtT3JpZ2luWFwiOiA5LjksIFwidHJhbnNmb3JtT3JpZ2luWVwiOiA5LjksIFwiYmFja2ZhY2VWaXNpYmlsaXR5XCI6IDkuOSwgXCJwZXJzcGVjdGl2ZVwiOiA5LjksIFwicGVyc3BlY3RpdmVPcmlnaW5cIjogOS45LCBcInRyYW5zZm9ybVN0eWxlXCI6IDkuOSwgXCJ0cmFuc2Zvcm1PcmlnaW5aXCI6IDkuOSwgXCJhbmltYXRpb25cIjogOS45LCBcImFuaW1hdGlvbkRlbGF5XCI6IDkuOSwgXCJhbmltYXRpb25EaXJlY3Rpb25cIjogOS45LCBcImFuaW1hdGlvbkZpbGxNb2RlXCI6IDkuOSwgXCJhbmltYXRpb25EdXJhdGlvblwiOiA5LjksIFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogOS45LCBcImFuaW1hdGlvbk5hbWVcIjogOS45LCBcImFuaW1hdGlvblBsYXlTdGF0ZVwiOiA5LjksIFwiYW5pbWF0aW9uVGltaW5nRnVuY3Rpb25cIjogOS45LCBcImFwcGVhcmFuY2VcIjogOS45LCBcInVzZXJTZWxlY3RcIjogOS45LCBcImZvbnRLZXJuaW5nXCI6IDkuOSwgXCJ0ZXh0RW1waGFzaXNQb3NpdGlvblwiOiA5LjksIFwidGV4dEVtcGhhc2lzXCI6IDkuOSwgXCJ0ZXh0RW1waGFzaXNTdHlsZVwiOiA5LjksIFwidGV4dEVtcGhhc2lzQ29sb3JcIjogOS45LCBcIm1hc2tJbWFnZVwiOiA5LjksIFwibWFza01vZGVcIjogOS45LCBcIm1hc2tSZXBlYXRcIjogOS45LCBcIm1hc2tQb3NpdGlvblwiOiA5LjksIFwibWFza0NsaXBcIjogOS45LCBcIm1hc2tPcmlnaW5cIjogOS45LCBcIm1hc2tTaXplXCI6IDkuOSwgXCJtYXNrQ29tcG9zaXRlXCI6IDkuOSwgXCJtYXNrXCI6IDkuOSwgXCJtYXNrQm9yZGVyU291cmNlXCI6IDkuOSwgXCJtYXNrQm9yZGVyTW9kZVwiOiA5LjksIFwibWFza0JvcmRlclNsaWNlXCI6IDkuOSwgXCJtYXNrQm9yZGVyV2lkdGhcIjogOS45LCBcIm1hc2tCb3JkZXJPdXRzZXRcIjogOS45LCBcIm1hc2tCb3JkZXJSZXBlYXRcIjogOS45LCBcIm1hc2tCb3JkZXJcIjogOS45LCBcIm1hc2tUeXBlXCI6IDkuOSwgXCJ0ZXh0U2l6ZUFkanVzdFwiOiA5LjksIFwiZmlsdGVyXCI6IDkuOSwgXCJoeXBoZW5zXCI6IDkuOSwgXCJmbG93SW50b1wiOiA5LjksIFwiZmxvd0Zyb21cIjogOS45LCBcImJyZWFrQmVmb3JlXCI6IDkuOSwgXCJicmVha0FmdGVyXCI6IDkuOSwgXCJicmVha0luc2lkZVwiOiA5LjksIFwicmVnaW9uRnJhZ21lbnRcIjogOS45LCBcImZvbnRGZWF0dXJlU2V0dGluZ3NcIjogOS45LCBcImNvbHVtbkNvdW50XCI6IDkuOSwgXCJjb2x1bW5GaWxsXCI6IDkuOSwgXCJjb2x1bW5HYXBcIjogOS45LCBcImNvbHVtblJ1bGVcIjogOS45LCBcImNvbHVtblJ1bGVDb2xvclwiOiA5LjksIFwiY29sdW1uUnVsZVN0eWxlXCI6IDkuOSwgXCJjb2x1bW5SdWxlV2lkdGhcIjogOS45LCBcImNvbHVtbnNcIjogOS45LCBcImNvbHVtblNwYW5cIjogOS45LCBcImNvbHVtbldpZHRoXCI6IDkuOSB9LCBcIm9wX21pbmlcIjoge30gfTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3ByZWZpeFByb3BzLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FsYztcblxudmFyIF9qb2luUHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2pvaW5QcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfam9pblByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfam9pblByZWZpeGVkVmFsdWUpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2lzUHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBjYWxjKHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhKDAsIF9pc1ByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlKSAmJiB2YWx1ZS5pbmRleE9mKCdjYWxjKCcpID4gLTEpIHtcbiAgICByZXR1cm4gKDAsIF9qb2luUHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkocHJvcGVydHksIHZhbHVlLCBmdW5jdGlvbiAocHJlZml4LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL2NhbGNcXCgvZywgcHJlZml4ICsgJ2NhbGMoJyk7XG4gICAgfSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9zdGF0aWMvcGx1Z2lucy9jYWxjLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3Vyc29yO1xuXG52YXIgX2pvaW5QcmVmaXhlZFZhbHVlID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvam9pblByZWZpeGVkVmFsdWUnKTtcblxudmFyIF9qb2luUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qb2luUHJlZml4ZWRWYWx1ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciB2YWx1ZXMgPSB7XG4gICd6b29tLWluJzogdHJ1ZSxcbiAgJ3pvb20tb3V0JzogdHJ1ZSxcbiAgZ3JhYjogdHJ1ZSxcbiAgZ3JhYmJpbmc6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGN1cnNvcihwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHByb3BlcnR5ID09PSAnY3Vyc29yJyAmJiB2YWx1ZXNbdmFsdWVdKSB7XG4gICAgcmV0dXJuICgwLCBfam9pblByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHByb3BlcnR5LCB2YWx1ZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9zdGF0aWMvcGx1Z2lucy9jdXJzb3IuanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmbGV4O1xudmFyIHZhbHVlcyA9IHsgZmxleDogdHJ1ZSwgJ2lubGluZS1mbGV4JzogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBmbGV4KHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAocHJvcGVydHkgPT09ICdkaXNwbGF5JyAmJiB2YWx1ZXNbdmFsdWVdKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BsYXk6IFsnLXdlYmtpdC1ib3gnLCAnLW1vei1ib3gnLCAnLW1zLScgKyB2YWx1ZSArICdib3gnLCAnLXdlYmtpdC0nICsgdmFsdWUsIHZhbHVlXVxuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9zdGF0aWMvcGx1Z2lucy9mbGV4LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmxleGJveElFO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgYWx0ZXJuYXRpdmVWYWx1ZXMgPSB7XG4gICdzcGFjZS1hcm91bmQnOiAnZGlzdHJpYnV0ZScsXG4gICdzcGFjZS1iZXR3ZWVuJzogJ2p1c3RpZnknLFxuICAnZmxleC1zdGFydCc6ICdzdGFydCcsXG4gICdmbGV4LWVuZCc6ICdlbmQnXG59O1xudmFyIGFsdGVybmF0aXZlUHJvcHMgPSB7XG4gIGFsaWduQ29udGVudDogJ21zRmxleExpbmVQYWNrJyxcbiAgYWxpZ25TZWxmOiAnbXNGbGV4SXRlbUFsaWduJyxcbiAgYWxpZ25JdGVtczogJ21zRmxleEFsaWduJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdtc0ZsZXhQYWNrJyxcbiAgb3JkZXI6ICdtc0ZsZXhPcmRlcicsXG4gIGZsZXhHcm93OiAnbXNGbGV4UG9zaXRpdmUnLFxuICBmbGV4U2hyaW5rOiAnbXNGbGV4TmVnYXRpdmUnLFxuICBmbGV4QmFzaXM6ICdtc1ByZWZlcnJlZFNpemUnXG59O1xuXG5mdW5jdGlvbiBmbGV4Ym94SUUocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmIChhbHRlcm5hdGl2ZVByb3BzW3Byb3BlcnR5XSkge1xuICAgIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIGFsdGVybmF0aXZlUHJvcHNbcHJvcGVydHldLCBhbHRlcm5hdGl2ZVZhbHVlc1t2YWx1ZV0gfHwgdmFsdWUpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvc3RhdGljL3BsdWdpbnMvZmxleGJveElFLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmxleGJveE9sZDtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIGFsdGVybmF0aXZlVmFsdWVzID0ge1xuICAnc3BhY2UtYXJvdW5kJzogJ2p1c3RpZnknLFxuICAnc3BhY2UtYmV0d2Vlbic6ICdqdXN0aWZ5JyxcbiAgJ2ZsZXgtc3RhcnQnOiAnc3RhcnQnLFxuICAnZmxleC1lbmQnOiAnZW5kJyxcbiAgJ3dyYXAtcmV2ZXJzZSc6ICdtdWx0aXBsZScsXG4gIHdyYXA6ICdtdWx0aXBsZSdcbn07XG5cbnZhciBhbHRlcm5hdGl2ZVByb3BzID0ge1xuICBhbGlnbkl0ZW1zOiAnV2Via2l0Qm94QWxpZ24nLFxuICBqdXN0aWZ5Q29udGVudDogJ1dlYmtpdEJveFBhY2snLFxuICBmbGV4V3JhcDogJ1dlYmtpdEJveExpbmVzJ1xufTtcblxuZnVuY3Rpb24gZmxleGJveE9sZChwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHByb3BlcnR5ID09PSAnZmxleERpcmVjdGlvbicgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB7XG4gICAgICBXZWJraXRCb3hPcmllbnQ6IHZhbHVlLmluZGV4T2YoJ2NvbHVtbicpID4gLTEgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnLFxuICAgICAgV2Via2l0Qm94RGlyZWN0aW9uOiB2YWx1ZS5pbmRleE9mKCdyZXZlcnNlJykgPiAtMSA/ICdyZXZlcnNlJyA6ICdub3JtYWwnXG4gICAgfTtcbiAgfVxuICBpZiAoYWx0ZXJuYXRpdmVQcm9wc1twcm9wZXJ0eV0pIHtcbiAgICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBhbHRlcm5hdGl2ZVByb3BzW3Byb3BlcnR5XSwgYWx0ZXJuYXRpdmVWYWx1ZXNbdmFsdWVdIHx8IHZhbHVlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3N0YXRpYy9wbHVnaW5zL2ZsZXhib3hPbGQuanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBncmFkaWVudDtcblxudmFyIF9qb2luUHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2pvaW5QcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfam9pblByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfam9pblByZWZpeGVkVmFsdWUpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2lzUHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgdmFsdWVzID0gL2xpbmVhci1ncmFkaWVudHxyYWRpYWwtZ3JhZGllbnR8cmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudHxyZXBlYXRpbmctcmFkaWFsLWdyYWRpZW50LztcblxuZnVuY3Rpb24gZ3JhZGllbnQocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEoMCwgX2lzUHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkodmFsdWUpICYmIHZhbHVlLm1hdGNoKHZhbHVlcykgIT09IG51bGwpIHtcbiAgICByZXR1cm4gKDAsIF9qb2luUHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkocHJvcGVydHksIHZhbHVlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3N0YXRpYy9wbHVnaW5zL2dyYWRpZW50LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcG9zaXRpb247XG5mdW5jdGlvbiBwb3NpdGlvbihwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHByb3BlcnR5ID09PSAncG9zaXRpb24nICYmIHZhbHVlID09PSAnc3RpY2t5Jykge1xuICAgIHJldHVybiB7IHBvc2l0aW9uOiBbJy13ZWJraXQtc3RpY2t5JywgJ3N0aWNreSddIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9zdGF0aWMvcGx1Z2lucy9wb3NpdGlvbi5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNpemluZztcblxudmFyIF9qb2luUHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2pvaW5QcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfam9pblByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfam9pblByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcHJvcGVydGllcyA9IHtcbiAgbWF4SGVpZ2h0OiB0cnVlLFxuICBtYXhXaWR0aDogdHJ1ZSxcbiAgd2lkdGg6IHRydWUsXG4gIGhlaWdodDogdHJ1ZSxcbiAgY29sdW1uV2lkdGg6IHRydWUsXG4gIG1pbldpZHRoOiB0cnVlLFxuICBtaW5IZWlnaHQ6IHRydWVcbn07XG52YXIgdmFsdWVzID0ge1xuICAnbWluLWNvbnRlbnQnOiB0cnVlLFxuICAnbWF4LWNvbnRlbnQnOiB0cnVlLFxuICAnZmlsbC1hdmFpbGFibGUnOiB0cnVlLFxuICAnZml0LWNvbnRlbnQnOiB0cnVlLFxuICAnY29udGFpbi1mbG9hdHMnOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBzaXppbmcocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmIChwcm9wZXJ0aWVzW3Byb3BlcnR5XSAmJiB2YWx1ZXNbdmFsdWVdKSB7XG4gICAgcmV0dXJuICgwLCBfam9pblByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHByb3BlcnR5LCB2YWx1ZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi9zdGF0aWMvcGx1Z2lucy9zaXppbmcuanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0cmFuc2l0aW9uO1xuXG52YXIgX2h5cGhlbmF0ZVN0eWxlTmFtZSA9IHJlcXVpcmUoJ2h5cGhlbmF0ZS1zdHlsZS1uYW1lJyk7XG5cbnZhciBfaHlwaGVuYXRlU3R5bGVOYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2h5cGhlbmF0ZVN0eWxlTmFtZSk7XG5cbnZhciBfY2FwaXRhbGl6ZVN0cmluZyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2NhcGl0YWxpemVTdHJpbmcnKTtcblxudmFyIF9jYXBpdGFsaXplU3RyaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhcGl0YWxpemVTdHJpbmcpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2lzUHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ByZWZpeGVkVmFsdWUpO1xuXG52YXIgX3ByZWZpeFByb3BzID0gcmVxdWlyZSgnLi4vcHJlZml4UHJvcHMnKTtcblxudmFyIF9wcmVmaXhQcm9wczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcmVmaXhQcm9wcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBwcm9wZXJ0aWVzID0ge1xuICB0cmFuc2l0aW9uOiB0cnVlLFxuICB0cmFuc2l0aW9uUHJvcGVydHk6IHRydWUsXG4gIFdlYmtpdFRyYW5zaXRpb246IHRydWUsXG4gIFdlYmtpdFRyYW5zaXRpb25Qcm9wZXJ0eTogdHJ1ZVxufTtcblxuZnVuY3Rpb24gdHJhbnNpdGlvbihwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgLy8gYWxzbyBjaGVjayBmb3IgYWxyZWFkeSBwcmVmaXhlZCB0cmFuc2l0aW9uc1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiBwcm9wZXJ0aWVzW3Byb3BlcnR5XSkge1xuICAgIHZhciBfcmVmMjtcblxuICAgIHZhciBvdXRwdXRWYWx1ZSA9IHByZWZpeFZhbHVlKHZhbHVlKTtcbiAgICB2YXIgd2Via2l0T3V0cHV0ID0gb3V0cHV0VmFsdWUuc3BsaXQoLywoPyFbXigpXSooPzpcXChbXigpXSpcXCkpP1xcKSkvZykuZmlsdGVyKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlLm1hdGNoKC8tbW96LXwtbXMtLykgPT09IG51bGw7XG4gICAgfSkuam9pbignLCcpO1xuXG4gICAgLy8gaWYgdGhlIHByb3BlcnR5IGlzIGFscmVhZHkgcHJlZml4ZWRcbiAgICBpZiAocHJvcGVydHkuaW5kZXhPZignV2Via2l0JykgPiAtMSkge1xuICAgICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgcHJvcGVydHksIHdlYmtpdE91dHB1dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZWYyID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmMiwgJ1dlYmtpdCcgKyAoMCwgX2NhcGl0YWxpemVTdHJpbmcyLmRlZmF1bHQpKHByb3BlcnR5KSwgd2Via2l0T3V0cHV0KSwgX2RlZmluZVByb3BlcnR5KF9yZWYyLCBwcm9wZXJ0eSwgb3V0cHV0VmFsdWUpLCBfcmVmMjtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVmaXhWYWx1ZSh2YWx1ZSkge1xuICBpZiAoKDAsIF9pc1ByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8vIG9ubHkgc3BsaXQgbXVsdGkgdmFsdWVzLCBub3QgY3ViaWMgYmV6aWVyc1xuICB2YXIgbXVsdGlwbGVWYWx1ZXMgPSB2YWx1ZS5zcGxpdCgvLCg/IVteKCldKig/OlxcKFteKCldKlxcKSk/XFwpKS9nKTtcblxuICAvLyBpdGVyYXRlIGVhY2ggc2luZ2xlIHZhbHVlIGFuZCBjaGVjayBmb3IgdHJhbnNpdGlvbmVkIHByb3BlcnRpZXNcbiAgLy8gdGhhdCBuZWVkIHRvIGJlIHByZWZpeGVkIGFzIHdlbGxcbiAgbXVsdGlwbGVWYWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsLCBpbmRleCkge1xuICAgIG11bHRpcGxlVmFsdWVzW2luZGV4XSA9IE9iamVjdC5rZXlzKF9wcmVmaXhQcm9wczIuZGVmYXVsdCkucmVkdWNlKGZ1bmN0aW9uIChvdXQsIHByZWZpeCkge1xuICAgICAgdmFyIGRhc2hDYXNlUHJlZml4ID0gJy0nICsgcHJlZml4LnRvTG93ZXJDYXNlKCkgKyAnLSc7XG5cbiAgICAgIE9iamVjdC5rZXlzKF9wcmVmaXhQcm9wczIuZGVmYXVsdFtwcmVmaXhdKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHZhciBkYXNoQ2FzZVByb3BlcnR5ID0gKDAsIF9oeXBoZW5hdGVTdHlsZU5hbWUyLmRlZmF1bHQpKHByb3ApO1xuXG4gICAgICAgIGlmICh2YWwuaW5kZXhPZihkYXNoQ2FzZVByb3BlcnR5KSA+IC0xICYmIGRhc2hDYXNlUHJvcGVydHkgIT09ICdvcmRlcicpIHtcbiAgICAgICAgICAvLyBqb2luIGFsbCBwcmVmaXhlcyBhbmQgY3JlYXRlIGEgbmV3IHZhbHVlXG4gICAgICAgICAgb3V0ID0gdmFsLnJlcGxhY2UoZGFzaENhc2VQcm9wZXJ0eSwgZGFzaENhc2VQcmVmaXggKyBkYXNoQ2FzZVByb3BlcnR5KSArICcsJyArIG91dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH0sIHZhbCk7XG4gIH0pO1xuXG4gIHJldHVybiBtdWx0aXBsZVZhbHVlcy5qb2luKCcsJyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvc3RhdGljL3BsdWdpbnMvdHJhbnNpdGlvbi5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHByZWZpeEFsbDtcblxudmFyIF9wcmVmaXhQcm9wcyA9IHJlcXVpcmUoJy4vcHJlZml4UHJvcHMnKTtcblxudmFyIF9wcmVmaXhQcm9wczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcmVmaXhQcm9wcyk7XG5cbnZhciBfY2FwaXRhbGl6ZVN0cmluZyA9IHJlcXVpcmUoJy4uL3V0aWxzL2NhcGl0YWxpemVTdHJpbmcnKTtcblxudmFyIF9jYXBpdGFsaXplU3RyaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhcGl0YWxpemVTdHJpbmcpO1xuXG52YXIgX3NvcnRQcmVmaXhlZFN0eWxlID0gcmVxdWlyZSgnLi4vdXRpbHMvc29ydFByZWZpeGVkU3R5bGUnKTtcblxudmFyIF9zb3J0UHJlZml4ZWRTdHlsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zb3J0UHJlZml4ZWRTdHlsZSk7XG5cbnZhciBfcG9zaXRpb24gPSByZXF1aXJlKCcuL3BsdWdpbnMvcG9zaXRpb24nKTtcblxudmFyIF9wb3NpdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NpdGlvbik7XG5cbnZhciBfY2FsYyA9IHJlcXVpcmUoJy4vcGx1Z2lucy9jYWxjJyk7XG5cbnZhciBfY2FsYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jYWxjKTtcblxudmFyIF9jdXJzb3IgPSByZXF1aXJlKCcuL3BsdWdpbnMvY3Vyc29yJyk7XG5cbnZhciBfY3Vyc29yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2N1cnNvcik7XG5cbnZhciBfZmxleCA9IHJlcXVpcmUoJy4vcGx1Z2lucy9mbGV4Jyk7XG5cbnZhciBfZmxleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mbGV4KTtcblxudmFyIF9zaXppbmcgPSByZXF1aXJlKCcuL3BsdWdpbnMvc2l6aW5nJyk7XG5cbnZhciBfc2l6aW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpemluZyk7XG5cbnZhciBfZ3JhZGllbnQgPSByZXF1aXJlKCcuL3BsdWdpbnMvZ3JhZGllbnQnKTtcblxudmFyIF9ncmFkaWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ncmFkaWVudCk7XG5cbnZhciBfdHJhbnNpdGlvbiA9IHJlcXVpcmUoJy4vcGx1Z2lucy90cmFuc2l0aW9uJyk7XG5cbnZhciBfdHJhbnNpdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmFuc2l0aW9uKTtcblxudmFyIF9mbGV4Ym94SUUgPSByZXF1aXJlKCcuL3BsdWdpbnMvZmxleGJveElFJyk7XG5cbnZhciBfZmxleGJveElFMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZsZXhib3hJRSk7XG5cbnZhciBfZmxleGJveE9sZCA9IHJlcXVpcmUoJy4vcGx1Z2lucy9mbGV4Ym94T2xkJyk7XG5cbnZhciBfZmxleGJveE9sZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mbGV4Ym94T2xkKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gc3BlY2lhbCBmbGV4Ym94IHNwZWNpZmljYXRpb25zXG5cblxudmFyIHBsdWdpbnMgPSBbX3Bvc2l0aW9uMi5kZWZhdWx0LCBfY2FsYzIuZGVmYXVsdCwgX2N1cnNvcjIuZGVmYXVsdCwgX3NpemluZzIuZGVmYXVsdCwgX2dyYWRpZW50Mi5kZWZhdWx0LCBfdHJhbnNpdGlvbjIuZGVmYXVsdCwgX2ZsZXhib3hJRTIuZGVmYXVsdCwgX2ZsZXhib3hPbGQyLmRlZmF1bHQsIF9mbGV4Mi5kZWZhdWx0XTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgcHJlZml4ZWQgdmVyc2lvbiBvZiB0aGUgc3R5bGUgb2JqZWN0IHVzaW5nIGFsbCB2ZW5kb3IgcHJlZml4ZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZXMgLSBTdHlsZSBvYmplY3QgdGhhdCBnZXRzIHByZWZpeGVkIHByb3BlcnRpZXMgYWRkZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IC0gU3R5bGUgb2JqZWN0IHdpdGggcHJlZml4ZWQgcHJvcGVydGllcyBhbmQgdmFsdWVzXG4gKi9cbmZ1bmN0aW9uIHByZWZpeEFsbChzdHlsZXMpIHtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgIHZhciB2YWx1ZSA9IHN0eWxlc1twcm9wZXJ0eV07XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgLy8gcmVjdXJzZSB0aHJvdWdoIG5lc3RlZCBzdHlsZSBvYmplY3RzXG4gICAgICBzdHlsZXNbcHJvcGVydHldID0gcHJlZml4QWxsKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmtleXMoX3ByZWZpeFByb3BzMi5kZWZhdWx0KS5mb3JFYWNoKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgICAgdmFyIHByb3BlcnRpZXMgPSBfcHJlZml4UHJvcHMyLmRlZmF1bHRbcHJlZml4XTtcbiAgICAgICAgLy8gYWRkIHByZWZpeGVzIGlmIG5lZWRlZFxuICAgICAgICBpZiAocHJvcGVydGllc1twcm9wZXJ0eV0pIHtcbiAgICAgICAgICBzdHlsZXNbcHJlZml4ICsgKDAsIF9jYXBpdGFsaXplU3RyaW5nMi5kZWZhdWx0KShwcm9wZXJ0eSldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgIFtdLmNvbmNhdChzdHlsZXNbcHJvcGVydHldKS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIC8vIHJlc29sdmUgZXZlcnkgc3BlY2lhbCBwbHVnaW5zXG4gICAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgICByZXR1cm4gYXNzaWduU3R5bGVzKHN0eWxlcywgcGx1Z2luKHByb3BlcnR5LCB2YWx1ZSkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiAoMCwgX3NvcnRQcmVmaXhlZFN0eWxlMi5kZWZhdWx0KShzdHlsZXMpO1xufVxuXG5mdW5jdGlvbiBhc3NpZ25TdHlsZXMoYmFzZSkge1xuICB2YXIgZXh0ZW5kID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMV07XG5cbiAgT2JqZWN0LmtleXMoZXh0ZW5kKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgIHZhciBiYXNlVmFsdWUgPSBiYXNlW3Byb3BlcnR5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShiYXNlVmFsdWUpKSB7XG4gICAgICBbXS5jb25jYXQoZXh0ZW5kW3Byb3BlcnR5XSkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHZhbHVlSW5kZXggPSBiYXNlVmFsdWUuaW5kZXhPZih2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZUluZGV4ID4gLTEpIHtcbiAgICAgICAgICBiYXNlW3Byb3BlcnR5XS5zcGxpY2UodmFsdWVJbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgYmFzZVtwcm9wZXJ0eV0ucHVzaCh2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZVtwcm9wZXJ0eV0gPSBleHRlbmRbcHJvcGVydHldO1xuICAgIH1cbiAgfSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvc3RhdGljL3ByZWZpeEFsbC5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9ib3dzZXIgPSByZXF1aXJlKCdib3dzZXInKTtcblxudmFyIF9ib3dzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYm93c2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHZlbmRvclByZWZpeGVzID0ge1xuICBXZWJraXQ6IFsnY2hyb21lJywgJ3NhZmFyaScsICdpb3MnLCAnYW5kcm9pZCcsICdwaGFudG9tJywgJ29wZXJhJywgJ3dlYm9zJywgJ2JsYWNrYmVycnknLCAnYmFkYScsICd0aXplbicsICdjaHJvbWl1bScsICd2aXZhbGRpJ10sXG4gIE1vejogWydmaXJlZm94JywgJ3NlYW1vbmtleScsICdzYWlsZmlzaCddLFxuICBtczogWydtc2llJywgJ21zZWRnZSddXG59O1xudmFyIGJyb3dzZXJzID0ge1xuICBjaHJvbWU6IFtbJ2Nocm9tZSddLCBbJ2Nocm9taXVtJ11dLFxuICBzYWZhcmk6IFtbJ3NhZmFyaSddXSxcbiAgZmlyZWZveDogW1snZmlyZWZveCddXSxcbiAgZWRnZTogW1snbXNlZGdlJ11dLFxuICBvcGVyYTogW1snb3BlcmEnXSwgWyd2aXZhbGRpJ11dLFxuICBpb3Nfc2FmOiBbWydpb3MnLCAnbW9iaWxlJ10sIFsnaW9zJywgJ3RhYmxldCddXSxcbiAgaWU6IFtbJ21zaWUnXV0sXG4gIG9wX21pbmk6IFtbJ29wZXJhJywgJ21vYmlsZSddLCBbJ29wZXJhJywgJ3RhYmxldCddXSxcbiAgYW5kX3VjOiBbWydhbmRyb2lkJywgJ21vYmlsZSddLCBbJ2FuZHJvaWQnLCAndGFibGV0J11dLFxuICBhbmRyb2lkOiBbWydhbmRyb2lkJywgJ21vYmlsZSddLCBbJ2FuZHJvaWQnLCAndGFibGV0J11dXG59O1xuXG52YXIgYnJvd3NlckJ5SW5mbyA9IGZ1bmN0aW9uIGJyb3dzZXJCeUluZm8oaW5mbykge1xuICBpZiAoaW5mby5maXJlZm94KSB7XG4gICAgcmV0dXJuICdmaXJlZm94JztcbiAgfVxuICB2YXIgbmFtZSA9ICcnO1xuXG4gIE9iamVjdC5rZXlzKGJyb3dzZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChicm93c2VyKSB7XG4gICAgYnJvd3NlcnNbYnJvd3Nlcl0uZm9yRWFjaChmdW5jdGlvbiAoY29uZGl0aW9uKSB7XG4gICAgICB2YXIgbWF0Y2ggPSAwO1xuICAgICAgY29uZGl0aW9uLmZvckVhY2goZnVuY3Rpb24gKHNpbmdsZSkge1xuICAgICAgICBpZiAoaW5mb1tzaW5nbGVdKSB7XG4gICAgICAgICAgbWF0Y2ggKz0gMTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoY29uZGl0aW9uLmxlbmd0aCA9PT0gbWF0Y2gpIHtcbiAgICAgICAgbmFtZSA9IGJyb3dzZXI7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBuYW1lO1xufTtcblxuLyoqXG4gKiBVc2VzIGJvd3NlciB0byBnZXQgZGVmYXVsdCBicm93c2VyIGluZm9ybWF0aW9uIHN1Y2ggYXMgdmVyc2lvbiBhbmQgbmFtZVxuICogRXZhbHVhdGVzIGJvd3NlciBpbmZvIGFuZCBhZGRzIHZlbmRvclByZWZpeCBpbmZvcm1hdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHVzZXJBZ2VudCAtIHVzZXJBZ2VudCB0aGF0IGdldHMgZXZhbHVhdGVkXG4gKi9cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHVzZXJBZ2VudCkge1xuICBpZiAoIXVzZXJBZ2VudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaW5mbyA9IF9ib3dzZXIyLmRlZmF1bHQuX2RldGVjdCh1c2VyQWdlbnQpO1xuXG4gIE9iamVjdC5rZXlzKHZlbmRvclByZWZpeGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICB2ZW5kb3JQcmVmaXhlc1twcmVmaXhdLmZvckVhY2goZnVuY3Rpb24gKGJyb3dzZXIpIHtcbiAgICAgIGlmIChpbmZvW2Jyb3dzZXJdKSB7XG4gICAgICAgIGluZm8ucHJlZml4ID0ge1xuICAgICAgICAgIGlubGluZTogcHJlZml4LFxuICAgICAgICAgIGNzczogJy0nICsgcHJlZml4LnRvTG93ZXJDYXNlKCkgKyAnLSdcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgaW5mby5icm93c2VyID0gYnJvd3NlckJ5SW5mbyhpbmZvKTtcblxuICAvLyBGb3IgY29yZG92YSBJT1MgOCB0aGUgdmVyc2lvbiBpcyBtaXNzaW5nLCBzZXQgdHJ1bmNhdGVkIG9zdmVyc2lvbiB0byBwcmV2ZW50IE5hTlxuICBpbmZvLnZlcnNpb24gPSBpbmZvLnZlcnNpb24gPyBwYXJzZUZsb2F0KGluZm8udmVyc2lvbikgOiBwYXJzZUludChwYXJzZUZsb2F0KGluZm8ub3N2ZXJzaW9uKSwgMTApO1xuICBpbmZvLm9zdmVyc2lvbiA9IHBhcnNlRmxvYXQoaW5mby5vc3ZlcnNpb24pO1xuXG4gIC8vIGlPUyBmb3JjZXMgYWxsIGJyb3dzZXJzIHRvIHVzZSBTYWZhcmkgdW5kZXIgdGhlIGhvb2RcbiAgLy8gYXMgdGhlIFNhZmFyaSB2ZXJzaW9uIHNlZW1zIHRvIG1hdGNoIHRoZSBpT1MgdmVyc2lvblxuICAvLyB3ZSBqdXN0IGV4cGxpY2l0ZWx5IHVzZSB0aGUgb3N2ZXJzaW9uIGluc3RlYWRcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JvZnJpc2NobWFubi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvaXNzdWVzLzcyXG4gIGlmIChpbmZvLmJyb3dzZXIgPT09ICdpb3Nfc2FmJyAmJiBpbmZvLnZlcnNpb24gPiBpbmZvLm9zdmVyc2lvbikge1xuICAgIGluZm8udmVyc2lvbiA9IGluZm8ub3N2ZXJzaW9uO1xuICAgIGluZm8uc2FmYXJpID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIHNlcGVyYXRlIG5hdGl2ZSBhbmRyb2lkIGNocm9tZVxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcm9mcmlzY2htYW5uL2lubGluZS1zdHlsZS1wcmVmaXhlci9pc3N1ZXMvNDVcbiAgaWYgKGluZm8uYnJvd3NlciA9PT0gJ2FuZHJvaWQnICYmIGluZm8uY2hyb21lICYmIGluZm8udmVyc2lvbiA+IDM3KSB7XG4gICAgaW5mby5icm93c2VyID0gJ2FuZF9jaHInO1xuICB9XG5cbiAgLy8gRm9yIGFuZHJvaWQgPCA0LjQgd2Ugd2FudCB0byBjaGVjayB0aGUgb3N2ZXJzaW9uXG4gIC8vIG5vdCB0aGUgY2hyb21lIHZlcnNpb24sIHNlZSBpc3N1ZSAjMjZcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JvZnJpc2NobWFubi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvaXNzdWVzLzI2XG4gIGlmIChpbmZvLmJyb3dzZXIgPT09ICdhbmRyb2lkJyAmJiBpbmZvLm9zdmVyc2lvbiA8IDUpIHtcbiAgICBpbmZvLnZlcnNpb24gPSBpbmZvLm9zdmVyc2lvbjtcbiAgfVxuXG4gIHJldHVybiBpbmZvO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3V0aWxzL2dldEJyb3dzZXJJbmZvcm1hdGlvbi5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGJyb3dzZXIgPSBfcmVmLmJyb3dzZXI7XG4gIHZhciB2ZXJzaW9uID0gX3JlZi52ZXJzaW9uO1xuICB2YXIgcHJlZml4ID0gX3JlZi5wcmVmaXg7XG5cbiAgdmFyIHByZWZpeGVkS2V5ZnJhbWVzID0gJ2tleWZyYW1lcyc7XG5cbiAgaWYgKGJyb3dzZXIgPT09ICdjaHJvbWUnICYmIHZlcnNpb24gPCA0MyB8fCAoYnJvd3NlciA9PT0gJ3NhZmFyaScgfHwgYnJvd3NlciA9PT0gJ2lvc19zYWYnKSAmJiB2ZXJzaW9uIDwgOSB8fCBicm93c2VyID09PSAnb3BlcmEnICYmIHZlcnNpb24gPCAzMCB8fCBicm93c2VyID09PSAnYW5kcm9pZCcgJiYgdmVyc2lvbiA8PSA0LjQgfHwgYnJvd3NlciA9PT0gJ2FuZF91YycpIHtcbiAgICBwcmVmaXhlZEtleWZyYW1lcyA9IHByZWZpeC5jc3MgKyBwcmVmaXhlZEtleWZyYW1lcztcbiAgfVxuICByZXR1cm4gcHJlZml4ZWRLZXlmcmFtZXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2lubGluZS1zdHlsZS1wcmVmaXhlci9saWIvdXRpbHMvZ2V0UHJlZml4ZWRLZXlmcmFtZXMuanMiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gIHJldHVybiBwcm9wZXJ0eS5tYXRjaCgvXihXZWJraXR8TW96fE98bXMpLykgIT09IG51bGw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaW5saW5lLXN0eWxlLXByZWZpeGVyL2xpYi91dGlscy9pc1ByZWZpeGVkUHJvcGVydHkuanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICB2YXIgdW5wcmVmaXhlZCA9IHByb3BlcnR5LnJlcGxhY2UoL14obXN8V2Via2l0fE1venxPKS8sICcnKTtcbiAgcmV0dXJuIHVucHJlZml4ZWQuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyB1bnByZWZpeGVkLnNsaWNlKDEpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvbGliL3V0aWxzL3VucHJlZml4UHJvcGVydHkuanMiLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaXMtYnVmZmVyL2luZGV4LmpzIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9pc2FycmF5L2luZGV4LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuICB2YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG4gIHZhciBoYXMgPSBGdW5jdGlvbi5jYWxsLmJpbmQoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG5cbiAgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24odGV4dCkge1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyB0ZXh0O1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHZhbHVlcyBtYXRjaCB3aXRoIHRoZSB0eXBlIHNwZWNzLlxuICogRXJyb3IgbWVzc2FnZXMgYXJlIG1lbW9yaXplZCBhbmQgd2lsbCBvbmx5IGJlIHNob3duIG9uY2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHR5cGVTcGVjcyBNYXAgb2YgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZXMgUnVudGltZSB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHR5cGUtY2hlY2tlZFxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudE5hbWUgTmFtZSBvZiB0aGUgY29tcG9uZW50IGZvciBlcnJvciBtZXNzYWdlcy5cbiAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBnZXRTdGFjayBSZXR1cm5zIHRoZSBjb21wb25lbnQgc3RhY2suXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjaGVja1Byb3BUeXBlcyh0eXBlU3BlY3MsIHZhbHVlcywgbG9jYXRpb24sIGNvbXBvbmVudE5hbWUsIGdldFN0YWNrKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZm9yICh2YXIgdHlwZVNwZWNOYW1lIGluIHR5cGVTcGVjcykge1xuICAgICAgaWYgKGhhcyh0eXBlU3BlY3MsIHR5cGVTcGVjTmFtZSkpIHtcbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICAvLyBQcm9wIHR5cGUgdmFsaWRhdGlvbiBtYXkgdGhyb3cuIEluIGNhc2UgdGhleSBkbywgd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgICAvLyBmYWlsIHRoZSByZW5kZXIgcGhhc2Ugd2hlcmUgaXQgZGlkbid0IGZhaWwgYmVmb3JlLiBTbyB3ZSBsb2cgaXQuXG4gICAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYW4gaW52YXJpYW50IHRoYXQgZ2V0cyBjYXVnaHQuIEl0J3MgdGhlIHNhbWVcbiAgICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICAgaWYgKHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFyIGVyciA9IEVycm9yKFxuICAgICAgICAgICAgICAoY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnKSArICc6ICcgKyBsb2NhdGlvbiArICcgdHlwZSBgJyArIHR5cGVTcGVjTmFtZSArICdgIGlzIGludmFsaWQ7ICcgK1xuICAgICAgICAgICAgICAnaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLCBidXQgcmVjZWl2ZWQgYCcgKyB0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0gKyAnYC4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVycm9yID0gdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0odmFsdWVzLCB0eXBlU3BlY05hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBudWxsLCBSZWFjdFByb3BUeXBlc1NlY3JldCk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgJiYgIShlcnJvciBpbnN0YW5jZW9mIEVycm9yKSkge1xuICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgIChjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycpICsgJzogdHlwZSBzcGVjaWZpY2F0aW9uIG9mICcgK1xuICAgICAgICAgICAgbG9jYXRpb24gKyAnIGAnICsgdHlwZVNwZWNOYW1lICsgJ2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICtcbiAgICAgICAgICAgICdmdW5jdGlvbiBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gYEVycm9yYCBidXQgcmV0dXJuZWQgYSAnICsgdHlwZW9mIGVycm9yICsgJy4gJyArXG4gICAgICAgICAgICAnWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgJyArXG4gICAgICAgICAgICAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICtcbiAgICAgICAgICAgICdzaGFwZSBhbGwgcmVxdWlyZSBhbiBhcmd1bWVudCkuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvci5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpIHtcbiAgICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcbiAgICAgICAgICAvLyBzYW1lIGVycm9yLlxuICAgICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXSA9IHRydWU7XG5cbiAgICAgICAgICB2YXIgc3RhY2sgPSBnZXRTdGFjayA/IGdldFN0YWNrKCkgOiAnJztcblxuICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgICdGYWlsZWQgJyArIGxvY2F0aW9uICsgJyB0eXBlOiAnICsgZXJyb3IubWVzc2FnZSArIChzdGFjayAhPSBudWxsID8gc3RhY2sgOiAnJylcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVzZXRzIHdhcm5pbmcgY2FjaGUgd2hlbiB0ZXN0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNoZWNrUHJvcFR5cGVzLnJlc2V0V2FybmluZ0NhY2hlID0gZnVuY3Rpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjaGVja1Byb3BUeXBlcztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcHJvcC10eXBlcy9jaGVja1Byb3BUeXBlcy5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFwcGVuZEltcG9ydGFudFRvRWFjaFZhbHVlO1xuXG52YXIgX2FwcGVuZFB4SWZOZWVkZWQgPSByZXF1aXJlKCcuL2FwcGVuZC1weC1pZi1uZWVkZWQnKTtcblxudmFyIF9hcHBlbmRQeElmTmVlZGVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FwcGVuZFB4SWZOZWVkZWQpO1xuXG52YXIgX21hcE9iamVjdCA9IHJlcXVpcmUoJy4vbWFwLW9iamVjdCcpO1xuXG52YXIgX21hcE9iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYXBPYmplY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBhcHBlbmRJbXBvcnRhbnRUb0VhY2hWYWx1ZShzdHlsZSkge1xuICByZXR1cm4gKDAsIF9tYXBPYmplY3QyLmRlZmF1bHQpKHN0eWxlLCBmdW5jdGlvbiAocmVzdWx0LCBrZXkpIHtcbiAgICByZXR1cm4gKDAsIF9hcHBlbmRQeElmTmVlZGVkMi5kZWZhdWx0KShrZXksIHN0eWxlW2tleV0pICsgJyAhaW1wb3J0YW50JztcbiAgfSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JhZGl1bS9saWIvYXBwZW5kLWltcG9ydGFudC10by1lYWNoLXZhbHVlLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIF9jYW1lbENhc2VSZWdleCA9IC8oW2Etel0pPyhbQS1aXSkvZztcblxudmFyIF9jYW1lbENhc2VSZXBsYWNlciA9IGZ1bmN0aW9uIF9jYW1lbENhc2VSZXBsYWNlcihtYXRjaCwgcDEsIHAyKSB7XG4gIHJldHVybiAocDEgfHwgJycpICsgJy0nICsgcDIudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBfY2FtZWxDYXNlVG9EYXNoQ2FzZSA9IGZ1bmN0aW9uIF9jYW1lbENhc2VUb0Rhc2hDYXNlKHMpIHtcbiAgcmV0dXJuIHMucmVwbGFjZShfY2FtZWxDYXNlUmVnZXgsIF9jYW1lbENhc2VSZXBsYWNlcik7XG59O1xuXG52YXIgY2FtZWxDYXNlUHJvcHNUb0Rhc2hDYXNlID0gZnVuY3Rpb24gY2FtZWxDYXNlUHJvcHNUb0Rhc2hDYXNlKHByZWZpeGVkU3R5bGUpIHtcbiAgLy8gU2luY2UgcHJlZml4IGlzIGV4cGVjdGVkIHRvIHdvcmsgb24gaW5saW5lIHN0eWxlIG9iamVjdHMsIHdlIG11c3RcbiAgLy8gdHJhbnNsYXRlIHRoZSBrZXlzIHRvIGRhc2ggY2FzZSBmb3IgcmVuZGVyaW5nIHRvIENTUy5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKHByZWZpeGVkU3R5bGUpLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBrZXkpIHtcbiAgICB2YXIgZGFzaENhc2VLZXkgPSBfY2FtZWxDYXNlVG9EYXNoQ2FzZShrZXkpO1xuXG4gICAgLy8gRml4IElFIHZlbmRvciBwcmVmaXhcbiAgICBpZiAoL15tcy0vLnRlc3QoZGFzaENhc2VLZXkpKSB7XG4gICAgICBkYXNoQ2FzZUtleSA9ICctJyArIGRhc2hDYXNlS2V5O1xuICAgIH1cblxuICAgIHJlc3VsdFtkYXNoQ2FzZUtleV0gPSBwcmVmaXhlZFN0eWxlW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwge30pO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY2FtZWxDYXNlUHJvcHNUb0Rhc2hDYXNlO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yYWRpdW0vbGliL2NhbWVsLWNhc2UtcHJvcHMtdG8tZGFzaC1jYXNlLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2VuaGFuY2VyID0gcmVxdWlyZSgnLi4vZW5oYW5jZXInKTtcblxudmFyIF9lbmhhbmNlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbmhhbmNlcik7XG5cbnZhciBfc3R5bGVLZWVwZXIgPSByZXF1aXJlKCcuLi9zdHlsZS1rZWVwZXInKTtcblxudmFyIF9zdHlsZUtlZXBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHlsZUtlZXBlcik7XG5cbnZhciBfc3R5bGVTaGVldCA9IHJlcXVpcmUoJy4vc3R5bGUtc2hlZXQnKTtcblxudmFyIF9zdHlsZVNoZWV0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0eWxlU2hlZXQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX2dldFN0eWxlS2VlcGVyKGluc3RhbmNlKSB7XG4gIGlmICghaW5zdGFuY2UuX3JhZGl1bVN0eWxlS2VlcGVyKSB7XG4gICAgdmFyIHVzZXJBZ2VudCA9IGluc3RhbmNlLnByb3BzLnJhZGl1bUNvbmZpZyAmJiBpbnN0YW5jZS5wcm9wcy5yYWRpdW1Db25maWcudXNlckFnZW50IHx8IGluc3RhbmNlLmNvbnRleHQuX3JhZGl1bUNvbmZpZyAmJiBpbnN0YW5jZS5jb250ZXh0Ll9yYWRpdW1Db25maWcudXNlckFnZW50O1xuICAgIGluc3RhbmNlLl9yYWRpdW1TdHlsZUtlZXBlciA9IG5ldyBfc3R5bGVLZWVwZXIyLmRlZmF1bHQodXNlckFnZW50KTtcbiAgfVxuXG4gIHJldHVybiBpbnN0YW5jZS5fcmFkaXVtU3R5bGVLZWVwZXI7XG59XG5cbnZhciBTdHlsZVJvb3QgPSBmdW5jdGlvbiAoX1B1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN0eWxlUm9vdCwgX1B1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0eWxlUm9vdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3R5bGVSb290KTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9QdXJlQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXG4gICAgX2dldFN0eWxlS2VlcGVyKF90aGlzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBTdHlsZVJvb3QucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4geyBfcmFkaXVtU3R5bGVLZWVwZXI6IF9nZXRTdHlsZUtlZXBlcih0aGlzKSB9O1xuICB9O1xuXG4gIFN0eWxlUm9vdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4gICAgLy8gUGFzcyBkb3duIGFsbCBwcm9wcyBleGNlcHQgY29uZmlnIHRvIHRoZSByZW5kZXJlZCBkaXYuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHJhZGl1bUNvbmZpZyA9IF9wcm9wcy5yYWRpdW1Db25maWcsXG4gICAgICAgIG90aGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3JhZGl1bUNvbmZpZyddKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIG90aGVyUHJvcHMsXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuLFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3N0eWxlU2hlZXQyLmRlZmF1bHQsIG51bGwpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVSb290O1xufShfcmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cblN0eWxlUm9vdC5jb250ZXh0VHlwZXMgPSB7XG4gIF9yYWRpdW1Db25maWc6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICBfcmFkaXVtU3R5bGVLZWVwZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuaW5zdGFuY2VPZihfc3R5bGVLZWVwZXIyLmRlZmF1bHQpXG59O1xuXG5TdHlsZVJvb3QuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIF9yYWRpdW1TdHlsZUtlZXBlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5pbnN0YW5jZU9mKF9zdHlsZUtlZXBlcjIuZGVmYXVsdClcbn07XG5cblN0eWxlUm9vdCA9ICgwLCBfZW5oYW5jZXIyLmRlZmF1bHQpKFN0eWxlUm9vdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFN0eWxlUm9vdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmFkaXVtL2xpYi9jb21wb25lbnRzL3N0eWxlLXJvb3QuanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfY2xhc3MsIF90ZW1wO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3N0eWxlS2VlcGVyID0gcmVxdWlyZSgnLi4vc3R5bGUta2VlcGVyJyk7XG5cbnZhciBfc3R5bGVLZWVwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3R5bGVLZWVwZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTdHlsZVNoZWV0ID0gKF90ZW1wID0gX2NsYXNzID0gZnVuY3Rpb24gKF9QdXJlQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTdHlsZVNoZWV0LCBfUHVyZUNvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3R5bGVTaGVldCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3R5bGVTaGVldCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUHVyZUNvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblxuICAgIF90aGlzLl9vbkNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5faXNNb3VudGVkICYmIF90aGlzLnNldFN0YXRlKF90aGlzLl9nZXRDU1NTdGF0ZSgpKTtcbiAgICAgIH0sIDApO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IF90aGlzLl9nZXRDU1NTdGF0ZSgpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb24gPSB0aGlzLmNvbnRleHQuX3JhZGl1bVN0eWxlS2VlcGVyLnN1YnNjcmliZSh0aGlzLl9vbkNoYW5nZSk7XG4gICAgdGhpcy5fb25DaGFuZ2UoKTtcbiAgfTtcblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbi5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuX2dldENTU1N0YXRlID0gZnVuY3Rpb24gX2dldENTU1N0YXRlKCkge1xuICAgIHJldHVybiB7IGNzczogdGhpcy5jb250ZXh0Ll9yYWRpdW1TdHlsZUtlZXBlci5nZXRDU1MoKSB9O1xuICB9O1xuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJywgeyBkYW5nZXJvdXNseVNldElubmVySFRNTDogeyBfX2h0bWw6IHRoaXMuc3RhdGUuY3NzIH0gfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KF9yZWFjdC5QdXJlQ29tcG9uZW50KSwgX2NsYXNzLmNvbnRleHRUeXBlcyA9IHtcbiAgX3JhZGl1bVN0eWxlS2VlcGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lmluc3RhbmNlT2YoX3N0eWxlS2VlcGVyMi5kZWZhdWx0KVxufSwgX3RlbXApO1xuZXhwb3J0cy5kZWZhdWx0ID0gU3R5bGVTaGVldDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmFkaXVtL2xpYi9jb21wb25lbnRzL3N0eWxlLXNoZWV0LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY2xhc3MsIF90ZW1wO1xuXG52YXIgX2Nzc1J1bGVTZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2Nzcy1ydWxlLXNldC10by1zdHJpbmcnKTtcblxudmFyIF9jc3NSdWxlU2V0VG9TdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3NzUnVsZVNldFRvU3RyaW5nKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgU3R5bGUgPSAoX3RlbXAgPSBfY2xhc3MgPSBmdW5jdGlvbiAoX1B1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN0eWxlLCBfUHVyZUNvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3R5bGUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUHVyZUNvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFN0eWxlLnByb3RvdHlwZS5fYnVpbGRTdHlsZXMgPSBmdW5jdGlvbiBfYnVpbGRTdHlsZXMoc3R5bGVzKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgdXNlckFnZW50ID0gdGhpcy5wcm9wcy5yYWRpdW1Db25maWcgJiYgdGhpcy5wcm9wcy5yYWRpdW1Db25maWcudXNlckFnZW50IHx8IHRoaXMuY29udGV4dCAmJiB0aGlzLmNvbnRleHQuX3JhZGl1bUNvbmZpZyAmJiB0aGlzLmNvbnRleHQuX3JhZGl1bUNvbmZpZy51c2VyQWdlbnQ7XG5cbiAgICB2YXIgc2NvcGVTZWxlY3RvciA9IHRoaXMucHJvcHMuc2NvcGVTZWxlY3RvcjtcblxuICAgIHZhciByb290UnVsZXMgPSBPYmplY3Qua2V5cyhzdHlsZXMpLnJlZHVjZShmdW5jdGlvbiAoYWNjdW11bGF0b3IsIHNlbGVjdG9yKSB7XG4gICAgICBpZiAoX3R5cGVvZihzdHlsZXNbc2VsZWN0b3JdKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgYWNjdW11bGF0b3Jbc2VsZWN0b3JdID0gc3R5bGVzW3NlbGVjdG9yXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH0sIHt9KTtcbiAgICB2YXIgcm9vdFN0eWxlcyA9IE9iamVjdC5rZXlzKHJvb3RSdWxlcykubGVuZ3RoID8gKDAsIF9jc3NSdWxlU2V0VG9TdHJpbmcyLmRlZmF1bHQpKHNjb3BlU2VsZWN0b3IgfHwgJycsIHJvb3RSdWxlcywgdXNlckFnZW50KSA6ICcnO1xuXG4gICAgcmV0dXJuIHJvb3RTdHlsZXMgKyBPYmplY3Qua2V5cyhzdHlsZXMpLnJlZHVjZShmdW5jdGlvbiAoYWNjdW11bGF0b3IsIHNlbGVjdG9yKSB7XG4gICAgICB2YXIgcnVsZXMgPSBzdHlsZXNbc2VsZWN0b3JdO1xuXG4gICAgICBpZiAoc2VsZWN0b3IgPT09ICdtZWRpYVF1ZXJpZXMnKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yICs9IF90aGlzMi5fYnVpbGRNZWRpYVF1ZXJ5U3RyaW5nKHJ1bGVzKTtcbiAgICAgIH0gZWxzZSBpZiAoX3R5cGVvZihzdHlsZXNbc2VsZWN0b3JdKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdmFyIGNvbXBsZXRlU2VsZWN0b3IgPSBzY29wZVNlbGVjdG9yID8gc2VsZWN0b3Iuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICAgICAgICByZXR1cm4gc2NvcGVTZWxlY3RvciArICcgJyArIHBhcnQudHJpbSgpO1xuICAgICAgICB9KS5qb2luKCcsJykgOiBzZWxlY3RvcjtcblxuICAgICAgICBhY2N1bXVsYXRvciArPSAoMCwgX2Nzc1J1bGVTZXRUb1N0cmluZzIuZGVmYXVsdCkoY29tcGxldGVTZWxlY3RvciwgcnVsZXMsIHVzZXJBZ2VudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9LCAnJyk7XG4gIH07XG5cbiAgU3R5bGUucHJvdG90eXBlLl9idWlsZE1lZGlhUXVlcnlTdHJpbmcgPSBmdW5jdGlvbiBfYnVpbGRNZWRpYVF1ZXJ5U3RyaW5nKHN0eWxlc0J5TWVkaWFRdWVyeSkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIG1lZGlhUXVlcnlTdHJpbmcgPSAnJztcblxuICAgIE9iamVjdC5rZXlzKHN0eWxlc0J5TWVkaWFRdWVyeSkuZm9yRWFjaChmdW5jdGlvbiAocXVlcnkpIHtcbiAgICAgIG1lZGlhUXVlcnlTdHJpbmcgKz0gJ0BtZWRpYSAnICsgcXVlcnkgKyAneycgKyBfdGhpczMuX2J1aWxkU3R5bGVzKHN0eWxlc0J5TWVkaWFRdWVyeVtxdWVyeV0pICsgJ30nO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1lZGlhUXVlcnlTdHJpbmc7XG4gIH07XG5cbiAgU3R5bGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMucnVsZXMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBzdHlsZXMgPSB0aGlzLl9idWlsZFN0eWxlcyh0aGlzLnByb3BzLnJ1bGVzKTtcblxuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnc3R5bGUnLCB7IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7IF9faHRtbDogc3R5bGVzIH0gfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlO1xufShfcmVhY3QuUHVyZUNvbXBvbmVudCksIF9jbGFzcy5wcm9wVHlwZXMgPSB7XG4gIHJhZGl1bUNvbmZpZzogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIHJ1bGVzOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgc2NvcGVTZWxlY3RvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbn0sIF9jbGFzcy5jb250ZXh0VHlwZXMgPSB7XG4gIF9yYWRpdW1Db25maWc6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG59LCBfY2xhc3MuZGVmYXVsdFByb3BzID0ge1xuICBzY29wZVNlbGVjdG9yOiAnJ1xufSwgX3RlbXApO1xuZXhwb3J0cy5kZWZhdWx0ID0gU3R5bGU7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JhZGl1bS9saWIvY29tcG9uZW50cy9zdHlsZS5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGtleWZyYW1lcztcblxudmFyIF9jc3NSdWxlU2V0VG9TdHJpbmcgPSByZXF1aXJlKCcuL2Nzcy1ydWxlLXNldC10by1zdHJpbmcnKTtcblxudmFyIF9jc3NSdWxlU2V0VG9TdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3NzUnVsZVNldFRvU3RyaW5nKTtcblxudmFyIF9oYXNoID0gcmVxdWlyZSgnLi9oYXNoJyk7XG5cbnZhciBfaGFzaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYXNoKTtcblxudmFyIF9wcmVmaXhlciA9IHJlcXVpcmUoJy4vcHJlZml4ZXInKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24ga2V5ZnJhbWVzKGtleWZyYW1lUnVsZXMsIG5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBfX3JhZGl1bUtleWZyYW1lczogdHJ1ZSxcbiAgICBfX3Byb2Nlc3M6IGZ1bmN0aW9uIF9fcHJvY2Vzcyh1c2VyQWdlbnQpIHtcbiAgICAgIHZhciBrZXlmcmFtZXNQcmVmaXhlZCA9ICgwLCBfcHJlZml4ZXIuZ2V0UHJlZml4ZWRLZXlmcmFtZXMpKHVzZXJBZ2VudCk7XG4gICAgICB2YXIgcnVsZXMgPSBPYmplY3Qua2V5cyhrZXlmcmFtZVJ1bGVzKS5tYXAoZnVuY3Rpb24gKHBlcmNlbnRhZ2UpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfY3NzUnVsZVNldFRvU3RyaW5nMi5kZWZhdWx0KShwZXJjZW50YWdlLCBrZXlmcmFtZVJ1bGVzW3BlcmNlbnRhZ2VdLCB1c2VyQWdlbnQpO1xuICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICB2YXIgYW5pbWF0aW9uTmFtZSA9IChuYW1lID8gbmFtZSArICctJyA6ICcnKSArICdyYWRpdW0tYW5pbWF0aW9uLScgKyAoMCwgX2hhc2gyLmRlZmF1bHQpKHJ1bGVzKTtcbiAgICAgIHZhciBjc3MgPSAnQCcgKyBrZXlmcmFtZXNQcmVmaXhlZCArICcgJyArIGFuaW1hdGlvbk5hbWUgKyAnIHtcXG4nICsgcnVsZXMgKyAnXFxufVxcbic7XG4gICAgICByZXR1cm4geyBjc3M6IGNzcywgYW5pbWF0aW9uTmFtZTogYW5pbWF0aW9uTmFtZSB9O1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yYWRpdW0vbGliL2tleWZyYW1lcy5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzLmlzTmVzdGVkU3R5bGUgPSBpc05lc3RlZFN0eWxlO1xuZXhwb3J0cy5tZXJnZVN0eWxlcyA9IG1lcmdlU3R5bGVzO1xuZnVuY3Rpb24gaXNOZXN0ZWRTdHlsZSh2YWx1ZSkge1xuICAvLyBEb24ndCBtZXJnZSBvYmplY3RzIG92ZXJyaWRpbmcgdG9TdHJpbmcsIHNpbmNlIHRoZXkgc2hvdWxkIGJlIGNvbnZlcnRlZFxuICAvLyB0byBzdHJpbmcgdmFsdWVzLlxuICByZXR1cm4gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IE9iamVjdCAmJiB2YWx1ZS50b1N0cmluZyA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbn1cblxuLy8gTWVyZ2Ugc3R5bGUgb2JqZWN0cy4gRGVlcCBtZXJnZSBwbGFpbiBvYmplY3QgdmFsdWVzLlxuZnVuY3Rpb24gbWVyZ2VTdHlsZXMoc3R5bGVzKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcblxuICBzdHlsZXMuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICBpZiAoIXN0eWxlIHx8ICh0eXBlb2Ygc3R5bGUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHN0eWxlKSkgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUpKSB7XG4gICAgICBzdHlsZSA9IG1lcmdlU3R5bGVzKHN0eWxlKTtcbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyhzdHlsZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvLyBTaW1wbGUgY2FzZSwgbm90aGluZyBuZXN0ZWRcbiAgICAgIGlmICghaXNOZXN0ZWRTdHlsZShzdHlsZVtrZXldKSB8fCAhaXNOZXN0ZWRTdHlsZShyZXN1bHRba2V5XSkpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBzdHlsZVtrZXldO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIElmIG5lc3RlZCBtZWRpYSwgZG9uJ3QgbWVyZ2UgdGhlIG5lc3RlZCBzdHlsZXMsIGFwcGVuZCBhIHNwYWNlIHRvIHRoZVxuICAgICAgLy8gZW5kIChiZW5pZ24gd2hlbiBjb252ZXJ0ZWQgdG8gQ1NTKS4gVGhpcyB3YXkgd2UgZG9uJ3QgZW5kIHVwIG1lcmdpbmdcbiAgICAgIC8vIG1lZGlhIHF1ZXJpZXMgdGhhdCBhcHBlYXIgbGF0ZXIgaW4gdGhlIGNoYWluIHdpdGggdGhvc2UgdGhhdCBhcHBlYXJcbiAgICAgIC8vIGVhcmxpZXIuXG4gICAgICBpZiAoa2V5LmluZGV4T2YoJ0BtZWRpYScpID09PSAwKSB7XG4gICAgICAgIHZhciBuZXdLZXkgPSBrZXk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICBuZXdLZXkgKz0gJyAnO1xuICAgICAgICAgIGlmICghcmVzdWx0W25ld0tleV0pIHtcbiAgICAgICAgICAgIHJlc3VsdFtuZXdLZXldID0gc3R5bGVba2V5XTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gTWVyZ2UgYWxsIG90aGVyIG5lc3RlZCBzdHlsZXMgcmVjdXJzaXZlbHlcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2VTdHlsZXMoW3Jlc3VsdFtrZXldLCBzdHlsZVtrZXldXSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yYWRpdW0vbGliL21lcmdlLXN0eWxlcy5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2NoZWNrUHJvcHMgPSBmdW5jdGlvbiBjaGVja1Byb3BzKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIFdhcm4gaWYgeW91IHVzZSBsb25naGFuZCBhbmQgc2hvcnRoYW5kIHByb3BlcnRpZXMgaW4gdGhlIHNhbWUgc3R5bGVcbiAgLy8gb2JqZWN0LlxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvU2hvcnRoYW5kX3Byb3BlcnRpZXNcblxuICB2YXIgc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zID0ge1xuICAgIGJhY2tncm91bmQ6IFsnYmFja2dyb3VuZEF0dGFjaG1lbnQnLCAnYmFja2dyb3VuZEJsZW5kTW9kZScsICdiYWNrZ3JvdW5kQ2xpcCcsICdiYWNrZ3JvdW5kQ29sb3InLCAnYmFja2dyb3VuZEltYWdlJywgJ2JhY2tncm91bmRPcmlnaW4nLCAnYmFja2dyb3VuZFBvc2l0aW9uJywgJ2JhY2tncm91bmRQb3NpdGlvblgnLCAnYmFja2dyb3VuZFBvc2l0aW9uWScsICdiYWNrZ3JvdW5kUmVwZWF0JywgJ2JhY2tncm91bmRSZXBlYXRYJywgJ2JhY2tncm91bmRSZXBlYXRZJywgJ2JhY2tncm91bmRTaXplJ10sXG4gICAgYm9yZGVyOiBbJ2JvcmRlckJvdHRvbScsICdib3JkZXJCb3R0b21Db2xvcicsICdib3JkZXJCb3R0b21TdHlsZScsICdib3JkZXJCb3R0b21XaWR0aCcsICdib3JkZXJDb2xvcicsICdib3JkZXJMZWZ0JywgJ2JvcmRlckxlZnRDb2xvcicsICdib3JkZXJMZWZ0U3R5bGUnLCAnYm9yZGVyTGVmdFdpZHRoJywgJ2JvcmRlclJpZ2h0JywgJ2JvcmRlclJpZ2h0Q29sb3InLCAnYm9yZGVyUmlnaHRTdHlsZScsICdib3JkZXJSaWdodFdpZHRoJywgJ2JvcmRlclN0eWxlJywgJ2JvcmRlclRvcCcsICdib3JkZXJUb3BDb2xvcicsICdib3JkZXJUb3BTdHlsZScsICdib3JkZXJUb3BXaWR0aCcsICdib3JkZXJXaWR0aCddLFxuICAgIGJvcmRlckltYWdlOiBbJ2JvcmRlckltYWdlT3V0c2V0JywgJ2JvcmRlckltYWdlUmVwZWF0JywgJ2JvcmRlckltYWdlU2xpY2UnLCAnYm9yZGVySW1hZ2VTb3VyY2UnLCAnYm9yZGVySW1hZ2VXaWR0aCddLFxuICAgIGJvcmRlclJhZGl1czogWydib3JkZXJCb3R0b21MZWZ0UmFkaXVzJywgJ2JvcmRlckJvdHRvbVJpZ2h0UmFkaXVzJywgJ2JvcmRlclRvcExlZnRSYWRpdXMnLCAnYm9yZGVyVG9wUmlnaHRSYWRpdXMnXSxcbiAgICBmb250OiBbJ2ZvbnRGYW1pbHknLCAnZm9udEtlcm5pbmcnLCAnZm9udFNpemUnLCAnZm9udFN0cmV0Y2gnLCAnZm9udFN0eWxlJywgJ2ZvbnRWYXJpYW50JywgJ2ZvbnRWYXJpYW50TGlnYXR1cmVzJywgJ2ZvbnRXZWlnaHQnLCAnbGluZUhlaWdodCddLFxuICAgIGxpc3RTdHlsZTogWydsaXN0U3R5bGVJbWFnZScsICdsaXN0U3R5bGVQb3NpdGlvbicsICdsaXN0U3R5bGVUeXBlJ10sXG4gICAgbWFyZ2luOiBbJ21hcmdpbkJvdHRvbScsICdtYXJnaW5MZWZ0JywgJ21hcmdpblJpZ2h0JywgJ21hcmdpblRvcCddLFxuICAgIHBhZGRpbmc6IFsncGFkZGluZ0JvdHRvbScsICdwYWRkaW5nTGVmdCcsICdwYWRkaW5nUmlnaHQnLCAncGFkZGluZ1RvcCddLFxuICAgIHRyYW5zaXRpb246IFsndHJhbnNpdGlvbkRlbGF5JywgJ3RyYW5zaXRpb25EdXJhdGlvbicsICd0cmFuc2l0aW9uUHJvcGVydHknLCAndHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uJ11cbiAgfTtcblxuICBfY2hlY2tQcm9wcyA9IGZ1bmN0aW9uIGNoZWNrUHJvcHMoY29uZmlnKSB7XG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb25maWcuY29tcG9uZW50TmFtZSxcbiAgICAgICAgc3R5bGUgPSBjb25maWcuc3R5bGU7XG5cbiAgICBpZiAoKHR5cGVvZiBzdHlsZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yoc3R5bGUpKSAhPT0gJ29iamVjdCcgfHwgIXN0eWxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlS2V5cyA9IE9iamVjdC5rZXlzKHN0eWxlKTtcbiAgICBzdHlsZUtleXMuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGVLZXkpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uc1tzdHlsZUtleV0pICYmIHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uc1tzdHlsZUtleV0uc29tZShmdW5jdGlvbiAoc3ApIHtcbiAgICAgICAgcmV0dXJuIHN0eWxlS2V5cy5pbmRleE9mKHNwKSAhPT0gLTE7XG4gICAgICB9KSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1JhZGl1bTogcHJvcGVydHkgXCInICsgc3R5bGVLZXkgKyAnXCIgaW4gc3R5bGUgb2JqZWN0Jywgc3R5bGUsICc6IGRvIG5vdCBtaXggbG9uZ2hhbmQgYW5kICcgKyAnc2hvcnRoYW5kIHByb3BlcnRpZXMgaW4gdGhlIHNhbWUgc3R5bGUgb2JqZWN0LiBDaGVjayB0aGUgcmVuZGVyICcgKyAnbWV0aG9kIG9mICcgKyBjb21wb25lbnROYW1lICsgJy4nLCAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Gb3JtaWRhYmxlTGFicy9yYWRpdW0vaXNzdWVzLzk1IGZvciBtb3JlICcgKyAnaW5mb3JtYXRpb24uJyk7XG4gICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0eWxlS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICByZXR1cm4gX2NoZWNrUHJvcHMoX2V4dGVuZHMoe30sIGNvbmZpZywgeyBzdHlsZTogc3R5bGVba10gfSkpO1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX2NoZWNrUHJvcHM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JhZGl1bS9saWIvcGx1Z2lucy9jaGVjay1wcm9wcy1wbHVnaW4uanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBrZXlmcmFtZXNQbHVnaW47XG5mdW5jdGlvbiBrZXlmcmFtZXNQbHVnaW4oX3JlZikge1xuICB2YXIgYWRkQ1NTID0gX3JlZi5hZGRDU1MsXG4gICAgICBjb25maWcgPSBfcmVmLmNvbmZpZyxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZTtcblxuICB2YXIgbmV3U3R5bGUgPSBPYmplY3Qua2V5cyhzdHlsZSkucmVkdWNlKGZ1bmN0aW9uIChuZXdTdHlsZUluUHJvZ3Jlc3MsIGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHN0eWxlW2tleV07XG4gICAgaWYgKGtleSA9PT0gJ2FuaW1hdGlvbk5hbWUnICYmIHZhbHVlICYmIHZhbHVlLl9fcmFkaXVtS2V5ZnJhbWVzKSB7XG4gICAgICB2YXIga2V5ZnJhbWVzVmFsdWUgPSB2YWx1ZTtcblxuICAgICAgdmFyIF9rZXlmcmFtZXNWYWx1ZSRfX3BybyA9IGtleWZyYW1lc1ZhbHVlLl9fcHJvY2Vzcyhjb25maWcudXNlckFnZW50KSxcbiAgICAgICAgICBhbmltYXRpb25OYW1lID0gX2tleWZyYW1lc1ZhbHVlJF9fcHJvLmFuaW1hdGlvbk5hbWUsXG4gICAgICAgICAgY3NzID0gX2tleWZyYW1lc1ZhbHVlJF9fcHJvLmNzcztcblxuICAgICAgYWRkQ1NTKGNzcyk7XG4gICAgICB2YWx1ZSA9IGFuaW1hdGlvbk5hbWU7XG4gICAgfVxuXG4gICAgbmV3U3R5bGVJblByb2dyZXNzW2tleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gbmV3U3R5bGVJblByb2dyZXNzO1xuICB9LCB7fSk7XG4gIHJldHVybiB7IHN0eWxlOiBuZXdTdHlsZSB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yYWRpdW0vbGliL3BsdWdpbnMva2V5ZnJhbWVzLXBsdWdpbi5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuXG4vLyBDb252ZW5pZW50IHN5bnRheCBmb3IgbXVsdGlwbGUgc3R5bGVzOiBgc3R5bGU9e1tzdHlsZTEsIHN0eWxlMiwgZXRjXX1gXG4vLyBJZ25vcmVzIG5vbi1vYmplY3RzLCBzbyB5b3UgY2FuIGRvIGB0aGlzLnN0YXRlLmlzQ29vbCAmJiBzdHlsZXMuY29vbGAuXG52YXIgbWVyZ2VTdHlsZUFycmF5UGx1Z2luID0gZnVuY3Rpb24gbWVyZ2VTdHlsZUFycmF5UGx1Z2luKF9yZWYpIHtcbiAgdmFyIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIG1lcmdlU3R5bGVzID0gX3JlZi5tZXJnZVN0eWxlcztcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNoYWRvd1xuICB2YXIgbmV3U3R5bGUgPSBBcnJheS5pc0FycmF5KHN0eWxlKSA/IG1lcmdlU3R5bGVzKHN0eWxlKSA6IHN0eWxlO1xuICByZXR1cm4geyBzdHlsZTogbmV3U3R5bGUgfTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG1lcmdlU3R5bGVBcnJheVBsdWdpbjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmFkaXVtL2xpYi9wbHVnaW5zL21lcmdlLXN0eWxlLWFycmF5LXBsdWdpbi5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBfY2FsbGJhY2tzID0gW107XG52YXIgX21vdXNlVXBMaXN0ZW5lcklzQWN0aXZlID0gZmFsc2U7XG5cbmZ1bmN0aW9uIF9oYW5kbGVNb3VzZVVwKCkge1xuICBfY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2soKTtcbiAgfSk7XG59XG5cbnZhciBzdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgaWYgKF9jYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xKSB7XG4gICAgX2NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmICghX21vdXNlVXBMaXN0ZW5lcklzQWN0aXZlKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBfaGFuZGxlTW91c2VVcCk7XG4gICAgX21vdXNlVXBMaXN0ZW5lcklzQWN0aXZlID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICB2YXIgaW5kZXggPSBfY2FsbGJhY2tzLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgX2NhbGxiYWNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICBpZiAoX2NhbGxiYWNrcy5sZW5ndGggPT09IDAgJiYgX21vdXNlVXBMaXN0ZW5lcklzQWN0aXZlKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgX2hhbmRsZU1vdXNlVXApO1xuICAgICAgICBfbW91c2VVcExpc3RlbmVySXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICBfX3RyaWdnZXJGb3JUZXN0czogX2hhbmRsZU1vdXNlVXBcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JhZGl1bS9saWIvcGx1Z2lucy9tb3VzZS11cC1saXN0ZW5lci5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHByZWZpeFBsdWdpbjtcblxudmFyIF9wcmVmaXhlciA9IHJlcXVpcmUoJy4uL3ByZWZpeGVyJyk7XG5cbmZ1bmN0aW9uIHByZWZpeFBsdWdpbihfcmVmKSB7XG4gIHZhciBjb25maWcgPSBfcmVmLmNvbmZpZyxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZTtcblxuICB2YXIgbmV3U3R5bGUgPSAoMCwgX3ByZWZpeGVyLmdldFByZWZpeGVkU3R5bGUpKHN0eWxlLCBjb25maWcudXNlckFnZW50KTtcbiAgcmV0dXJuIHsgc3R5bGU6IG5ld1N0eWxlIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JhZGl1bS9saWIvcGx1Z2lucy9wcmVmaXgtcGx1Z2luLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcmVtb3ZlTmVzdGVkU3R5bGVzO1xuZnVuY3Rpb24gcmVtb3ZlTmVzdGVkU3R5bGVzKF9yZWYpIHtcbiAgdmFyIGlzTmVzdGVkU3R5bGUgPSBfcmVmLmlzTmVzdGVkU3R5bGUsXG4gICAgICBzdHlsZSA9IF9yZWYuc3R5bGU7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zaGFkb3dcbiAgdmFyIG5ld1N0eWxlID0gT2JqZWN0LmtleXMoc3R5bGUpLnJlZHVjZShmdW5jdGlvbiAobmV3U3R5bGVJblByb2dyZXNzLCBrZXkpIHtcbiAgICB2YXIgdmFsdWUgPSBzdHlsZVtrZXldO1xuICAgIGlmICghaXNOZXN0ZWRTdHlsZSh2YWx1ZSkpIHtcbiAgICAgIG5ld1N0eWxlSW5Qcm9ncmVzc1trZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBuZXdTdHlsZUluUHJvZ3Jlc3M7XG4gIH0sIHt9KTtcblxuICByZXR1cm4ge1xuICAgIHN0eWxlOiBuZXdTdHlsZVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JhZGl1bS9saWIvcGx1Z2lucy9yZW1vdmUtbmVzdGVkLXN0eWxlcy1wbHVnaW4uanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfbW91c2VVcExpc3RlbmVyID0gcmVxdWlyZSgnLi9tb3VzZS11cC1saXN0ZW5lcicpO1xuXG52YXIgX21vdXNlVXBMaXN0ZW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb3VzZVVwTGlzdGVuZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgX2lzSW50ZXJhY3RpdmVTdHlsZUZpZWxkID0gZnVuY3Rpb24gX2lzSW50ZXJhY3RpdmVTdHlsZUZpZWxkKHN0eWxlRmllbGROYW1lKSB7XG4gIHJldHVybiBzdHlsZUZpZWxkTmFtZSA9PT0gJzpob3ZlcicgfHwgc3R5bGVGaWVsZE5hbWUgPT09ICc6YWN0aXZlJyB8fCBzdHlsZUZpZWxkTmFtZSA9PT0gJzpmb2N1cyc7XG59O1xuXG52YXIgcmVzb2x2ZUludGVyYWN0aW9uU3R5bGVzID0gZnVuY3Rpb24gcmVzb2x2ZUludGVyYWN0aW9uU3R5bGVzKGNvbmZpZykge1xuICB2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSBjb25maWcuRXhlY3V0aW9uRW52aXJvbm1lbnQsXG4gICAgICBnZXRDb21wb25lbnRGaWVsZCA9IGNvbmZpZy5nZXRDb21wb25lbnRGaWVsZCxcbiAgICAgIGdldFN0YXRlID0gY29uZmlnLmdldFN0YXRlLFxuICAgICAgbWVyZ2VTdHlsZXMgPSBjb25maWcubWVyZ2VTdHlsZXMsXG4gICAgICBwcm9wcyA9IGNvbmZpZy5wcm9wcyxcbiAgICAgIHNldFN0YXRlID0gY29uZmlnLnNldFN0YXRlLFxuICAgICAgc3R5bGUgPSBjb25maWcuc3R5bGU7XG5cblxuICB2YXIgbmV3Q29tcG9uZW50RmllbGRzID0ge307XG4gIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gIC8vIE9ubHkgYWRkIGhhbmRsZXJzIGlmIG5lY2Vzc2FyeVxuICBpZiAoc3R5bGVbJzpob3ZlciddKSB7XG4gICAgLy8gQWx3YXlzIGNhbGwgdGhlIGV4aXN0aW5nIGhhbmRsZXIgaWYgb25lIGlzIGFscmVhZHkgZGVmaW5lZC5cbiAgICAvLyBUaGlzIGNvZGUsIGFuZCB0aGUgdmVyeSBzaW1pbGFyIG9uZXMgYmVsb3csIGNvdWxkIGJlIGFic3RyYWN0ZWQgYSBiaXRcbiAgICAvLyBtb3JlLCBidXQgaXQgaHVydHMgcmVhZGFiaWxpdHkgSU1PLlxuICAgIHZhciBleGlzdGluZ09uTW91c2VFbnRlciA9IHByb3BzLm9uTW91c2VFbnRlcjtcbiAgICBuZXdQcm9wcy5vbk1vdXNlRW50ZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgZXhpc3RpbmdPbk1vdXNlRW50ZXIgJiYgZXhpc3RpbmdPbk1vdXNlRW50ZXIoZSk7XG4gICAgICBzZXRTdGF0ZSgnOmhvdmVyJywgdHJ1ZSk7XG4gICAgfTtcblxuICAgIHZhciBleGlzdGluZ09uTW91c2VMZWF2ZSA9IHByb3BzLm9uTW91c2VMZWF2ZTtcbiAgICBuZXdQcm9wcy5vbk1vdXNlTGVhdmUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgZXhpc3RpbmdPbk1vdXNlTGVhdmUgJiYgZXhpc3RpbmdPbk1vdXNlTGVhdmUoZSk7XG4gICAgICBzZXRTdGF0ZSgnOmhvdmVyJywgZmFsc2UpO1xuICAgIH07XG4gIH1cblxuICBpZiAoc3R5bGVbJzphY3RpdmUnXSkge1xuICAgIHZhciBleGlzdGluZ09uTW91c2VEb3duID0gcHJvcHMub25Nb3VzZURvd247XG4gICAgbmV3UHJvcHMub25Nb3VzZURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgZXhpc3RpbmdPbk1vdXNlRG93biAmJiBleGlzdGluZ09uTW91c2VEb3duKGUpO1xuICAgICAgbmV3Q29tcG9uZW50RmllbGRzLl9sYXN0TW91c2VEb3duID0gRGF0ZS5ub3coKTtcbiAgICAgIHNldFN0YXRlKCc6YWN0aXZlJywgJ3ZpYW1vdXNlZG93bicpO1xuICAgIH07XG5cbiAgICB2YXIgZXhpc3RpbmdPbktleURvd24gPSBwcm9wcy5vbktleURvd247XG4gICAgbmV3UHJvcHMub25LZXlEb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGV4aXN0aW5nT25LZXlEb3duICYmIGV4aXN0aW5nT25LZXlEb3duKGUpO1xuICAgICAgaWYgKGUua2V5ID09PSAnICcgfHwgZS5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgICAgc2V0U3RhdGUoJzphY3RpdmUnLCAndmlha2V5ZG93bicpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgZXhpc3RpbmdPbktleVVwID0gcHJvcHMub25LZXlVcDtcbiAgICBuZXdQcm9wcy5vbktleVVwID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGV4aXN0aW5nT25LZXlVcCAmJiBleGlzdGluZ09uS2V5VXAoZSk7XG4gICAgICBpZiAoZS5rZXkgPT09ICcgJyB8fCBlLmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgICBzZXRTdGF0ZSgnOmFjdGl2ZScsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgaWYgKHN0eWxlWyc6Zm9jdXMnXSkge1xuICAgIHZhciBleGlzdGluZ09uRm9jdXMgPSBwcm9wcy5vbkZvY3VzO1xuICAgIG5ld1Byb3BzLm9uRm9jdXMgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgZXhpc3RpbmdPbkZvY3VzICYmIGV4aXN0aW5nT25Gb2N1cyhlKTtcbiAgICAgIHNldFN0YXRlKCc6Zm9jdXMnLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgdmFyIGV4aXN0aW5nT25CbHVyID0gcHJvcHMub25CbHVyO1xuICAgIG5ld1Byb3BzLm9uQmx1ciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBleGlzdGluZ09uQmx1ciAmJiBleGlzdGluZ09uQmx1cihlKTtcbiAgICAgIHNldFN0YXRlKCc6Zm9jdXMnLCBmYWxzZSk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChzdHlsZVsnOmFjdGl2ZSddICYmICFnZXRDb21wb25lbnRGaWVsZCgnX3JhZGl1bU1vdXNlVXBMaXN0ZW5lcicpICYmIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZUV2ZW50TGlzdGVuZXJzKSB7XG4gICAgbmV3Q29tcG9uZW50RmllbGRzLl9yYWRpdW1Nb3VzZVVwTGlzdGVuZXIgPSBfbW91c2VVcExpc3RlbmVyMi5kZWZhdWx0LnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgICBPYmplY3Qua2V5cyhnZXRDb21wb25lbnRGaWVsZCgnc3RhdGUnKS5fcmFkaXVtU3R5bGVTdGF0ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChnZXRTdGF0ZSgnOmFjdGl2ZScsIGtleSkgPT09ICd2aWFtb3VzZWRvd24nKSB7XG4gICAgICAgICAgc2V0U3RhdGUoJzphY3RpdmUnLCBmYWxzZSwga2V5KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBNZXJnZSB0aGUgc3R5bGVzIGluIHRoZSBvcmRlciB0aGV5IHdlcmUgZGVmaW5lZFxuICB2YXIgaW50ZXJhY3Rpb25TdHlsZXMgPSBwcm9wcy5kaXNhYmxlZCA/IFtzdHlsZVsnOmRpc2FibGVkJ11dIDogT2JqZWN0LmtleXMoc3R5bGUpLmZpbHRlcihmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBfaXNJbnRlcmFjdGl2ZVN0eWxlRmllbGQobmFtZSkgJiYgZ2V0U3RhdGUobmFtZSk7XG4gIH0pLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBzdHlsZVtuYW1lXTtcbiAgfSk7XG5cbiAgdmFyIG5ld1N0eWxlID0gbWVyZ2VTdHlsZXMoW3N0eWxlXS5jb25jYXQoaW50ZXJhY3Rpb25TdHlsZXMpKTtcblxuICAvLyBSZW1vdmUgaW50ZXJhY3RpdmUgc3R5bGVzXG4gIG5ld1N0eWxlID0gT2JqZWN0LmtleXMobmV3U3R5bGUpLnJlZHVjZShmdW5jdGlvbiAoc3R5bGVXaXRob3V0SW50ZXJhY3Rpb25zLCBuYW1lKSB7XG4gICAgaWYgKCFfaXNJbnRlcmFjdGl2ZVN0eWxlRmllbGQobmFtZSkgJiYgbmFtZSAhPT0gJzpkaXNhYmxlZCcpIHtcbiAgICAgIHN0eWxlV2l0aG91dEludGVyYWN0aW9uc1tuYW1lXSA9IG5ld1N0eWxlW25hbWVdO1xuICAgIH1cbiAgICByZXR1cm4gc3R5bGVXaXRob3V0SW50ZXJhY3Rpb25zO1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIHtcbiAgICBjb21wb25lbnRGaWVsZHM6IG5ld0NvbXBvbmVudEZpZWxkcyxcbiAgICBwcm9wczogbmV3UHJvcHMsXG4gICAgc3R5bGU6IG5ld1N0eWxlXG4gIH07XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSByZXNvbHZlSW50ZXJhY3Rpb25TdHlsZXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JhZGl1bS9saWIvcGx1Z2lucy9yZXNvbHZlLWludGVyYWN0aW9uLXN0eWxlcy1wbHVnaW4uanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHJlc29sdmVNZWRpYVF1ZXJpZXM7XG52YXIgX3dpbmRvd01hdGNoTWVkaWEgPSB2b2lkIDA7XG5mdW5jdGlvbiBfZ2V0V2luZG93TWF0Y2hNZWRpYShFeGVjdXRpb25FbnZpcm9ubWVudCkge1xuICBpZiAoX3dpbmRvd01hdGNoTWVkaWEgPT09IHVuZGVmaW5lZCkge1xuICAgIF93aW5kb3dNYXRjaE1lZGlhID0gISFFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgISF3aW5kb3cgJiYgISF3aW5kb3cubWF0Y2hNZWRpYSAmJiBmdW5jdGlvbiAobWVkaWFRdWVyeVN0cmluZykge1xuICAgICAgcmV0dXJuIHdpbmRvdy5tYXRjaE1lZGlhKG1lZGlhUXVlcnlTdHJpbmcpO1xuICAgIH0gfHwgbnVsbDtcbiAgfVxuICByZXR1cm4gX3dpbmRvd01hdGNoTWVkaWE7XG59XG5cbmZ1bmN0aW9uIF9maWx0ZXJPYmplY3Qob2JqLCBwcmVkaWNhdGUpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gcHJlZGljYXRlKG9ialtrZXldLCBrZXkpO1xuICB9KS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwga2V5KSB7XG4gICAgcmVzdWx0W2tleV0gPSBvYmpba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIF9yZW1vdmVNZWRpYVF1ZXJpZXMoc3R5bGUpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHN0eWxlKS5yZWR1Y2UoZnVuY3Rpb24gKHN0eWxlV2l0aG91dE1lZGlhLCBrZXkpIHtcbiAgICBpZiAoa2V5LmluZGV4T2YoJ0BtZWRpYScpICE9PSAwKSB7XG4gICAgICBzdHlsZVdpdGhvdXRNZWRpYVtrZXldID0gc3R5bGVba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlV2l0aG91dE1lZGlhO1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIF90b3BMZXZlbFJ1bGVzVG9DU1MoX3JlZikge1xuICB2YXIgYWRkQ1NTID0gX3JlZi5hZGRDU1MsXG4gICAgICBhcHBlbmRJbXBvcnRhbnRUb0VhY2hWYWx1ZSA9IF9yZWYuYXBwZW5kSW1wb3J0YW50VG9FYWNoVmFsdWUsXG4gICAgICBjc3NSdWxlU2V0VG9TdHJpbmcgPSBfcmVmLmNzc1J1bGVTZXRUb1N0cmluZyxcbiAgICAgIGhhc2ggPSBfcmVmLmhhc2gsXG4gICAgICBpc05lc3RlZFN0eWxlID0gX3JlZi5pc05lc3RlZFN0eWxlLFxuICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgdXNlckFnZW50ID0gX3JlZi51c2VyQWdlbnQ7XG5cbiAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuICBPYmplY3Qua2V5cyhzdHlsZSkuZmlsdGVyKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUuaW5kZXhPZignQG1lZGlhJykgPT09IDA7XG4gIH0pLm1hcChmdW5jdGlvbiAocXVlcnkpIHtcbiAgICB2YXIgdG9wTGV2ZWxSdWxlcyA9IGFwcGVuZEltcG9ydGFudFRvRWFjaFZhbHVlKF9maWx0ZXJPYmplY3Qoc3R5bGVbcXVlcnldLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiAhaXNOZXN0ZWRTdHlsZSh2YWx1ZSk7XG4gICAgfSkpO1xuXG4gICAgaWYgKCFPYmplY3Qua2V5cyh0b3BMZXZlbFJ1bGVzKS5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcnVsZUNTUyA9IGNzc1J1bGVTZXRUb1N0cmluZygnJywgdG9wTGV2ZWxSdWxlcywgdXNlckFnZW50KTtcblxuICAgIC8vIENTUyBjbGFzc2VzIGNhbm5vdCBzdGFydCB3aXRoIGEgbnVtYmVyXG4gICAgdmFyIG1lZGlhUXVlcnlDbGFzc05hbWUgPSAncm1xLScgKyBoYXNoKHF1ZXJ5ICsgcnVsZUNTUyk7XG4gICAgdmFyIGNzcyA9IHF1ZXJ5ICsgJ3sgLicgKyBtZWRpYVF1ZXJ5Q2xhc3NOYW1lICsgcnVsZUNTUyArICd9JztcblxuICAgIGFkZENTUyhjc3MpO1xuXG4gICAgY2xhc3NOYW1lICs9IChjbGFzc05hbWUgPyAnICcgOiAnJykgKyBtZWRpYVF1ZXJ5Q2xhc3NOYW1lO1xuICB9KTtcbiAgcmV0dXJuIGNsYXNzTmFtZTtcbn1cblxuZnVuY3Rpb24gX3N1YnNjcmliZVRvTWVkaWFRdWVyeShfcmVmMikge1xuICB2YXIgbGlzdGVuZXIgPSBfcmVmMi5saXN0ZW5lcixcbiAgICAgIGxpc3RlbmVyc0J5UXVlcnkgPSBfcmVmMi5saXN0ZW5lcnNCeVF1ZXJ5LFxuICAgICAgbWF0Y2hNZWRpYSA9IF9yZWYyLm1hdGNoTWVkaWEsXG4gICAgICBtZWRpYVF1ZXJ5TGlzdHNCeVF1ZXJ5ID0gX3JlZjIubWVkaWFRdWVyeUxpc3RzQnlRdWVyeSxcbiAgICAgIHF1ZXJ5ID0gX3JlZjIucXVlcnk7XG5cbiAgcXVlcnkgPSBxdWVyeS5yZXBsYWNlKCdAbWVkaWEgJywgJycpO1xuXG4gIHZhciBtcWwgPSBtZWRpYVF1ZXJ5TGlzdHNCeVF1ZXJ5W3F1ZXJ5XTtcbiAgaWYgKCFtcWwgJiYgbWF0Y2hNZWRpYSkge1xuICAgIG1lZGlhUXVlcnlMaXN0c0J5UXVlcnlbcXVlcnldID0gbXFsID0gbWF0Y2hNZWRpYShxdWVyeSk7XG4gIH1cblxuICBpZiAoIWxpc3RlbmVyc0J5UXVlcnkgfHwgIWxpc3RlbmVyc0J5UXVlcnlbcXVlcnldKSB7XG4gICAgbXFsLmFkZExpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgIGxpc3RlbmVyc0J5UXVlcnlbcXVlcnldID0ge1xuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgIG1xbC5yZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICByZXR1cm4gbXFsO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTWVkaWFRdWVyaWVzKF9yZWYzKSB7XG4gIHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IF9yZWYzLkV4ZWN1dGlvbkVudmlyb25tZW50LFxuICAgICAgYWRkQ1NTID0gX3JlZjMuYWRkQ1NTLFxuICAgICAgYXBwZW5kSW1wb3J0YW50VG9FYWNoVmFsdWUgPSBfcmVmMy5hcHBlbmRJbXBvcnRhbnRUb0VhY2hWYWx1ZSxcbiAgICAgIGNvbmZpZyA9IF9yZWYzLmNvbmZpZyxcbiAgICAgIGNzc1J1bGVTZXRUb1N0cmluZyA9IF9yZWYzLmNzc1J1bGVTZXRUb1N0cmluZyxcbiAgICAgIGdldENvbXBvbmVudEZpZWxkID0gX3JlZjMuZ2V0Q29tcG9uZW50RmllbGQsXG4gICAgICBnZXRHbG9iYWxTdGF0ZSA9IF9yZWYzLmdldEdsb2JhbFN0YXRlLFxuICAgICAgaGFzaCA9IF9yZWYzLmhhc2gsXG4gICAgICBpc05lc3RlZFN0eWxlID0gX3JlZjMuaXNOZXN0ZWRTdHlsZSxcbiAgICAgIG1lcmdlU3R5bGVzID0gX3JlZjMubWVyZ2VTdHlsZXMsXG4gICAgICBwcm9wcyA9IF9yZWYzLnByb3BzLFxuICAgICAgc2V0U3RhdGUgPSBfcmVmMy5zZXRTdGF0ZSxcbiAgICAgIHN0eWxlID0gX3JlZjMuc3R5bGU7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zaGFkb3dcbiAgdmFyIG5ld1N0eWxlID0gX3JlbW92ZU1lZGlhUXVlcmllcyhzdHlsZSk7XG4gIHZhciBtZWRpYVF1ZXJ5Q2xhc3NOYW1lcyA9IF90b3BMZXZlbFJ1bGVzVG9DU1Moe1xuICAgIGFkZENTUzogYWRkQ1NTLFxuICAgIGFwcGVuZEltcG9ydGFudFRvRWFjaFZhbHVlOiBhcHBlbmRJbXBvcnRhbnRUb0VhY2hWYWx1ZSxcbiAgICBjc3NSdWxlU2V0VG9TdHJpbmc6IGNzc1J1bGVTZXRUb1N0cmluZyxcbiAgICBoYXNoOiBoYXNoLFxuICAgIGlzTmVzdGVkU3R5bGU6IGlzTmVzdGVkU3R5bGUsXG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIHVzZXJBZ2VudDogY29uZmlnLnVzZXJBZ2VudFxuICB9KTtcblxuICB2YXIgbmV3UHJvcHMgPSBtZWRpYVF1ZXJ5Q2xhc3NOYW1lcyA/IHtcbiAgICBjbGFzc05hbWU6IG1lZGlhUXVlcnlDbGFzc05hbWVzICsgKHByb3BzLmNsYXNzTmFtZSA/ICcgJyArIHByb3BzLmNsYXNzTmFtZSA6ICcnKVxuICB9IDogbnVsbDtcblxuICB2YXIgbWF0Y2hNZWRpYSA9IGNvbmZpZy5tYXRjaE1lZGlhIHx8IF9nZXRXaW5kb3dNYXRjaE1lZGlhKEV4ZWN1dGlvbkVudmlyb25tZW50KTtcblxuICBpZiAoIW1hdGNoTWVkaWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJvcHM6IG5ld1Byb3BzLFxuICAgICAgc3R5bGU6IG5ld1N0eWxlXG4gICAgfTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnNCeVF1ZXJ5ID0gX2V4dGVuZHMoe30sIGdldENvbXBvbmVudEZpZWxkKCdfcmFkaXVtTWVkaWFRdWVyeUxpc3RlbmVyc0J5UXVlcnknKSk7XG4gIHZhciBtZWRpYVF1ZXJ5TGlzdHNCeVF1ZXJ5ID0gZ2V0R2xvYmFsU3RhdGUoJ21lZGlhUXVlcnlMaXN0c0J5UXVlcnknKSB8fCB7fTtcblxuICBPYmplY3Qua2V5cyhzdHlsZSkuZmlsdGVyKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUuaW5kZXhPZignQG1lZGlhJykgPT09IDA7XG4gIH0pLm1hcChmdW5jdGlvbiAocXVlcnkpIHtcbiAgICB2YXIgbmVzdGVkUnVsZXMgPSBfZmlsdGVyT2JqZWN0KHN0eWxlW3F1ZXJ5XSwgaXNOZXN0ZWRTdHlsZSk7XG5cbiAgICBpZiAoIU9iamVjdC5rZXlzKG5lc3RlZFJ1bGVzKS5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbXFsID0gX3N1YnNjcmliZVRvTWVkaWFRdWVyeSh7XG4gICAgICBsaXN0ZW5lcjogZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICAgIHJldHVybiBzZXRTdGF0ZShxdWVyeSwgbXFsLm1hdGNoZXMsICdfYWxsJyk7XG4gICAgICB9LFxuICAgICAgbGlzdGVuZXJzQnlRdWVyeTogbGlzdGVuZXJzQnlRdWVyeSxcbiAgICAgIG1hdGNoTWVkaWE6IG1hdGNoTWVkaWEsXG4gICAgICBtZWRpYVF1ZXJ5TGlzdHNCeVF1ZXJ5OiBtZWRpYVF1ZXJ5TGlzdHNCeVF1ZXJ5LFxuICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgfSk7XG5cbiAgICAvLyBBcHBseSBtZWRpYSBxdWVyeSBzdGF0ZXNcbiAgICBpZiAobXFsLm1hdGNoZXMpIHtcbiAgICAgIG5ld1N0eWxlID0gbWVyZ2VTdHlsZXMoW25ld1N0eWxlLCBuZXN0ZWRSdWxlc10pO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBjb21wb25lbnRGaWVsZHM6IHtcbiAgICAgIF9yYWRpdW1NZWRpYVF1ZXJ5TGlzdGVuZXJzQnlRdWVyeTogbGlzdGVuZXJzQnlRdWVyeVxuICAgIH0sXG4gICAgZ2xvYmFsU3RhdGU6IHsgbWVkaWFRdWVyeUxpc3RzQnlRdWVyeTogbWVkaWFRdWVyeUxpc3RzQnlRdWVyeSB9LFxuICAgIHByb3BzOiBuZXdQcm9wcyxcbiAgICBzdHlsZTogbmV3U3R5bGVcbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmFkaXVtL2xpYi9wbHVnaW5zL3Jlc29sdmUtbWVkaWEtcXVlcmllcy1wbHVnaW4uanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2aXNpdGVkO1xuZnVuY3Rpb24gdmlzaXRlZChfcmVmKSB7XG4gIHZhciBhZGRDU1MgPSBfcmVmLmFkZENTUyxcbiAgICAgIGFwcGVuZEltcG9ydGFudFRvRWFjaFZhbHVlID0gX3JlZi5hcHBlbmRJbXBvcnRhbnRUb0VhY2hWYWx1ZSxcbiAgICAgIGNvbmZpZyA9IF9yZWYuY29uZmlnLFxuICAgICAgY3NzUnVsZVNldFRvU3RyaW5nID0gX3JlZi5jc3NSdWxlU2V0VG9TdHJpbmcsXG4gICAgICBoYXNoID0gX3JlZi5oYXNoLFxuICAgICAgcHJvcHMgPSBfcmVmLnByb3BzLFxuICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2hhZG93XG4gIHZhciBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWU7XG5cbiAgdmFyIG5ld1N0eWxlID0gT2JqZWN0LmtleXMoc3R5bGUpLnJlZHVjZShmdW5jdGlvbiAobmV3U3R5bGVJblByb2dyZXNzLCBrZXkpIHtcbiAgICB2YXIgdmFsdWUgPSBzdHlsZVtrZXldO1xuICAgIGlmIChrZXkgPT09ICc6dmlzaXRlZCcpIHtcbiAgICAgIHZhbHVlID0gYXBwZW5kSW1wb3J0YW50VG9FYWNoVmFsdWUodmFsdWUpO1xuICAgICAgdmFyIHJ1bGVDU1MgPSBjc3NSdWxlU2V0VG9TdHJpbmcoJycsIHZhbHVlLCBjb25maWcudXNlckFnZW50KTtcbiAgICAgIHZhciB2aXNpdGVkQ2xhc3NOYW1lID0gJ3JhZC0nICsgaGFzaChydWxlQ1NTKTtcbiAgICAgIHZhciBjc3MgPSAnLicgKyB2aXNpdGVkQ2xhc3NOYW1lICsgJzp2aXNpdGVkJyArIHJ1bGVDU1M7XG5cbiAgICAgIGFkZENTUyhjc3MpO1xuICAgICAgY2xhc3NOYW1lID0gKGNsYXNzTmFtZSA/IGNsYXNzTmFtZSArICcgJyA6ICcnKSArIHZpc2l0ZWRDbGFzc05hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0eWxlSW5Qcm9ncmVzc1trZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ld1N0eWxlSW5Qcm9ncmVzcztcbiAgfSwge30pO1xuXG4gIHJldHVybiB7XG4gICAgcHJvcHM6IGNsYXNzTmFtZSA9PT0gcHJvcHMuY2xhc3NOYW1lID8gbnVsbCA6IHsgY2xhc3NOYW1lOiBjbGFzc05hbWUgfSxcbiAgICBzdHlsZTogbmV3U3R5bGVcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yYWRpdW0vbGliL3BsdWdpbnMvdmlzaXRlZC1wbHVnaW4uanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBUklBRE9NUHJvcGVydHlDb25maWcgPSB7XG4gIFByb3BlcnRpZXM6IHtcbiAgICAvLyBHbG9iYWwgU3RhdGVzIGFuZCBQcm9wZXJ0aWVzXG4gICAgJ2FyaWEtY3VycmVudCc6IDAsIC8vIHN0YXRlXG4gICAgJ2FyaWEtZGV0YWlscyc6IDAsXG4gICAgJ2FyaWEtZGlzYWJsZWQnOiAwLCAvLyBzdGF0ZVxuICAgICdhcmlhLWhpZGRlbic6IDAsIC8vIHN0YXRlXG4gICAgJ2FyaWEtaW52YWxpZCc6IDAsIC8vIHN0YXRlXG4gICAgJ2FyaWEta2V5c2hvcnRjdXRzJzogMCxcbiAgICAnYXJpYS1sYWJlbCc6IDAsXG4gICAgJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJzogMCxcbiAgICAvLyBXaWRnZXQgQXR0cmlidXRlc1xuICAgICdhcmlhLWF1dG9jb21wbGV0ZSc6IDAsXG4gICAgJ2FyaWEtY2hlY2tlZCc6IDAsXG4gICAgJ2FyaWEtZXhwYW5kZWQnOiAwLFxuICAgICdhcmlhLWhhc3BvcHVwJzogMCxcbiAgICAnYXJpYS1sZXZlbCc6IDAsXG4gICAgJ2FyaWEtbW9kYWwnOiAwLFxuICAgICdhcmlhLW11bHRpbGluZSc6IDAsXG4gICAgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJzogMCxcbiAgICAnYXJpYS1vcmllbnRhdGlvbic6IDAsXG4gICAgJ2FyaWEtcGxhY2Vob2xkZXInOiAwLFxuICAgICdhcmlhLXByZXNzZWQnOiAwLFxuICAgICdhcmlhLXJlYWRvbmx5JzogMCxcbiAgICAnYXJpYS1yZXF1aXJlZCc6IDAsXG4gICAgJ2FyaWEtc2VsZWN0ZWQnOiAwLFxuICAgICdhcmlhLXNvcnQnOiAwLFxuICAgICdhcmlhLXZhbHVlbWF4JzogMCxcbiAgICAnYXJpYS12YWx1ZW1pbic6IDAsXG4gICAgJ2FyaWEtdmFsdWVub3cnOiAwLFxuICAgICdhcmlhLXZhbHVldGV4dCc6IDAsXG4gICAgLy8gTGl2ZSBSZWdpb24gQXR0cmlidXRlc1xuICAgICdhcmlhLWF0b21pYyc6IDAsXG4gICAgJ2FyaWEtYnVzeSc6IDAsXG4gICAgJ2FyaWEtbGl2ZSc6IDAsXG4gICAgJ2FyaWEtcmVsZXZhbnQnOiAwLFxuICAgIC8vIERyYWctYW5kLURyb3AgQXR0cmlidXRlc1xuICAgICdhcmlhLWRyb3BlZmZlY3QnOiAwLFxuICAgICdhcmlhLWdyYWJiZWQnOiAwLFxuICAgIC8vIFJlbGF0aW9uc2hpcCBBdHRyaWJ1dGVzXG4gICAgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCc6IDAsXG4gICAgJ2FyaWEtY29sY291bnQnOiAwLFxuICAgICdhcmlhLWNvbGluZGV4JzogMCxcbiAgICAnYXJpYS1jb2xzcGFuJzogMCxcbiAgICAnYXJpYS1jb250cm9scyc6IDAsXG4gICAgJ2FyaWEtZGVzY3JpYmVkYnknOiAwLFxuICAgICdhcmlhLWVycm9ybWVzc2FnZSc6IDAsXG4gICAgJ2FyaWEtZmxvd3RvJzogMCxcbiAgICAnYXJpYS1sYWJlbGxlZGJ5JzogMCxcbiAgICAnYXJpYS1vd25zJzogMCxcbiAgICAnYXJpYS1wb3NpbnNldCc6IDAsXG4gICAgJ2FyaWEtcm93Y291bnQnOiAwLFxuICAgICdhcmlhLXJvd2luZGV4JzogMCxcbiAgICAnYXJpYS1yb3dzcGFuJzogMCxcbiAgICAnYXJpYS1zZXRzaXplJzogMFxuICB9LFxuICBET01BdHRyaWJ1dGVOYW1lczoge30sXG4gIERPTVByb3BlcnR5TmFtZXM6IHt9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFSSUFET01Qcm9wZXJ0eUNvbmZpZztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvQVJJQURPTVByb3BlcnR5Q29uZmlnLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcblxudmFyIGZvY3VzTm9kZSA9IHJlcXVpcmUoJ2ZianMvbGliL2ZvY3VzTm9kZScpO1xuXG52YXIgQXV0b0ZvY3VzVXRpbHMgPSB7XG4gIGZvY3VzRE9NQ29tcG9uZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgZm9jdXNOb2RlKFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHRoaXMpKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdXRvRm9jdXNVdGlscztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvQXV0b0ZvY3VzVXRpbHMuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZSgnLi9FdmVudFByb3BhZ2F0b3JzJyk7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xudmFyIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZSA9IHJlcXVpcmUoJy4vRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlJyk7XG52YXIgU3ludGhldGljQ29tcG9zaXRpb25FdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljQ29tcG9zaXRpb25FdmVudCcpO1xudmFyIFN5bnRoZXRpY0lucHV0RXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0lucHV0RXZlbnQnKTtcblxudmFyIEVORF9LRVlDT0RFUyA9IFs5LCAxMywgMjcsIDMyXTsgLy8gVGFiLCBSZXR1cm4sIEVzYywgU3BhY2VcbnZhciBTVEFSVF9LRVlDT0RFID0gMjI5O1xuXG52YXIgY2FuVXNlQ29tcG9zaXRpb25FdmVudCA9IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiAnQ29tcG9zaXRpb25FdmVudCcgaW4gd2luZG93O1xuXG52YXIgZG9jdW1lbnRNb2RlID0gbnVsbDtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQpIHtcbiAgZG9jdW1lbnRNb2RlID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xufVxuXG4vLyBXZWJraXQgb2ZmZXJzIGEgdmVyeSB1c2VmdWwgYHRleHRJbnB1dGAgZXZlbnQgdGhhdCBjYW4gYmUgdXNlZCB0b1xuLy8gZGlyZWN0bHkgcmVwcmVzZW50IGBiZWZvcmVJbnB1dGAuIFRoZSBJRSBgdGV4dGlucHV0YCBldmVudCBpcyBub3QgYXNcbi8vIHVzZWZ1bCwgc28gd2UgZG9uJ3QgdXNlIGl0LlxudmFyIGNhblVzZVRleHRJbnB1dEV2ZW50ID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICdUZXh0RXZlbnQnIGluIHdpbmRvdyAmJiAhZG9jdW1lbnRNb2RlICYmICFpc1ByZXN0bygpO1xuXG4vLyBJbiBJRTkrLCB3ZSBoYXZlIGFjY2VzcyB0byBjb21wb3NpdGlvbiBldmVudHMsIGJ1dCB0aGUgZGF0YSBzdXBwbGllZFxuLy8gYnkgdGhlIG5hdGl2ZSBjb21wb3NpdGlvbmVuZCBldmVudCBtYXkgYmUgaW5jb3JyZWN0LiBKYXBhbmVzZSBpZGVvZ3JhcGhpY1xuLy8gc3BhY2VzLCBmb3IgaW5zdGFuY2UgKFxcdTMwMDApIGFyZSBub3QgcmVjb3JkZWQgY29ycmVjdGx5LlxudmFyIHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICghY2FuVXNlQ29tcG9zaXRpb25FdmVudCB8fCBkb2N1bWVudE1vZGUgJiYgZG9jdW1lbnRNb2RlID4gOCAmJiBkb2N1bWVudE1vZGUgPD0gMTEpO1xuXG4vKipcbiAqIE9wZXJhIDw9IDEyIGluY2x1ZGVzIFRleHRFdmVudCBpbiB3aW5kb3csIGJ1dCBkb2VzIG5vdCBmaXJlXG4gKiB0ZXh0IGlucHV0IGV2ZW50cy4gUmVseSBvbiBrZXlwcmVzcyBpbnN0ZWFkLlxuICovXG5mdW5jdGlvbiBpc1ByZXN0bygpIHtcbiAgdmFyIG9wZXJhID0gd2luZG93Lm9wZXJhO1xuICByZXR1cm4gdHlwZW9mIG9wZXJhID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb3BlcmEudmVyc2lvbiA9PT0gJ2Z1bmN0aW9uJyAmJiBwYXJzZUludChvcGVyYS52ZXJzaW9uKCksIDEwKSA8PSAxMjtcbn1cblxudmFyIFNQQUNFQkFSX0NPREUgPSAzMjtcbnZhciBTUEFDRUJBUl9DSEFSID0gU3RyaW5nLmZyb21DaGFyQ29kZShTUEFDRUJBUl9DT0RFKTtcblxuLy8gRXZlbnRzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIHByb3BlcnR5IG5hbWVzLlxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIGJlZm9yZUlucHV0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6ICdvbkJlZm9yZUlucHV0JyxcbiAgICAgIGNhcHR1cmVkOiAnb25CZWZvcmVJbnB1dENhcHR1cmUnXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFsndG9wQ29tcG9zaXRpb25FbmQnLCAndG9wS2V5UHJlc3MnLCAndG9wVGV4dElucHV0JywgJ3RvcFBhc3RlJ11cbiAgfSxcbiAgY29tcG9zaXRpb25FbmQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDogJ29uQ29tcG9zaXRpb25FbmQnLFxuICAgICAgY2FwdHVyZWQ6ICdvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZSdcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogWyd0b3BCbHVyJywgJ3RvcENvbXBvc2l0aW9uRW5kJywgJ3RvcEtleURvd24nLCAndG9wS2V5UHJlc3MnLCAndG9wS2V5VXAnLCAndG9wTW91c2VEb3duJ11cbiAgfSxcbiAgY29tcG9zaXRpb25TdGFydDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25Db21wb3NpdGlvblN0YXJ0JyxcbiAgICAgIGNhcHR1cmVkOiAnb25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZSdcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogWyd0b3BCbHVyJywgJ3RvcENvbXBvc2l0aW9uU3RhcnQnLCAndG9wS2V5RG93bicsICd0b3BLZXlQcmVzcycsICd0b3BLZXlVcCcsICd0b3BNb3VzZURvd24nXVxuICB9LFxuICBjb21wb3NpdGlvblVwZGF0ZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25Db21wb3NpdGlvblVwZGF0ZScsXG4gICAgICBjYXB0dXJlZDogJ29uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlJ1xuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbJ3RvcEJsdXInLCAndG9wQ29tcG9zaXRpb25VcGRhdGUnLCAndG9wS2V5RG93bicsICd0b3BLZXlQcmVzcycsICd0b3BLZXlVcCcsICd0b3BNb3VzZURvd24nXVxuICB9XG59O1xuXG4vLyBUcmFjayB3aGV0aGVyIHdlJ3ZlIGV2ZXIgaGFuZGxlZCBhIGtleXByZXNzIG9uIHRoZSBzcGFjZSBrZXkuXG52YXIgaGFzU3BhY2VLZXlwcmVzcyA9IGZhbHNlO1xuXG4vKipcbiAqIFJldHVybiB3aGV0aGVyIGEgbmF0aXZlIGtleXByZXNzIGV2ZW50IGlzIGFzc3VtZWQgdG8gYmUgYSBjb21tYW5kLlxuICogVGhpcyBpcyByZXF1aXJlZCBiZWNhdXNlIEZpcmVmb3ggZmlyZXMgYGtleXByZXNzYCBldmVudHMgZm9yIGtleSBjb21tYW5kc1xuICogKGN1dCwgY29weSwgc2VsZWN0LWFsbCwgZXRjLikgZXZlbiB0aG91Z2ggbm8gY2hhcmFjdGVyIGlzIGluc2VydGVkLlxuICovXG5mdW5jdGlvbiBpc0tleXByZXNzQ29tbWFuZChuYXRpdmVFdmVudCkge1xuICByZXR1cm4gKG5hdGl2ZUV2ZW50LmN0cmxLZXkgfHwgbmF0aXZlRXZlbnQuYWx0S2V5IHx8IG5hdGl2ZUV2ZW50Lm1ldGFLZXkpICYmXG4gIC8vIGN0cmxLZXkgJiYgYWx0S2V5IGlzIGVxdWl2YWxlbnQgdG8gQWx0R3IsIGFuZCBpcyBub3QgYSBjb21tYW5kLlxuICAhKG5hdGl2ZUV2ZW50LmN0cmxLZXkgJiYgbmF0aXZlRXZlbnQuYWx0S2V5KTtcbn1cblxuLyoqXG4gKiBUcmFuc2xhdGUgbmF0aXZlIHRvcCBsZXZlbCBldmVudHMgaW50byBldmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldENvbXBvc2l0aW9uRXZlbnRUeXBlKHRvcExldmVsVHlwZSkge1xuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgJ3RvcENvbXBvc2l0aW9uU3RhcnQnOlxuICAgICAgcmV0dXJuIGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydDtcbiAgICBjYXNlICd0b3BDb21wb3NpdGlvbkVuZCc6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvbkVuZDtcbiAgICBjYXNlICd0b3BDb21wb3NpdGlvblVwZGF0ZSc6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvblVwZGF0ZTtcbiAgfVxufVxuXG4vKipcbiAqIERvZXMgb3VyIGZhbGxiYWNrIGJlc3QtZ3Vlc3MgbW9kZWwgdGhpbmsgdGhpcyBldmVudCBzaWduaWZpZXMgdGhhdFxuICogY29tcG9zaXRpb24gaGFzIGJlZ3VuP1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGYWxsYmFja0NvbXBvc2l0aW9uU3RhcnQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICByZXR1cm4gdG9wTGV2ZWxUeXBlID09PSAndG9wS2V5RG93bicgJiYgbmF0aXZlRXZlbnQua2V5Q29kZSA9PT0gU1RBUlRfS0VZQ09ERTtcbn1cblxuLyoqXG4gKiBEb2VzIG91ciBmYWxsYmFjayBtb2RlIHRoaW5rIHRoYXQgdGhpcyBldmVudCBpcyB0aGUgZW5kIG9mIGNvbXBvc2l0aW9uP1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICBjYXNlICd0b3BLZXlVcCc6XG4gICAgICAvLyBDb21tYW5kIGtleXMgaW5zZXJ0IG9yIGNsZWFyIElNRSBpbnB1dC5cbiAgICAgIHJldHVybiBFTkRfS0VZQ09ERVMuaW5kZXhPZihuYXRpdmVFdmVudC5rZXlDb2RlKSAhPT0gLTE7XG4gICAgY2FzZSAndG9wS2V5RG93bic6XG4gICAgICAvLyBFeHBlY3QgSU1FIGtleUNvZGUgb24gZWFjaCBrZXlkb3duLiBJZiB3ZSBnZXQgYW55IG90aGVyXG4gICAgICAvLyBjb2RlIHdlIG11c3QgaGF2ZSBleGl0ZWQgZWFybGllci5cbiAgICAgIHJldHVybiBuYXRpdmVFdmVudC5rZXlDb2RlICE9PSBTVEFSVF9LRVlDT0RFO1xuICAgIGNhc2UgJ3RvcEtleVByZXNzJzpcbiAgICBjYXNlICd0b3BNb3VzZURvd24nOlxuICAgIGNhc2UgJ3RvcEJsdXInOlxuICAgICAgLy8gRXZlbnRzIGFyZSBub3QgcG9zc2libGUgd2l0aG91dCBjYW5jZWxsaW5nIElNRS5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBHb29nbGUgSW5wdXQgVG9vbHMgcHJvdmlkZXMgY29tcG9zaXRpb24gZGF0YSB2aWEgYSBDdXN0b21FdmVudCxcbiAqIHdpdGggdGhlIGBkYXRhYCBwcm9wZXJ0eSBwb3B1bGF0ZWQgaW4gdGhlIGBkZXRhaWxgIG9iamVjdC4gSWYgdGhpc1xuICogaXMgYXZhaWxhYmxlIG9uIHRoZSBldmVudCBvYmplY3QsIHVzZSBpdC4gSWYgbm90LCB0aGlzIGlzIGEgcGxhaW5cbiAqIGNvbXBvc2l0aW9uIGV2ZW50IGFuZCB3ZSBoYXZlIG5vdGhpbmcgc3BlY2lhbCB0byBleHRyYWN0LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHJldHVybiB7P3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCkge1xuICB2YXIgZGV0YWlsID0gbmF0aXZlRXZlbnQuZGV0YWlsO1xuICBpZiAodHlwZW9mIGRldGFpbCA9PT0gJ29iamVjdCcgJiYgJ2RhdGEnIGluIGRldGFpbCkge1xuICAgIHJldHVybiBkZXRhaWwuZGF0YTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLy8gVHJhY2sgdGhlIGN1cnJlbnQgSU1FIGNvbXBvc2l0aW9uIGZhbGxiYWNrIG9iamVjdCwgaWYgYW55LlxudmFyIGN1cnJlbnRDb21wb3NpdGlvbiA9IG51bGw7XG5cbi8qKlxuICogQHJldHVybiB7P29iamVjdH0gQSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LlxuICovXG5mdW5jdGlvbiBleHRyYWN0Q29tcG9zaXRpb25FdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICB2YXIgZXZlbnRUeXBlO1xuICB2YXIgZmFsbGJhY2tEYXRhO1xuXG4gIGlmIChjYW5Vc2VDb21wb3NpdGlvbkV2ZW50KSB7XG4gICAgZXZlbnRUeXBlID0gZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUodG9wTGV2ZWxUeXBlKTtcbiAgfSBlbHNlIGlmICghY3VycmVudENvbXBvc2l0aW9uKSB7XG4gICAgaWYgKGlzRmFsbGJhY2tDb21wb3NpdGlvblN0YXJ0KHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpKSB7XG4gICAgICBldmVudFR5cGUgPSBldmVudFR5cGVzLmNvbXBvc2l0aW9uU3RhcnQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSkge1xuICAgIGV2ZW50VHlwZSA9IGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQ7XG4gIH1cblxuICBpZiAoIWV2ZW50VHlwZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhKSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgY29tcG9zaXRpb24gaXMgc3RvcmVkIHN0YXRpY2FsbHkgYW5kIG11c3Qgbm90IGJlXG4gICAgLy8gb3ZlcndyaXR0ZW4gd2hpbGUgY29tcG9zaXRpb24gY29udGludWVzLlxuICAgIGlmICghY3VycmVudENvbXBvc2l0aW9uICYmIGV2ZW50VHlwZSA9PT0gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0KSB7XG4gICAgICBjdXJyZW50Q29tcG9zaXRpb24gPSBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUuZ2V0UG9vbGVkKG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50VHlwZSA9PT0gZXZlbnRUeXBlcy5jb21wb3NpdGlvbkVuZCkge1xuICAgICAgaWYgKGN1cnJlbnRDb21wb3NpdGlvbikge1xuICAgICAgICBmYWxsYmFja0RhdGEgPSBjdXJyZW50Q29tcG9zaXRpb24uZ2V0RGF0YSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBldmVudCA9IFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcblxuICBpZiAoZmFsbGJhY2tEYXRhKSB7XG4gICAgLy8gSW5qZWN0IGRhdGEgZ2VuZXJhdGVkIGZyb20gZmFsbGJhY2sgcGF0aCBpbnRvIHRoZSBzeW50aGV0aWMgZXZlbnQuXG4gICAgLy8gVGhpcyBtYXRjaGVzIHRoZSBwcm9wZXJ0eSBvZiBuYXRpdmUgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZS5cbiAgICBldmVudC5kYXRhID0gZmFsbGJhY2tEYXRhO1xuICB9IGVsc2Uge1xuICAgIHZhciBjdXN0b21EYXRhID0gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCk7XG4gICAgaWYgKGN1c3RvbURhdGEgIT09IG51bGwpIHtcbiAgICAgIGV2ZW50LmRhdGEgPSBjdXN0b21EYXRhO1xuICAgIH1cbiAgfVxuXG4gIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gIHJldHVybiBldmVudDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgc3RyaW5nIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBgYmVmb3JlSW5wdXRgIGV2ZW50LlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICBjYXNlICd0b3BDb21wb3NpdGlvbkVuZCc6XG4gICAgICByZXR1cm4gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCk7XG4gICAgY2FzZSAndG9wS2V5UHJlc3MnOlxuICAgICAgLyoqXG4gICAgICAgKiBJZiBuYXRpdmUgYHRleHRJbnB1dGAgZXZlbnRzIGFyZSBhdmFpbGFibGUsIG91ciBnb2FsIGlzIHRvIG1ha2VcbiAgICAgICAqIHVzZSBvZiB0aGVtLiBIb3dldmVyLCB0aGVyZSBpcyBhIHNwZWNpYWwgY2FzZTogdGhlIHNwYWNlYmFyIGtleS5cbiAgICAgICAqIEluIFdlYmtpdCwgcHJldmVudGluZyBkZWZhdWx0IG9uIGEgc3BhY2ViYXIgYHRleHRJbnB1dGAgZXZlbnRcbiAgICAgICAqIGNhbmNlbHMgY2hhcmFjdGVyIGluc2VydGlvbiwgYnV0IGl0ICphbHNvKiBjYXVzZXMgdGhlIGJyb3dzZXJcbiAgICAgICAqIHRvIGZhbGwgYmFjayB0byBpdHMgZGVmYXVsdCBzcGFjZWJhciBiZWhhdmlvciBvZiBzY3JvbGxpbmcgdGhlXG4gICAgICAgKiBwYWdlLlxuICAgICAgICpcbiAgICAgICAqIFRyYWNraW5nIGF0OlxuICAgICAgICogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM1NTEwM1xuICAgICAgICpcbiAgICAgICAqIFRvIGF2b2lkIHRoaXMgaXNzdWUsIHVzZSB0aGUga2V5cHJlc3MgZXZlbnQgYXMgaWYgbm8gYHRleHRJbnB1dGBcbiAgICAgICAqIGV2ZW50IGlzIGF2YWlsYWJsZS5cbiAgICAgICAqL1xuICAgICAgdmFyIHdoaWNoID0gbmF0aXZlRXZlbnQud2hpY2g7XG4gICAgICBpZiAod2hpY2ggIT09IFNQQUNFQkFSX0NPREUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGhhc1NwYWNlS2V5cHJlc3MgPSB0cnVlO1xuICAgICAgcmV0dXJuIFNQQUNFQkFSX0NIQVI7XG5cbiAgICBjYXNlICd0b3BUZXh0SW5wdXQnOlxuICAgICAgLy8gUmVjb3JkIHRoZSBjaGFyYWN0ZXJzIHRvIGJlIGFkZGVkIHRvIHRoZSBET00uXG4gICAgICB2YXIgY2hhcnMgPSBuYXRpdmVFdmVudC5kYXRhO1xuXG4gICAgICAvLyBJZiBpdCdzIGEgc3BhY2ViYXIgY2hhcmFjdGVyLCBhc3N1bWUgdGhhdCB3ZSBoYXZlIGFscmVhZHkgaGFuZGxlZFxuICAgICAgLy8gaXQgYXQgdGhlIGtleXByZXNzIGxldmVsIGFuZCBiYWlsIGltbWVkaWF0ZWx5LiBBbmRyb2lkIENocm9tZVxuICAgICAgLy8gZG9lc24ndCBnaXZlIHVzIGtleWNvZGVzLCBzbyB3ZSBuZWVkIHRvIGJsYWNrbGlzdCBpdC5cbiAgICAgIGlmIChjaGFycyA9PT0gU1BBQ0VCQVJfQ0hBUiAmJiBoYXNTcGFjZUtleXByZXNzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2hhcnM7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgLy8gRm9yIG90aGVyIG5hdGl2ZSBldmVudCB0eXBlcywgZG8gbm90aGluZy5cbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogRm9yIGJyb3dzZXJzIHRoYXQgZG8gbm90IHByb3ZpZGUgdGhlIGB0ZXh0SW5wdXRgIGV2ZW50LCBleHRyYWN0IHRoZVxuICogYXBwcm9wcmlhdGUgc3RyaW5nIHRvIHVzZSBmb3IgU3ludGhldGljSW5wdXRFdmVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgZmFsbGJhY2sgc3RyaW5nIGZvciB0aGlzIGBiZWZvcmVJbnB1dGAgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIC8vIElmIHdlIGFyZSBjdXJyZW50bHkgY29tcG9zaW5nIChJTUUpIGFuZCB1c2luZyBhIGZhbGxiYWNrIHRvIGRvIHNvLFxuICAvLyB0cnkgdG8gZXh0cmFjdCB0aGUgY29tcG9zZWQgY2hhcmFjdGVycyBmcm9tIHRoZSBmYWxsYmFjayBvYmplY3QuXG4gIC8vIElmIGNvbXBvc2l0aW9uIGV2ZW50IGlzIGF2YWlsYWJsZSwgd2UgZXh0cmFjdCBhIHN0cmluZyBvbmx5IGF0XG4gIC8vIGNvbXBvc2l0aW9uZXZlbnQsIG90aGVyd2lzZSBleHRyYWN0IGl0IGF0IGZhbGxiYWNrIGV2ZW50cy5cbiAgaWYgKGN1cnJlbnRDb21wb3NpdGlvbikge1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09ICd0b3BDb21wb3NpdGlvbkVuZCcgfHwgIWNhblVzZUNvbXBvc2l0aW9uRXZlbnQgJiYgaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpKSB7XG4gICAgICB2YXIgY2hhcnMgPSBjdXJyZW50Q29tcG9zaXRpb24uZ2V0RGF0YSgpO1xuICAgICAgRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLnJlbGVhc2UoY3VycmVudENvbXBvc2l0aW9uKTtcbiAgICAgIGN1cnJlbnRDb21wb3NpdGlvbiA9IG51bGw7XG4gICAgICByZXR1cm4gY2hhcnM7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICBjYXNlICd0b3BQYXN0ZSc6XG4gICAgICAvLyBJZiBhIHBhc3RlIGV2ZW50IG9jY3VycyBhZnRlciBhIGtleXByZXNzLCB0aHJvdyBvdXQgdGhlIGlucHV0XG4gICAgICAvLyBjaGFycy4gUGFzdGUgZXZlbnRzIHNob3VsZCBub3QgbGVhZCB0byBCZWZvcmVJbnB1dCBldmVudHMuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlICd0b3BLZXlQcmVzcyc6XG4gICAgICAvKipcbiAgICAgICAqIEFzIG9mIHYyNywgRmlyZWZveCBtYXkgZmlyZSBrZXlwcmVzcyBldmVudHMgZXZlbiB3aGVuIG5vIGNoYXJhY3RlclxuICAgICAgICogd2lsbCBiZSBpbnNlcnRlZC4gQSBmZXcgcG9zc2liaWxpdGllczpcbiAgICAgICAqXG4gICAgICAgKiAtIGB3aGljaGAgaXMgYDBgLiBBcnJvdyBrZXlzLCBFc2Mga2V5LCBldGMuXG4gICAgICAgKlxuICAgICAgICogLSBgd2hpY2hgIGlzIHRoZSBwcmVzc2VkIGtleSBjb2RlLCBidXQgbm8gY2hhciBpcyBhdmFpbGFibGUuXG4gICAgICAgKiAgIEV4OiAnQWx0R3IgKyBkYCBpbiBQb2xpc2guIFRoZXJlIGlzIG5vIG1vZGlmaWVkIGNoYXJhY3RlciBmb3JcbiAgICAgICAqICAgdGhpcyBrZXkgY29tYmluYXRpb24gYW5kIG5vIGNoYXJhY3RlciBpcyBpbnNlcnRlZCBpbnRvIHRoZVxuICAgICAgICogICBkb2N1bWVudCwgYnV0IEZGIGZpcmVzIHRoZSBrZXlwcmVzcyBmb3IgY2hhciBjb2RlIGAxMDBgIGFueXdheS5cbiAgICAgICAqICAgTm8gYGlucHV0YCBldmVudCB3aWxsIG9jY3VyLlxuICAgICAgICpcbiAgICAgICAqIC0gYHdoaWNoYCBpcyB0aGUgcHJlc3NlZCBrZXkgY29kZSwgYnV0IGEgY29tbWFuZCBjb21iaW5hdGlvbiBpc1xuICAgICAgICogICBiZWluZyB1c2VkLiBFeDogYENtZCtDYC4gTm8gY2hhcmFjdGVyIGlzIGluc2VydGVkLCBhbmQgbm9cbiAgICAgICAqICAgYGlucHV0YCBldmVudCB3aWxsIG9jY3VyLlxuICAgICAgICovXG4gICAgICBpZiAobmF0aXZlRXZlbnQud2hpY2ggJiYgIWlzS2V5cHJlc3NDb21tYW5kKG5hdGl2ZUV2ZW50KSkge1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShuYXRpdmVFdmVudC53aGljaCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlICd0b3BDb21wb3NpdGlvbkVuZCc6XG4gICAgICByZXR1cm4gdXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgPyBudWxsIDogbmF0aXZlRXZlbnQuZGF0YTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBFeHRyYWN0IGEgU3ludGhldGljSW5wdXRFdmVudCBmb3IgYGJlZm9yZUlucHV0YCwgYmFzZWQgb24gZWl0aGVyIG5hdGl2ZVxuICogYHRleHRJbnB1dGAgb3IgZmFsbGJhY2sgYmVoYXZpb3IuXG4gKlxuICogQHJldHVybiB7P29iamVjdH0gQSBTeW50aGV0aWNJbnB1dEV2ZW50LlxuICovXG5mdW5jdGlvbiBleHRyYWN0QmVmb3JlSW5wdXRFdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICB2YXIgY2hhcnM7XG5cbiAgaWYgKGNhblVzZVRleHRJbnB1dEV2ZW50KSB7XG4gICAgY2hhcnMgPSBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpO1xuICB9IGVsc2Uge1xuICAgIGNoYXJzID0gZ2V0RmFsbGJhY2tCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpO1xuICB9XG5cbiAgLy8gSWYgbm8gY2hhcmFjdGVycyBhcmUgYmVpbmcgaW5zZXJ0ZWQsIG5vIEJlZm9yZUlucHV0IGV2ZW50IHNob3VsZFxuICAvLyBiZSBmaXJlZC5cbiAgaWYgKCFjaGFycykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGV2ZW50ID0gU3ludGhldGljSW5wdXRFdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlcy5iZWZvcmVJbnB1dCwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcblxuICBldmVudC5kYXRhID0gY2hhcnM7XG4gIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gIHJldHVybiBldmVudDtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gYG9uQmVmb3JlSW5wdXRgIGV2ZW50IHRvIG1hdGNoXG4gKiBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDEzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDEzMTEwNS8jZXZlbnRzLWlucHV0ZXZlbnRzLlxuICpcbiAqIFRoaXMgZXZlbnQgcGx1Z2luIGlzIGJhc2VkIG9uIHRoZSBuYXRpdmUgYHRleHRJbnB1dGAgZXZlbnRcbiAqIGF2YWlsYWJsZSBpbiBDaHJvbWUsIFNhZmFyaSwgT3BlcmEsIGFuZCBJRS4gVGhpcyBldmVudCBmaXJlcyBhZnRlclxuICogYG9uS2V5UHJlc3NgIGFuZCBgb25Db21wb3NpdGlvbkVuZGAsIGJ1dCBiZWZvcmUgYG9uSW5wdXRgLlxuICpcbiAqIGBiZWZvcmVJbnB1dGAgaXMgc3BlYydkIGJ1dCBub3QgaW1wbGVtZW50ZWQgaW4gYW55IGJyb3dzZXJzLCBhbmRcbiAqIHRoZSBgaW5wdXRgIGV2ZW50IGRvZXMgbm90IHByb3ZpZGUgYW55IHVzZWZ1bCBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGhhc1xuICogYWN0dWFsbHkgYmVlbiBhZGRlZCwgY29udHJhcnkgdG8gdGhlIHNwZWMuIFRodXMsIGB0ZXh0SW5wdXRgIGlzIHRoZSBiZXN0XG4gKiBhdmFpbGFibGUgZXZlbnQgdG8gaWRlbnRpZnkgdGhlIGNoYXJhY3RlcnMgdGhhdCBoYXZlIGFjdHVhbGx5IGJlZW4gaW5zZXJ0ZWRcbiAqIGludG8gdGhlIHRhcmdldCBub2RlLlxuICpcbiAqIFRoaXMgcGx1Z2luIGlzIGFsc28gcmVzcG9uc2libGUgZm9yIGVtaXR0aW5nIGBjb21wb3NpdGlvbmAgZXZlbnRzLCB0aHVzXG4gKiBhbGxvd2luZyB1cyB0byBzaGFyZSBjb21wb3NpdGlvbiBmYWxsYmFjayBjb2RlIGZvciBib3RoIGBiZWZvcmVJbnB1dGAgYW5kXG4gKiBgY29tcG9zaXRpb25gIGV2ZW50IHR5cGVzLlxuICovXG52YXIgQmVmb3JlSW5wdXRFdmVudFBsdWdpbiA9IHtcbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICByZXR1cm4gW2V4dHJhY3RDb21wb3NpdGlvbkV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSwgZXh0cmFjdEJlZm9yZUlucHV0RXZlbnQodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpXTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9CZWZvcmVJbnB1dEV2ZW50UGx1Z2luLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ1NTUHJvcGVydHkgPSByZXF1aXJlKCcuL0NTU1Byb3BlcnR5Jyk7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xudmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluc3RydW1lbnRhdGlvbicpO1xuXG52YXIgY2FtZWxpemVTdHlsZU5hbWUgPSByZXF1aXJlKCdmYmpzL2xpYi9jYW1lbGl6ZVN0eWxlTmFtZScpO1xudmFyIGRhbmdlcm91c1N0eWxlVmFsdWUgPSByZXF1aXJlKCcuL2Rhbmdlcm91c1N0eWxlVmFsdWUnKTtcbnZhciBoeXBoZW5hdGVTdHlsZU5hbWUgPSByZXF1aXJlKCdmYmpzL2xpYi9oeXBoZW5hdGVTdHlsZU5hbWUnKTtcbnZhciBtZW1vaXplU3RyaW5nT25seSA9IHJlcXVpcmUoJ2ZianMvbGliL21lbW9pemVTdHJpbmdPbmx5Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSBtZW1vaXplU3RyaW5nT25seShmdW5jdGlvbiAoc3R5bGVOYW1lKSB7XG4gIHJldHVybiBoeXBoZW5hdGVTdHlsZU5hbWUoc3R5bGVOYW1lKTtcbn0pO1xuXG52YXIgaGFzU2hvcnRoYW5kUHJvcGVydHlCdWcgPSBmYWxzZTtcbnZhciBzdHlsZUZsb2F0QWNjZXNzb3IgPSAnY3NzRmxvYXQnO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB2YXIgdGVtcFN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHRyeSB7XG4gICAgLy8gSUU4IHRocm93cyBcIkludmFsaWQgYXJndW1lbnQuXCIgaWYgcmVzZXR0aW5nIHNob3J0aGFuZCBzdHlsZSBwcm9wZXJ0aWVzLlxuICAgIHRlbXBTdHlsZS5mb250ID0gJyc7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYXNTaG9ydGhhbmRQcm9wZXJ0eUJ1ZyA9IHRydWU7XG4gIH1cbiAgLy8gSUU4IG9ubHkgc3VwcG9ydHMgYWNjZXNzaW5nIGNzc0Zsb2F0IChzdGFuZGFyZCkgYXMgc3R5bGVGbG9hdFxuICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLmNzc0Zsb2F0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsZUZsb2F0QWNjZXNzb3IgPSAnc3R5bGVGbG9hdCc7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gJ21zVHJhbnNmb3JtJyBpcyBjb3JyZWN0LCBidXQgdGhlIG90aGVyIHByZWZpeGVzIHNob3VsZCBiZSBjYXBpdGFsaXplZFxuICB2YXIgYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuID0gL14oPzp3ZWJraXR8bW96fG8pW0EtWl0vO1xuXG4gIC8vIHN0eWxlIHZhbHVlcyBzaG91bGRuJ3QgY29udGFpbiBhIHNlbWljb2xvblxuICB2YXIgYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuID0gLztcXHMqJC87XG5cbiAgdmFyIHdhcm5lZFN0eWxlTmFtZXMgPSB7fTtcbiAgdmFyIHdhcm5lZFN0eWxlVmFsdWVzID0ge307XG4gIHZhciB3YXJuZWRGb3JOYU5WYWx1ZSA9IGZhbHNlO1xuXG4gIHZhciB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZSA9IGZ1bmN0aW9uIChuYW1lLCBvd25lcikge1xuICAgIGlmICh3YXJuZWRTdHlsZU5hbWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRTdHlsZU5hbWVzW25hbWVdID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1Vuc3VwcG9ydGVkIHN0eWxlIHByb3BlcnR5ICVzLiBEaWQgeW91IG1lYW4gJXM/JXMnLCBuYW1lLCBjYW1lbGl6ZVN0eWxlTmFtZShuYW1lKSwgY2hlY2tSZW5kZXJNZXNzYWdlKG93bmVyKSkgOiB2b2lkIDA7XG4gIH07XG5cbiAgdmFyIHdhcm5CYWRWZW5kb3JlZFN0eWxlTmFtZSA9IGZ1bmN0aW9uIChuYW1lLCBvd25lcikge1xuICAgIGlmICh3YXJuZWRTdHlsZU5hbWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRTdHlsZU5hbWVzW25hbWVdID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1Vuc3VwcG9ydGVkIHZlbmRvci1wcmVmaXhlZCBzdHlsZSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzPyVzJywgbmFtZSwgbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSksIGNoZWNrUmVuZGVyTWVzc2FnZShvd25lcikpIDogdm9pZCAwO1xuICB9O1xuXG4gIHZhciB3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24gPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUsIG93bmVyKSB7XG4gICAgaWYgKHdhcm5lZFN0eWxlVmFsdWVzLmhhc093blByb3BlcnR5KHZhbHVlKSAmJiB3YXJuZWRTdHlsZVZhbHVlc1t2YWx1ZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRTdHlsZVZhbHVlc1t2YWx1ZV0gPSB0cnVlO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCBcIlN0eWxlIHByb3BlcnR5IHZhbHVlcyBzaG91bGRuJ3QgY29udGFpbiBhIHNlbWljb2xvbi4lcyBcIiArICdUcnkgXCIlczogJXNcIiBpbnN0ZWFkLicsIGNoZWNrUmVuZGVyTWVzc2FnZShvd25lciksIG5hbWUsIHZhbHVlLnJlcGxhY2UoYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuLCAnJykpIDogdm9pZCAwO1xuICB9O1xuXG4gIHZhciB3YXJuU3R5bGVWYWx1ZUlzTmFOID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCBvd25lcikge1xuICAgIGlmICh3YXJuZWRGb3JOYU5WYWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZEZvck5hTlZhbHVlID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2BOYU5gIGlzIGFuIGludmFsaWQgdmFsdWUgZm9yIHRoZSBgJXNgIGNzcyBzdHlsZSBwcm9wZXJ0eS4lcycsIG5hbWUsIGNoZWNrUmVuZGVyTWVzc2FnZShvd25lcikpIDogdm9pZCAwO1xuICB9O1xuXG4gIHZhciBjaGVja1JlbmRlck1lc3NhZ2UgPSBmdW5jdGlvbiAob3duZXIpIHtcbiAgICBpZiAob3duZXIpIHtcbiAgICAgIHZhciBuYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEBwYXJhbSB7UmVhY3RET01Db21wb25lbnR9IGNvbXBvbmVudFxuICAgKi9cbiAgdmFyIHdhcm5WYWxpZFN0eWxlID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCBjb21wb25lbnQpIHtcbiAgICB2YXIgb3duZXI7XG4gICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgb3duZXIgPSBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICB9XG4gICAgaWYgKG5hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAgIHdhcm5IeXBoZW5hdGVkU3R5bGVOYW1lKG5hbWUsIG93bmVyKTtcbiAgICB9IGVsc2UgaWYgKGJhZFZlbmRvcmVkU3R5bGVOYW1lUGF0dGVybi50ZXN0KG5hbWUpKSB7XG4gICAgICB3YXJuQmFkVmVuZG9yZWRTdHlsZU5hbWUobmFtZSwgb3duZXIpO1xuICAgIH0gZWxzZSBpZiAoYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuLnRlc3QodmFsdWUpKSB7XG4gICAgICB3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24obmFtZSwgdmFsdWUsIG93bmVyKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWx1ZSkpIHtcbiAgICAgIHdhcm5TdHlsZVZhbHVlSXNOYU4obmFtZSwgdmFsdWUsIG93bmVyKTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogT3BlcmF0aW9ucyBmb3IgZGVhbGluZyB3aXRoIENTUyBwcm9wZXJ0aWVzLlxuICovXG52YXIgQ1NTUHJvcGVydHlPcGVyYXRpb25zID0ge1xuICAvKipcbiAgICogU2VyaWFsaXplcyBhIG1hcHBpbmcgb2Ygc3R5bGUgcHJvcGVydGllcyBmb3IgdXNlIGFzIGlubGluZSBzdHlsZXM6XG4gICAqXG4gICAqICAgPiBjcmVhdGVNYXJrdXBGb3JTdHlsZXMoe3dpZHRoOiAnMjAwcHgnLCBoZWlnaHQ6IDB9KVxuICAgKiAgIFwid2lkdGg6MjAwcHg7aGVpZ2h0OjA7XCJcbiAgICpcbiAgICogVW5kZWZpbmVkIHZhbHVlcyBhcmUgaWdub3JlZCBzbyB0aGF0IGRlY2xhcmF0aXZlIHByb2dyYW1taW5nIGlzIGVhc2llci5cbiAgICogVGhlIHJlc3VsdCBzaG91bGQgYmUgSFRNTC1lc2NhcGVkIGJlZm9yZSBpbnNlcnRpb24gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzXG4gICAqIEBwYXJhbSB7UmVhY3RET01Db21wb25lbnR9IGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxuICAgKi9cbiAgY3JlYXRlTWFya3VwRm9yU3R5bGVzOiBmdW5jdGlvbiAoc3R5bGVzLCBjb21wb25lbnQpIHtcbiAgICB2YXIgc2VyaWFsaXplZCA9ICcnO1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNDdXN0b21Qcm9wZXJ0eSA9IHN0eWxlTmFtZS5pbmRleE9mKCctLScpID09PSAwO1xuICAgICAgdmFyIHN0eWxlVmFsdWUgPSBzdHlsZXNbc3R5bGVOYW1lXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghaXNDdXN0b21Qcm9wZXJ0eSkge1xuICAgICAgICAgIHdhcm5WYWxpZFN0eWxlKHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSwgY29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN0eWxlVmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBzZXJpYWxpemVkICs9IHByb2Nlc3NTdHlsZU5hbWUoc3R5bGVOYW1lKSArICc6JztcbiAgICAgICAgc2VyaWFsaXplZCArPSBkYW5nZXJvdXNTdHlsZVZhbHVlKHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSwgY29tcG9uZW50LCBpc0N1c3RvbVByb3BlcnR5KSArICc7JztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWQgfHwgbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB0aGUgdmFsdWUgZm9yIG11bHRpcGxlIHN0eWxlcyBvbiBhIG5vZGUuICBJZiBhIHZhbHVlIGlzIHNwZWNpZmllZCBhc1xuICAgKiAnJyAoZW1wdHkgc3RyaW5nKSwgdGhlIGNvcnJlc3BvbmRpbmcgc3R5bGUgcHJvcGVydHkgd2lsbCBiZSB1bnNldC5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdHlsZXNcbiAgICogQHBhcmFtIHtSZWFjdERPTUNvbXBvbmVudH0gY29tcG9uZW50XG4gICAqL1xuICBzZXRWYWx1ZUZvclN0eWxlczogZnVuY3Rpb24gKG5vZGUsIHN0eWxlcywgY29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkhvc3RPcGVyYXRpb24oe1xuICAgICAgICBpbnN0YW5jZUlEOiBjb21wb25lbnQuX2RlYnVnSUQsXG4gICAgICAgIHR5cGU6ICd1cGRhdGUgc3R5bGVzJyxcbiAgICAgICAgcGF5bG9hZDogc3R5bGVzXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlO1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNDdXN0b21Qcm9wZXJ0eSA9IHN0eWxlTmFtZS5pbmRleE9mKCctLScpID09PSAwO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKCFpc0N1c3RvbVByb3BlcnR5KSB7XG4gICAgICAgICAgd2FyblZhbGlkU3R5bGUoc3R5bGVOYW1lLCBzdHlsZXNbc3R5bGVOYW1lXSwgY29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHN0eWxlVmFsdWUgPSBkYW5nZXJvdXNTdHlsZVZhbHVlKHN0eWxlTmFtZSwgc3R5bGVzW3N0eWxlTmFtZV0sIGNvbXBvbmVudCwgaXNDdXN0b21Qcm9wZXJ0eSk7XG4gICAgICBpZiAoc3R5bGVOYW1lID09PSAnZmxvYXQnIHx8IHN0eWxlTmFtZSA9PT0gJ2Nzc0Zsb2F0Jykge1xuICAgICAgICBzdHlsZU5hbWUgPSBzdHlsZUZsb2F0QWNjZXNzb3I7XG4gICAgICB9XG4gICAgICBpZiAoaXNDdXN0b21Qcm9wZXJ0eSkge1xuICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShzdHlsZU5hbWUsIHN0eWxlVmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChzdHlsZVZhbHVlKSB7XG4gICAgICAgIHN0eWxlW3N0eWxlTmFtZV0gPSBzdHlsZVZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGV4cGFuc2lvbiA9IGhhc1Nob3J0aGFuZFByb3BlcnR5QnVnICYmIENTU1Byb3BlcnR5LnNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uc1tzdHlsZU5hbWVdO1xuICAgICAgICBpZiAoZXhwYW5zaW9uKSB7XG4gICAgICAgICAgLy8gU2hvcnRoYW5kIHByb3BlcnR5IHRoYXQgSUU4IHdvbid0IGxpa2UgdW5zZXR0aW5nLCBzbyB1bnNldCBlYWNoXG4gICAgICAgICAgLy8gY29tcG9uZW50IHRvIHBsYWNhdGUgaXRcbiAgICAgICAgICBmb3IgKHZhciBpbmRpdmlkdWFsU3R5bGVOYW1lIGluIGV4cGFuc2lvbikge1xuICAgICAgICAgICAgc3R5bGVbaW5kaXZpZHVhbFN0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGVbc3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENTU1Byb3BlcnR5T3BlcmF0aW9ucztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvQ1NTUHJvcGVydHlPcGVyYXRpb25zLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luSHViJyk7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoJy4vRXZlbnRQcm9wYWdhdG9ycycpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG5cbnZhciBpbnB1dFZhbHVlVHJhY2tpbmcgPSByZXF1aXJlKCcuL2lucHV0VmFsdWVUcmFja2luZycpO1xudmFyIGdldEV2ZW50VGFyZ2V0ID0gcmVxdWlyZSgnLi9nZXRFdmVudFRhcmdldCcpO1xudmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSByZXF1aXJlKCcuL2lzRXZlbnRTdXBwb3J0ZWQnKTtcbnZhciBpc1RleHRJbnB1dEVsZW1lbnQgPSByZXF1aXJlKCcuL2lzVGV4dElucHV0RWxlbWVudCcpO1xuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgY2hhbmdlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6ICdvbkNoYW5nZScsXG4gICAgICBjYXB0dXJlZDogJ29uQ2hhbmdlQ2FwdHVyZSdcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogWyd0b3BCbHVyJywgJ3RvcENoYW5nZScsICd0b3BDbGljaycsICd0b3BGb2N1cycsICd0b3BJbnB1dCcsICd0b3BLZXlEb3duJywgJ3RvcEtleVVwJywgJ3RvcFNlbGVjdGlvbkNoYW5nZSddXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUFuZEFjY3VtdWxhdGVDaGFuZ2VFdmVudChpbnN0LCBuYXRpdmVFdmVudCwgdGFyZ2V0KSB7XG4gIHZhciBldmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLmNoYW5nZSwgaW5zdCwgbmF0aXZlRXZlbnQsIHRhcmdldCk7XG4gIGV2ZW50LnR5cGUgPSAnY2hhbmdlJztcbiAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgcmV0dXJuIGV2ZW50O1xufVxuLyoqXG4gKiBGb3IgSUUgc2hpbXNcbiAqL1xudmFyIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRJbnN0ID0gbnVsbDtcblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGNoYW5nZWAgZXZlbnRcbiAqL1xuZnVuY3Rpb24gc2hvdWxkVXNlQ2hhbmdlRXZlbnQoZWxlbSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIG5vZGVOYW1lID09PSAnc2VsZWN0JyB8fCBub2RlTmFtZSA9PT0gJ2lucHV0JyAmJiBlbGVtLnR5cGUgPT09ICdmaWxlJztcbn1cblxudmFyIGRvZXNDaGFuZ2VFdmVudEJ1YmJsZSA9IGZhbHNlO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAvLyBTZWUgYGhhbmRsZUNoYW5nZWAgY29tbWVudCBiZWxvd1xuICBkb2VzQ2hhbmdlRXZlbnRCdWJibGUgPSBpc0V2ZW50U3VwcG9ydGVkKCdjaGFuZ2UnKSAmJiAoIWRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPiA4KTtcbn1cblxuZnVuY3Rpb24gbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudChuYXRpdmVFdmVudCkge1xuICB2YXIgZXZlbnQgPSBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoYWN0aXZlRWxlbWVudEluc3QsIG5hdGl2ZUV2ZW50LCBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCkpO1xuXG4gIC8vIElmIGNoYW5nZSBhbmQgcHJvcGVydHljaGFuZ2UgYnViYmxlZCwgd2UnZCBqdXN0IGJpbmQgdG8gaXQgbGlrZSBhbGwgdGhlXG4gIC8vIG90aGVyIGV2ZW50cyBhbmQgaGF2ZSBpdCBnbyB0aHJvdWdoIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci4gU2luY2UgaXRcbiAgLy8gZG9lc24ndCwgd2UgbWFudWFsbHkgbGlzdGVuIGZvciB0aGUgZXZlbnRzIGFuZCBzbyB3ZSBoYXZlIHRvIGVucXVldWUgYW5kXG4gIC8vIHByb2Nlc3MgdGhlIGFic3RyYWN0IGV2ZW50IG1hbnVhbGx5LlxuICAvL1xuICAvLyBCYXRjaGluZyBpcyBuZWNlc3NhcnkgaGVyZSBpbiBvcmRlciB0byBlbnN1cmUgdGhhdCBhbGwgZXZlbnQgaGFuZGxlcnMgcnVuXG4gIC8vIGJlZm9yZSB0aGUgbmV4dCByZXJlbmRlciAoaW5jbHVkaW5nIGV2ZW50IGhhbmRsZXJzIGF0dGFjaGVkIHRvIGFuY2VzdG9yXG4gIC8vIGVsZW1lbnRzIGluc3RlYWQgb2YgZGlyZWN0bHkgb24gdGhlIGlucHV0KS4gV2l0aG91dCB0aGlzLCBjb250cm9sbGVkXG4gIC8vIGNvbXBvbmVudHMgZG9uJ3Qgd29yayBwcm9wZXJseSBpbiBjb25qdW5jdGlvbiB3aXRoIGV2ZW50IGJ1YmJsaW5nIGJlY2F1c2VcbiAgLy8gdGhlIGNvbXBvbmVudCBpcyByZXJlbmRlcmVkIGFuZCB0aGUgdmFsdWUgcmV2ZXJ0ZWQgYmVmb3JlIGFsbCB0aGUgZXZlbnRcbiAgLy8gaGFuZGxlcnMgY2FuIHJ1bi4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzA4LlxuICBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMocnVuRXZlbnRJbkJhdGNoLCBldmVudCk7XG59XG5cbmZ1bmN0aW9uIHJ1bkV2ZW50SW5CYXRjaChldmVudCkge1xuICBFdmVudFBsdWdpbkh1Yi5lbnF1ZXVlRXZlbnRzKGV2ZW50KTtcbiAgRXZlbnRQbHVnaW5IdWIucHJvY2Vzc0V2ZW50UXVldWUoZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBzdGFydFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgodGFyZ2V0LCB0YXJnZXRJbnN0KSB7XG4gIGFjdGl2ZUVsZW1lbnQgPSB0YXJnZXQ7XG4gIGFjdGl2ZUVsZW1lbnRJbnN0ID0gdGFyZ2V0SW5zdDtcbiAgYWN0aXZlRWxlbWVudC5hdHRhY2hFdmVudCgnb25jaGFuZ2UnLCBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KTtcbn1cblxuZnVuY3Rpb24gc3RvcFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgoKSB7XG4gIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbmNoYW5nZScsIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQpO1xuICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudEluc3QgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQodGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQpIHtcbiAgdmFyIHVwZGF0ZWQgPSBpbnB1dFZhbHVlVHJhY2tpbmcudXBkYXRlVmFsdWVJZkNoYW5nZWQodGFyZ2V0SW5zdCk7XG4gIHZhciBzaW11bGF0ZWQgPSBuYXRpdmVFdmVudC5zaW11bGF0ZWQgPT09IHRydWUgJiYgQ2hhbmdlRXZlbnRQbHVnaW4uX2FsbG93U2ltdWxhdGVkUGFzc1Rocm91Z2g7XG5cbiAgaWYgKHVwZGF0ZWQgfHwgc2ltdWxhdGVkKSB7XG4gICAgcmV0dXJuIHRhcmdldEluc3Q7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvckNoYW5nZUV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSAndG9wQ2hhbmdlJykge1xuICAgIHJldHVybiB0YXJnZXRJbnN0O1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUV2ZW50c0ZvckNoYW5nZUV2ZW50SUU4KHRvcExldmVsVHlwZSwgdGFyZ2V0LCB0YXJnZXRJbnN0KSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09ICd0b3BGb2N1cycpIHtcbiAgICAvLyBzdG9wV2F0Y2hpbmcoKSBzaG91bGQgYmUgYSBub29wIGhlcmUgYnV0IHdlIGNhbGwgaXQganVzdCBpbiBjYXNlIHdlXG4gICAgLy8gbWlzc2VkIGEgYmx1ciBldmVudCBzb21laG93LlxuICAgIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCk7XG4gICAgc3RhcnRXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KHRhcmdldCwgdGFyZ2V0SW5zdCk7XG4gIH0gZWxzZSBpZiAodG9wTGV2ZWxUeXBlID09PSAndG9wQmx1cicpIHtcbiAgICBzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCgpO1xuICB9XG59XG5cbi8qKlxuICogU0VDVElPTjogaGFuZGxlIGBpbnB1dGAgZXZlbnRcbiAqL1xudmFyIGlzSW5wdXRFdmVudFN1cHBvcnRlZCA9IGZhbHNlO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAvLyBJRTkgY2xhaW1zIHRvIHN1cHBvcnQgdGhlIGlucHV0IGV2ZW50IGJ1dCBmYWlscyB0byB0cmlnZ2VyIGl0IHdoZW5cbiAgLy8gZGVsZXRpbmcgdGV4dCwgc28gd2UgaWdub3JlIGl0cyBpbnB1dCBldmVudHMuXG5cbiAgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gaXNFdmVudFN1cHBvcnRlZCgnaW5wdXQnKSAmJiAoIWRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPiA5KTtcbn1cblxuLyoqXG4gKiAoRm9yIElFIDw9OSkgU3RhcnRzIHRyYWNraW5nIHByb3BlcnR5Y2hhbmdlIGV2ZW50cyBvbiB0aGUgcGFzc2VkLWluIGVsZW1lbnRcbiAqIGFuZCBvdmVycmlkZSB0aGUgdmFsdWUgcHJvcGVydHkgc28gdGhhdCB3ZSBjYW4gZGlzdGluZ3Vpc2ggdXNlciBldmVudHMgZnJvbVxuICogdmFsdWUgY2hhbmdlcyBpbiBKUy5cbiAqL1xuZnVuY3Rpb24gc3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0O1xuICBhY3RpdmVFbGVtZW50SW5zdCA9IHRhcmdldEluc3Q7XG4gIGFjdGl2ZUVsZW1lbnQuYXR0YWNoRXZlbnQoJ29ucHJvcGVydHljaGFuZ2UnLCBoYW5kbGVQcm9wZXJ0eUNoYW5nZSk7XG59XG5cbi8qKlxuICogKEZvciBJRSA8PTkpIFJlbW92ZXMgdGhlIGV2ZW50IGxpc3RlbmVycyBmcm9tIHRoZSBjdXJyZW50bHktdHJhY2tlZCBlbGVtZW50LFxuICogaWYgYW55IGV4aXN0cy5cbiAqL1xuZnVuY3Rpb24gc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKSB7XG4gIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UpO1xuXG4gIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50SW5zdCA9IG51bGw7XG59XG5cbi8qKlxuICogKEZvciBJRSA8PTkpIEhhbmRsZXMgYSBwcm9wZXJ0eWNoYW5nZSBldmVudCwgc2VuZGluZyBhIGBjaGFuZ2VgIGV2ZW50IGlmXG4gKiB0aGUgdmFsdWUgb2YgdGhlIGFjdGl2ZSBlbGVtZW50IGhhcyBjaGFuZ2VkLlxuICovXG5mdW5jdGlvbiBoYW5kbGVQcm9wZXJ0eUNoYW5nZShuYXRpdmVFdmVudCkge1xuICBpZiAobmF0aXZlRXZlbnQucHJvcGVydHlOYW1lICE9PSAndmFsdWUnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChnZXRJbnN0SWZWYWx1ZUNoYW5nZWQoYWN0aXZlRWxlbWVudEluc3QsIG5hdGl2ZUV2ZW50KSkge1xuICAgIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQobmF0aXZlRXZlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbCh0b3BMZXZlbFR5cGUsIHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSAndG9wRm9jdXMnKSB7XG4gICAgLy8gSW4gSUU4LCB3ZSBjYW4gY2FwdHVyZSBhbG1vc3QgYWxsIC52YWx1ZSBjaGFuZ2VzIGJ5IGFkZGluZyBhXG4gICAgLy8gcHJvcGVydHljaGFuZ2UgaGFuZGxlciBhbmQgbG9va2luZyBmb3IgZXZlbnRzIHdpdGggcHJvcGVydHlOYW1lXG4gICAgLy8gZXF1YWwgdG8gJ3ZhbHVlJ1xuICAgIC8vIEluIElFOSwgcHJvcGVydHljaGFuZ2UgZmlyZXMgZm9yIG1vc3QgaW5wdXQgZXZlbnRzIGJ1dCBpcyBidWdneSBhbmRcbiAgICAvLyBkb2Vzbid0IGZpcmUgd2hlbiB0ZXh0IGlzIGRlbGV0ZWQsIGJ1dCBjb252ZW5pZW50bHksIHNlbGVjdGlvbmNoYW5nZVxuICAgIC8vIGFwcGVhcnMgdG8gZmlyZSBpbiBhbGwgb2YgdGhlIHJlbWFpbmluZyBjYXNlcyBzbyB3ZSBjYXRjaCB0aG9zZSBhbmRcbiAgICAvLyBmb3J3YXJkIHRoZSBldmVudCBpZiB0aGUgdmFsdWUgaGFzIGNoYW5nZWRcbiAgICAvLyBJbiBlaXRoZXIgY2FzZSwgd2UgZG9uJ3Qgd2FudCB0byBjYWxsIHRoZSBldmVudCBoYW5kbGVyIGlmIHRoZSB2YWx1ZVxuICAgIC8vIGlzIGNoYW5nZWQgZnJvbSBKUyBzbyB3ZSByZWRlZmluZSBhIHNldHRlciBmb3IgYC52YWx1ZWAgdGhhdCB1cGRhdGVzXG4gICAgLy8gb3VyIGFjdGl2ZUVsZW1lbnRWYWx1ZSB2YXJpYWJsZSwgYWxsb3dpbmcgdXMgdG8gaWdub3JlIHRob3NlIGNoYW5nZXNcbiAgICAvL1xuICAgIC8vIHN0b3BXYXRjaGluZygpIHNob3VsZCBiZSBhIG5vb3AgaGVyZSBidXQgd2UgY2FsbCBpdCBqdXN0IGluIGNhc2Ugd2VcbiAgICAvLyBtaXNzZWQgYSBibHVyIGV2ZW50IHNvbWVob3cuXG4gICAgc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKTtcbiAgICBzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UodGFyZ2V0LCB0YXJnZXRJbnN0KTtcbiAgfSBlbHNlIGlmICh0b3BMZXZlbFR5cGUgPT09ICd0b3BCbHVyJykge1xuICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gIH1cbn1cblxuLy8gRm9yIElFOCBhbmQgSUU5LlxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnRQb2x5ZmlsbCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50KSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09ICd0b3BTZWxlY3Rpb25DaGFuZ2UnIHx8IHRvcExldmVsVHlwZSA9PT0gJ3RvcEtleVVwJyB8fCB0b3BMZXZlbFR5cGUgPT09ICd0b3BLZXlEb3duJykge1xuICAgIC8vIE9uIHRoZSBzZWxlY3Rpb25jaGFuZ2UgZXZlbnQsIHRoZSB0YXJnZXQgaXMganVzdCBkb2N1bWVudCB3aGljaCBpc24ndFxuICAgIC8vIGhlbHBmdWwgZm9yIHVzIHNvIGp1c3QgY2hlY2sgYWN0aXZlRWxlbWVudCBpbnN0ZWFkLlxuICAgIC8vXG4gICAgLy8gOTklIG9mIHRoZSB0aW1lLCBrZXlkb3duIGFuZCBrZXl1cCBhcmVuJ3QgbmVjZXNzYXJ5LiBJRTggZmFpbHMgdG8gZmlyZVxuICAgIC8vIHByb3BlcnR5Y2hhbmdlIG9uIHRoZSBmaXJzdCBpbnB1dCBldmVudCBhZnRlciBzZXR0aW5nIGB2YWx1ZWAgZnJvbSBhXG4gICAgLy8gc2NyaXB0IGFuZCBmaXJlcyBvbmx5IGtleWRvd24sIGtleXByZXNzLCBrZXl1cC4gQ2F0Y2hpbmcga2V5dXAgdXN1YWxseVxuICAgIC8vIGdldHMgaXQgYW5kIGNhdGNoaW5nIGtleWRvd24gbGV0cyB1cyBmaXJlIGFuIGV2ZW50IGZvciB0aGUgZmlyc3RcbiAgICAvLyBrZXlzdHJva2UgaWYgdXNlciBkb2VzIGEga2V5IHJlcGVhdCAoaXQnbGwgYmUgYSBsaXR0bGUgZGVsYXllZDogcmlnaHRcbiAgICAvLyBiZWZvcmUgdGhlIHNlY29uZCBrZXlzdHJva2UpLiBPdGhlciBpbnB1dCBtZXRob2RzIChlLmcuLCBwYXN0ZSkgc2VlbSB0b1xuICAgIC8vIGZpcmUgc2VsZWN0aW9uY2hhbmdlIG5vcm1hbGx5LlxuICAgIHJldHVybiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQoYWN0aXZlRWxlbWVudEluc3QsIG5hdGl2ZUV2ZW50KTtcbiAgfVxufVxuXG4vKipcbiAqIFNFQ1RJT046IGhhbmRsZSBgY2xpY2tgIGV2ZW50XG4gKi9cbmZ1bmN0aW9uIHNob3VsZFVzZUNsaWNrRXZlbnQoZWxlbSkge1xuICAvLyBVc2UgdGhlIGBjbGlja2AgZXZlbnQgdG8gZGV0ZWN0IGNoYW5nZXMgdG8gY2hlY2tib3ggYW5kIHJhZGlvIGlucHV0cy5cbiAgLy8gVGhpcyBhcHByb2FjaCB3b3JrcyBhY3Jvc3MgYWxsIGJyb3dzZXJzLCB3aGVyZWFzIGBjaGFuZ2VgIGRvZXMgbm90IGZpcmVcbiAgLy8gdW50aWwgYGJsdXJgIGluIElFOC5cbiAgdmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZTtcbiAgcmV0dXJuIG5vZGVOYW1lICYmIG5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgJiYgKGVsZW0udHlwZSA9PT0gJ2NoZWNrYm94JyB8fCBlbGVtLnR5cGUgPT09ICdyYWRpbycpO1xufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9yQ2xpY2tFdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50KSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09ICd0b3BDbGljaycpIHtcbiAgICByZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9ySW5wdXRPckNoYW5nZUV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcElucHV0JyB8fCB0b3BMZXZlbFR5cGUgPT09ICd0b3BDaGFuZ2UnKSB7XG4gICAgcmV0dXJuIGdldEluc3RJZlZhbHVlQ2hhbmdlZCh0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlQ29udHJvbGxlZElucHV0Qmx1cihpbnN0LCBub2RlKSB7XG4gIC8vIFRPRE86IEluIElFLCBpbnN0IGlzIG9jY2FzaW9uYWxseSBudWxsLiBXaHk/XG4gIGlmIChpbnN0ID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGaWJlciBhbmQgUmVhY3RET00ga2VlcCB3cmFwcGVyIHN0YXRlIGluIHNlcGFyYXRlIHBsYWNlc1xuICB2YXIgc3RhdGUgPSBpbnN0Ll93cmFwcGVyU3RhdGUgfHwgbm9kZS5fd3JhcHBlclN0YXRlO1xuXG4gIGlmICghc3RhdGUgfHwgIXN0YXRlLmNvbnRyb2xsZWQgfHwgbm9kZS50eXBlICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIElmIGNvbnRyb2xsZWQsIGFzc2lnbiB0aGUgdmFsdWUgYXR0cmlidXRlIHRvIHRoZSBjdXJyZW50IHZhbHVlIG9uIGJsdXJcbiAgdmFyIHZhbHVlID0gJycgKyBub2RlLnZhbHVlO1xuICBpZiAobm9kZS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykgIT09IHZhbHVlKSB7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgdmFsdWUpO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBwbHVnaW4gY3JlYXRlcyBhbiBgb25DaGFuZ2VgIGV2ZW50IHRoYXQgbm9ybWFsaXplcyBjaGFuZ2UgZXZlbnRzXG4gKiBhY3Jvc3MgZm9ybSBlbGVtZW50cy4gVGhpcyBldmVudCBmaXJlcyBhdCBhIHRpbWUgd2hlbiBpdCdzIHBvc3NpYmxlIHRvXG4gKiBjaGFuZ2UgdGhlIGVsZW1lbnQncyB2YWx1ZSB3aXRob3V0IHNlZWluZyBhIGZsaWNrZXIuXG4gKlxuICogU3VwcG9ydGVkIGVsZW1lbnRzIGFyZTpcbiAqIC0gaW5wdXQgKHNlZSBgaXNUZXh0SW5wdXRFbGVtZW50YClcbiAqIC0gdGV4dGFyZWFcbiAqIC0gc2VsZWN0XG4gKi9cbnZhciBDaGFuZ2VFdmVudFBsdWdpbiA9IHtcbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICBfYWxsb3dTaW11bGF0ZWRQYXNzVGhyb3VnaDogdHJ1ZSxcbiAgX2lzSW5wdXRFdmVudFN1cHBvcnRlZDogaXNJbnB1dEV2ZW50U3VwcG9ydGVkLFxuXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIHZhciB0YXJnZXROb2RlID0gdGFyZ2V0SW5zdCA/IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHRhcmdldEluc3QpIDogd2luZG93O1xuXG4gICAgdmFyIGdldFRhcmdldEluc3RGdW5jLCBoYW5kbGVFdmVudEZ1bmM7XG4gICAgaWYgKHNob3VsZFVzZUNoYW5nZUV2ZW50KHRhcmdldE5vZGUpKSB7XG4gICAgICBpZiAoZG9lc0NoYW5nZUV2ZW50QnViYmxlKSB7XG4gICAgICAgIGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvckNoYW5nZUV2ZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFuZGxlRXZlbnRGdW5jID0gaGFuZGxlRXZlbnRzRm9yQ2hhbmdlRXZlbnRJRTg7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RleHRJbnB1dEVsZW1lbnQodGFyZ2V0Tm9kZSkpIHtcbiAgICAgIGlmIChpc0lucHV0RXZlbnRTdXBwb3J0ZWQpIHtcbiAgICAgICAgZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9ySW5wdXRPckNoYW5nZUV2ZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9ySW5wdXRFdmVudFBvbHlmaWxsO1xuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgPSBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50UG9seWZpbGw7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzaG91bGRVc2VDbGlja0V2ZW50KHRhcmdldE5vZGUpKSB7XG4gICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JDbGlja0V2ZW50O1xuICAgIH1cblxuICAgIGlmIChnZXRUYXJnZXRJbnN0RnVuYykge1xuICAgICAgdmFyIGluc3QgPSBnZXRUYXJnZXRJbnN0RnVuYyh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50KTtcbiAgICAgIGlmIChpbnN0KSB7XG4gICAgICAgIHZhciBldmVudCA9IGNyZWF0ZUFuZEFjY3VtdWxhdGVDaGFuZ2VFdmVudChpbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGhhbmRsZUV2ZW50RnVuYykge1xuICAgICAgaGFuZGxlRXZlbnRGdW5jKHRvcExldmVsVHlwZSwgdGFyZ2V0Tm9kZSwgdGFyZ2V0SW5zdCk7XG4gICAgfVxuXG4gICAgLy8gV2hlbiBibHVycmluZywgc2V0IHRoZSB2YWx1ZSBhdHRyaWJ1dGUgZm9yIG51bWJlciBpbnB1dHNcbiAgICBpZiAodG9wTGV2ZWxUeXBlID09PSAndG9wQmx1cicpIHtcbiAgICAgIGhhbmRsZUNvbnRyb2xsZWRJbnB1dEJsdXIodGFyZ2V0SW5zdCwgdGFyZ2V0Tm9kZSk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENoYW5nZUV2ZW50UGx1Z2luO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9DaGFuZ2VFdmVudFBsdWdpbi5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIERPTUxhenlUcmVlID0gcmVxdWlyZSgnLi9ET01MYXp5VHJlZScpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cCA9IHJlcXVpcmUoJ2ZianMvbGliL2NyZWF0ZU5vZGVzRnJvbU1hcmt1cCcpO1xudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBEYW5nZXIgPSB7XG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhIG5vZGUgd2l0aCBhIHN0cmluZyBvZiBtYXJrdXAgYXQgaXRzIGN1cnJlbnQgcG9zaXRpb24gd2l0aGluIGl0c1xuICAgKiBwYXJlbnQuIFRoZSBtYXJrdXAgbXVzdCByZW5kZXIgaW50byBhIHNpbmdsZSByb290IG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gb2xkQ2hpbGQgQ2hpbGQgbm9kZSB0byByZXBsYWNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIE1hcmt1cCB0byByZW5kZXIgaW4gcGxhY2Ugb2YgdGhlIGNoaWxkIG5vZGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA6IGZ1bmN0aW9uIChvbGRDaGlsZCwgbWFya3VwKSB7XG4gICAgIUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCguLi4pOiBDYW5ub3QgcmVuZGVyIG1hcmt1cCBpbiBhIHdvcmtlciB0aHJlYWQuIE1ha2Ugc3VyZSBgd2luZG93YCBhbmQgYGRvY3VtZW50YCBhcmUgYXZhaWxhYmxlIGdsb2JhbGx5IGJlZm9yZSByZXF1aXJpbmcgUmVhY3Qgd2hlbiB1bml0IHRlc3Rpbmcgb3IgdXNlIFJlYWN0RE9NU2VydmVyLnJlbmRlclRvU3RyaW5nKCkgZm9yIHNlcnZlciByZW5kZXJpbmcuJykgOiBfcHJvZEludmFyaWFudCgnNTYnKSA6IHZvaWQgMDtcbiAgICAhbWFya3VwID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKC4uLik6IE1pc3NpbmcgbWFya3VwLicpIDogX3Byb2RJbnZhcmlhbnQoJzU3JykgOiB2b2lkIDA7XG4gICAgIShvbGRDaGlsZC5ub2RlTmFtZSAhPT0gJ0hUTUwnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCguLi4pOiBDYW5ub3QgcmVwbGFjZSBtYXJrdXAgb2YgdGhlIDxodG1sPiBub2RlLiBUaGlzIGlzIGJlY2F1c2UgYnJvd3NlciBxdWlya3MgbWFrZSB0aGlzIHVucmVsaWFibGUgYW5kL29yIHNsb3cuIElmIHlvdSB3YW50IHRvIHJlbmRlciB0byB0aGUgcm9vdCB5b3UgbXVzdCB1c2Ugc2VydmVyIHJlbmRlcmluZy4gU2VlIFJlYWN0RE9NU2VydmVyLnJlbmRlclRvU3RyaW5nKCkuJykgOiBfcHJvZEludmFyaWFudCgnNTgnKSA6IHZvaWQgMDtcblxuICAgIGlmICh0eXBlb2YgbWFya3VwID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIG5ld0NoaWxkID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwKG1hcmt1cCwgZW1wdHlGdW5jdGlvbilbMF07XG4gICAgICBvbGRDaGlsZC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdDaGlsZCwgb2xkQ2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBET01MYXp5VHJlZS5yZXBsYWNlQ2hpbGRXaXRoVHJlZShvbGRDaGlsZCwgbWFya3VwKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGFuZ2VyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9EYW5nZXIuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIHRoYXQgaXMgaW5qZWN0YWJsZSBpbnRvIGBFdmVudFBsdWdpbkh1YmAsIHRoYXQgc3BlY2lmaWVzIGFcbiAqIGRldGVybWluaXN0aWMgb3JkZXJpbmcgb2YgYEV2ZW50UGx1Z2luYHMuIEEgY29udmVuaWVudCB3YXkgdG8gcmVhc29uIGFib3V0XG4gKiBwbHVnaW5zLCB3aXRob3V0IGhhdmluZyB0byBwYWNrYWdlIGV2ZXJ5IG9uZSBvZiB0aGVtLiBUaGlzIGlzIGJldHRlciB0aGFuXG4gKiBoYXZpbmcgcGx1Z2lucyBiZSBvcmRlcmVkIGluIHRoZSBzYW1lIG9yZGVyIHRoYXQgdGhleSBhcmUgaW5qZWN0ZWQgYmVjYXVzZVxuICogdGhhdCBvcmRlcmluZyB3b3VsZCBiZSBpbmZsdWVuY2VkIGJ5IHRoZSBwYWNrYWdpbmcgb3JkZXIuXG4gKiBgUmVzcG9uZGVyRXZlbnRQbHVnaW5gIG11c3Qgb2NjdXIgYmVmb3JlIGBTaW1wbGVFdmVudFBsdWdpbmAgc28gdGhhdFxuICogcHJldmVudGluZyBkZWZhdWx0IG9uIGV2ZW50cyBpcyBjb252ZW5pZW50IGluIGBTaW1wbGVFdmVudFBsdWdpbmAgaGFuZGxlcnMuXG4gKi9cblxudmFyIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyID0gWydSZXNwb25kZXJFdmVudFBsdWdpbicsICdTaW1wbGVFdmVudFBsdWdpbicsICdUYXBFdmVudFBsdWdpbicsICdFbnRlckxlYXZlRXZlbnRQbHVnaW4nLCAnQ2hhbmdlRXZlbnRQbHVnaW4nLCAnU2VsZWN0RXZlbnRQbHVnaW4nLCAnQmVmb3JlSW5wdXRFdmVudFBsdWdpbiddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERlZmF1bHRFdmVudFBsdWdpbk9yZGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9EZWZhdWx0RXZlbnRQbHVnaW5PcmRlci5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKCcuL0V2ZW50UHJvcGFnYXRvcnMnKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xudmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY01vdXNlRXZlbnQnKTtcblxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIG1vdXNlRW50ZXI6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiAnb25Nb3VzZUVudGVyJyxcbiAgICBkZXBlbmRlbmNpZXM6IFsndG9wTW91c2VPdXQnLCAndG9wTW91c2VPdmVyJ11cbiAgfSxcbiAgbW91c2VMZWF2ZToge1xuICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvbk1vdXNlTGVhdmUnLFxuICAgIGRlcGVuZGVuY2llczogWyd0b3BNb3VzZU91dCcsICd0b3BNb3VzZU92ZXInXVxuICB9XG59O1xuXG52YXIgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luID0ge1xuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBGb3IgYWxtb3N0IGV2ZXJ5IGludGVyYWN0aW9uIHdlIGNhcmUgYWJvdXQsIHRoZXJlIHdpbGwgYmUgYm90aCBhIHRvcC1sZXZlbFxuICAgKiBgbW91c2VvdmVyYCBhbmQgYG1vdXNlb3V0YCBldmVudCB0aGF0IG9jY3Vycy4gT25seSB1c2UgYG1vdXNlb3V0YCBzbyB0aGF0XG4gICAqIHdlIGRvIG5vdCBleHRyYWN0IGR1cGxpY2F0ZSBldmVudHMuIEhvd2V2ZXIsIG1vdmluZyB0aGUgbW91c2UgaW50byB0aGVcbiAgICogYnJvd3NlciBmcm9tIG91dHNpZGUgd2lsbCBub3QgZmlyZSBhIGBtb3VzZW91dGAgZXZlbnQuIEluIHRoaXMgY2FzZSwgd2UgdXNlXG4gICAqIHRoZSBgbW91c2VvdmVyYCB0b3AtbGV2ZWwgZXZlbnQuXG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICBpZiAodG9wTGV2ZWxUeXBlID09PSAndG9wTW91c2VPdmVyJyAmJiAobmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC5mcm9tRWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodG9wTGV2ZWxUeXBlICE9PSAndG9wTW91c2VPdXQnICYmIHRvcExldmVsVHlwZSAhPT0gJ3RvcE1vdXNlT3ZlcicpIHtcbiAgICAgIC8vIE11c3Qgbm90IGJlIGEgbW91c2UgaW4gb3IgbW91c2Ugb3V0IC0gaWdub3JpbmcuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgd2luO1xuICAgIGlmIChuYXRpdmVFdmVudFRhcmdldC53aW5kb3cgPT09IG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgICAvLyBgbmF0aXZlRXZlbnRUYXJnZXRgIGlzIHByb2JhYmx5IGEgd2luZG93IG9iamVjdC5cbiAgICAgIHdpbiA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPOiBGaWd1cmUgb3V0IHdoeSBgb3duZXJEb2N1bWVudGAgaXMgc29tZXRpbWVzIHVuZGVmaW5lZCBpbiBJRTguXG4gICAgICB2YXIgZG9jID0gbmF0aXZlRXZlbnRUYXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAgIGlmIChkb2MpIHtcbiAgICAgICAgd2luID0gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3c7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW4gPSB3aW5kb3c7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGZyb207XG4gICAgdmFyIHRvO1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09ICd0b3BNb3VzZU91dCcpIHtcbiAgICAgIGZyb20gPSB0YXJnZXRJbnN0O1xuICAgICAgdmFyIHJlbGF0ZWQgPSBuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnRvRWxlbWVudDtcbiAgICAgIHRvID0gcmVsYXRlZCA/IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShyZWxhdGVkKSA6IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE1vdmluZyB0byBhIG5vZGUgZnJvbSBvdXRzaWRlIHRoZSB3aW5kb3cuXG4gICAgICBmcm9tID0gbnVsbDtcbiAgICAgIHRvID0gdGFyZ2V0SW5zdDtcbiAgICB9XG5cbiAgICBpZiAoZnJvbSA9PT0gdG8pIHtcbiAgICAgIC8vIE5vdGhpbmcgcGVydGFpbnMgdG8gb3VyIG1hbmFnZWQgY29tcG9uZW50cy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBmcm9tTm9kZSA9IGZyb20gPT0gbnVsbCA/IHdpbiA6IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGZyb20pO1xuICAgIHZhciB0b05vZGUgPSB0byA9PSBudWxsID8gd2luIDogUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UodG8pO1xuXG4gICAgdmFyIGxlYXZlID0gU3ludGhldGljTW91c2VFdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlcy5tb3VzZUxlYXZlLCBmcm9tLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGxlYXZlLnR5cGUgPSAnbW91c2VsZWF2ZSc7XG4gICAgbGVhdmUudGFyZ2V0ID0gZnJvbU5vZGU7XG4gICAgbGVhdmUucmVsYXRlZFRhcmdldCA9IHRvTm9kZTtcblxuICAgIHZhciBlbnRlciA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMubW91c2VFbnRlciwgdG8sIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgZW50ZXIudHlwZSA9ICdtb3VzZWVudGVyJztcbiAgICBlbnRlci50YXJnZXQgPSB0b05vZGU7XG4gICAgZW50ZXIucmVsYXRlZFRhcmdldCA9IGZyb21Ob2RlO1xuXG4gICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMobGVhdmUsIGVudGVyLCBmcm9tLCB0byk7XG5cbiAgICByZXR1cm4gW2xlYXZlLCBlbnRlcl07XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9FbnRlckxlYXZlRXZlbnRQbHVnaW4uanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG5cbnZhciBnZXRUZXh0Q29udGVudEFjY2Vzc29yID0gcmVxdWlyZSgnLi9nZXRUZXh0Q29udGVudEFjY2Vzc29yJyk7XG5cbi8qKlxuICogVGhpcyBoZWxwZXIgY2xhc3Mgc3RvcmVzIGluZm9ybWF0aW9uIGFib3V0IHRleHQgY29udGVudCBvZiBhIHRhcmdldCBub2RlLFxuICogYWxsb3dpbmcgY29tcGFyaXNvbiBvZiBjb250ZW50IGJlZm9yZSBhbmQgYWZ0ZXIgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBJZGVudGlmeSB0aGUgbm9kZSB3aGVyZSBzZWxlY3Rpb24gY3VycmVudGx5IGJlZ2lucywgdGhlbiBvYnNlcnZlXG4gKiBib3RoIGl0cyB0ZXh0IGNvbnRlbnQgYW5kIGl0cyBjdXJyZW50IHBvc2l0aW9uIGluIHRoZSBET00uIFNpbmNlIHRoZVxuICogYnJvd3NlciBtYXkgbmF0aXZlbHkgcmVwbGFjZSB0aGUgdGFyZ2V0IG5vZGUgZHVyaW5nIGNvbXBvc2l0aW9uLCB3ZSBjYW5cbiAqIHVzZSBpdHMgcG9zaXRpb24gdG8gZmluZCBpdHMgcmVwbGFjZW1lbnQuXG4gKlxuICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gcm9vdFxuICovXG5mdW5jdGlvbiBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUocm9vdCkge1xuICB0aGlzLl9yb290ID0gcm9vdDtcbiAgdGhpcy5fc3RhcnRUZXh0ID0gdGhpcy5nZXRUZXh0KCk7XG4gIHRoaXMuX2ZhbGxiYWNrVGV4dCA9IG51bGw7XG59XG5cbl9hc3NpZ24oRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLnByb3RvdHlwZSwge1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fcm9vdCA9IG51bGw7XG4gICAgdGhpcy5fc3RhcnRUZXh0ID0gbnVsbDtcbiAgICB0aGlzLl9mYWxsYmFja1RleHQgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCB0ZXh0IG9mIGlucHV0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXRUZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCd2YWx1ZScgaW4gdGhpcy5fcm9vdCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Jvb3QudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yb290W2dldFRleHRDb250ZW50QWNjZXNzb3IoKV07XG4gIH0sXG5cbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgZGlmZmVyaW5nIHN1YnN0cmluZyBiZXR3ZWVuIHRoZSBpbml0aWFsbHkgc3RvcmVkXG4gICAqIHRleHQgY29udGVudCBhbmQgdGhlIGN1cnJlbnQgY29udGVudC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0RGF0YTogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9mYWxsYmFja1RleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9mYWxsYmFja1RleHQ7XG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0O1xuICAgIHZhciBzdGFydFZhbHVlID0gdGhpcy5fc3RhcnRUZXh0O1xuICAgIHZhciBzdGFydExlbmd0aCA9IHN0YXJ0VmFsdWUubGVuZ3RoO1xuICAgIHZhciBlbmQ7XG4gICAgdmFyIGVuZFZhbHVlID0gdGhpcy5nZXRUZXh0KCk7XG4gICAgdmFyIGVuZExlbmd0aCA9IGVuZFZhbHVlLmxlbmd0aDtcblxuICAgIGZvciAoc3RhcnQgPSAwOyBzdGFydCA8IHN0YXJ0TGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgICBpZiAoc3RhcnRWYWx1ZVtzdGFydF0gIT09IGVuZFZhbHVlW3N0YXJ0XSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbWluRW5kID0gc3RhcnRMZW5ndGggLSBzdGFydDtcbiAgICBmb3IgKGVuZCA9IDE7IGVuZCA8PSBtaW5FbmQ7IGVuZCsrKSB7XG4gICAgICBpZiAoc3RhcnRWYWx1ZVtzdGFydExlbmd0aCAtIGVuZF0gIT09IGVuZFZhbHVlW2VuZExlbmd0aCAtIGVuZF0pIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNsaWNlVGFpbCA9IGVuZCA+IDEgPyAxIC0gZW5kIDogdW5kZWZpbmVkO1xuICAgIHRoaXMuX2ZhbGxiYWNrVGV4dCA9IGVuZFZhbHVlLnNsaWNlKHN0YXJ0LCBzbGljZVRhaWwpO1xuICAgIHJldHVybiB0aGlzLl9mYWxsYmFja1RleHQ7XG4gIH1cbn0pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGU7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL0ZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eScpO1xuXG52YXIgTVVTVF9VU0VfUFJPUEVSVFkgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uTVVTVF9VU0VfUFJPUEVSVFk7XG52YXIgSEFTX0JPT0xFQU5fVkFMVUUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX0JPT0xFQU5fVkFMVUU7XG52YXIgSEFTX05VTUVSSUNfVkFMVUUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX05VTUVSSUNfVkFMVUU7XG52YXIgSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUU7XG52YXIgSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFO1xuXG52YXIgSFRNTERPTVByb3BlcnR5Q29uZmlnID0ge1xuICBpc0N1c3RvbUF0dHJpYnV0ZTogUmVnRXhwLnByb3RvdHlwZS50ZXN0LmJpbmQobmV3IFJlZ0V4cCgnXihkYXRhfGFyaWEpLVsnICsgRE9NUHJvcGVydHkuQVRUUklCVVRFX05BTUVfQ0hBUiArICddKiQnKSksXG4gIFByb3BlcnRpZXM6IHtcbiAgICAvKipcbiAgICAgKiBTdGFuZGFyZCBQcm9wZXJ0aWVzXG4gICAgICovXG4gICAgYWNjZXB0OiAwLFxuICAgIGFjY2VwdENoYXJzZXQ6IDAsXG4gICAgYWNjZXNzS2V5OiAwLFxuICAgIGFjdGlvbjogMCxcbiAgICBhbGxvd0Z1bGxTY3JlZW46IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGFsbG93VHJhbnNwYXJlbmN5OiAwLFxuICAgIGFsdDogMCxcbiAgICAvLyBzcGVjaWZpZXMgdGFyZ2V0IGNvbnRleHQgZm9yIGxpbmtzIHdpdGggYHByZWxvYWRgIHR5cGVcbiAgICBhczogMCxcbiAgICBhc3luYzogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgYXV0b0NvbXBsZXRlOiAwLFxuICAgIC8vIGF1dG9Gb2N1cyBpcyBwb2x5ZmlsbGVkL25vcm1hbGl6ZWQgYnkgQXV0b0ZvY3VzVXRpbHNcbiAgICAvLyBhdXRvRm9jdXM6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGF1dG9QbGF5OiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBjYXB0dXJlOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBjZWxsUGFkZGluZzogMCxcbiAgICBjZWxsU3BhY2luZzogMCxcbiAgICBjaGFyU2V0OiAwLFxuICAgIGNoYWxsZW5nZTogMCxcbiAgICBjaGVja2VkOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGNpdGU6IDAsXG4gICAgY2xhc3NJRDogMCxcbiAgICBjbGFzc05hbWU6IDAsXG4gICAgY29sczogSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgY29sU3BhbjogMCxcbiAgICBjb250ZW50OiAwLFxuICAgIGNvbnRlbnRFZGl0YWJsZTogMCxcbiAgICBjb250ZXh0TWVudTogMCxcbiAgICBjb250cm9sczogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgY29udHJvbHNMaXN0OiAwLFxuICAgIGNvb3JkczogMCxcbiAgICBjcm9zc09yaWdpbjogMCxcbiAgICBkYXRhOiAwLCAvLyBGb3IgYDxvYmplY3QgLz5gIGFjdHMgYXMgYHNyY2AuXG4gICAgZGF0ZVRpbWU6IDAsXG4gICAgJ2RlZmF1bHQnOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBkZWZlcjogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgZGlyOiAwLFxuICAgIGRpc2FibGVkOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBkb3dubG9hZDogSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSxcbiAgICBkcmFnZ2FibGU6IDAsXG4gICAgZW5jVHlwZTogMCxcbiAgICBmb3JtOiAwLFxuICAgIGZvcm1BY3Rpb246IDAsXG4gICAgZm9ybUVuY1R5cGU6IDAsXG4gICAgZm9ybU1ldGhvZDogMCxcbiAgICBmb3JtTm9WYWxpZGF0ZTogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgZm9ybVRhcmdldDogMCxcbiAgICBmcmFtZUJvcmRlcjogMCxcbiAgICBoZWFkZXJzOiAwLFxuICAgIGhlaWdodDogMCxcbiAgICBoaWRkZW46IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGhpZ2g6IDAsXG4gICAgaHJlZjogMCxcbiAgICBocmVmTGFuZzogMCxcbiAgICBodG1sRm9yOiAwLFxuICAgIGh0dHBFcXVpdjogMCxcbiAgICBpY29uOiAwLFxuICAgIGlkOiAwLFxuICAgIGlucHV0TW9kZTogMCxcbiAgICBpbnRlZ3JpdHk6IDAsXG4gICAgaXM6IDAsXG4gICAga2V5UGFyYW1zOiAwLFxuICAgIGtleVR5cGU6IDAsXG4gICAga2luZDogMCxcbiAgICBsYWJlbDogMCxcbiAgICBsYW5nOiAwLFxuICAgIGxpc3Q6IDAsXG4gICAgbG9vcDogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgbG93OiAwLFxuICAgIG1hbmlmZXN0OiAwLFxuICAgIG1hcmdpbkhlaWdodDogMCxcbiAgICBtYXJnaW5XaWR0aDogMCxcbiAgICBtYXg6IDAsXG4gICAgbWF4TGVuZ3RoOiAwLFxuICAgIG1lZGlhOiAwLFxuICAgIG1lZGlhR3JvdXA6IDAsXG4gICAgbWV0aG9kOiAwLFxuICAgIG1pbjogMCxcbiAgICBtaW5MZW5ndGg6IDAsXG4gICAgLy8gQ2F1dGlvbjsgYG9wdGlvbi5zZWxlY3RlZGAgaXMgbm90IHVwZGF0ZWQgaWYgYHNlbGVjdC5tdWx0aXBsZWAgaXNcbiAgICAvLyBkaXNhYmxlZCB3aXRoIGByZW1vdmVBdHRyaWJ1dGVgLlxuICAgIG11bHRpcGxlOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG11dGVkOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG5hbWU6IDAsXG4gICAgbm9uY2U6IDAsXG4gICAgbm9WYWxpZGF0ZTogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgb3BlbjogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgb3B0aW11bTogMCxcbiAgICBwYXR0ZXJuOiAwLFxuICAgIHBsYWNlaG9sZGVyOiAwLFxuICAgIHBsYXlzSW5saW5lOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBwb3N0ZXI6IDAsXG4gICAgcHJlbG9hZDogMCxcbiAgICBwcm9maWxlOiAwLFxuICAgIHJhZGlvR3JvdXA6IDAsXG4gICAgcmVhZE9ubHk6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHJlZmVycmVyUG9saWN5OiAwLFxuICAgIHJlbDogMCxcbiAgICByZXF1aXJlZDogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgcmV2ZXJzZWQ6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHJvbGU6IDAsXG4gICAgcm93czogSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgcm93U3BhbjogSEFTX05VTUVSSUNfVkFMVUUsXG4gICAgc2FuZGJveDogMCxcbiAgICBzY29wZTogMCxcbiAgICBzY29wZWQ6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHNjcm9sbGluZzogMCxcbiAgICBzZWFtbGVzczogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgc2VsZWN0ZWQ6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgc2hhcGU6IDAsXG4gICAgc2l6ZTogSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgc2l6ZXM6IDAsXG4gICAgc3BhbjogSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgc3BlbGxDaGVjazogMCxcbiAgICBzcmM6IDAsXG4gICAgc3JjRG9jOiAwLFxuICAgIHNyY0xhbmc6IDAsXG4gICAgc3JjU2V0OiAwLFxuICAgIHN0YXJ0OiBIQVNfTlVNRVJJQ19WQUxVRSxcbiAgICBzdGVwOiAwLFxuICAgIHN0eWxlOiAwLFxuICAgIHN1bW1hcnk6IDAsXG4gICAgdGFiSW5kZXg6IDAsXG4gICAgdGFyZ2V0OiAwLFxuICAgIHRpdGxlOiAwLFxuICAgIC8vIFNldHRpbmcgLnR5cGUgdGhyb3dzIG9uIG5vbi08aW5wdXQ+IHRhZ3NcbiAgICB0eXBlOiAwLFxuICAgIHVzZU1hcDogMCxcbiAgICB2YWx1ZTogMCxcbiAgICB3aWR0aDogMCxcbiAgICB3bW9kZTogMCxcbiAgICB3cmFwOiAwLFxuXG4gICAgLyoqXG4gICAgICogUkRGYSBQcm9wZXJ0aWVzXG4gICAgICovXG4gICAgYWJvdXQ6IDAsXG4gICAgZGF0YXR5cGU6IDAsXG4gICAgaW5saXN0OiAwLFxuICAgIHByZWZpeDogMCxcbiAgICAvLyBwcm9wZXJ0eSBpcyBhbHNvIHN1cHBvcnRlZCBmb3IgT3BlbkdyYXBoIGluIG1ldGEgdGFncy5cbiAgICBwcm9wZXJ0eTogMCxcbiAgICByZXNvdXJjZTogMCxcbiAgICAndHlwZW9mJzogMCxcbiAgICB2b2NhYjogMCxcblxuICAgIC8qKlxuICAgICAqIE5vbi1zdGFuZGFyZCBQcm9wZXJ0aWVzXG4gICAgICovXG4gICAgLy8gYXV0b0NhcGl0YWxpemUgYW5kIGF1dG9Db3JyZWN0IGFyZSBzdXBwb3J0ZWQgaW4gTW9iaWxlIFNhZmFyaSBmb3JcbiAgICAvLyBrZXlib2FyZCBoaW50cy5cbiAgICBhdXRvQ2FwaXRhbGl6ZTogMCxcbiAgICBhdXRvQ29ycmVjdDogMCxcbiAgICAvLyBhdXRvU2F2ZSBhbGxvd3MgV2ViS2l0L0JsaW5rIHRvIHBlcnNpc3QgdmFsdWVzIG9mIGlucHV0IGZpZWxkcyBvbiBwYWdlIHJlbG9hZHNcbiAgICBhdXRvU2F2ZTogMCxcbiAgICAvLyBjb2xvciBpcyBmb3IgU2FmYXJpIG1hc2staWNvbiBsaW5rXG4gICAgY29sb3I6IDAsXG4gICAgLy8gaXRlbVByb3AsIGl0ZW1TY29wZSwgaXRlbVR5cGUgYXJlIGZvclxuICAgIC8vIE1pY3JvZGF0YSBzdXBwb3J0LiBTZWUgaHR0cDovL3NjaGVtYS5vcmcvZG9jcy9ncy5odG1sXG4gICAgaXRlbVByb3A6IDAsXG4gICAgaXRlbVNjb3BlOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBpdGVtVHlwZTogMCxcbiAgICAvLyBpdGVtSUQgYW5kIGl0ZW1SZWYgYXJlIGZvciBNaWNyb2RhdGEgc3VwcG9ydCBhcyB3ZWxsIGJ1dFxuICAgIC8vIG9ubHkgc3BlY2lmaWVkIGluIHRoZSBXSEFUV0cgc3BlYyBkb2N1bWVudC4gU2VlXG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvbWljcm9kYXRhLmh0bWwjbWljcm9kYXRhLWRvbS1hcGlcbiAgICBpdGVtSUQ6IDAsXG4gICAgaXRlbVJlZjogMCxcbiAgICAvLyByZXN1bHRzIHNob3cgbG9va2luZyBnbGFzcyBpY29uIGFuZCByZWNlbnQgc2VhcmNoZXMgb24gaW5wdXRcbiAgICAvLyBzZWFyY2ggZmllbGRzIGluIFdlYktpdC9CbGlua1xuICAgIHJlc3VsdHM6IDAsXG4gICAgLy8gSUUtb25seSBhdHRyaWJ1dGUgdGhhdCBzcGVjaWZpZXMgc2VjdXJpdHkgcmVzdHJpY3Rpb25zIG9uIGFuIGlmcmFtZVxuICAgIC8vIGFzIGFuIGFsdGVybmF0aXZlIHRvIHRoZSBzYW5kYm94IGF0dHJpYnV0ZSBvbiBJRTwxMFxuICAgIHNlY3VyaXR5OiAwLFxuICAgIC8vIElFLW9ubHkgYXR0cmlidXRlIHRoYXQgY29udHJvbHMgZm9jdXMgYmVoYXZpb3JcbiAgICB1bnNlbGVjdGFibGU6IDBcbiAgfSxcbiAgRE9NQXR0cmlidXRlTmFtZXM6IHtcbiAgICBhY2NlcHRDaGFyc2V0OiAnYWNjZXB0LWNoYXJzZXQnLFxuICAgIGNsYXNzTmFtZTogJ2NsYXNzJyxcbiAgICBodG1sRm9yOiAnZm9yJyxcbiAgICBodHRwRXF1aXY6ICdodHRwLWVxdWl2J1xuICB9LFxuICBET01Qcm9wZXJ0eU5hbWVzOiB7fSxcbiAgRE9NTXV0YXRpb25NZXRob2RzOiB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIChub2RlLCB2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUucmVtb3ZlQXR0cmlidXRlKCd2YWx1ZScpO1xuICAgICAgfVxuXG4gICAgICAvLyBOdW1iZXIgaW5wdXRzIGdldCBzcGVjaWFsIHRyZWF0bWVudCBkdWUgdG8gc29tZSBlZGdlIGNhc2VzIGluXG4gICAgICAvLyBDaHJvbWUuIExldCBldmVyeXRoaW5nIGVsc2UgYXNzaWduIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgYXMgbm9ybWFsLlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83MjUzI2lzc3VlY29tbWVudC0yMzYwNzQzMjZcbiAgICAgIGlmIChub2RlLnR5cGUgIT09ICdudW1iZXInIHx8IG5vZGUuaGFzQXR0cmlidXRlKCd2YWx1ZScpID09PSBmYWxzZSkge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgndmFsdWUnLCAnJyArIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS52YWxpZGl0eSAmJiAhbm9kZS52YWxpZGl0eS5iYWRJbnB1dCAmJiBub2RlLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gbm9kZSkge1xuICAgICAgICAvLyBEb24ndCBhc3NpZ24gYW4gYXR0cmlidXRlIGlmIHZhbGlkYXRpb24gcmVwb3J0cyBiYWRcbiAgICAgICAgLy8gaW5wdXQuIENocm9tZSB3aWxsIGNsZWFyIHRoZSB2YWx1ZS4gQWRkaXRpb25hbGx5LCBkb24ndFxuICAgICAgICAvLyBvcGVyYXRlIG9uIGlucHV0cyB0aGF0IGhhdmUgZm9jdXMsIG90aGVyd2lzZSBDaHJvbWUgbWlnaHRcbiAgICAgICAgLy8gc3RyaXAgb2ZmIHRyYWlsaW5nIGRlY2ltYWwgcGxhY2VzIGFuZCBjYXVzZSB0aGUgdXNlcidzXG4gICAgICAgIC8vIGN1cnNvciBwb3NpdGlvbiB0byBqdW1wIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGlucHV0LlxuICAgICAgICAvL1xuICAgICAgICAvLyBJbiBSZWFjdERPTUlucHV0LCB3ZSBoYXZlIGFuIG9uQmx1ciBldmVudCB0aGF0IHdpbGwgdHJpZ2dlclxuICAgICAgICAvLyB0aGlzIGZ1bmN0aW9uIGFnYWluIHdoZW4gZm9jdXMgaXMgbG9zdC5cbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgJycgKyB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhUTUxET01Qcm9wZXJ0eUNvbmZpZztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvSFRNTERPTVByb3BlcnR5Q29uZmlnLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcblxudmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciBLZXlFc2NhcGVVdGlscyA9IHJlcXVpcmUoJy4vS2V5RXNjYXBlVXRpbHMnKTtcbnZhciBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZSgnLi90cmF2ZXJzZUFsbENoaWxkcmVuJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIFJlYWN0Q29tcG9uZW50VHJlZUhvb2s7XG5cbmlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAvLyBUZW1wb3JhcnkgaGFjay5cbiAgLy8gSW5saW5lIHJlcXVpcmVzIGRvbid0IHdvcmsgd2VsbCB3aXRoIEplc3Q6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzI0MFxuICAvLyBSZW1vdmUgdGhlIGlubGluZSByZXF1aXJlcyB3aGVuIHdlIGRvbid0IG5lZWQgdGhlbSBhbnltb3JlOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC83MTc4XG4gIFJlYWN0Q29tcG9uZW50VHJlZUhvb2sgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3RDb21wb25lbnRUcmVlSG9vaycpO1xufVxuXG5mdW5jdGlvbiBpbnN0YW50aWF0ZUNoaWxkKGNoaWxkSW5zdGFuY2VzLCBjaGlsZCwgbmFtZSwgc2VsZkRlYnVnSUQpIHtcbiAgLy8gV2UgZm91bmQgYSBjb21wb25lbnQgaW5zdGFuY2UuXG4gIHZhciBrZXlVbmlxdWUgPSBjaGlsZEluc3RhbmNlc1tuYW1lXSA9PT0gdW5kZWZpbmVkO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghUmVhY3RDb21wb25lbnRUcmVlSG9vaykge1xuICAgICAgUmVhY3RDb21wb25lbnRUcmVlSG9vayA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudFRyZWVIb29rJyk7XG4gICAgfVxuICAgIGlmICgha2V5VW5pcXVlKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2ZsYXR0ZW5DaGlsZHJlbiguLi4pOiBFbmNvdW50ZXJlZCB0d28gY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBrZXksICcgKyAnYCVzYC4gQ2hpbGQga2V5cyBtdXN0IGJlIHVuaXF1ZTsgd2hlbiB0d28gY2hpbGRyZW4gc2hhcmUgYSBrZXksIG9ubHkgJyArICd0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSB1c2VkLiVzJywgS2V5RXNjYXBlVXRpbHMudW5lc2NhcGUobmFtZSksIFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQoc2VsZkRlYnVnSUQpKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgaWYgKGNoaWxkICE9IG51bGwgJiYga2V5VW5pcXVlKSB7XG4gICAgY2hpbGRJbnN0YW5jZXNbbmFtZV0gPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGNoaWxkLCB0cnVlKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlYWN0Q2hpbGRSZWNvbmNpbGVyIHByb3ZpZGVzIGhlbHBlcnMgZm9yIGluaXRpYWxpemluZyBvciB1cGRhdGluZyBhIHNldCBvZlxuICogY2hpbGRyZW4uIEl0cyBvdXRwdXQgaXMgc3VpdGFibGUgZm9yIHBhc3NpbmcgaXQgb250byBSZWFjdE11bHRpQ2hpbGQgd2hpY2hcbiAqIGRvZXMgZGlmZmVkIHJlb3JkZXJpbmcgYW5kIGluc2VydGlvbi5cbiAqL1xudmFyIFJlYWN0Q2hpbGRSZWNvbmNpbGVyID0ge1xuICAvKipcbiAgICogR2VuZXJhdGVzIGEgXCJtb3VudCBpbWFnZVwiIGZvciBlYWNoIG9mIHRoZSBzdXBwbGllZCBjaGlsZHJlbi4gSW4gdGhlIGNhc2VcbiAgICogb2YgYFJlYWN0RE9NQ29tcG9uZW50YCwgYSBtb3VudCBpbWFnZSBpcyBhIHN0cmluZyBvZiBtYXJrdXAuXG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmVzdGVkQ2hpbGROb2RlcyBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICogQHJldHVybiB7P29iamVjdH0gQSBzZXQgb2YgY2hpbGQgaW5zdGFuY2VzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGluc3RhbnRpYXRlQ2hpbGRyZW46IGZ1bmN0aW9uIChuZXN0ZWRDaGlsZE5vZGVzLCB0cmFuc2FjdGlvbiwgY29udGV4dCwgc2VsZkRlYnVnSUQpIC8vIDAgaW4gcHJvZHVjdGlvbiBhbmQgZm9yIHJvb3RzXG4gIHtcbiAgICBpZiAobmVzdGVkQ2hpbGROb2RlcyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGNoaWxkSW5zdGFuY2VzID0ge307XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdHJhdmVyc2VBbGxDaGlsZHJlbihuZXN0ZWRDaGlsZE5vZGVzLCBmdW5jdGlvbiAoY2hpbGRJbnN0cywgY2hpbGQsIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGluc3RhbnRpYXRlQ2hpbGQoY2hpbGRJbnN0cywgY2hpbGQsIG5hbWUsIHNlbGZEZWJ1Z0lEKTtcbiAgICAgIH0sIGNoaWxkSW5zdGFuY2VzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhdmVyc2VBbGxDaGlsZHJlbihuZXN0ZWRDaGlsZE5vZGVzLCBpbnN0YW50aWF0ZUNoaWxkLCBjaGlsZEluc3RhbmNlcyk7XG4gICAgfVxuICAgIHJldHVybiBjaGlsZEluc3RhbmNlcztcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgcmVuZGVyZWQgY2hpbGRyZW4gYW5kIHJldHVybnMgYSBuZXcgc2V0IG9mIGNoaWxkcmVuLlxuICAgKlxuICAgKiBAcGFyYW0gez9vYmplY3R9IHByZXZDaGlsZHJlbiBQcmV2aW91c2x5IGluaXRpYWxpemVkIHNldCBvZiBjaGlsZHJlbi5cbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0Q2hpbGRyZW4gRmxhdCBjaGlsZCBlbGVtZW50IG1hcHMuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQHJldHVybiB7P29iamVjdH0gQSBuZXcgc2V0IG9mIGNoaWxkIGluc3RhbmNlcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1cGRhdGVDaGlsZHJlbjogZnVuY3Rpb24gKHByZXZDaGlsZHJlbiwgbmV4dENoaWxkcmVuLCBtb3VudEltYWdlcywgcmVtb3ZlZE5vZGVzLCB0cmFuc2FjdGlvbiwgaG9zdFBhcmVudCwgaG9zdENvbnRhaW5lckluZm8sIGNvbnRleHQsIHNlbGZEZWJ1Z0lEKSAvLyAwIGluIHByb2R1Y3Rpb24gYW5kIGZvciByb290c1xuICB7XG4gICAgLy8gV2UgY3VycmVudGx5IGRvbid0IGhhdmUgYSB3YXkgdG8gdHJhY2sgbW92ZXMgaGVyZSBidXQgaWYgd2UgdXNlIGl0ZXJhdG9yc1xuICAgIC8vIGluc3RlYWQgb2YgZm9yLi5pbiB3ZSBjYW4gemlwIHRoZSBpdGVyYXRvcnMgYW5kIGNoZWNrIGlmIGFuIGl0ZW0gaGFzXG4gICAgLy8gbW92ZWQuXG4gICAgLy8gVE9ETzogSWYgbm90aGluZyBoYXMgY2hhbmdlZCwgcmV0dXJuIHRoZSBwcmV2Q2hpbGRyZW4gb2JqZWN0IHNvIHRoYXQgd2VcbiAgICAvLyBjYW4gcXVpY2tseSBiYWlsb3V0IGlmIG5vdGhpbmcgaGFzIGNoYW5nZWQuXG4gICAgaWYgKCFuZXh0Q2hpbGRyZW4gJiYgIXByZXZDaGlsZHJlbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgbmFtZTtcbiAgICB2YXIgcHJldkNoaWxkO1xuICAgIGZvciAobmFtZSBpbiBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgIGlmICghbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcHJldkNoaWxkID0gcHJldkNoaWxkcmVuICYmIHByZXZDaGlsZHJlbltuYW1lXTtcbiAgICAgIHZhciBwcmV2RWxlbWVudCA9IHByZXZDaGlsZCAmJiBwcmV2Q2hpbGQuX2N1cnJlbnRFbGVtZW50O1xuICAgICAgdmFyIG5leHRFbGVtZW50ID0gbmV4dENoaWxkcmVuW25hbWVdO1xuICAgICAgaWYgKHByZXZDaGlsZCAhPSBudWxsICYmIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcbiAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnJlY2VpdmVDb21wb25lbnQocHJldkNoaWxkLCBuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICBuZXh0Q2hpbGRyZW5bbmFtZV0gPSBwcmV2Q2hpbGQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJldkNoaWxkKSB7XG4gICAgICAgICAgcmVtb3ZlZE5vZGVzW25hbWVdID0gUmVhY3RSZWNvbmNpbGVyLmdldEhvc3ROb2RlKHByZXZDaGlsZCk7XG4gICAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocHJldkNoaWxkLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGNoaWxkIG11c3QgYmUgaW5zdGFudGlhdGVkIGJlZm9yZSBpdCdzIG1vdW50ZWQuXG4gICAgICAgIHZhciBuZXh0Q2hpbGRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQobmV4dEVsZW1lbnQsIHRydWUpO1xuICAgICAgICBuZXh0Q2hpbGRyZW5bbmFtZV0gPSBuZXh0Q2hpbGRJbnN0YW5jZTtcbiAgICAgICAgLy8gQ3JlYXRpbmcgbW91bnQgaW1hZ2Ugbm93IGVuc3VyZXMgcmVmcyBhcmUgcmVzb2x2ZWQgaW4gcmlnaHQgb3JkZXJcbiAgICAgICAgLy8gKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC83MTAxIGZvciBleHBsYW5hdGlvbikuXG4gICAgICAgIHZhciBuZXh0Q2hpbGRNb3VudEltYWdlID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KG5leHRDaGlsZEluc3RhbmNlLCB0cmFuc2FjdGlvbiwgaG9zdFBhcmVudCwgaG9zdENvbnRhaW5lckluZm8sIGNvbnRleHQsIHNlbGZEZWJ1Z0lEKTtcbiAgICAgICAgbW91bnRJbWFnZXMucHVzaChuZXh0Q2hpbGRNb3VudEltYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gVW5tb3VudCBjaGlsZHJlbiB0aGF0IGFyZSBubyBsb25nZXIgcHJlc2VudC5cbiAgICBmb3IgKG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICBpZiAocHJldkNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpICYmICEobmV4dENoaWxkcmVuICYmIG5leHRDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkpIHtcbiAgICAgICAgcHJldkNoaWxkID0gcHJldkNoaWxkcmVuW25hbWVdO1xuICAgICAgICByZW1vdmVkTm9kZXNbbmFtZV0gPSBSZWFjdFJlY29uY2lsZXIuZ2V0SG9zdE5vZGUocHJldkNoaWxkKTtcbiAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocHJldkNoaWxkLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBVbm1vdW50cyBhbGwgcmVuZGVyZWQgY2hpbGRyZW4uIFRoaXMgc2hvdWxkIGJlIHVzZWQgdG8gY2xlYW4gdXAgY2hpbGRyZW5cbiAgICogd2hlbiB0aGlzIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gcmVuZGVyZWRDaGlsZHJlbiBQcmV2aW91c2x5IGluaXRpYWxpemVkIHNldCBvZiBjaGlsZHJlbi5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1bm1vdW50Q2hpbGRyZW46IGZ1bmN0aW9uIChyZW5kZXJlZENoaWxkcmVuLCBzYWZlbHkpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIHJlbmRlcmVkQ2hpbGRyZW4pIHtcbiAgICAgIGlmIChyZW5kZXJlZENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHZhciByZW5kZXJlZENoaWxkID0gcmVuZGVyZWRDaGlsZHJlbltuYW1lXTtcbiAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocmVuZGVyZWRDaGlsZCwgc2FmZWx5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDaGlsZFJlY29uY2lsZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0Q2hpbGRSZWNvbmNpbGVyLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NQ2hpbGRyZW5PcGVyYXRpb25zID0gcmVxdWlyZSgnLi9ET01DaGlsZHJlbk9wZXJhdGlvbnMnKTtcbnZhciBSZWFjdERPTUlET3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vUmVhY3RET01JRE9wZXJhdGlvbnMnKTtcblxuLyoqXG4gKiBBYnN0cmFjdHMgYXdheSBhbGwgZnVuY3Rpb25hbGl0eSBvZiB0aGUgcmVjb25jaWxlciB0aGF0IHJlcXVpcmVzIGtub3dsZWRnZSBvZlxuICogdGhlIGJyb3dzZXIgY29udGV4dC4gVE9ETzogVGhlc2UgY2FsbGVycyBzaG91bGQgYmUgcmVmYWN0b3JlZCB0byBhdm9pZCB0aGVcbiAqIG5lZWQgZm9yIHRoaXMgaW5qZWN0aW9uLlxuICovXG52YXIgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQgPSB7XG4gIHByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6IFJlYWN0RE9NSURPcGVyYXRpb25zLmRhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyxcblxuICByZXBsYWNlTm9kZVdpdGhNYXJrdXA6IERPTUNoaWxkcmVuT3BlcmF0aW9ucy5kYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50JyksXG4gICAgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvbGliL1JlYWN0Jyk7XG52YXIgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCcpO1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZSgncmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUmVhY3RFcnJvclV0aWxzID0gcmVxdWlyZSgnLi9SZWFjdEVycm9yVXRpbHMnKTtcbnZhciBSZWFjdEluc3RhbmNlTWFwID0gcmVxdWlyZSgnLi9SZWFjdEluc3RhbmNlTWFwJyk7XG52YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG52YXIgUmVhY3ROb2RlVHlwZXMgPSByZXF1aXJlKCcuL1JlYWN0Tm9kZVR5cGVzJyk7XG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGNoZWNrUmVhY3RUeXBlU3BlYyA9IHJlcXVpcmUoJy4vY2hlY2tSZWFjdFR5cGVTcGVjJyk7XG59XG5cbnZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5T2JqZWN0Jyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgnZmJqcy9saWIvc2hhbGxvd0VxdWFsJyk7XG52YXIgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIENvbXBvc2l0ZVR5cGVzID0ge1xuICBJbXB1cmVDbGFzczogMCxcbiAgUHVyZUNsYXNzOiAxLFxuICBTdGF0ZWxlc3NGdW5jdGlvbmFsOiAyXG59O1xuXG5mdW5jdGlvbiBTdGF0ZWxlc3NDb21wb25lbnQoQ29tcG9uZW50KSB7fVxuU3RhdGVsZXNzQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBDb21wb25lbnQgPSBSZWFjdEluc3RhbmNlTWFwLmdldCh0aGlzKS5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgdmFyIGVsZW1lbnQgPSBDb21wb25lbnQodGhpcy5wcm9wcywgdGhpcy5jb250ZXh0LCB0aGlzLnVwZGF0ZXIpO1xuICB3YXJuSWZJbnZhbGlkRWxlbWVudChDb21wb25lbnQsIGVsZW1lbnQpO1xuICByZXR1cm4gZWxlbWVudDtcbn07XG5cbmZ1bmN0aW9uIHdhcm5JZkludmFsaWRFbGVtZW50KENvbXBvbmVudCwgZWxlbWVudCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGVsZW1lbnQgPT09IG51bGwgfHwgZWxlbWVudCA9PT0gZmFsc2UgfHwgUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCksICclcyguLi4pOiBBIHZhbGlkIFJlYWN0IGVsZW1lbnQgKG9yIG51bGwpIG11c3QgYmUgcmV0dXJuZWQuIFlvdSBtYXkgaGF2ZSAnICsgJ3JldHVybmVkIHVuZGVmaW5lZCwgYW4gYXJyYXkgb3Igc29tZSBvdGhlciBpbnZhbGlkIG9iamVjdC4nLCBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFDb21wb25lbnQuY2hpbGRDb250ZXh0VHlwZXMsICclcyguLi4pOiBjaGlsZENvbnRleHRUeXBlcyBjYW5ub3QgYmUgZGVmaW5lZCBvbiBhIGZ1bmN0aW9uYWwgY29tcG9uZW50LicsIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JykgOiB2b2lkIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2hvdWxkQ29uc3RydWN0KENvbXBvbmVudCkge1xuICByZXR1cm4gISEoQ29tcG9uZW50LnByb3RvdHlwZSAmJiBDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpO1xufVxuXG5mdW5jdGlvbiBpc1B1cmVDb21wb25lbnQoQ29tcG9uZW50KSB7XG4gIHJldHVybiAhIShDb21wb25lbnQucHJvdG90eXBlICYmIENvbXBvbmVudC5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQpO1xufVxuXG4vLyBTZXBhcmF0ZWQgaW50byBhIGZ1bmN0aW9uIHRvIGNvbnRhaW4gZGVvcHRpbWl6YXRpb25zIGNhdXNlZCBieSB0cnkvZmluYWxseS5cbmZ1bmN0aW9uIG1lYXN1cmVMaWZlQ3ljbGVQZXJmKGZuLCBkZWJ1Z0lELCB0aW1lclR5cGUpIHtcbiAgaWYgKGRlYnVnSUQgPT09IDApIHtcbiAgICAvLyBUb3AtbGV2ZWwgd3JhcHBlcnMgKHNlZSBSZWFjdE1vdW50KSBhbmQgZW1wdHkgY29tcG9uZW50cyAoc2VlXG4gICAgLy8gUmVhY3RET01FbXB0eUNvbXBvbmVudCkgYXJlIGludmlzaWJsZSB0byBob29rcyBhbmQgZGV2dG9vbHMuXG4gICAgLy8gQm90aCBhcmUgaW1wbGVtZW50YXRpb24gZGV0YWlscyB0aGF0IHNob3VsZCBnbyBhd2F5IGluIHRoZSBmdXR1cmUuXG4gICAgcmV0dXJuIGZuKCk7XG4gIH1cblxuICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpbkxpZmVDeWNsZVRpbWVyKGRlYnVnSUQsIHRpbWVyVHlwZSk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZuKCk7XG4gIH0gZmluYWxseSB7XG4gICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uRW5kTGlmZUN5Y2xlVGltZXIoZGVidWdJRCwgdGltZXJUeXBlKTtcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLSBUaGUgTGlmZS1DeWNsZSBvZiBhIENvbXBvc2l0ZSBDb21wb25lbnQgLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogLSBjb25zdHJ1Y3RvcjogSW5pdGlhbGl6YXRpb24gb2Ygc3RhdGUuIFRoZSBpbnN0YW5jZSBpcyBub3cgcmV0YWluZWQuXG4gKiAgIC0gY29tcG9uZW50V2lsbE1vdW50XG4gKiAgIC0gcmVuZGVyXG4gKiAgIC0gW2NoaWxkcmVuJ3MgY29uc3RydWN0b3JzXVxuICogICAgIC0gW2NoaWxkcmVuJ3MgY29tcG9uZW50V2lsbE1vdW50IGFuZCByZW5kZXJdXG4gKiAgICAgLSBbY2hpbGRyZW4ncyBjb21wb25lbnREaWRNb3VudF1cbiAqICAgICAtIGNvbXBvbmVudERpZE1vdW50XG4gKlxuICogICAgICAgVXBkYXRlIFBoYXNlczpcbiAqICAgICAgIC0gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAob25seSBjYWxsZWQgaWYgcGFyZW50IHVwZGF0ZWQpXG4gKiAgICAgICAtIHNob3VsZENvbXBvbmVudFVwZGF0ZVxuICogICAgICAgICAtIGNvbXBvbmVudFdpbGxVcGRhdGVcbiAqICAgICAgICAgICAtIHJlbmRlclxuICogICAgICAgICAgIC0gW2NoaWxkcmVuJ3MgY29uc3RydWN0b3JzIG9yIHJlY2VpdmUgcHJvcHMgcGhhc2VzXVxuICogICAgICAgICAtIGNvbXBvbmVudERpZFVwZGF0ZVxuICpcbiAqICAgICAtIGNvbXBvbmVudFdpbGxVbm1vdW50XG4gKiAgICAgLSBbY2hpbGRyZW4ncyBjb21wb25lbnRXaWxsVW5tb3VudF1cbiAqICAgLSBbY2hpbGRyZW4gZGVzdHJveWVkXVxuICogLSAoZGVzdHJveWVkKTogVGhlIGluc3RhbmNlIGlzIG5vdyBibGFuaywgcmVsZWFzZWQgYnkgUmVhY3QgYW5kIHJlYWR5IGZvciBHQy5cbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbi8qKlxuICogQW4gaW5jcmVtZW50aW5nIElEIGFzc2lnbmVkIHRvIGVhY2ggY29tcG9uZW50IHdoZW4gaXQgaXMgbW91bnRlZC4gVGhpcyBpc1xuICogdXNlZCB0byBlbmZvcmNlIHRoZSBvcmRlciBpbiB3aGljaCBgUmVhY3RVcGRhdGVzYCB1cGRhdGVzIGRpcnR5IGNvbXBvbmVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xudmFyIG5leHRNb3VudElEID0gMTtcblxuLyoqXG4gKiBAbGVuZHMge1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50LnByb3RvdHlwZX1cbiAqL1xudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0ge1xuICAvKipcbiAgICogQmFzZSBjb25zdHJ1Y3RvciBmb3IgYWxsIGNvbXBvc2l0ZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IDA7XG4gICAgdGhpcy5fY29tcG9zaXRlVHlwZSA9IG51bGw7XG4gICAgdGhpcy5faW5zdGFuY2UgPSBudWxsO1xuICAgIHRoaXMuX2hvc3RQYXJlbnQgPSBudWxsO1xuICAgIHRoaXMuX2hvc3RDb250YWluZXJJbmZvID0gbnVsbDtcblxuICAgIC8vIFNlZSBSZWFjdFVwZGF0ZVF1ZXVlXG4gICAgdGhpcy5fdXBkYXRlQmF0Y2hOdW1iZXIgPSBudWxsO1xuICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgdGhpcy5fcmVuZGVyZWROb2RlVHlwZSA9IG51bGw7XG4gICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSBudWxsO1xuICAgIHRoaXMuX2NvbnRleHQgPSBudWxsO1xuICAgIHRoaXMuX21vdW50T3JkZXIgPSAwO1xuICAgIHRoaXMuX3RvcExldmVsV3JhcHBlciA9IG51bGw7XG5cbiAgICAvLyBTZWUgUmVhY3RVcGRhdGVzIGFuZCBSZWFjdFVwZGF0ZVF1ZXVlLlxuICAgIHRoaXMuX3BlbmRpbmdDYWxsYmFja3MgPSBudWxsO1xuXG4gICAgLy8gQ29tcG9uZW50V2lsbFVubW91bnQgc2hhbGwgb25seSBiZSBjYWxsZWQgb25jZVxuICAgIHRoaXMuX2NhbGxlZENvbXBvbmVudFdpbGxVbm1vdW50ID0gZmFsc2U7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhpcy5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIgPSBmYWxzZTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBjb21wb25lbnQsIHJlbmRlcnMgbWFya3VwLCBhbmQgcmVnaXN0ZXJzIGV2ZW50IGxpc3RlbmVycy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7P29iamVjdH0gaG9zdFBhcmVudFxuICAgKiBAcGFyYW0gez9vYmplY3R9IGhvc3RDb250YWluZXJJbmZvXG4gICAqIEBwYXJhbSB7P29iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBSZW5kZXJlZCBtYXJrdXAgdG8gYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NLlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBob3N0UGFyZW50LCBob3N0Q29udGFpbmVySW5mbywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl9tb3VudE9yZGVyID0gbmV4dE1vdW50SUQrKztcbiAgICB0aGlzLl9ob3N0UGFyZW50ID0gaG9zdFBhcmVudDtcbiAgICB0aGlzLl9ob3N0Q29udGFpbmVySW5mbyA9IGhvc3RDb250YWluZXJJbmZvO1xuXG4gICAgdmFyIHB1YmxpY1Byb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gICAgdmFyIHB1YmxpY0NvbnRleHQgPSB0aGlzLl9wcm9jZXNzQ29udGV4dChjb250ZXh0KTtcblxuICAgIHZhciBDb21wb25lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuXG4gICAgdmFyIHVwZGF0ZVF1ZXVlID0gdHJhbnNhY3Rpb24uZ2V0VXBkYXRlUXVldWUoKTtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHB1YmxpYyBjbGFzc1xuICAgIHZhciBkb0NvbnN0cnVjdCA9IHNob3VsZENvbnN0cnVjdChDb21wb25lbnQpO1xuICAgIHZhciBpbnN0ID0gdGhpcy5fY29uc3RydWN0Q29tcG9uZW50KGRvQ29uc3RydWN0LCBwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCwgdXBkYXRlUXVldWUpO1xuICAgIHZhciByZW5kZXJlZEVsZW1lbnQ7XG5cbiAgICAvLyBTdXBwb3J0IGZ1bmN0aW9uYWwgY29tcG9uZW50c1xuICAgIGlmICghZG9Db25zdHJ1Y3QgJiYgKGluc3QgPT0gbnVsbCB8fCBpbnN0LnJlbmRlciA9PSBudWxsKSkge1xuICAgICAgcmVuZGVyZWRFbGVtZW50ID0gaW5zdDtcbiAgICAgIHdhcm5JZkludmFsaWRFbGVtZW50KENvbXBvbmVudCwgcmVuZGVyZWRFbGVtZW50KTtcbiAgICAgICEoaW5zdCA9PT0gbnVsbCB8fCBpbnN0ID09PSBmYWxzZSB8fCBSZWFjdC5pc1ZhbGlkRWxlbWVudChpbnN0KSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMoLi4uKTogQSB2YWxpZCBSZWFjdCBlbGVtZW50IChvciBudWxsKSBtdXN0IGJlIHJldHVybmVkLiBZb3UgbWF5IGhhdmUgcmV0dXJuZWQgdW5kZWZpbmVkLCBhbiBhcnJheSBvciBzb21lIG90aGVyIGludmFsaWQgb2JqZWN0LicsIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JykgOiBfcHJvZEludmFyaWFudCgnMTA1JywgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgIGluc3QgPSBuZXcgU3RhdGVsZXNzQ29tcG9uZW50KENvbXBvbmVudCk7XG4gICAgICB0aGlzLl9jb21wb3NpdGVUeXBlID0gQ29tcG9zaXRlVHlwZXMuU3RhdGVsZXNzRnVuY3Rpb25hbDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzUHVyZUNvbXBvbmVudChDb21wb25lbnQpKSB7XG4gICAgICAgIHRoaXMuX2NvbXBvc2l0ZVR5cGUgPSBDb21wb3NpdGVUeXBlcy5QdXJlQ2xhc3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jb21wb3NpdGVUeXBlID0gQ29tcG9zaXRlVHlwZXMuSW1wdXJlQ2xhc3M7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBsYXRlciBpbiBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50LCBidXQgYWRkIGFuIGVhcmx5XG4gICAgICAvLyB3YXJuaW5nIG5vdyB0byBoZWxwIGRlYnVnZ2luZ1xuICAgICAgaWYgKGluc3QucmVuZGVyID09IG51bGwpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclcyguLi4pOiBObyBgcmVuZGVyYCBtZXRob2QgZm91bmQgb24gdGhlIHJldHVybmVkIGNvbXBvbmVudCAnICsgJ2luc3RhbmNlOiB5b3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIGRlZmluZSBgcmVuZGVyYC4nLCBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvcHNNdXRhdGVkID0gaW5zdC5wcm9wcyAhPT0gcHVibGljUHJvcHM7XG4gICAgICB2YXIgY29tcG9uZW50TmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcblxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoaW5zdC5wcm9wcyA9PT0gdW5kZWZpbmVkIHx8ICFwcm9wc011dGF0ZWQsICclcyguLi4pOiBXaGVuIGNhbGxpbmcgc3VwZXIoKSBpbiBgJXNgLCBtYWtlIHN1cmUgdG8gcGFzcyAnICsgXCJ1cCB0aGUgc2FtZSBwcm9wcyB0aGF0IHlvdXIgY29tcG9uZW50J3MgY29uc3RydWN0b3Igd2FzIHBhc3NlZC5cIiwgY29tcG9uZW50TmFtZSwgY29tcG9uZW50TmFtZSkgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgLy8gVGhlc2Ugc2hvdWxkIGJlIHNldCB1cCBpbiB0aGUgY29uc3RydWN0b3IsIGJ1dCBhcyBhIGNvbnZlbmllbmNlIGZvclxuICAgIC8vIHNpbXBsZXIgY2xhc3MgYWJzdHJhY3Rpb25zLCB3ZSBzZXQgdGhlbSB1cCBhZnRlciB0aGUgZmFjdC5cbiAgICBpbnN0LnByb3BzID0gcHVibGljUHJvcHM7XG4gICAgaW5zdC5jb250ZXh0ID0gcHVibGljQ29udGV4dDtcbiAgICBpbnN0LnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgICBpbnN0LnVwZGF0ZXIgPSB1cGRhdGVRdWV1ZTtcblxuICAgIHRoaXMuX2luc3RhbmNlID0gaW5zdDtcblxuICAgIC8vIFN0b3JlIGEgcmVmZXJlbmNlIGZyb20gdGhlIGluc3RhbmNlIGJhY2sgdG8gdGhlIGludGVybmFsIHJlcHJlc2VudGF0aW9uXG4gICAgUmVhY3RJbnN0YW5jZU1hcC5zZXQoaW5zdCwgdGhpcyk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gU2luY2UgcGxhaW4gSlMgY2xhc3NlcyBhcmUgZGVmaW5lZCB3aXRob3V0IGFueSBzcGVjaWFsIGluaXRpYWxpemF0aW9uXG4gICAgICAvLyBsb2dpYywgd2UgY2FuIG5vdCBjYXRjaCBjb21tb24gZXJyb3JzIGVhcmx5LiBUaGVyZWZvcmUsIHdlIGhhdmUgdG9cbiAgICAgIC8vIGNhdGNoIHRoZW0gaGVyZSwgYXQgaW5pdGlhbGl6YXRpb24gdGltZSwgaW5zdGVhZC5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFpbnN0LmdldEluaXRpYWxTdGF0ZSB8fCBpbnN0LmdldEluaXRpYWxTdGF0ZS5pc1JlYWN0Q2xhc3NBcHByb3ZlZCB8fCBpbnN0LnN0YXRlLCAnZ2V0SW5pdGlhbFN0YXRlIHdhcyBkZWZpbmVkIG9uICVzLCBhIHBsYWluIEphdmFTY3JpcHQgY2xhc3MuICcgKyAnVGhpcyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgY2xhc3NlcyBjcmVhdGVkIHVzaW5nIFJlYWN0LmNyZWF0ZUNsYXNzLiAnICsgJ0RpZCB5b3UgbWVhbiB0byBkZWZpbmUgYSBzdGF0ZSBwcm9wZXJ0eSBpbnN0ZWFkPycsIHRoaXMuZ2V0TmFtZSgpIHx8ICdhIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWluc3QuZ2V0RGVmYXVsdFByb3BzIHx8IGluc3QuZ2V0RGVmYXVsdFByb3BzLmlzUmVhY3RDbGFzc0FwcHJvdmVkLCAnZ2V0RGVmYXVsdFByb3BzIHdhcyBkZWZpbmVkIG9uICVzLCBhIHBsYWluIEphdmFTY3JpcHQgY2xhc3MuICcgKyAnVGhpcyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgY2xhc3NlcyBjcmVhdGVkIHVzaW5nIFJlYWN0LmNyZWF0ZUNsYXNzLiAnICsgJ1VzZSBhIHN0YXRpYyBwcm9wZXJ0eSB0byBkZWZpbmUgZGVmYXVsdFByb3BzIGluc3RlYWQuJywgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaW5zdC5wcm9wVHlwZXMsICdwcm9wVHlwZXMgd2FzIGRlZmluZWQgYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgb24gJXMuIFVzZSBhIHN0YXRpYyAnICsgJ3Byb3BlcnR5IHRvIGRlZmluZSBwcm9wVHlwZXMgaW5zdGVhZC4nLCB0aGlzLmdldE5hbWUoKSB8fCAnYSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFpbnN0LmNvbnRleHRUeXBlcywgJ2NvbnRleHRUeXBlcyB3YXMgZGVmaW5lZCBhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBvbiAlcy4gVXNlIGEgJyArICdzdGF0aWMgcHJvcGVydHkgdG8gZGVmaW5lIGNvbnRleHRUeXBlcyBpbnN0ZWFkLicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdhIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodHlwZW9mIGluc3QuY29tcG9uZW50U2hvdWxkVXBkYXRlICE9PSAnZnVuY3Rpb24nLCAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ2NvbXBvbmVudFNob3VsZFVwZGF0ZSgpLiBEaWQgeW91IG1lYW4gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk/ICcgKyAnVGhlIG5hbWUgaXMgcGhyYXNlZCBhcyBhIHF1ZXN0aW9uIGJlY2F1c2UgdGhlIGZ1bmN0aW9uIGlzICcgKyAnZXhwZWN0ZWQgdG8gcmV0dXJuIGEgdmFsdWUuJywgdGhpcy5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0eXBlb2YgaW5zdC5jb21wb25lbnREaWRVbm1vdW50ICE9PSAnZnVuY3Rpb24nLCAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ2NvbXBvbmVudERpZFVubW91bnQoKS4gQnV0IHRoZXJlIGlzIG5vIHN1Y2ggbGlmZWN5Y2xlIG1ldGhvZC4gJyArICdEaWQgeW91IG1lYW4gY29tcG9uZW50V2lsbFVubW91bnQoKT8nLCB0aGlzLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHR5cGVvZiBpbnN0LmNvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMgIT09ICdmdW5jdGlvbicsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcygpLiBEaWQgeW91IG1lYW4gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpPycsIHRoaXMuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHZhciBpbml0aWFsU3RhdGUgPSBpbnN0LnN0YXRlO1xuICAgIGlmIChpbml0aWFsU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaW5zdC5zdGF0ZSA9IGluaXRpYWxTdGF0ZSA9IG51bGw7XG4gICAgfVxuICAgICEodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoaW5pdGlhbFN0YXRlKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMuc3RhdGU6IG11c3QgYmUgc2V0IHRvIGFuIG9iamVjdCBvciBudWxsJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiBfcHJvZEludmFyaWFudCgnMTA2JywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiB2b2lkIDA7XG5cbiAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgdmFyIG1hcmt1cDtcbiAgICBpZiAoaW5zdC51bnN0YWJsZV9oYW5kbGVFcnJvcikge1xuICAgICAgbWFya3VwID0gdGhpcy5wZXJmb3JtSW5pdGlhbE1vdW50V2l0aEVycm9ySGFuZGxpbmcocmVuZGVyZWRFbGVtZW50LCBob3N0UGFyZW50LCBob3N0Q29udGFpbmVySW5mbywgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYXJrdXAgPSB0aGlzLnBlcmZvcm1Jbml0aWFsTW91bnQocmVuZGVyZWRFbGVtZW50LCBob3N0UGFyZW50LCBob3N0Q29udGFpbmVySW5mbywgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH1cblxuICAgIGlmIChpbnN0LmNvbXBvbmVudERpZE1vdW50KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBtZWFzdXJlTGlmZUN5Y2xlUGVyZihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5zdC5jb21wb25lbnREaWRNb3VudCgpO1xuICAgICAgICAgIH0sIF90aGlzLl9kZWJ1Z0lELCAnY29tcG9uZW50RGlkTW91bnQnKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGluc3QuY29tcG9uZW50RGlkTW91bnQsIGluc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXJrdXA7XG4gIH0sXG5cbiAgX2NvbnN0cnVjdENvbXBvbmVudDogZnVuY3Rpb24gKGRvQ29uc3RydWN0LCBwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCwgdXBkYXRlUXVldWUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhZG9Db25zdHJ1Y3QpIHtcbiAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSB0aGlzO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnN0cnVjdENvbXBvbmVudFdpdGhvdXRPd25lcihkb0NvbnN0cnVjdCwgcHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQsIHVwZGF0ZVF1ZXVlKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5fY29uc3RydWN0Q29tcG9uZW50V2l0aG91dE93bmVyKGRvQ29uc3RydWN0LCBwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCwgdXBkYXRlUXVldWUpO1xuICAgIH1cbiAgfSxcblxuICBfY29uc3RydWN0Q29tcG9uZW50V2l0aG91dE93bmVyOiBmdW5jdGlvbiAoZG9Db25zdHJ1Y3QsIHB1YmxpY1Byb3BzLCBwdWJsaWNDb250ZXh0LCB1cGRhdGVRdWV1ZSkge1xuICAgIHZhciBDb21wb25lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuXG4gICAgaWYgKGRvQ29uc3RydWN0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICByZXR1cm4gbWVhc3VyZUxpZmVDeWNsZVBlcmYoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBuZXcgQ29tcG9uZW50KHB1YmxpY1Byb3BzLCBwdWJsaWNDb250ZXh0LCB1cGRhdGVRdWV1ZSk7XG4gICAgICAgIH0sIHRoaXMuX2RlYnVnSUQsICdjdG9yJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IENvbXBvbmVudChwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCwgdXBkYXRlUXVldWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoaXMgY2FuIHN0aWxsIGJlIGFuIGluc3RhbmNlIGluIGNhc2Ugb2YgZmFjdG9yeSBjb21wb25lbnRzXG4gICAgLy8gYnV0IHdlJ2xsIGNvdW50IHRoaXMgYXMgdGltZSBzcGVudCByZW5kZXJpbmcgYXMgdGhlIG1vcmUgY29tbW9uIGNhc2UuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiBtZWFzdXJlTGlmZUN5Y2xlUGVyZihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBDb21wb25lbnQocHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQsIHVwZGF0ZVF1ZXVlKTtcbiAgICAgIH0sIHRoaXMuX2RlYnVnSUQsICdyZW5kZXInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIENvbXBvbmVudChwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCwgdXBkYXRlUXVldWUpO1xuICAgIH1cbiAgfSxcblxuICBwZXJmb3JtSW5pdGlhbE1vdW50V2l0aEVycm9ySGFuZGxpbmc6IGZ1bmN0aW9uIChyZW5kZXJlZEVsZW1lbnQsIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHZhciBtYXJrdXA7XG4gICAgdmFyIGNoZWNrcG9pbnQgPSB0cmFuc2FjdGlvbi5jaGVja3BvaW50KCk7XG4gICAgdHJ5IHtcbiAgICAgIG1hcmt1cCA9IHRoaXMucGVyZm9ybUluaXRpYWxNb3VudChyZW5kZXJlZEVsZW1lbnQsIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gUm9sbCBiYWNrIHRvIGNoZWNrcG9pbnQsIGhhbmRsZSBlcnJvciAod2hpY2ggbWF5IGFkZCBpdGVtcyB0byB0aGUgdHJhbnNhY3Rpb24pLCBhbmQgdGFrZSBhIG5ldyBjaGVja3BvaW50XG4gICAgICB0cmFuc2FjdGlvbi5yb2xsYmFjayhjaGVja3BvaW50KTtcbiAgICAgIHRoaXMuX2luc3RhbmNlLnVuc3RhYmxlX2hhbmRsZUVycm9yKGUpO1xuICAgICAgaWYgKHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlKSB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlLnN0YXRlID0gdGhpcy5fcHJvY2Vzc1BlbmRpbmdTdGF0ZSh0aGlzLl9pbnN0YW5jZS5wcm9wcywgdGhpcy5faW5zdGFuY2UuY29udGV4dCk7XG4gICAgICB9XG4gICAgICBjaGVja3BvaW50ID0gdHJhbnNhY3Rpb24uY2hlY2twb2ludCgpO1xuXG4gICAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudC51bm1vdW50Q29tcG9uZW50KHRydWUpO1xuICAgICAgdHJhbnNhY3Rpb24ucm9sbGJhY2soY2hlY2twb2ludCk7XG5cbiAgICAgIC8vIFRyeSBhZ2FpbiAtIHdlJ3ZlIGluZm9ybWVkIHRoZSBjb21wb25lbnQgYWJvdXQgdGhlIGVycm9yLCBzbyB0aGV5IGNhbiByZW5kZXIgYW4gZXJyb3IgbWVzc2FnZSB0aGlzIHRpbWUuXG4gICAgICAvLyBJZiB0aGlzIHRocm93cyBhZ2FpbiwgdGhlIGVycm9yIHdpbGwgYnViYmxlIHVwIChhbmQgY2FuIGJlIGNhdWdodCBieSBhIGhpZ2hlciBlcnJvciBib3VuZGFyeSkuXG4gICAgICBtYXJrdXAgPSB0aGlzLnBlcmZvcm1Jbml0aWFsTW91bnQocmVuZGVyZWRFbGVtZW50LCBob3N0UGFyZW50LCBob3N0Q29udGFpbmVySW5mbywgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gbWFya3VwO1xuICB9LFxuXG4gIHBlcmZvcm1Jbml0aWFsTW91bnQ6IGZ1bmN0aW9uIChyZW5kZXJlZEVsZW1lbnQsIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG5cbiAgICB2YXIgZGVidWdJRCA9IDA7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGRlYnVnSUQgPSB0aGlzLl9kZWJ1Z0lEO1xuICAgIH1cblxuICAgIGlmIChpbnN0LmNvbXBvbmVudFdpbGxNb3VudCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgbWVhc3VyZUxpZmVDeWNsZVBlcmYoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBpbnN0LmNvbXBvbmVudFdpbGxNb3VudCgpO1xuICAgICAgICB9LCBkZWJ1Z0lELCAnY29tcG9uZW50V2lsbE1vdW50Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnN0LmNvbXBvbmVudFdpbGxNb3VudCgpO1xuICAgICAgfVxuICAgICAgLy8gV2hlbiBtb3VudGluZywgY2FsbHMgdG8gYHNldFN0YXRlYCBieSBgY29tcG9uZW50V2lsbE1vdW50YCB3aWxsIHNldFxuICAgICAgLy8gYHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlYCB3aXRob3V0IHRyaWdnZXJpbmcgYSByZS1yZW5kZXIuXG4gICAgICBpZiAodGhpcy5fcGVuZGluZ1N0YXRlUXVldWUpIHtcbiAgICAgICAgaW5zdC5zdGF0ZSA9IHRoaXMuX3Byb2Nlc3NQZW5kaW5nU3RhdGUoaW5zdC5wcm9wcywgaW5zdC5jb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBub3QgYSBzdGF0ZWxlc3MgY29tcG9uZW50LCB3ZSBub3cgcmVuZGVyXG4gICAgaWYgKHJlbmRlcmVkRWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZW5kZXJlZEVsZW1lbnQgPSB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQoKTtcbiAgICB9XG5cbiAgICB2YXIgbm9kZVR5cGUgPSBSZWFjdE5vZGVUeXBlcy5nZXRUeXBlKHJlbmRlcmVkRWxlbWVudCk7XG4gICAgdGhpcy5fcmVuZGVyZWROb2RlVHlwZSA9IG5vZGVUeXBlO1xuICAgIHZhciBjaGlsZCA9IHRoaXMuX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQocmVuZGVyZWRFbGVtZW50LCBub2RlVHlwZSAhPT0gUmVhY3ROb2RlVHlwZXMuRU1QVFkgLyogc2hvdWxkSGF2ZURlYnVnSUQgKi9cbiAgICApO1xuICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gY2hpbGQ7XG5cbiAgICB2YXIgbWFya3VwID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KGNoaWxkLCB0cmFuc2FjdGlvbiwgaG9zdFBhcmVudCwgaG9zdENvbnRhaW5lckluZm8sIHRoaXMuX3Byb2Nlc3NDaGlsZENvbnRleHQoY29udGV4dCksIGRlYnVnSUQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChkZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgIHZhciBjaGlsZERlYnVnSURzID0gY2hpbGQuX2RlYnVnSUQgIT09IDAgPyBbY2hpbGQuX2RlYnVnSURdIDogW107XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldENoaWxkcmVuKGRlYnVnSUQsIGNoaWxkRGVidWdJRHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXJrdXA7XG4gIH0sXG5cbiAgZ2V0SG9zdE5vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUmVhY3RSZWNvbmNpbGVyLmdldEhvc3ROb2RlKHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVsZWFzZXMgYW55IHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgYG1vdW50Q29tcG9uZW50YC5cbiAgICpcbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24gKHNhZmVseSkge1xuICAgIGlmICghdGhpcy5fcmVuZGVyZWRDb21wb25lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuXG4gICAgaWYgKGluc3QuY29tcG9uZW50V2lsbFVubW91bnQgJiYgIWluc3QuX2NhbGxlZENvbXBvbmVudFdpbGxVbm1vdW50KSB7XG4gICAgICBpbnN0Ll9jYWxsZWRDb21wb25lbnRXaWxsVW5tb3VudCA9IHRydWU7XG5cbiAgICAgIGlmIChzYWZlbHkpIHtcbiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLmdldE5hbWUoKSArICcuY29tcG9uZW50V2lsbFVubW91bnQoKSc7XG4gICAgICAgIFJlYWN0RXJyb3JVdGlscy5pbnZva2VHdWFyZGVkQ2FsbGJhY2sobmFtZSwgaW5zdC5jb21wb25lbnRXaWxsVW5tb3VudC5iaW5kKGluc3QpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgbWVhc3VyZUxpZmVDeWNsZVBlcmYoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGluc3QuY29tcG9uZW50V2lsbFVubW91bnQoKTtcbiAgICAgICAgICB9LCB0aGlzLl9kZWJ1Z0lELCAnY29tcG9uZW50V2lsbFVubW91bnQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnN0LmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcmVuZGVyZWRDb21wb25lbnQpIHtcbiAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50LCBzYWZlbHkpO1xuICAgICAgdGhpcy5fcmVuZGVyZWROb2RlVHlwZSA9IG51bGw7XG4gICAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IG51bGw7XG4gICAgICB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gUmVzZXQgcGVuZGluZyBmaWVsZHNcbiAgICAvLyBFdmVuIGlmIHRoaXMgY29tcG9uZW50IGlzIHNjaGVkdWxlZCBmb3IgYW5vdGhlciB1cGRhdGUgaW4gUmVhY3RVcGRhdGVzLFxuICAgIC8vIGl0IHdvdWxkIHN0aWxsIGJlIGlnbm9yZWQgYmVjYXVzZSB0aGVzZSBmaWVsZHMgYXJlIHJlc2V0LlxuICAgIHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gbnVsbDtcbiAgICB0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlID0gZmFsc2U7XG4gICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gZmFsc2U7XG4gICAgdGhpcy5fcGVuZGluZ0NhbGxiYWNrcyA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ0VsZW1lbnQgPSBudWxsO1xuXG4gICAgLy8gVGhlc2UgZmllbGRzIGRvIG5vdCByZWFsbHkgbmVlZCB0byBiZSByZXNldCBzaW5jZSB0aGlzIG9iamVjdCBpcyBub1xuICAgIC8vIGxvbmdlciBhY2Nlc3NpYmxlLlxuICAgIHRoaXMuX2NvbnRleHQgPSBudWxsO1xuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSAwO1xuICAgIHRoaXMuX3RvcExldmVsV3JhcHBlciA9IG51bGw7XG5cbiAgICAvLyBEZWxldGUgdGhlIHJlZmVyZW5jZSBmcm9tIHRoZSBpbnN0YW5jZSB0byB0aGlzIGludGVybmFsIHJlcHJlc2VudGF0aW9uXG4gICAgLy8gd2hpY2ggYWxsb3cgdGhlIGludGVybmFscyB0byBiZSBwcm9wZXJseSBjbGVhbmVkIHVwIGV2ZW4gaWYgdGhlIHVzZXJcbiAgICAvLyBsZWFrcyBhIHJlZmVyZW5jZSB0byB0aGUgcHVibGljIGluc3RhbmNlLlxuICAgIFJlYWN0SW5zdGFuY2VNYXAucmVtb3ZlKGluc3QpO1xuXG4gICAgLy8gU29tZSBleGlzdGluZyBjb21wb25lbnRzIHJlbHkgb24gaW5zdC5wcm9wcyBldmVuIGFmdGVyIHRoZXkndmUgYmVlblxuICAgIC8vIGRlc3Ryb3llZCAoaW4gZXZlbnQgaGFuZGxlcnMpLlxuICAgIC8vIFRPRE86IGluc3QucHJvcHMgPSBudWxsO1xuICAgIC8vIFRPRE86IGluc3Quc3RhdGUgPSBudWxsO1xuICAgIC8vIFRPRE86IGluc3QuY29udGV4dCA9IG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbHRlcnMgdGhlIGNvbnRleHQgb2JqZWN0IHRvIG9ubHkgY29udGFpbiBrZXlzIHNwZWNpZmllZCBpblxuICAgKiBgY29udGV4dFR5cGVzYFxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJuIHs/b2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX21hc2tDb250ZXh0OiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHZhciBDb21wb25lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICAgIHZhciBjb250ZXh0VHlwZXMgPSBDb21wb25lbnQuY29udGV4dFR5cGVzO1xuICAgIGlmICghY29udGV4dFR5cGVzKSB7XG4gICAgICByZXR1cm4gZW1wdHlPYmplY3Q7XG4gICAgfVxuICAgIHZhciBtYXNrZWRDb250ZXh0ID0ge307XG4gICAgZm9yICh2YXIgY29udGV4dE5hbWUgaW4gY29udGV4dFR5cGVzKSB7XG4gICAgICBtYXNrZWRDb250ZXh0W2NvbnRleHROYW1lXSA9IGNvbnRleHRbY29udGV4dE5hbWVdO1xuICAgIH1cbiAgICByZXR1cm4gbWFza2VkQ29udGV4dDtcbiAgfSxcblxuICAvKipcbiAgICogRmlsdGVycyB0aGUgY29udGV4dCBvYmplY3QgdG8gb25seSBjb250YWluIGtleXMgc3BlY2lmaWVkIGluXG4gICAqIGBjb250ZXh0VHlwZXNgLCBhbmQgYXNzZXJ0cyB0aGF0IHRoZXkgYXJlIHZhbGlkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJuIHs/b2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Byb2Nlc3NDb250ZXh0OiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHZhciBtYXNrZWRDb250ZXh0ID0gdGhpcy5fbWFza0NvbnRleHQoY29udGV4dCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBDb21wb25lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICAgICAgaWYgKENvbXBvbmVudC5jb250ZXh0VHlwZXMpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tDb250ZXh0VHlwZXMoQ29tcG9uZW50LmNvbnRleHRUeXBlcywgbWFza2VkQ29udGV4dCwgJ2NvbnRleHQnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hc2tlZENvbnRleHQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjdXJyZW50Q29udGV4dFxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcHJvY2Vzc0NoaWxkQ29udGV4dDogZnVuY3Rpb24gKGN1cnJlbnRDb250ZXh0KSB7XG4gICAgdmFyIENvbXBvbmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICB2YXIgY2hpbGRDb250ZXh0O1xuXG4gICAgaWYgKGluc3QuZ2V0Q2hpbGRDb250ZXh0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpblByb2Nlc3NpbmdDaGlsZENvbnRleHQoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjaGlsZENvbnRleHQgPSBpbnN0LmdldENoaWxkQ29udGV4dCgpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkVuZFByb2Nlc3NpbmdDaGlsZENvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGRDb250ZXh0ID0gaW5zdC5nZXRDaGlsZENvbnRleHQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2hpbGRDb250ZXh0KSB7XG4gICAgICAhKHR5cGVvZiBDb21wb25lbnQuY2hpbGRDb250ZXh0VHlwZXMgPT09ICdvYmplY3QnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICclcy5nZXRDaGlsZENvbnRleHQoKTogY2hpbGRDb250ZXh0VHlwZXMgbXVzdCBiZSBkZWZpbmVkIGluIG9yZGVyIHRvIHVzZSBnZXRDaGlsZENvbnRleHQoKS4nLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IF9wcm9kSW52YXJpYW50KCcxMDcnLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrQ29udGV4dFR5cGVzKENvbXBvbmVudC5jaGlsZENvbnRleHRUeXBlcywgY2hpbGRDb250ZXh0LCAnY2hpbGQgY29udGV4dCcpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgbmFtZSBpbiBjaGlsZENvbnRleHQpIHtcbiAgICAgICAgIShuYW1lIGluIENvbXBvbmVudC5jaGlsZENvbnRleHRUeXBlcykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMuZ2V0Q2hpbGRDb250ZXh0KCk6IGtleSBcIiVzXCIgaXMgbm90IGRlZmluZWQgaW4gY2hpbGRDb250ZXh0VHlwZXMuJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JywgbmFtZSkgOiBfcHJvZEludmFyaWFudCgnMTA4JywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JywgbmFtZSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2Fzc2lnbih7fSwgY3VycmVudENvbnRleHQsIGNoaWxkQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50Q29udGV4dDtcbiAgfSxcblxuICAvKipcbiAgICogQXNzZXJ0IHRoYXQgdGhlIGNvbnRleHQgdHlwZXMgYXJlIHZhbGlkXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB0eXBlU3BlY3MgTWFwIG9mIGNvbnRleHQgZmllbGQgdG8gYSBSZWFjdFByb3BUeXBlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZXMgUnVudGltZSB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHR5cGUtY2hlY2tlZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gZS5nLiBcInByb3BcIiwgXCJjb250ZXh0XCIsIFwiY2hpbGQgY29udGV4dFwiXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfY2hlY2tDb250ZXh0VHlwZXM6IGZ1bmN0aW9uICh0eXBlU3BlY3MsIHZhbHVlcywgbG9jYXRpb24pIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tSZWFjdFR5cGVTcGVjKHR5cGVTcGVjcywgdmFsdWVzLCBsb2NhdGlvbiwgdGhpcy5nZXROYW1lKCksIG51bGwsIHRoaXMuX2RlYnVnSUQpO1xuICAgIH1cbiAgfSxcblxuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbiAobmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBuZXh0Q29udGV4dCkge1xuICAgIHZhciBwcmV2RWxlbWVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50O1xuICAgIHZhciBwcmV2Q29udGV4dCA9IHRoaXMuX2NvbnRleHQ7XG5cbiAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IG51bGw7XG5cbiAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudCh0cmFuc2FjdGlvbiwgcHJldkVsZW1lbnQsIG5leHRFbGVtZW50LCBwcmV2Q29udGV4dCwgbmV4dENvbnRleHQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJZiBhbnkgb2YgYF9wZW5kaW5nRWxlbWVudGAsIGBfcGVuZGluZ1N0YXRlUXVldWVgLCBvciBgX3BlbmRpbmdGb3JjZVVwZGF0ZWBcbiAgICogaXMgc2V0LCB1cGRhdGUgdGhlIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeTogZnVuY3Rpb24gKHRyYW5zYWN0aW9uKSB7XG4gICAgaWYgKHRoaXMuX3BlbmRpbmdFbGVtZW50ICE9IG51bGwpIHtcbiAgICAgIFJlYWN0UmVjb25jaWxlci5yZWNlaXZlQ29tcG9uZW50KHRoaXMsIHRoaXMuX3BlbmRpbmdFbGVtZW50LCB0cmFuc2FjdGlvbiwgdGhpcy5fY29udGV4dCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSAhPT0gbnVsbCB8fCB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUpIHtcbiAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KHRyYW5zYWN0aW9uLCB0aGlzLl9jdXJyZW50RWxlbWVudCwgdGhpcy5fY3VycmVudEVsZW1lbnQsIHRoaXMuX2NvbnRleHQsIHRoaXMuX2NvbnRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl91cGRhdGVCYXRjaE51bWJlciA9IG51bGw7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGFuIHVwZGF0ZSB0byBhIG1vdW50ZWQgY29tcG9uZW50LiBUaGUgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyBhbmRcbiAgICogc2hvdWxkQ29tcG9uZW50VXBkYXRlIG1ldGhvZHMgYXJlIGNhbGxlZCwgdGhlbiAoYXNzdW1pbmcgdGhlIHVwZGF0ZSBpc24ndFxuICAgKiBza2lwcGVkKSB0aGUgcmVtYWluaW5nIHVwZGF0ZSBsaWZlY3ljbGUgbWV0aG9kcyBhcmUgY2FsbGVkIGFuZCB0aGUgRE9NXG4gICAqIHJlcHJlc2VudGF0aW9uIGlzIHVwZGF0ZWQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHRoaXMgaW1wbGVtZW50cyBSZWFjdCdzIHJlbmRlcmluZyBhbmQgcmVjb25jaWxpYXRpb24gYWxnb3JpdGhtLlxuICAgKiBTb3BoaXN0aWNhdGVkIGNsaWVudHMgbWF5IHdpc2ggdG8gb3ZlcnJpZGUgdGhpcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gcHJldlBhcmVudEVsZW1lbnRcbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRQYXJlbnRFbGVtZW50XG4gICAqIEBpbnRlcm5hbFxuICAgKiBAb3ZlcnJpZGFibGVcbiAgICovXG4gIHVwZGF0ZUNvbXBvbmVudDogZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBwcmV2UGFyZW50RWxlbWVudCwgbmV4dFBhcmVudEVsZW1lbnQsIHByZXZVbm1hc2tlZENvbnRleHQsIG5leHRVbm1hc2tlZENvbnRleHQpIHtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuICAgICEoaW5zdCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdBdHRlbXB0ZWQgdG8gdXBkYXRlIGNvbXBvbmVudCBgJXNgIHRoYXQgaGFzIGFscmVhZHkgYmVlbiB1bm1vdW50ZWQgKG9yIGZhaWxlZCB0byBtb3VudCkuJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiBfcHJvZEludmFyaWFudCgnMTM2JywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiB2b2lkIDA7XG5cbiAgICB2YXIgd2lsbFJlY2VpdmUgPSBmYWxzZTtcbiAgICB2YXIgbmV4dENvbnRleHQ7XG5cbiAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIGNvbnRleHQgaGFzIGNoYW5nZWQgb3Igbm90XG4gICAgaWYgKHRoaXMuX2NvbnRleHQgPT09IG5leHRVbm1hc2tlZENvbnRleHQpIHtcbiAgICAgIG5leHRDb250ZXh0ID0gaW5zdC5jb250ZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0Q29udGV4dCA9IHRoaXMuX3Byb2Nlc3NDb250ZXh0KG5leHRVbm1hc2tlZENvbnRleHQpO1xuICAgICAgd2lsbFJlY2VpdmUgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBwcmV2UHJvcHMgPSBwcmV2UGFyZW50RWxlbWVudC5wcm9wcztcbiAgICB2YXIgbmV4dFByb3BzID0gbmV4dFBhcmVudEVsZW1lbnQucHJvcHM7XG5cbiAgICAvLyBOb3QgYSBzaW1wbGUgc3RhdGUgdXBkYXRlIGJ1dCBhIHByb3BzIHVwZGF0ZVxuICAgIGlmIChwcmV2UGFyZW50RWxlbWVudCAhPT0gbmV4dFBhcmVudEVsZW1lbnQpIHtcbiAgICAgIHdpbGxSZWNlaXZlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBbiB1cGRhdGUgaGVyZSB3aWxsIHNjaGVkdWxlIGFuIHVwZGF0ZSBidXQgaW1tZWRpYXRlbHkgc2V0XG4gICAgLy8gX3BlbmRpbmdTdGF0ZVF1ZXVlIHdoaWNoIHdpbGwgZW5zdXJlIHRoYXQgYW55IHN0YXRlIHVwZGF0ZXMgZ2V0c1xuICAgIC8vIGltbWVkaWF0ZWx5IHJlY29uY2lsZWQgaW5zdGVhZCBvZiB3YWl0aW5nIGZvciB0aGUgbmV4dCBiYXRjaC5cbiAgICBpZiAod2lsbFJlY2VpdmUgJiYgaW5zdC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBtZWFzdXJlTGlmZUN5Y2xlUGVyZihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGluc3QuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KTtcbiAgICAgICAgfSwgdGhpcy5fZGVidWdJRCwgJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc3QuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbmV4dFN0YXRlID0gdGhpcy5fcHJvY2Vzc1BlbmRpbmdTdGF0ZShuZXh0UHJvcHMsIG5leHRDb250ZXh0KTtcbiAgICB2YXIgc2hvdWxkVXBkYXRlID0gdHJ1ZTtcblxuICAgIGlmICghdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlKSB7XG4gICAgICBpZiAoaW5zdC5zaG91bGRDb21wb25lbnRVcGRhdGUpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBzaG91bGRVcGRhdGUgPSBtZWFzdXJlTGlmZUN5Y2xlUGVyZihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5zdC5zaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KTtcbiAgICAgICAgICB9LCB0aGlzLl9kZWJ1Z0lELCAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hvdWxkVXBkYXRlID0gaW5zdC5zaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuX2NvbXBvc2l0ZVR5cGUgPT09IENvbXBvc2l0ZVR5cGVzLlB1cmVDbGFzcykge1xuICAgICAgICAgIHNob3VsZFVwZGF0ZSA9ICFzaGFsbG93RXF1YWwocHJldlByb3BzLCBuZXh0UHJvcHMpIHx8ICFzaGFsbG93RXF1YWwoaW5zdC5zdGF0ZSwgbmV4dFN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhzaG91bGRVcGRhdGUgIT09IHVuZGVmaW5lZCwgJyVzLnNob3VsZENvbXBvbmVudFVwZGF0ZSgpOiBSZXR1cm5lZCB1bmRlZmluZWQgaW5zdGVhZCBvZiBhICcgKyAnYm9vbGVhbiB2YWx1ZS4gTWFrZSBzdXJlIHRvIHJldHVybiB0cnVlIG9yIGZhbHNlLicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHRoaXMuX3VwZGF0ZUJhdGNoTnVtYmVyID0gbnVsbDtcbiAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgPSBmYWxzZTtcbiAgICAgIC8vIFdpbGwgc2V0IGB0aGlzLnByb3BzYCwgYHRoaXMuc3RhdGVgIGFuZCBgdGhpcy5jb250ZXh0YC5cbiAgICAgIHRoaXMuX3BlcmZvcm1Db21wb25lbnRVcGRhdGUobmV4dFBhcmVudEVsZW1lbnQsIG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCwgdHJhbnNhY3Rpb24sIG5leHRVbm1hc2tlZENvbnRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBpdCdzIGRldGVybWluZWQgdGhhdCBhIGNvbXBvbmVudCBzaG91bGQgbm90IHVwZGF0ZSwgd2Ugc3RpbGwgd2FudFxuICAgICAgLy8gdG8gc2V0IHByb3BzIGFuZCBzdGF0ZSBidXQgd2Ugc2hvcnRjdXQgdGhlIHJlc3Qgb2YgdGhlIHVwZGF0ZS5cbiAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbmV4dFBhcmVudEVsZW1lbnQ7XG4gICAgICB0aGlzLl9jb250ZXh0ID0gbmV4dFVubWFza2VkQ29udGV4dDtcbiAgICAgIGluc3QucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgICBpbnN0LnN0YXRlID0gbmV4dFN0YXRlO1xuICAgICAgaW5zdC5jb250ZXh0ID0gbmV4dENvbnRleHQ7XG4gICAgfVxuICB9LFxuXG4gIF9wcm9jZXNzUGVuZGluZ1N0YXRlOiBmdW5jdGlvbiAocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuICAgIHZhciBxdWV1ZSA9IHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlO1xuICAgIHZhciByZXBsYWNlID0gdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZTtcbiAgICB0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlID0gZmFsc2U7XG4gICAgdGhpcy5fcGVuZGluZ1N0YXRlUXVldWUgPSBudWxsO1xuXG4gICAgaWYgKCFxdWV1ZSkge1xuICAgICAgcmV0dXJuIGluc3Quc3RhdGU7XG4gICAgfVxuXG4gICAgaWYgKHJlcGxhY2UgJiYgcXVldWUubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gcXVldWVbMF07XG4gICAgfVxuXG4gICAgdmFyIG5leHRTdGF0ZSA9IF9hc3NpZ24oe30sIHJlcGxhY2UgPyBxdWV1ZVswXSA6IGluc3Quc3RhdGUpO1xuICAgIGZvciAodmFyIGkgPSByZXBsYWNlID8gMSA6IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBhcnRpYWwgPSBxdWV1ZVtpXTtcbiAgICAgIF9hc3NpZ24obmV4dFN0YXRlLCB0eXBlb2YgcGFydGlhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcnRpYWwuY2FsbChpbnN0LCBuZXh0U3RhdGUsIHByb3BzLCBjb250ZXh0KSA6IHBhcnRpYWwpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0U3RhdGU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1lcmdlcyBuZXcgcHJvcHMgYW5kIHN0YXRlLCBub3RpZmllcyBkZWxlZ2F0ZSBtZXRob2RzIG9mIHVwZGF0ZSBhbmRcbiAgICogcGVyZm9ybXMgdXBkYXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgTmV4dCBlbGVtZW50XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHMgTmV4dCBwdWJsaWMgb2JqZWN0IHRvIHNldCBhcyBwcm9wZXJ0aWVzLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRTdGF0ZSBOZXh0IG9iamVjdCB0byBzZXQgYXMgc3RhdGUuXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dENvbnRleHQgTmV4dCBwdWJsaWMgb2JqZWN0IHRvIHNldCBhcyBjb250ZXh0LlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7P29iamVjdH0gdW5tYXNrZWRDb250ZXh0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcGVyZm9ybUNvbXBvbmVudFVwZGF0ZTogZnVuY3Rpb24gKG5leHRFbGVtZW50LCBuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQsIHRyYW5zYWN0aW9uLCB1bm1hc2tlZENvbnRleHQpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG5cbiAgICB2YXIgaGFzQ29tcG9uZW50RGlkVXBkYXRlID0gQm9vbGVhbihpbnN0LmNvbXBvbmVudERpZFVwZGF0ZSk7XG4gICAgdmFyIHByZXZQcm9wcztcbiAgICB2YXIgcHJldlN0YXRlO1xuICAgIHZhciBwcmV2Q29udGV4dDtcbiAgICBpZiAoaGFzQ29tcG9uZW50RGlkVXBkYXRlKSB7XG4gICAgICBwcmV2UHJvcHMgPSBpbnN0LnByb3BzO1xuICAgICAgcHJldlN0YXRlID0gaW5zdC5zdGF0ZTtcbiAgICAgIHByZXZDb250ZXh0ID0gaW5zdC5jb250ZXh0O1xuICAgIH1cblxuICAgIGlmIChpbnN0LmNvbXBvbmVudFdpbGxVcGRhdGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIG1lYXN1cmVMaWZlQ3ljbGVQZXJmKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gaW5zdC5jb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCk7XG4gICAgICAgIH0sIHRoaXMuX2RlYnVnSUQsICdjb21wb25lbnRXaWxsVXBkYXRlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnN0LmNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRFbGVtZW50O1xuICAgIHRoaXMuX2NvbnRleHQgPSB1bm1hc2tlZENvbnRleHQ7XG4gICAgaW5zdC5wcm9wcyA9IG5leHRQcm9wcztcbiAgICBpbnN0LnN0YXRlID0gbmV4dFN0YXRlO1xuICAgIGluc3QuY29udGV4dCA9IG5leHRDb250ZXh0O1xuXG4gICAgdGhpcy5fdXBkYXRlUmVuZGVyZWRDb21wb25lbnQodHJhbnNhY3Rpb24sIHVubWFza2VkQ29udGV4dCk7XG5cbiAgICBpZiAoaGFzQ29tcG9uZW50RGlkVXBkYXRlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBtZWFzdXJlTGlmZUN5Y2xlUGVyZihpbnN0LmNvbXBvbmVudERpZFVwZGF0ZS5iaW5kKGluc3QsIHByZXZQcm9wcywgcHJldlN0YXRlLCBwcmV2Q29udGV4dCksIF90aGlzMi5fZGVidWdJRCwgJ2NvbXBvbmVudERpZFVwZGF0ZScpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoaW5zdC5jb21wb25lbnREaWRVcGRhdGUuYmluZChpbnN0LCBwcmV2UHJvcHMsIHByZXZTdGF0ZSwgcHJldkNvbnRleHQpLCBpbnN0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGwgdGhlIGNvbXBvbmVudCdzIGByZW5kZXJgIG1ldGhvZCBhbmQgdXBkYXRlIHRoZSBET00gYWNjb3JkaW5nbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqL1xuICBfdXBkYXRlUmVuZGVyZWRDb21wb25lbnQ6IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHZhciBwcmV2Q29tcG9uZW50SW5zdGFuY2UgPSB0aGlzLl9yZW5kZXJlZENvbXBvbmVudDtcbiAgICB2YXIgcHJldlJlbmRlcmVkRWxlbWVudCA9IHByZXZDb21wb25lbnRJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQ7XG4gICAgdmFyIG5leHRSZW5kZXJlZEVsZW1lbnQgPSB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQoKTtcblxuICAgIHZhciBkZWJ1Z0lEID0gMDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgZGVidWdJRCA9IHRoaXMuX2RlYnVnSUQ7XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZSZW5kZXJlZEVsZW1lbnQsIG5leHRSZW5kZXJlZEVsZW1lbnQpKSB7XG4gICAgICBSZWFjdFJlY29uY2lsZXIucmVjZWl2ZUNvbXBvbmVudChwcmV2Q29tcG9uZW50SW5zdGFuY2UsIG5leHRSZW5kZXJlZEVsZW1lbnQsIHRyYW5zYWN0aW9uLCB0aGlzLl9wcm9jZXNzQ2hpbGRDb250ZXh0KGNvbnRleHQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9sZEhvc3ROb2RlID0gUmVhY3RSZWNvbmNpbGVyLmdldEhvc3ROb2RlKHByZXZDb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChwcmV2Q29tcG9uZW50SW5zdGFuY2UsIGZhbHNlKTtcblxuICAgICAgdmFyIG5vZGVUeXBlID0gUmVhY3ROb2RlVHlwZXMuZ2V0VHlwZShuZXh0UmVuZGVyZWRFbGVtZW50KTtcbiAgICAgIHRoaXMuX3JlbmRlcmVkTm9kZVR5cGUgPSBub2RlVHlwZTtcbiAgICAgIHZhciBjaGlsZCA9IHRoaXMuX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQobmV4dFJlbmRlcmVkRWxlbWVudCwgbm9kZVR5cGUgIT09IFJlYWN0Tm9kZVR5cGVzLkVNUFRZIC8qIHNob3VsZEhhdmVEZWJ1Z0lEICovXG4gICAgICApO1xuICAgICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSBjaGlsZDtcblxuICAgICAgdmFyIG5leHRNYXJrdXAgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQoY2hpbGQsIHRyYW5zYWN0aW9uLCB0aGlzLl9ob3N0UGFyZW50LCB0aGlzLl9ob3N0Q29udGFpbmVySW5mbywgdGhpcy5fcHJvY2Vzc0NoaWxkQ29udGV4dChjb250ZXh0KSwgZGVidWdJRCk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChkZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgdmFyIGNoaWxkRGVidWdJRHMgPSBjaGlsZC5fZGVidWdJRCAhPT0gMCA/IFtjaGlsZC5fZGVidWdJRF0gOiBbXTtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRDaGlsZHJlbihkZWJ1Z0lELCBjaGlsZERlYnVnSURzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXBsYWNlTm9kZVdpdGhNYXJrdXAob2xkSG9zdE5vZGUsIG5leHRNYXJrdXAsIHByZXZDb21wb25lbnRJbnN0YW5jZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZGVuIGluIHNoYWxsb3cgcmVuZGVyaW5nLlxuICAgKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfcmVwbGFjZU5vZGVXaXRoTWFya3VwOiBmdW5jdGlvbiAob2xkSG9zdE5vZGUsIG5leHRNYXJrdXAsIHByZXZJbnN0YW5jZSkge1xuICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucmVwbGFjZU5vZGVXaXRoTWFya3VwKG9sZEhvc3ROb2RlLCBuZXh0TWFya3VwLCBwcmV2SW5zdGFuY2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50V2l0aG91dE93bmVyT3JDb250ZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICB2YXIgcmVuZGVyZWRFbGVtZW50O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJlbmRlcmVkRWxlbWVudCA9IG1lYXN1cmVMaWZlQ3ljbGVQZXJmKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGluc3QucmVuZGVyKCk7XG4gICAgICB9LCB0aGlzLl9kZWJ1Z0lELCAncmVuZGVyJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbmRlcmVkRWxlbWVudCA9IGluc3QucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIFdlIGFsbG93IGF1dG8tbW9ja3MgdG8gcHJvY2VlZCBhcyBpZiB0aGV5J3JlIHJldHVybmluZyBudWxsLlxuICAgICAgaWYgKHJlbmRlcmVkRWxlbWVudCA9PT0gdW5kZWZpbmVkICYmIGluc3QucmVuZGVyLl9pc01vY2tGdW5jdGlvbikge1xuICAgICAgICAvLyBUaGlzIGlzIHByb2JhYmx5IGJhZCBwcmFjdGljZS4gQ29uc2lkZXIgd2FybmluZyBoZXJlIGFuZFxuICAgICAgICAvLyBkZXByZWNhdGluZyB0aGlzIGNvbnZlbmllbmNlLlxuICAgICAgICByZW5kZXJlZEVsZW1lbnQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZW5kZXJlZEVsZW1lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlbmRlcmVkRWxlbWVudDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyB8fCB0aGlzLl9jb21wb3NpdGVUeXBlICE9PSBDb21wb3NpdGVUeXBlcy5TdGF0ZWxlc3NGdW5jdGlvbmFsKSB7XG4gICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcztcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlbmRlcmVkRWxlbWVudCA9IHRoaXMuX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudFdpdGhvdXRPd25lck9yQ29udGV4dCgpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbmRlcmVkRWxlbWVudCA9IHRoaXMuX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudFdpdGhvdXRPd25lck9yQ29udGV4dCgpO1xuICAgIH1cbiAgICAhKFxuICAgIC8vIFRPRE86IEFuIGBpc1ZhbGlkTm9kZWAgZnVuY3Rpb24gd291bGQgcHJvYmFibHkgYmUgbW9yZSBhcHByb3ByaWF0ZVxuICAgIHJlbmRlcmVkRWxlbWVudCA9PT0gbnVsbCB8fCByZW5kZXJlZEVsZW1lbnQgPT09IGZhbHNlIHx8IFJlYWN0LmlzVmFsaWRFbGVtZW50KHJlbmRlcmVkRWxlbWVudCkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzLnJlbmRlcigpOiBBIHZhbGlkIFJlYWN0IGVsZW1lbnQgKG9yIG51bGwpIG11c3QgYmUgcmV0dXJuZWQuIFlvdSBtYXkgaGF2ZSByZXR1cm5lZCB1bmRlZmluZWQsIGFuIGFycmF5IG9yIHNvbWUgb3RoZXIgaW52YWxpZCBvYmplY3QuJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiBfcHJvZEludmFyaWFudCgnMTA5JywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiB2b2lkIDA7XG5cbiAgICByZXR1cm4gcmVuZGVyZWRFbGVtZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBMYXppbHkgYWxsb2NhdGVzIHRoZSByZWZzIG9iamVjdCBhbmQgc3RvcmVzIGBjb21wb25lbnRgIGFzIGByZWZgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIFJlZmVyZW5jZSBuYW1lLlxuICAgKiBAcGFyYW0ge2NvbXBvbmVudH0gY29tcG9uZW50IENvbXBvbmVudCB0byBzdG9yZSBhcyBgcmVmYC5cbiAgICogQGZpbmFsXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhdHRhY2hSZWY6IGZ1bmN0aW9uIChyZWYsIGNvbXBvbmVudCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgICEoaW5zdCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdTdGF0ZWxlc3MgZnVuY3Rpb24gY29tcG9uZW50cyBjYW5ub3QgaGF2ZSByZWZzLicpIDogX3Byb2RJbnZhcmlhbnQoJzExMCcpIDogdm9pZCAwO1xuICAgIHZhciBwdWJsaWNDb21wb25lbnRJbnN0YW5jZSA9IGNvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudCAmJiBjb21wb25lbnQuZ2V0TmFtZSA/IGNvbXBvbmVudC5nZXROYW1lKCkgOiAnYSBjb21wb25lbnQnO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcocHVibGljQ29tcG9uZW50SW5zdGFuY2UgIT0gbnVsbCB8fCBjb21wb25lbnQuX2NvbXBvc2l0ZVR5cGUgIT09IENvbXBvc2l0ZVR5cGVzLlN0YXRlbGVzc0Z1bmN0aW9uYWwsICdTdGF0ZWxlc3MgZnVuY3Rpb24gY29tcG9uZW50cyBjYW5ub3QgYmUgZ2l2ZW4gcmVmcyAnICsgJyhTZWUgcmVmIFwiJXNcIiBpbiAlcyBjcmVhdGVkIGJ5ICVzKS4gJyArICdBdHRlbXB0cyB0byBhY2Nlc3MgdGhpcyByZWYgd2lsbCBmYWlsLicsIHJlZiwgY29tcG9uZW50TmFtZSwgdGhpcy5nZXROYW1lKCkpIDogdm9pZCAwO1xuICAgIH1cbiAgICB2YXIgcmVmcyA9IGluc3QucmVmcyA9PT0gZW1wdHlPYmplY3QgPyBpbnN0LnJlZnMgPSB7fSA6IGluc3QucmVmcztcbiAgICByZWZzW3JlZl0gPSBwdWJsaWNDb21wb25lbnRJbnN0YW5jZTtcbiAgfSxcblxuICAvKipcbiAgICogRGV0YWNoZXMgYSByZWZlcmVuY2UgbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZiBOYW1lIHRvIGRlcmVmZXJlbmNlLlxuICAgKiBAZmluYWxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGRldGFjaFJlZjogZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciByZWZzID0gdGhpcy5nZXRQdWJsaWNJbnN0YW5jZSgpLnJlZnM7XG4gICAgZGVsZXRlIHJlZnNbcmVmXTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IGEgdGV4dCBkZXNjcmlwdGlvbiBvZiB0aGUgY29tcG9uZW50IHRoYXQgY2FuIGJlIHVzZWQgdG8gaWRlbnRpZnkgaXRcbiAgICogaW4gZXJyb3IgbWVzc2FnZXMuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5hbWUgb3IgbnVsbC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXROYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHR5cGUgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IHRoaXMuX2luc3RhbmNlICYmIHRoaXMuX2luc3RhbmNlLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiB0eXBlLmRpc3BsYXlOYW1lIHx8IGNvbnN0cnVjdG9yICYmIGNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCBjb25zdHJ1Y3RvciAmJiBjb25zdHJ1Y3Rvci5uYW1lIHx8IG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcHVibGljbHkgYWNjZXNzaWJsZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGNvbXBvbmVudCAtIGkuZS4gd2hhdFxuICAgKiBpcyBleHBvc2VkIGJ5IHJlZnMgYW5kIHJldHVybmVkIGJ5IHJlbmRlci4gQ2FuIGJlIG51bGwgZm9yIHN0YXRlbGVzc1xuICAgKiBjb21wb25lbnRzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gdGhlIHB1YmxpYyBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZ2V0UHVibGljSW5zdGFuY2U6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuICAgIGlmICh0aGlzLl9jb21wb3NpdGVUeXBlID09PSBDb21wb3NpdGVUeXBlcy5TdGF0ZWxlc3NGdW5jdGlvbmFsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGluc3Q7XG4gIH0sXG5cbiAgLy8gU3R1YlxuICBfaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDogbnVsbFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RDb21wb3NpdGVDb21wb25lbnQuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4vKiBnbG9iYWxzIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG52YXIgUmVhY3REZWZhdWx0SW5qZWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdERlZmF1bHRJbmplY3Rpb24nKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZSgnLi9SZWFjdE1vdW50Jyk7XG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xudmFyIFJlYWN0VmVyc2lvbiA9IHJlcXVpcmUoJy4vUmVhY3RWZXJzaW9uJyk7XG5cbnZhciBmaW5kRE9NTm9kZSA9IHJlcXVpcmUoJy4vZmluZERPTU5vZGUnKTtcbnZhciBnZXRIb3N0Q29tcG9uZW50RnJvbUNvbXBvc2l0ZSA9IHJlcXVpcmUoJy4vZ2V0SG9zdENvbXBvbmVudEZyb21Db21wb3NpdGUnKTtcbnZhciByZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciA9IHJlcXVpcmUoJy4vcmVuZGVyU3VidHJlZUludG9Db250YWluZXInKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG5SZWFjdERlZmF1bHRJbmplY3Rpb24uaW5qZWN0KCk7XG5cbnZhciBSZWFjdERPTSA9IHtcbiAgZmluZERPTU5vZGU6IGZpbmRET01Ob2RlLFxuICByZW5kZXI6IFJlYWN0TW91bnQucmVuZGVyLFxuICB1bm1vdW50Q29tcG9uZW50QXROb2RlOiBSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRBdE5vZGUsXG4gIHZlcnNpb246IFJlYWN0VmVyc2lvbixcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbiAgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6IFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyxcbiAgdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6IHJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyXG4gIC8qIGVzbGludC1lbmFibGUgY2FtZWxjYXNlICovXG59O1xuXG4vLyBJbmplY3QgdGhlIHJ1bnRpbWUgaW50byBhIGRldnRvb2xzIGdsb2JhbCBob29rIHJlZ2FyZGxlc3Mgb2YgYnJvd3Nlci5cbi8vIEFsbG93cyBmb3IgZGVidWdnaW5nIHdoZW4gdGhlIGhvb2sgaXMgaW5qZWN0ZWQgb24gdGhlIHBhZ2UuXG5pZiAodHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5pbmplY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmluamVjdCh7XG4gICAgQ29tcG9uZW50VHJlZToge1xuICAgICAgZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSxcbiAgICAgIGdldE5vZGVGcm9tSW5zdGFuY2U6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgICAgIC8vIGluc3QgaXMgYW4gaW50ZXJuYWwgaW5zdGFuY2UgKGJ1dCBjb3VsZCBiZSBhIGNvbXBvc2l0ZSlcbiAgICAgICAgaWYgKGluc3QuX3JlbmRlcmVkQ29tcG9uZW50KSB7XG4gICAgICAgICAgaW5zdCA9IGdldEhvc3RDb21wb25lbnRGcm9tQ29tcG9zaXRlKGluc3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnN0KSB7XG4gICAgICAgICAgcmV0dXJuIFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBNb3VudDogUmVhY3RNb3VudCxcbiAgICBSZWNvbmNpbGVyOiBSZWFjdFJlY29uY2lsZXJcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG4gIGlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgd2luZG93LnRvcCA9PT0gd2luZG93LnNlbGYpIHtcbiAgICAvLyBGaXJzdCBjaGVjayBpZiBkZXZ0b29scyBpcyBub3QgaW5zdGFsbGVkXG4gICAgaWYgKHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBJZiB3ZSdyZSBpbiBDaHJvbWUgb3IgRmlyZWZveCwgcHJvdmlkZSBhIGRvd25sb2FkIGxpbmsgaWYgbm90IGluc3RhbGxlZC5cbiAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZScpID4gLTEgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdFZGdlJykgPT09IC0xIHx8IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID4gLTEpIHtcbiAgICAgICAgLy8gRmlyZWZveCBkb2VzIG5vdCBoYXZlIHRoZSBpc3N1ZSB3aXRoIGRldnRvb2xzIGxvYWRlZCBvdmVyIGZpbGU6Ly9cbiAgICAgICAgdmFyIHNob3dGaWxlVXJsTWVzc2FnZSA9IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbC5pbmRleE9mKCdodHRwJykgPT09IC0xICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbiAgICAgICAgY29uc29sZS5kZWJ1ZygnRG93bmxvYWQgdGhlIFJlYWN0IERldlRvb2xzICcgKyAoc2hvd0ZpbGVVcmxNZXNzYWdlID8gJ2FuZCB1c2UgYW4gSFRUUCBzZXJ2ZXIgKGluc3RlYWQgb2YgYSBmaWxlOiBVUkwpICcgOiAnJykgKyAnZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1kZXZ0b29scycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB0ZXN0RnVuYyA9IGZ1bmN0aW9uIHRlc3RGbigpIHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCh0ZXN0RnVuYy5uYW1lIHx8IHRlc3RGdW5jLnRvU3RyaW5nKCkpLmluZGV4T2YoJ3Rlc3RGbicpICE9PSAtMSwgXCJJdCBsb29rcyBsaWtlIHlvdSdyZSB1c2luZyBhIG1pbmlmaWVkIGNvcHkgb2YgdGhlIGRldmVsb3BtZW50IGJ1aWxkIFwiICsgJ29mIFJlYWN0LiBXaGVuIGRlcGxveWluZyBSZWFjdCBhcHBzIHRvIHByb2R1Y3Rpb24sIG1ha2Ugc3VyZSB0byB1c2UgJyArICd0aGUgcHJvZHVjdGlvbiBidWlsZCB3aGljaCBza2lwcyBkZXZlbG9wbWVudCB3YXJuaW5ncyBhbmQgaXMgZmFzdGVyLiAnICsgJ1NlZSBodHRwczovL2ZiLm1lL3JlYWN0LW1pbmlmaWNhdGlvbiBmb3IgbW9yZSBkZXRhaWxzLicpIDogdm9pZCAwO1xuXG4gICAgLy8gSWYgd2UncmUgaW4gSUU4LCBjaGVjayB0byBzZWUgaWYgd2UgYXJlIGluIGNvbXBhdGliaWxpdHkgbW9kZSBhbmQgcHJvdmlkZVxuICAgIC8vIGluZm9ybWF0aW9uIG9uIHByZXZlbnRpbmcgY29tcGF0aWJpbGl0eSBtb2RlXG4gICAgdmFyIGllQ29tcGF0aWJpbGl0eU1vZGUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIDwgODtcblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFpZUNvbXBhdGliaWxpdHlNb2RlLCAnSW50ZXJuZXQgRXhwbG9yZXIgaXMgcnVubmluZyBpbiBjb21wYXRpYmlsaXR5IG1vZGU7IHBsZWFzZSBhZGQgdGhlICcgKyAnZm9sbG93aW5nIHRhZyB0byB5b3VyIEhUTUwgdG8gcHJldmVudCB0aGlzIGZyb20gaGFwcGVuaW5nOiAnICsgJzxtZXRhIGh0dHAtZXF1aXY9XCJYLVVBLUNvbXBhdGlibGVcIiBjb250ZW50PVwiSUU9ZWRnZVwiIC8+JykgOiB2b2lkIDA7XG5cbiAgICB2YXIgZXhwZWN0ZWRGZWF0dXJlcyA9IFtcbiAgICAvLyBzaGltc1xuICAgIEFycmF5LmlzQXJyYXksIEFycmF5LnByb3RvdHlwZS5ldmVyeSwgQXJyYXkucHJvdG90eXBlLmZvckVhY2gsIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLCBBcnJheS5wcm90b3R5cGUubWFwLCBEYXRlLm5vdywgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQsIE9iamVjdC5rZXlzLCBTdHJpbmcucHJvdG90eXBlLnRyaW1dO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHBlY3RlZEZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWV4cGVjdGVkRmVhdHVyZXNbaV0pIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdPbmUgb3IgbW9yZSBFUzUgc2hpbXMgZXhwZWN0ZWQgYnkgUmVhY3QgYXJlIG5vdCBhdmFpbGFibGU6ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLXBvbHlmaWxscycpIDogdm9pZCAwO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluc3RydW1lbnRhdGlvbicpO1xuICB2YXIgUmVhY3RET01Vbmtub3duUHJvcGVydHlIb29rID0gcmVxdWlyZSgnLi9SZWFjdERPTVVua25vd25Qcm9wZXJ0eUhvb2snKTtcbiAgdmFyIFJlYWN0RE9NTnVsbElucHV0VmFsdWVQcm9wSG9vayA9IHJlcXVpcmUoJy4vUmVhY3RET01OdWxsSW5wdXRWYWx1ZVByb3BIb29rJyk7XG4gIHZhciBSZWFjdERPTUludmFsaWRBUklBSG9vayA9IHJlcXVpcmUoJy4vUmVhY3RET01JbnZhbGlkQVJJQUhvb2snKTtcblxuICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wuYWRkSG9vayhSZWFjdERPTVVua25vd25Qcm9wZXJ0eUhvb2spO1xuICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wuYWRkSG9vayhSZWFjdERPTU51bGxJbnB1dFZhbHVlUHJvcEhvb2spO1xuICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wuYWRkSG9vayhSZWFjdERPTUludmFsaWRBUklBSG9vayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET007XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuLyogZ2xvYmFsIGhhc093blByb3BlcnR5OnRydWUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpLFxuICAgIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBBdXRvRm9jdXNVdGlscyA9IHJlcXVpcmUoJy4vQXV0b0ZvY3VzVXRpbHMnKTtcbnZhciBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0NTU1Byb3BlcnR5T3BlcmF0aW9ucycpO1xudmFyIERPTUxhenlUcmVlID0gcmVxdWlyZSgnLi9ET01MYXp5VHJlZScpO1xudmFyIERPTU5hbWVzcGFjZXMgPSByZXF1aXJlKCcuL0RPTU5hbWVzcGFjZXMnKTtcbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHknKTtcbnZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5T3BlcmF0aW9ucycpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpbkh1YicpO1xudmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luUmVnaXN0cnknKTtcbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCcuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlcicpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50RmxhZ3MgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50RmxhZ3MnKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xudmFyIFJlYWN0RE9NSW5wdXQgPSByZXF1aXJlKCcuL1JlYWN0RE9NSW5wdXQnKTtcbnZhciBSZWFjdERPTU9wdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RET01PcHRpb24nKTtcbnZhciBSZWFjdERPTVNlbGVjdCA9IHJlcXVpcmUoJy4vUmVhY3RET01TZWxlY3QnKTtcbnZhciBSZWFjdERPTVRleHRhcmVhID0gcmVxdWlyZSgnLi9SZWFjdERPTVRleHRhcmVhJyk7XG52YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG52YXIgUmVhY3RNdWx0aUNoaWxkID0gcmVxdWlyZSgnLi9SZWFjdE11bHRpQ2hpbGQnKTtcbnZhciBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uJyk7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciA9IHJlcXVpcmUoJy4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgaXNFdmVudFN1cHBvcnRlZCA9IHJlcXVpcmUoJy4vaXNFdmVudFN1cHBvcnRlZCcpO1xudmFyIHNoYWxsb3dFcXVhbCA9IHJlcXVpcmUoJ2ZianMvbGliL3NoYWxsb3dFcXVhbCcpO1xudmFyIGlucHV0VmFsdWVUcmFja2luZyA9IHJlcXVpcmUoJy4vaW5wdXRWYWx1ZVRyYWNraW5nJyk7XG52YXIgdmFsaWRhdGVET01OZXN0aW5nID0gcmVxdWlyZSgnLi92YWxpZGF0ZURPTU5lc3RpbmcnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgRmxhZ3MgPSBSZWFjdERPTUNvbXBvbmVudEZsYWdzO1xudmFyIGRlbGV0ZUxpc3RlbmVyID0gRXZlbnRQbHVnaW5IdWIuZGVsZXRlTGlzdGVuZXI7XG52YXIgZ2V0Tm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlO1xudmFyIGxpc3RlblRvID0gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmxpc3RlblRvO1xudmFyIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlcztcblxuLy8gRm9yIHF1aWNrbHkgbWF0Y2hpbmcgY2hpbGRyZW4gdHlwZSwgdG8gdGVzdCBpZiBjYW4gYmUgdHJlYXRlZCBhcyBjb250ZW50LlxudmFyIENPTlRFTlRfVFlQRVMgPSB7IHN0cmluZzogdHJ1ZSwgbnVtYmVyOiB0cnVlIH07XG5cbnZhciBTVFlMRSA9ICdzdHlsZSc7XG52YXIgSFRNTCA9ICdfX2h0bWwnO1xudmFyIFJFU0VSVkVEX1BST1BTID0ge1xuICBjaGlsZHJlbjogbnVsbCxcbiAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IG51bGwsXG4gIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZzogbnVsbFxufTtcblxuLy8gTm9kZSB0eXBlIGZvciBkb2N1bWVudCBmcmFnbWVudHMgKE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSkuXG52YXIgRE9DX0ZSQUdNRU5UX1RZUEUgPSAxMTtcblxuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGludGVybmFsSW5zdGFuY2UpIHtcbiAgaWYgKGludGVybmFsSW5zdGFuY2UpIHtcbiAgICB2YXIgb3duZXIgPSBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudC5fb3duZXIgfHwgbnVsbDtcbiAgICBpZiAob3duZXIpIHtcbiAgICAgIHZhciBuYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICcgVGhpcyBET00gbm9kZSB3YXMgcmVuZGVyZWQgYnkgYCcgKyBuYW1lICsgJ2AuJztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5mdW5jdGlvbiBmcmllbmRseVN0cmluZ2lmeShvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgcmV0dXJuICdbJyArIG9iai5tYXAoZnJpZW5kbHlTdHJpbmdpZnkpLmpvaW4oJywgJykgKyAnXSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYWlycyA9IFtdO1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgIHZhciBrZXlFc2NhcGVkID0gL15bYS16JF9dW1xcdyRfXSokL2kudGVzdChrZXkpID8ga2V5IDogSlNPTi5zdHJpbmdpZnkoa2V5KTtcbiAgICAgICAgICBwYWlycy5wdXNoKGtleUVzY2FwZWQgKyAnOiAnICsgZnJpZW5kbHlTdHJpbmdpZnkob2JqW2tleV0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuICd7JyArIHBhaXJzLmpvaW4oJywgJykgKyAnfSc7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiAnW2Z1bmN0aW9uIG9iamVjdF0nO1xuICB9XG4gIC8vIERpZmZlcnMgZnJvbSBKU09OLnN0cmluZ2lmeSBpbiB0aGF0IHVuZGVmaW5lZCBiZWNhdXNlIHVuZGVmaW5lZCBhbmQgdGhhdFxuICAvLyBpbmYgYW5kIG5hbiBkb24ndCBiZWNvbWUgbnVsbFxuICByZXR1cm4gU3RyaW5nKG9iaik7XG59XG5cbnZhciBzdHlsZU11dGF0aW9uV2FybmluZyA9IHt9O1xuXG5mdW5jdGlvbiBjaGVja0FuZFdhcm5Gb3JNdXRhdGVkU3R5bGUoc3R5bGUxLCBzdHlsZTIsIGNvbXBvbmVudCkge1xuICBpZiAoc3R5bGUxID09IG51bGwgfHwgc3R5bGUyID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHNoYWxsb3dFcXVhbChzdHlsZTEsIHN0eWxlMikpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudC5fdGFnO1xuICB2YXIgb3duZXIgPSBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgdmFyIG93bmVyTmFtZTtcbiAgaWYgKG93bmVyKSB7XG4gICAgb3duZXJOYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICB9XG5cbiAgdmFyIGhhc2ggPSBvd25lck5hbWUgKyAnfCcgKyBjb21wb25lbnROYW1lO1xuXG4gIGlmIChzdHlsZU11dGF0aW9uV2FybmluZy5oYXNPd25Qcm9wZXJ0eShoYXNoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN0eWxlTXV0YXRpb25XYXJuaW5nW2hhc2hdID0gdHJ1ZTtcblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2Alc2Agd2FzIHBhc3NlZCBhIHN0eWxlIG9iamVjdCB0aGF0IGhhcyBwcmV2aW91c2x5IGJlZW4gbXV0YXRlZC4gJyArICdNdXRhdGluZyBgc3R5bGVgIGlzIGRlcHJlY2F0ZWQuIENvbnNpZGVyIGNsb25pbmcgaXQgYmVmb3JlaGFuZC4gQ2hlY2sgJyArICd0aGUgYHJlbmRlcmAgJXMuIFByZXZpb3VzIHN0eWxlOiAlcy4gTXV0YXRlZCBzdHlsZTogJXMuJywgY29tcG9uZW50TmFtZSwgb3duZXIgPyAnb2YgYCcgKyBvd25lck5hbWUgKyAnYCcgOiAndXNpbmcgPCcgKyBjb21wb25lbnROYW1lICsgJz4nLCBmcmllbmRseVN0cmluZ2lmeShzdHlsZTEpLCBmcmllbmRseVN0cmluZ2lmeShzdHlsZTIpKSA6IHZvaWQgMDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gY29tcG9uZW50XG4gKiBAcGFyYW0gez9vYmplY3R9IHByb3BzXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFZhbGlkUHJvcHMoY29tcG9uZW50LCBwcm9wcykge1xuICBpZiAoIXByb3BzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIE5vdGUgdGhlIHVzZSBvZiBgPT1gIHdoaWNoIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWQuXG4gIGlmICh2b2lkRWxlbWVudFRhZ3NbY29tcG9uZW50Ll90YWddKSB7XG4gICAgIShwcm9wcy5jaGlsZHJlbiA9PSBudWxsICYmIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzIGlzIGEgdm9pZCBlbGVtZW50IHRhZyBhbmQgbXVzdCBuZWl0aGVyIGhhdmUgYGNoaWxkcmVuYCBub3IgdXNlIGBkYW5nZXJvdXNseVNldElubmVySFRNTGAuJXMnLCBjb21wb25lbnQuX3RhZywgY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXIgPyAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mICcgKyBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lci5nZXROYW1lKCkgKyAnLicgOiAnJykgOiBfcHJvZEludmFyaWFudCgnMTM3JywgY29tcG9uZW50Ll90YWcsIGNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQuX293bmVyID8gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiAnICsgY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXIuZ2V0TmFtZSgpICsgJy4nIDogJycpIDogdm9pZCAwO1xuICB9XG4gIGlmIChwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAhPSBudWxsKSB7XG4gICAgIShwcm9wcy5jaGlsZHJlbiA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW4gb25seSBzZXQgb25lIG9mIGBjaGlsZHJlbmAgb3IgYHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4nKSA6IF9wcm9kSW52YXJpYW50KCc2MCcpIDogdm9pZCAwO1xuICAgICEodHlwZW9mIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09PSAnb2JqZWN0JyAmJiBIVE1MIGluIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgIG11c3QgYmUgaW4gdGhlIGZvcm0gYHtfX2h0bWw6IC4uLn1gLiBQbGVhc2UgdmlzaXQgaHR0cHM6Ly9mYi5tZS9yZWFjdC1pbnZhcmlhbnQtZGFuZ2Vyb3VzbHktc2V0LWlubmVyLWh0bWwgZm9yIG1vcmUgaW5mb3JtYXRpb24uJykgOiBfcHJvZEludmFyaWFudCgnNjEnKSA6IHZvaWQgMDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHByb3BzLmlubmVySFRNTCA9PSBudWxsLCAnRGlyZWN0bHkgc2V0dGluZyBwcm9wZXJ0eSBgaW5uZXJIVE1MYCBpcyBub3QgcGVybWl0dGVkLiAnICsgJ0ZvciBtb3JlIGluZm9ybWF0aW9uLCBsb29rdXAgZG9jdW1lbnRhdGlvbiBvbiBgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHByb3BzLnN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyB8fCAhcHJvcHMuY29udGVudEVkaXRhYmxlIHx8IHByb3BzLmNoaWxkcmVuID09IG51bGwsICdBIGNvbXBvbmVudCBpcyBgY29udGVudEVkaXRhYmxlYCBhbmQgY29udGFpbnMgYGNoaWxkcmVuYCBtYW5hZ2VkIGJ5ICcgKyAnUmVhY3QuIEl0IGlzIG5vdyB5b3VyIHJlc3BvbnNpYmlsaXR5IHRvIGd1YXJhbnRlZSB0aGF0IG5vbmUgb2YgJyArICd0aG9zZSBub2RlcyBhcmUgdW5leHBlY3RlZGx5IG1vZGlmaWVkIG9yIGR1cGxpY2F0ZWQuIFRoaXMgaXMgJyArICdwcm9iYWJseSBub3QgaW50ZW50aW9uYWwuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcocHJvcHMub25Gb2N1c0luID09IG51bGwgJiYgcHJvcHMub25Gb2N1c091dCA9PSBudWxsLCAnUmVhY3QgdXNlcyBvbkZvY3VzIGFuZCBvbkJsdXIgaW5zdGVhZCBvZiBvbkZvY3VzSW4gYW5kIG9uRm9jdXNPdXQuICcgKyAnQWxsIFJlYWN0IGV2ZW50cyBhcmUgbm9ybWFsaXplZCB0byBidWJibGUsIHNvIG9uRm9jdXNJbiBhbmQgb25Gb2N1c091dCAnICsgJ2FyZSBub3QgbmVlZGVkL3N1cHBvcnRlZCBieSBSZWFjdC4nKSA6IHZvaWQgMDtcbiAgfVxuICAhKHByb3BzLnN0eWxlID09IG51bGwgfHwgdHlwZW9mIHByb3BzLnN0eWxlID09PSAnb2JqZWN0JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVGhlIGBzdHlsZWAgcHJvcCBleHBlY3RzIGEgbWFwcGluZyBmcm9tIHN0eWxlIHByb3BlcnRpZXMgdG8gdmFsdWVzLCBub3QgYSBzdHJpbmcuIEZvciBleGFtcGxlLCBzdHlsZT17e21hcmdpblJpZ2h0OiBzcGFjaW5nICsgXFwnZW1cXCd9fSB3aGVuIHVzaW5nIEpTWC4lcycsIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShjb21wb25lbnQpKSA6IF9wcm9kSW52YXJpYW50KCc2MicsIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShjb21wb25lbnQpKSA6IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gZW5xdWV1ZVB1dExpc3RlbmVyKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyLCB0cmFuc2FjdGlvbikge1xuICBpZiAodHJhbnNhY3Rpb24gaW5zdGFuY2VvZiBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gSUU4IGhhcyBubyBBUEkgZm9yIGV2ZW50IGNhcHR1cmluZyBhbmQgdGhlIGBvblNjcm9sbGAgZXZlbnQgZG9lc24ndFxuICAgIC8vIGJ1YmJsZS5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhyZWdpc3RyYXRpb25OYW1lICE9PSAnb25TY3JvbGwnIHx8IGlzRXZlbnRTdXBwb3J0ZWQoJ3Njcm9sbCcsIHRydWUpLCBcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgdGhlIGBvblNjcm9sbGAgZXZlbnRcIikgOiB2b2lkIDA7XG4gIH1cbiAgdmFyIGNvbnRhaW5lckluZm8gPSBpbnN0Ll9ob3N0Q29udGFpbmVySW5mbztcbiAgdmFyIGlzRG9jdW1lbnRGcmFnbWVudCA9IGNvbnRhaW5lckluZm8uX25vZGUgJiYgY29udGFpbmVySW5mby5fbm9kZS5ub2RlVHlwZSA9PT0gRE9DX0ZSQUdNRU5UX1RZUEU7XG4gIHZhciBkb2MgPSBpc0RvY3VtZW50RnJhZ21lbnQgPyBjb250YWluZXJJbmZvLl9ub2RlIDogY29udGFpbmVySW5mby5fb3duZXJEb2N1bWVudDtcbiAgbGlzdGVuVG8ocmVnaXN0cmF0aW9uTmFtZSwgZG9jKTtcbiAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShwdXRMaXN0ZW5lciwge1xuICAgIGluc3Q6IGluc3QsXG4gICAgcmVnaXN0cmF0aW9uTmFtZTogcmVnaXN0cmF0aW9uTmFtZSxcbiAgICBsaXN0ZW5lcjogbGlzdGVuZXJcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHB1dExpc3RlbmVyKCkge1xuICB2YXIgbGlzdGVuZXJUb1B1dCA9IHRoaXM7XG4gIEV2ZW50UGx1Z2luSHViLnB1dExpc3RlbmVyKGxpc3RlbmVyVG9QdXQuaW5zdCwgbGlzdGVuZXJUb1B1dC5yZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lclRvUHV0Lmxpc3RlbmVyKTtcbn1cblxuZnVuY3Rpb24gaW5wdXRQb3N0TW91bnQoKSB7XG4gIHZhciBpbnN0ID0gdGhpcztcbiAgUmVhY3RET01JbnB1dC5wb3N0TW91bnRXcmFwcGVyKGluc3QpO1xufVxuXG5mdW5jdGlvbiB0ZXh0YXJlYVBvc3RNb3VudCgpIHtcbiAgdmFyIGluc3QgPSB0aGlzO1xuICBSZWFjdERPTVRleHRhcmVhLnBvc3RNb3VudFdyYXBwZXIoaW5zdCk7XG59XG5cbmZ1bmN0aW9uIG9wdGlvblBvc3RNb3VudCgpIHtcbiAgdmFyIGluc3QgPSB0aGlzO1xuICBSZWFjdERPTU9wdGlvbi5wb3N0TW91bnRXcmFwcGVyKGluc3QpO1xufVxuXG52YXIgc2V0QW5kVmFsaWRhdGVDb250ZW50Q2hpbGREZXYgPSBlbXB0eUZ1bmN0aW9uO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc2V0QW5kVmFsaWRhdGVDb250ZW50Q2hpbGREZXYgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICAgIHZhciBoYXNFeGlzdGluZ0NvbnRlbnQgPSB0aGlzLl9jb250ZW50RGVidWdJRCAhPSBudWxsO1xuICAgIHZhciBkZWJ1Z0lEID0gdGhpcy5fZGVidWdJRDtcbiAgICAvLyBUaGlzIElEIHJlcHJlc2VudHMgdGhlIGlubGluZWQgY2hpbGQgdGhhdCBoYXMgbm8gYmFja2luZyBpbnN0YW5jZTpcbiAgICB2YXIgY29udGVudERlYnVnSUQgPSAtZGVidWdJRDtcblxuICAgIGlmIChjb250ZW50ID09IG51bGwpIHtcbiAgICAgIGlmIChoYXNFeGlzdGluZ0NvbnRlbnQpIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uVW5tb3VudENvbXBvbmVudCh0aGlzLl9jb250ZW50RGVidWdJRCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9jb250ZW50RGVidWdJRCA9IG51bGw7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFsaWRhdGVET01OZXN0aW5nKG51bGwsIFN0cmluZyhjb250ZW50KSwgdGhpcywgdGhpcy5fYW5jZXN0b3JJbmZvKTtcbiAgICB0aGlzLl9jb250ZW50RGVidWdJRCA9IGNvbnRlbnREZWJ1Z0lEO1xuICAgIGlmIChoYXNFeGlzdGluZ0NvbnRlbnQpIHtcbiAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZm9yZVVwZGF0ZUNvbXBvbmVudChjb250ZW50RGVidWdJRCwgY29udGVudCk7XG4gICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25VcGRhdGVDb21wb25lbnQoY29udGVudERlYnVnSUQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWZvcmVNb3VudENvbXBvbmVudChjb250ZW50RGVidWdJRCwgY29udGVudCwgZGVidWdJRCk7XG4gICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Nb3VudENvbXBvbmVudChjb250ZW50RGVidWdJRCk7XG4gICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRDaGlsZHJlbihkZWJ1Z0lELCBbY29udGVudERlYnVnSURdKTtcbiAgICB9XG4gIH07XG59XG5cbi8vIFRoZXJlIGFyZSBzbyBtYW55IG1lZGlhIGV2ZW50cywgaXQgbWFrZXMgc2Vuc2UgdG8ganVzdFxuLy8gbWFpbnRhaW4gYSBsaXN0IHJhdGhlciB0aGFuIGNyZWF0ZSBhIGB0cmFwQnViYmxlZEV2ZW50YCBmb3IgZWFjaFxudmFyIG1lZGlhRXZlbnRzID0ge1xuICB0b3BBYm9ydDogJ2Fib3J0JyxcbiAgdG9wQ2FuUGxheTogJ2NhbnBsYXknLFxuICB0b3BDYW5QbGF5VGhyb3VnaDogJ2NhbnBsYXl0aHJvdWdoJyxcbiAgdG9wRHVyYXRpb25DaGFuZ2U6ICdkdXJhdGlvbmNoYW5nZScsXG4gIHRvcEVtcHRpZWQ6ICdlbXB0aWVkJyxcbiAgdG9wRW5jcnlwdGVkOiAnZW5jcnlwdGVkJyxcbiAgdG9wRW5kZWQ6ICdlbmRlZCcsXG4gIHRvcEVycm9yOiAnZXJyb3InLFxuICB0b3BMb2FkZWREYXRhOiAnbG9hZGVkZGF0YScsXG4gIHRvcExvYWRlZE1ldGFkYXRhOiAnbG9hZGVkbWV0YWRhdGEnLFxuICB0b3BMb2FkU3RhcnQ6ICdsb2Fkc3RhcnQnLFxuICB0b3BQYXVzZTogJ3BhdXNlJyxcbiAgdG9wUGxheTogJ3BsYXknLFxuICB0b3BQbGF5aW5nOiAncGxheWluZycsXG4gIHRvcFByb2dyZXNzOiAncHJvZ3Jlc3MnLFxuICB0b3BSYXRlQ2hhbmdlOiAncmF0ZWNoYW5nZScsXG4gIHRvcFNlZWtlZDogJ3NlZWtlZCcsXG4gIHRvcFNlZWtpbmc6ICdzZWVraW5nJyxcbiAgdG9wU3RhbGxlZDogJ3N0YWxsZWQnLFxuICB0b3BTdXNwZW5kOiAnc3VzcGVuZCcsXG4gIHRvcFRpbWVVcGRhdGU6ICd0aW1ldXBkYXRlJyxcbiAgdG9wVm9sdW1lQ2hhbmdlOiAndm9sdW1lY2hhbmdlJyxcbiAgdG9wV2FpdGluZzogJ3dhaXRpbmcnXG59O1xuXG5mdW5jdGlvbiB0cmFja0lucHV0VmFsdWUoKSB7XG4gIGlucHV0VmFsdWVUcmFja2luZy50cmFjayh0aGlzKTtcbn1cblxuZnVuY3Rpb24gdHJhcEJ1YmJsZWRFdmVudHNMb2NhbCgpIHtcbiAgdmFyIGluc3QgPSB0aGlzO1xuICAvLyBJZiBhIGNvbXBvbmVudCByZW5kZXJzIHRvIG51bGwgb3IgaWYgYW5vdGhlciBjb21wb25lbnQgZmF0YWxzIGFuZCBjYXVzZXNcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSB0cmVlIHRvIGJlIGNvcnJ1cHRlZCwgYG5vZGVgIGhlcmUgY2FuIGJlIG51bGwuXG4gICFpbnN0Ll9yb290Tm9kZUlEID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ011c3QgYmUgbW91bnRlZCB0byB0cmFwIGV2ZW50cycpIDogX3Byb2RJbnZhcmlhbnQoJzYzJykgOiB2b2lkIDA7XG4gIHZhciBub2RlID0gZ2V0Tm9kZShpbnN0KTtcbiAgIW5vZGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndHJhcEJ1YmJsZWRFdmVudCguLi4pOiBSZXF1aXJlcyBub2RlIHRvIGJlIHJlbmRlcmVkLicpIDogX3Byb2RJbnZhcmlhbnQoJzY0JykgOiB2b2lkIDA7XG5cbiAgc3dpdGNoIChpbnN0Ll90YWcpIHtcbiAgICBjYXNlICdpZnJhbWUnOlxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICBpbnN0Ll93cmFwcGVyU3RhdGUubGlzdGVuZXJzID0gW1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KCd0b3BMb2FkJywgJ2xvYWQnLCBub2RlKV07XG4gICAgICBicmVhaztcbiAgICBjYXNlICd2aWRlbyc6XG4gICAgY2FzZSAnYXVkaW8nOlxuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycyA9IFtdO1xuICAgICAgLy8gQ3JlYXRlIGxpc3RlbmVyIGZvciBlYWNoIG1lZGlhIGV2ZW50XG4gICAgICBmb3IgKHZhciBldmVudCBpbiBtZWRpYUV2ZW50cykge1xuICAgICAgICBpZiAobWVkaWFFdmVudHMuaGFzT3duUHJvcGVydHkoZXZlbnQpKSB7XG4gICAgICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycy5wdXNoKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KGV2ZW50LCBtZWRpYUV2ZW50c1tldmVudF0sIG5vZGUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc291cmNlJzpcbiAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnMgPSBbUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoJ3RvcEVycm9yJywgJ2Vycm9yJywgbm9kZSldO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaW1nJzpcbiAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnMgPSBbUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoJ3RvcEVycm9yJywgJ2Vycm9yJywgbm9kZSksIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KCd0b3BMb2FkJywgJ2xvYWQnLCBub2RlKV07XG4gICAgICBicmVhaztcbiAgICBjYXNlICdmb3JtJzpcbiAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnMgPSBbUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoJ3RvcFJlc2V0JywgJ3Jlc2V0Jywgbm9kZSksIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KCd0b3BTdWJtaXQnLCAnc3VibWl0Jywgbm9kZSldO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaW5wdXQnOlxuICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycyA9IFtSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudCgndG9wSW52YWxpZCcsICdpbnZhbGlkJywgbm9kZSldO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9zdFVwZGF0ZVNlbGVjdFdyYXBwZXIoKSB7XG4gIFJlYWN0RE9NU2VsZWN0LnBvc3RVcGRhdGVXcmFwcGVyKHRoaXMpO1xufVxuXG4vLyBGb3IgSFRNTCwgY2VydGFpbiB0YWdzIHNob3VsZCBvbWl0IHRoZWlyIGNsb3NlIHRhZy4gV2Uga2VlcCBhIHdoaXRlbGlzdCBmb3Jcbi8vIHRob3NlIHNwZWNpYWwtY2FzZSB0YWdzLlxuXG52YXIgb21pdHRlZENsb3NlVGFncyA9IHtcbiAgYXJlYTogdHJ1ZSxcbiAgYmFzZTogdHJ1ZSxcbiAgYnI6IHRydWUsXG4gIGNvbDogdHJ1ZSxcbiAgZW1iZWQ6IHRydWUsXG4gIGhyOiB0cnVlLFxuICBpbWc6IHRydWUsXG4gIGlucHV0OiB0cnVlLFxuICBrZXlnZW46IHRydWUsXG4gIGxpbms6IHRydWUsXG4gIG1ldGE6IHRydWUsXG4gIHBhcmFtOiB0cnVlLFxuICBzb3VyY2U6IHRydWUsXG4gIHRyYWNrOiB0cnVlLFxuICB3YnI6IHRydWVcbiAgLy8gTk9URTogbWVudWl0ZW0ncyBjbG9zZSB0YWcgc2hvdWxkIGJlIG9taXR0ZWQsIGJ1dCB0aGF0IGNhdXNlcyBwcm9ibGVtcy5cbn07XG5cbnZhciBuZXdsaW5lRWF0aW5nVGFncyA9IHtcbiAgbGlzdGluZzogdHJ1ZSxcbiAgcHJlOiB0cnVlLFxuICB0ZXh0YXJlYTogdHJ1ZVxufTtcblxuLy8gRm9yIEhUTUwsIGNlcnRhaW4gdGFncyBjYW5ub3QgaGF2ZSBjaGlsZHJlbi4gVGhpcyBoYXMgdGhlIHNhbWUgcHVycG9zZSBhc1xuLy8gYG9taXR0ZWRDbG9zZVRhZ3NgIGV4Y2VwdCB0aGF0IGBtZW51aXRlbWAgc2hvdWxkIHN0aWxsIGhhdmUgaXRzIGNsb3NpbmcgdGFnLlxuXG52YXIgdm9pZEVsZW1lbnRUYWdzID0gX2Fzc2lnbih7XG4gIG1lbnVpdGVtOiB0cnVlXG59LCBvbWl0dGVkQ2xvc2VUYWdzKTtcblxuLy8gV2UgYWNjZXB0IGFueSB0YWcgdG8gYmUgcmVuZGVyZWQgYnV0IHNpbmNlIHRoaXMgZ2V0cyBpbmplY3RlZCBpbnRvIGFyYml0cmFyeVxuLy8gSFRNTCwgd2Ugd2FudCB0byBtYWtlIHN1cmUgdGhhdCBpdCdzIGEgc2FmZSB0YWcuXG4vLyBodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMteG1sLyNOVC1OYW1lXG5cbnZhciBWQUxJRF9UQUdfUkVHRVggPSAvXlthLXpBLVpdW2EtekEtWjpfXFwuXFwtXFxkXSokLzsgLy8gU2ltcGxpZmllZCBzdWJzZXRcbnZhciB2YWxpZGF0ZWRUYWdDYWNoZSA9IHt9O1xudmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGFuZ2Vyb3VzVGFnKHRhZykge1xuICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwodmFsaWRhdGVkVGFnQ2FjaGUsIHRhZykpIHtcbiAgICAhVkFMSURfVEFHX1JFR0VYLnRlc3QodGFnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdJbnZhbGlkIHRhZzogJXMnLCB0YWcpIDogX3Byb2RJbnZhcmlhbnQoJzY1JywgdGFnKSA6IHZvaWQgMDtcbiAgICB2YWxpZGF0ZWRUYWdDYWNoZVt0YWddID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0N1c3RvbUNvbXBvbmVudCh0YWdOYW1lLCBwcm9wcykge1xuICByZXR1cm4gdGFnTmFtZS5pbmRleE9mKCctJykgPj0gMCB8fCBwcm9wcy5pcyAhPSBudWxsO1xufVxuXG52YXIgZ2xvYmFsSWRDb3VudGVyID0gMTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFJlYWN0IGNsYXNzIHRoYXQgaXMgaWRlbXBvdGVudCBhbmQgY2FwYWJsZSBvZiBjb250YWluaW5nIG90aGVyXG4gKiBSZWFjdCBjb21wb25lbnRzLiBJdCBhY2NlcHRzIGV2ZW50IGxpc3RlbmVycyBhbmQgRE9NIHByb3BlcnRpZXMgdGhhdCBhcmVcbiAqIHZhbGlkIGFjY29yZGluZyB0byBgRE9NUHJvcGVydHlgLlxuICpcbiAqICAtIEV2ZW50IGxpc3RlbmVyczogYG9uQ2xpY2tgLCBgb25Nb3VzZURvd25gLCBldGMuXG4gKiAgLSBET00gcHJvcGVydGllczogYGNsYXNzTmFtZWAsIGBuYW1lYCwgYHRpdGxlYCwgZXRjLlxuICpcbiAqIFRoZSBgc3R5bGVgIHByb3BlcnR5IGZ1bmN0aW9ucyBkaWZmZXJlbnRseSBmcm9tIHRoZSBET00gQVBJLiBJdCBhY2NlcHRzIGFuXG4gKiBvYmplY3QgbWFwcGluZyBvZiBzdHlsZSBwcm9wZXJ0aWVzIHRvIHZhbHVlcy5cbiAqXG4gKiBAY29uc3RydWN0b3IgUmVhY3RET01Db21wb25lbnRcbiAqIEBleHRlbmRzIFJlYWN0TXVsdGlDaGlsZFxuICovXG5mdW5jdGlvbiBSZWFjdERPTUNvbXBvbmVudChlbGVtZW50KSB7XG4gIHZhciB0YWcgPSBlbGVtZW50LnR5cGU7XG4gIHZhbGlkYXRlRGFuZ2Vyb3VzVGFnKHRhZyk7XG4gIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gZWxlbWVudDtcbiAgdGhpcy5fdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIHRoaXMuX25hbWVzcGFjZVVSSSA9IG51bGw7XG4gIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBudWxsO1xuICB0aGlzLl9wcmV2aW91c1N0eWxlID0gbnVsbDtcbiAgdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBudWxsO1xuICB0aGlzLl9ob3N0Tm9kZSA9IG51bGw7XG4gIHRoaXMuX2hvc3RQYXJlbnQgPSBudWxsO1xuICB0aGlzLl9yb290Tm9kZUlEID0gMDtcbiAgdGhpcy5fZG9tSUQgPSAwO1xuICB0aGlzLl9ob3N0Q29udGFpbmVySW5mbyA9IG51bGw7XG4gIHRoaXMuX3dyYXBwZXJTdGF0ZSA9IG51bGw7XG4gIHRoaXMuX3RvcExldmVsV3JhcHBlciA9IG51bGw7XG4gIHRoaXMuX2ZsYWdzID0gMDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB0aGlzLl9hbmNlc3RvckluZm8gPSBudWxsO1xuICAgIHNldEFuZFZhbGlkYXRlQ29udGVudENoaWxkRGV2LmNhbGwodGhpcywgbnVsbCk7XG4gIH1cbn1cblxuUmVhY3RET01Db21wb25lbnQuZGlzcGxheU5hbWUgPSAnUmVhY3RET01Db21wb25lbnQnO1xuXG5SZWFjdERPTUNvbXBvbmVudC5NaXhpbiA9IHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlcyByb290IHRhZyBtYXJrdXAgdGhlbiByZWN1cnNlcy4gVGhpcyBtZXRob2QgaGFzIHNpZGUgZWZmZWN0cyBhbmRcbiAgICogaXMgbm90IGlkZW1wb3RlbnQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHs/UmVhY3RET01Db21wb25lbnR9IHRoZSBwYXJlbnQgY29tcG9uZW50IGluc3RhbmNlXG4gICAqIEBwYXJhbSB7P29iamVjdH0gaW5mbyBhYm91dCB0aGUgaG9zdCBjb250YWluZXJcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgY29tcHV0ZWQgbWFya3VwLlxuICAgKi9cbiAgbW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgaG9zdFBhcmVudCwgaG9zdENvbnRhaW5lckluZm8sIGNvbnRleHQpIHtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gZ2xvYmFsSWRDb3VudGVyKys7XG4gICAgdGhpcy5fZG9tSUQgPSBob3N0Q29udGFpbmVySW5mby5faWRDb3VudGVyKys7XG4gICAgdGhpcy5faG9zdFBhcmVudCA9IGhvc3RQYXJlbnQ7XG4gICAgdGhpcy5faG9zdENvbnRhaW5lckluZm8gPSBob3N0Q29udGFpbmVySW5mbztcblxuICAgIHZhciBwcm9wcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuXG4gICAgc3dpdGNoICh0aGlzLl90YWcpIHtcbiAgICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgIGNhc2UgJ2Zvcm0nOlxuICAgICAgY2FzZSAnaWZyYW1lJzpcbiAgICAgIGNhc2UgJ2ltZyc6XG4gICAgICBjYXNlICdsaW5rJzpcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICBjYXNlICdzb3VyY2UnOlxuICAgICAgY2FzZSAndmlkZW8nOlxuICAgICAgICB0aGlzLl93cmFwcGVyU3RhdGUgPSB7XG4gICAgICAgICAgbGlzdGVuZXJzOiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUodHJhcEJ1YmJsZWRFdmVudHNMb2NhbCwgdGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICBSZWFjdERPTUlucHV0Lm1vdW50V3JhcHBlcih0aGlzLCBwcm9wcywgaG9zdFBhcmVudCk7XG4gICAgICAgIHByb3BzID0gUmVhY3RET01JbnB1dC5nZXRIb3N0UHJvcHModGhpcywgcHJvcHMpO1xuICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHRyYWNrSW5wdXRWYWx1ZSwgdGhpcyk7XG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUodHJhcEJ1YmJsZWRFdmVudHNMb2NhbCwgdGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgICAgUmVhY3RET01PcHRpb24ubW91bnRXcmFwcGVyKHRoaXMsIHByb3BzLCBob3N0UGFyZW50KTtcbiAgICAgICAgcHJvcHMgPSBSZWFjdERPTU9wdGlvbi5nZXRIb3N0UHJvcHModGhpcywgcHJvcHMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgIFJlYWN0RE9NU2VsZWN0Lm1vdW50V3JhcHBlcih0aGlzLCBwcm9wcywgaG9zdFBhcmVudCk7XG4gICAgICAgIHByb3BzID0gUmVhY3RET01TZWxlY3QuZ2V0SG9zdFByb3BzKHRoaXMsIHByb3BzKTtcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZSh0cmFwQnViYmxlZEV2ZW50c0xvY2FsLCB0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgIFJlYWN0RE9NVGV4dGFyZWEubW91bnRXcmFwcGVyKHRoaXMsIHByb3BzLCBob3N0UGFyZW50KTtcbiAgICAgICAgcHJvcHMgPSBSZWFjdERPTVRleHRhcmVhLmdldEhvc3RQcm9wcyh0aGlzLCBwcm9wcyk7XG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUodHJhY2tJbnB1dFZhbHVlLCB0aGlzKTtcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZSh0cmFwQnViYmxlZEV2ZW50c0xvY2FsLCB0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgYXNzZXJ0VmFsaWRQcm9wcyh0aGlzLCBwcm9wcyk7XG5cbiAgICAvLyBXZSBjcmVhdGUgdGFncyBpbiB0aGUgbmFtZXNwYWNlIG9mIHRoZWlyIHBhcmVudCBjb250YWluZXIsIGV4Y2VwdCBIVE1MXG4gICAgLy8gdGFncyBnZXQgbm8gbmFtZXNwYWNlLlxuICAgIHZhciBuYW1lc3BhY2VVUkk7XG4gICAgdmFyIHBhcmVudFRhZztcbiAgICBpZiAoaG9zdFBhcmVudCAhPSBudWxsKSB7XG4gICAgICBuYW1lc3BhY2VVUkkgPSBob3N0UGFyZW50Ll9uYW1lc3BhY2VVUkk7XG4gICAgICBwYXJlbnRUYWcgPSBob3N0UGFyZW50Ll90YWc7XG4gICAgfSBlbHNlIGlmIChob3N0Q29udGFpbmVySW5mby5fdGFnKSB7XG4gICAgICBuYW1lc3BhY2VVUkkgPSBob3N0Q29udGFpbmVySW5mby5fbmFtZXNwYWNlVVJJO1xuICAgICAgcGFyZW50VGFnID0gaG9zdENvbnRhaW5lckluZm8uX3RhZztcbiAgICB9XG4gICAgaWYgKG5hbWVzcGFjZVVSSSA9PSBudWxsIHx8IG5hbWVzcGFjZVVSSSA9PT0gRE9NTmFtZXNwYWNlcy5zdmcgJiYgcGFyZW50VGFnID09PSAnZm9yZWlnbm9iamVjdCcpIHtcbiAgICAgIG5hbWVzcGFjZVVSSSA9IERPTU5hbWVzcGFjZXMuaHRtbDtcbiAgICB9XG4gICAgaWYgKG5hbWVzcGFjZVVSSSA9PT0gRE9NTmFtZXNwYWNlcy5odG1sKSB7XG4gICAgICBpZiAodGhpcy5fdGFnID09PSAnc3ZnJykge1xuICAgICAgICBuYW1lc3BhY2VVUkkgPSBET01OYW1lc3BhY2VzLnN2ZztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fdGFnID09PSAnbWF0aCcpIHtcbiAgICAgICAgbmFtZXNwYWNlVVJJID0gRE9NTmFtZXNwYWNlcy5tYXRobWw7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX25hbWVzcGFjZVVSSSA9IG5hbWVzcGFjZVVSSTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgcGFyZW50SW5mbztcbiAgICAgIGlmIChob3N0UGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgcGFyZW50SW5mbyA9IGhvc3RQYXJlbnQuX2FuY2VzdG9ySW5mbztcbiAgICAgIH0gZWxzZSBpZiAoaG9zdENvbnRhaW5lckluZm8uX3RhZykge1xuICAgICAgICBwYXJlbnRJbmZvID0gaG9zdENvbnRhaW5lckluZm8uX2FuY2VzdG9ySW5mbztcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnRJbmZvKSB7XG4gICAgICAgIC8vIHBhcmVudEluZm8gc2hvdWxkIGFsd2F5cyBiZSBwcmVzZW50IGV4Y2VwdCBmb3IgdGhlIHRvcC1sZXZlbFxuICAgICAgICAvLyBjb21wb25lbnQgd2hlbiBzZXJ2ZXIgcmVuZGVyaW5nXG4gICAgICAgIHZhbGlkYXRlRE9NTmVzdGluZyh0aGlzLl90YWcsIG51bGwsIHRoaXMsIHBhcmVudEluZm8pO1xuICAgICAgfVxuICAgICAgdGhpcy5fYW5jZXN0b3JJbmZvID0gdmFsaWRhdGVET01OZXN0aW5nLnVwZGF0ZWRBbmNlc3RvckluZm8ocGFyZW50SW5mbywgdGhpcy5fdGFnLCB0aGlzKTtcbiAgICB9XG5cbiAgICB2YXIgbW91bnRJbWFnZTtcbiAgICBpZiAodHJhbnNhY3Rpb24udXNlQ3JlYXRlRWxlbWVudCkge1xuICAgICAgdmFyIG93bmVyRG9jdW1lbnQgPSBob3N0Q29udGFpbmVySW5mby5fb3duZXJEb2N1bWVudDtcbiAgICAgIHZhciBlbDtcbiAgICAgIGlmIChuYW1lc3BhY2VVUkkgPT09IERPTU5hbWVzcGFjZXMuaHRtbCkge1xuICAgICAgICBpZiAodGhpcy5fdGFnID09PSAnc2NyaXB0Jykge1xuICAgICAgICAgIC8vIENyZWF0ZSB0aGUgc2NyaXB0IHZpYSAuaW5uZXJIVE1MIHNvIGl0cyBcInBhcnNlci1pbnNlcnRlZFwiIGZsYWcgaXNcbiAgICAgICAgICAvLyBzZXQgdG8gdHJ1ZSBhbmQgaXQgZG9lcyBub3QgZXhlY3V0ZVxuICAgICAgICAgIHZhciBkaXYgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIHZhciB0eXBlID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gJzwnICsgdHlwZSArICc+PC8nICsgdHlwZSArICc+JztcbiAgICAgICAgICBlbCA9IGRpdi5yZW1vdmVDaGlsZChkaXYuZmlyc3RDaGlsZCk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcHMuaXMpIHtcbiAgICAgICAgICBlbCA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlLCBwcm9wcy5pcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU2VwYXJhdGUgZWxzZSBicmFuY2ggaW5zdGVhZCBvZiB1c2luZyBgcHJvcHMuaXMgfHwgdW5kZWZpbmVkYCBhYm92ZSBiZWN1YXNlIG9mIGEgRmlyZWZveCBidWcuXG4gICAgICAgICAgLy8gU2VlIGRpc2N1c3Npb24gaW4gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvNjg5NlxuICAgICAgICAgIC8vIGFuZCBkaXNjdXNzaW9uIGluIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEyNzYyNDBcbiAgICAgICAgICBlbCA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VVUkksIHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGUpO1xuICAgICAgfVxuICAgICAgUmVhY3RET01Db21wb25lbnRUcmVlLnByZWNhY2hlTm9kZSh0aGlzLCBlbCk7XG4gICAgICB0aGlzLl9mbGFncyB8PSBGbGFncy5oYXNDYWNoZWRDaGlsZE5vZGVzO1xuICAgICAgaWYgKCF0aGlzLl9ob3N0UGFyZW50KSB7XG4gICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRBdHRyaWJ1dGVGb3JSb290KGVsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3VwZGF0ZURPTVByb3BlcnRpZXMobnVsbCwgcHJvcHMsIHRyYW5zYWN0aW9uKTtcbiAgICAgIHZhciBsYXp5VHJlZSA9IERPTUxhenlUcmVlKGVsKTtcbiAgICAgIHRoaXMuX2NyZWF0ZUluaXRpYWxDaGlsZHJlbih0cmFuc2FjdGlvbiwgcHJvcHMsIGNvbnRleHQsIGxhenlUcmVlKTtcbiAgICAgIG1vdW50SW1hZ2UgPSBsYXp5VHJlZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHRhZ09wZW4gPSB0aGlzLl9jcmVhdGVPcGVuVGFnTWFya3VwQW5kUHV0TGlzdGVuZXJzKHRyYW5zYWN0aW9uLCBwcm9wcyk7XG4gICAgICB2YXIgdGFnQ29udGVudCA9IHRoaXMuX2NyZWF0ZUNvbnRlbnRNYXJrdXAodHJhbnNhY3Rpb24sIHByb3BzLCBjb250ZXh0KTtcbiAgICAgIGlmICghdGFnQ29udGVudCAmJiBvbWl0dGVkQ2xvc2VUYWdzW3RoaXMuX3RhZ10pIHtcbiAgICAgICAgbW91bnRJbWFnZSA9IHRhZ09wZW4gKyAnLz4nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbW91bnRJbWFnZSA9IHRhZ09wZW4gKyAnPicgKyB0YWdDb250ZW50ICsgJzwvJyArIHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGUgKyAnPic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLl90YWcpIHtcbiAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShpbnB1dFBvc3RNb3VudCwgdGhpcyk7XG4gICAgICAgIGlmIChwcm9wcy5hdXRvRm9jdXMpIHtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKEF1dG9Gb2N1c1V0aWxzLmZvY3VzRE9NQ29tcG9uZW50LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZSh0ZXh0YXJlYVBvc3RNb3VudCwgdGhpcyk7XG4gICAgICAgIGlmIChwcm9wcy5hdXRvRm9jdXMpIHtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKEF1dG9Gb2N1c1V0aWxzLmZvY3VzRE9NQ29tcG9uZW50LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgIGlmIChwcm9wcy5hdXRvRm9jdXMpIHtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKEF1dG9Gb2N1c1V0aWxzLmZvY3VzRE9NQ29tcG9uZW50LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2J1dHRvbic6XG4gICAgICAgIGlmIChwcm9wcy5hdXRvRm9jdXMpIHtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKEF1dG9Gb2N1c1V0aWxzLmZvY3VzRE9NQ29tcG9uZW50LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUob3B0aW9uUG9zdE1vdW50LCB0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vdW50SW1hZ2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgbWFya3VwIGZvciB0aGUgb3BlbiB0YWcgYW5kIGFsbCBhdHRyaWJ1dGVzLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBoYXMgc2lkZSBlZmZlY3RzIGJlY2F1c2UgZXZlbnRzIGdldCByZWdpc3RlcmVkLlxuICAgKlxuICAgKiBJdGVyYXRpbmcgb3ZlciBvYmplY3QgcHJvcGVydGllcyBpcyBmYXN0ZXIgdGhhbiBpdGVyYXRpbmcgb3ZlciBhcnJheXMuXG4gICAqIEBzZWUgaHR0cDovL2pzcGVyZi5jb20vb2JqLXZzLWFyci1pdGVyYXRpb25cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBvZiBvcGVuaW5nIHRhZy5cbiAgICovXG4gIF9jcmVhdGVPcGVuVGFnTWFya3VwQW5kUHV0TGlzdGVuZXJzOiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIHByb3BzKSB7XG4gICAgdmFyIHJldCA9ICc8JyArIHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG5cbiAgICBmb3IgKHZhciBwcm9wS2V5IGluIHByb3BzKSB7XG4gICAgICBpZiAoIXByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BLZXldO1xuICAgICAgaWYgKHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGlmIChwcm9wVmFsdWUpIHtcbiAgICAgICAgICBlbnF1ZXVlUHV0TGlzdGVuZXIodGhpcywgcHJvcEtleSwgcHJvcFZhbHVlLCB0cmFuc2FjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9wS2V5ID09PSBTVFlMRSkge1xuICAgICAgICAgIGlmIChwcm9wVmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIC8vIFNlZSBgX3VwZGF0ZURPTVByb3BlcnRpZXNgLiBzdHlsZSBibG9ja1xuICAgICAgICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlID0gcHJvcFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJvcFZhbHVlID0gdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBfYXNzaWduKHt9LCBwcm9wcy5zdHlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb3BWYWx1ZSA9IENTU1Byb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JTdHlsZXMocHJvcFZhbHVlLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWFya3VwID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuX3RhZyAhPSBudWxsICYmIGlzQ3VzdG9tQ29tcG9uZW50KHRoaXMuX3RhZywgcHJvcHMpKSB7XG4gICAgICAgICAgaWYgKCFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICAgICAgbWFya3VwID0gRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvckN1c3RvbUF0dHJpYnV0ZShwcm9wS2V5LCBwcm9wVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXJrdXAgPSBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yUHJvcGVydHkocHJvcEtleSwgcHJvcFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWFya3VwKSB7XG4gICAgICAgICAgcmV0ICs9ICcgJyArIG1hcmt1cDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZvciBzdGF0aWMgcGFnZXMsIG5vIG5lZWQgdG8gcHV0IFJlYWN0IElEIGFuZCBjaGVja3N1bS4gU2F2ZXMgbG90cyBvZlxuICAgIC8vIGJ5dGVzLlxuICAgIGlmICh0cmFuc2FjdGlvbi5yZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX2hvc3RQYXJlbnQpIHtcbiAgICAgIHJldCArPSAnICcgKyBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yUm9vdCgpO1xuICAgIH1cbiAgICByZXQgKz0gJyAnICsgRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvcklEKHRoaXMuX2RvbUlEKTtcbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgdGhlIGNvbnRlbnQgYmV0d2VlbiB0aGUgdGFncy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IENvbnRlbnQgbWFya3VwLlxuICAgKi9cbiAgX2NyZWF0ZUNvbnRlbnRNYXJrdXA6IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgcHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgcmV0ID0gJyc7XG5cbiAgICAvLyBJbnRlbnRpb25hbCB1c2Ugb2YgIT0gdG8gYXZvaWQgY2F0Y2hpbmcgemVyby9mYWxzZS5cbiAgICB2YXIgaW5uZXJIVE1MID0gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw7XG4gICAgaWYgKGlubmVySFRNTCAhPSBudWxsKSB7XG4gICAgICBpZiAoaW5uZXJIVE1MLl9faHRtbCAhPSBudWxsKSB7XG4gICAgICAgIHJldCA9IGlubmVySFRNTC5fX2h0bWw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjb250ZW50VG9Vc2UgPSBDT05URU5UX1RZUEVTW3R5cGVvZiBwcm9wcy5jaGlsZHJlbl0gPyBwcm9wcy5jaGlsZHJlbiA6IG51bGw7XG4gICAgICB2YXIgY2hpbGRyZW5Ub1VzZSA9IGNvbnRlbnRUb1VzZSAhPSBudWxsID8gbnVsbCA6IHByb3BzLmNoaWxkcmVuO1xuICAgICAgaWYgKGNvbnRlbnRUb1VzZSAhPSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE86IFZhbGlkYXRlIHRoYXQgdGV4dCBpcyBhbGxvd2VkIGFzIGEgY2hpbGQgb2YgdGhpcyBub2RlXG4gICAgICAgIHJldCA9IGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcihjb250ZW50VG9Vc2UpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHNldEFuZFZhbGlkYXRlQ29udGVudENoaWxkRGV2LmNhbGwodGhpcywgY29udGVudFRvVXNlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGlsZHJlblRvVXNlICE9IG51bGwpIHtcbiAgICAgICAgdmFyIG1vdW50SW1hZ2VzID0gdGhpcy5tb3VudENoaWxkcmVuKGNoaWxkcmVuVG9Vc2UsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgcmV0ID0gbW91bnRJbWFnZXMuam9pbignJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChuZXdsaW5lRWF0aW5nVGFnc1t0aGlzLl90YWddICYmIHJldC5jaGFyQXQoMCkgPT09ICdcXG4nKSB7XG4gICAgICAvLyB0ZXh0L2h0bWwgaWdub3JlcyB0aGUgZmlyc3QgY2hhcmFjdGVyIGluIHRoZXNlIHRhZ3MgaWYgaXQncyBhIG5ld2xpbmVcbiAgICAgIC8vIFByZWZlciB0byBicmVhayBhcHBsaWNhdGlvbi94bWwgb3ZlciB0ZXh0L2h0bWwgKGZvciBub3cpIGJ5IGFkZGluZ1xuICAgICAgLy8gYSBuZXdsaW5lIHNwZWNpZmljYWxseSB0byBnZXQgZWF0ZW4gYnkgdGhlIHBhcnNlci4gKEFsdGVybmF0ZWx5IGZvclxuICAgICAgLy8gdGV4dGFyZWFzLCByZXBsYWNpbmcgXCJeXFxuXCIgd2l0aCBcIlxcclxcblwiIGRvZXNuJ3QgZ2V0IGVhdGVuLCBhbmQgdGhlIGZpcnN0XG4gICAgICAvLyBcXHIgaXMgbm9ybWFsaXplZCBvdXQgYnkgSFRNTFRleHRBcmVhRWxlbWVudCN2YWx1ZS4pXG4gICAgICAvLyBTZWU6IDxodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sLXBvbHlnbG90LyNuZXdsaW5lcy1pbi10ZXh0YXJlYS1hbmQtcHJlPlxuICAgICAgLy8gU2VlOiA8aHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvc3ludGF4Lmh0bWwjZWxlbWVudC1yZXN0cmljdGlvbnM+XG4gICAgICAvLyBTZWU6IDxodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9zeW50YXguaHRtbCNuZXdsaW5lcz5cbiAgICAgIC8vIFNlZTogUGFyc2luZyBvZiBcInRleHRhcmVhXCIgXCJsaXN0aW5nXCIgYW5kIFwicHJlXCIgZWxlbWVudHNcbiAgICAgIC8vICBmcm9tIDxodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW5ib2R5PlxuICAgICAgcmV0dXJuICdcXG4nICsgcmV0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgfSxcblxuICBfY3JlYXRlSW5pdGlhbENoaWxkcmVuOiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIHByb3BzLCBjb250ZXh0LCBsYXp5VHJlZSkge1xuICAgIC8vIEludGVudGlvbmFsIHVzZSBvZiAhPSB0byBhdm9pZCBjYXRjaGluZyB6ZXJvL2ZhbHNlLlxuICAgIHZhciBpbm5lckhUTUwgPSBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTDtcbiAgICBpZiAoaW5uZXJIVE1MICE9IG51bGwpIHtcbiAgICAgIGlmIChpbm5lckhUTUwuX19odG1sICE9IG51bGwpIHtcbiAgICAgICAgRE9NTGF6eVRyZWUucXVldWVIVE1MKGxhenlUcmVlLCBpbm5lckhUTUwuX19odG1sKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNvbnRlbnRUb1VzZSA9IENPTlRFTlRfVFlQRVNbdHlwZW9mIHByb3BzLmNoaWxkcmVuXSA/IHByb3BzLmNoaWxkcmVuIDogbnVsbDtcbiAgICAgIHZhciBjaGlsZHJlblRvVXNlID0gY29udGVudFRvVXNlICE9IG51bGwgPyBudWxsIDogcHJvcHMuY2hpbGRyZW47XG4gICAgICAvLyBUT0RPOiBWYWxpZGF0ZSB0aGF0IHRleHQgaXMgYWxsb3dlZCBhcyBhIGNoaWxkIG9mIHRoaXMgbm9kZVxuICAgICAgaWYgKGNvbnRlbnRUb1VzZSAhPSBudWxsKSB7XG4gICAgICAgIC8vIEF2b2lkIHNldHRpbmcgdGV4dENvbnRlbnQgd2hlbiB0aGUgdGV4dCBpcyBlbXB0eS4gSW4gSUUxMSBzZXR0aW5nXG4gICAgICAgIC8vIHRleHRDb250ZW50IG9uIGEgdGV4dCBhcmVhIHdpbGwgY2F1c2UgdGhlIHBsYWNlaG9sZGVyIHRvIG5vdFxuICAgICAgICAvLyBzaG93IHdpdGhpbiB0aGUgdGV4dGFyZWEgdW50aWwgaXQgaGFzIGJlZW4gZm9jdXNlZCBhbmQgYmx1cnJlZCBhZ2Fpbi5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy82NzMxI2lzc3VlY29tbWVudC0yNTQ4NzQ1NTNcbiAgICAgICAgaWYgKGNvbnRlbnRUb1VzZSAhPT0gJycpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgc2V0QW5kVmFsaWRhdGVDb250ZW50Q2hpbGREZXYuY2FsbCh0aGlzLCBjb250ZW50VG9Vc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBET01MYXp5VHJlZS5xdWV1ZVRleHQobGF6eVRyZWUsIGNvbnRlbnRUb1VzZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hpbGRyZW5Ub1VzZSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBtb3VudEltYWdlcyA9IHRoaXMubW91bnRDaGlsZHJlbihjaGlsZHJlblRvVXNlLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbW91bnRJbWFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBET01MYXp5VHJlZS5xdWV1ZUNoaWxkKGxhenlUcmVlLCBtb3VudEltYWdlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlY2VpdmVzIGEgbmV4dCBlbGVtZW50IGFuZCB1cGRhdGVzIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnRcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqL1xuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbiAobmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIHByZXZFbGVtZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQ7XG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBuZXh0RWxlbWVudDtcbiAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudCh0cmFuc2FjdGlvbiwgcHJldkVsZW1lbnQsIG5leHRFbGVtZW50LCBjb250ZXh0KTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyBhIERPTSBjb21wb25lbnQgYWZ0ZXIgaXQgaGFzIGFscmVhZHkgYmVlbiBhbGxvY2F0ZWQgYW5kXG4gICAqIGF0dGFjaGVkIHRvIHRoZSBET00uIFJlY29uY2lsZXMgdGhlIHJvb3QgRE9NIG5vZGUsIHRoZW4gcmVjdXJzZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IHByZXZFbGVtZW50XG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudFxuICAgKiBAaW50ZXJuYWxcbiAgICogQG92ZXJyaWRhYmxlXG4gICAqL1xuICB1cGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgcHJldkVsZW1lbnQsIG5leHRFbGVtZW50LCBjb250ZXh0KSB7XG4gICAgdmFyIGxhc3RQcm9wcyA9IHByZXZFbGVtZW50LnByb3BzO1xuICAgIHZhciBuZXh0UHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcblxuICAgIHN3aXRjaCAodGhpcy5fdGFnKSB7XG4gICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgIGxhc3RQcm9wcyA9IFJlYWN0RE9NSW5wdXQuZ2V0SG9zdFByb3BzKHRoaXMsIGxhc3RQcm9wcyk7XG4gICAgICAgIG5leHRQcm9wcyA9IFJlYWN0RE9NSW5wdXQuZ2V0SG9zdFByb3BzKHRoaXMsIG5leHRQcm9wcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgICAgbGFzdFByb3BzID0gUmVhY3RET01PcHRpb24uZ2V0SG9zdFByb3BzKHRoaXMsIGxhc3RQcm9wcyk7XG4gICAgICAgIG5leHRQcm9wcyA9IFJlYWN0RE9NT3B0aW9uLmdldEhvc3RQcm9wcyh0aGlzLCBuZXh0UHJvcHMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgIGxhc3RQcm9wcyA9IFJlYWN0RE9NU2VsZWN0LmdldEhvc3RQcm9wcyh0aGlzLCBsYXN0UHJvcHMpO1xuICAgICAgICBuZXh0UHJvcHMgPSBSZWFjdERPTVNlbGVjdC5nZXRIb3N0UHJvcHModGhpcywgbmV4dFByb3BzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgIGxhc3RQcm9wcyA9IFJlYWN0RE9NVGV4dGFyZWEuZ2V0SG9zdFByb3BzKHRoaXMsIGxhc3RQcm9wcyk7XG4gICAgICAgIG5leHRQcm9wcyA9IFJlYWN0RE9NVGV4dGFyZWEuZ2V0SG9zdFByb3BzKHRoaXMsIG5leHRQcm9wcyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGFzc2VydFZhbGlkUHJvcHModGhpcywgbmV4dFByb3BzKTtcbiAgICB0aGlzLl91cGRhdGVET01Qcm9wZXJ0aWVzKGxhc3RQcm9wcywgbmV4dFByb3BzLCB0cmFuc2FjdGlvbik7XG4gICAgdGhpcy5fdXBkYXRlRE9NQ2hpbGRyZW4obGFzdFByb3BzLCBuZXh0UHJvcHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcblxuICAgIHN3aXRjaCAodGhpcy5fdGFnKSB7XG4gICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgd3JhcHBlciBhcm91bmQgaW5wdXRzICphZnRlciogdXBkYXRpbmcgcHJvcHMuIFRoaXMgaGFzIHRvXG4gICAgICAgIC8vIGhhcHBlbiBhZnRlciBgX3VwZGF0ZURPTVByb3BlcnRpZXNgLiBPdGhlcndpc2UgSFRNTDUgaW5wdXQgdmFsaWRhdGlvbnNcbiAgICAgICAgLy8gcmFpc2Ugd2FybmluZ3MgYW5kIHByZXZlbnQgdGhlIG5ldyB2YWx1ZSBmcm9tIGJlaW5nIGFzc2lnbmVkLlxuICAgICAgICBSZWFjdERPTUlucHV0LnVwZGF0ZVdyYXBwZXIodGhpcyk7XG5cbiAgICAgICAgLy8gV2UgYWxzbyBjaGVjayB0aGF0IHdlIGhhdmVuJ3QgbWlzc2VkIGEgdmFsdWUgdXBkYXRlLCBzdWNoIGFzIGFcbiAgICAgICAgLy8gUmFkaW8gZ3JvdXAgc2hpZnRpbmcgdGhlIGNoZWNrZWQgdmFsdWUgdG8gYW5vdGhlciBuYW1lZCByYWRpbyBpbnB1dC5cbiAgICAgICAgaW5wdXRWYWx1ZVRyYWNraW5nLnVwZGF0ZVZhbHVlSWZDaGFuZ2VkKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgICAgUmVhY3RET01UZXh0YXJlYS51cGRhdGVXcmFwcGVyKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgIC8vIDxzZWxlY3Q+IHZhbHVlIHVwZGF0ZSBuZWVkcyB0byBvY2N1ciBhZnRlciA8b3B0aW9uPiBjaGlsZHJlblxuICAgICAgICAvLyByZWNvbmNpbGlhdGlvblxuICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHBvc3RVcGRhdGVTZWxlY3RXcmFwcGVyLCB0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZWNvbmNpbGVzIHRoZSBwcm9wZXJ0aWVzIGJ5IGRldGVjdGluZyBkaWZmZXJlbmNlcyBpbiBwcm9wZXJ0eSB2YWx1ZXMgYW5kXG4gICAqIHVwZGF0aW5nIHRoZSBET00gYXMgbmVjZXNzYXJ5LiBUaGlzIGZ1bmN0aW9uIGlzIHByb2JhYmx5IHRoZSBzaW5nbGUgbW9zdFxuICAgKiBjcml0aWNhbCBwYXRoIGZvciBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24uXG4gICAqXG4gICAqIFRPRE86IEJlbmNobWFyayB3aGV0aGVyIGNoZWNraW5nIGZvciBjaGFuZ2VkIHZhbHVlcyBpbiBtZW1vcnkgYWN0dWFsbHlcbiAgICogICAgICAgaW1wcm92ZXMgcGVyZm9ybWFuY2UgKGVzcGVjaWFsbHkgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnRzKS5cbiAgICogVE9ETzogQmVuY2htYXJrIHRoZSBlZmZlY3RzIG9mIHB1dHRpbmcgdGhpcyBhdCB0aGUgdG9wIHNpbmNlIDk5JSBvZiBwcm9wc1xuICAgKiAgICAgICBkbyBub3QgY2hhbmdlIGZvciBhIGdpdmVuIHJlY29uY2lsaWF0aW9uLlxuICAgKiBUT0RPOiBCZW5jaG1hcmsgYXJlYXMgdGhhdCBjYW4gYmUgaW1wcm92ZWQgd2l0aCBjYWNoaW5nLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge29iamVjdH0gbGFzdFByb3BzXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQHBhcmFtIHs/RE9NRWxlbWVudH0gbm9kZVxuICAgKi9cbiAgX3VwZGF0ZURPTVByb3BlcnRpZXM6IGZ1bmN0aW9uIChsYXN0UHJvcHMsIG5leHRQcm9wcywgdHJhbnNhY3Rpb24pIHtcbiAgICB2YXIgcHJvcEtleTtcbiAgICB2YXIgc3R5bGVOYW1lO1xuICAgIHZhciBzdHlsZVVwZGF0ZXM7XG4gICAgZm9yIChwcm9wS2V5IGluIGxhc3RQcm9wcykge1xuICAgICAgaWYgKG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fCAhbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpIHx8IGxhc3RQcm9wc1twcm9wS2V5XSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICAgIHZhciBsYXN0U3R5bGUgPSB0aGlzLl9wcmV2aW91c1N0eWxlQ29weTtcbiAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbGFzdFN0eWxlKSB7XG4gICAgICAgICAgaWYgKGxhc3RTdHlsZS5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG4gICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGlmIChsYXN0UHJvcHNbcHJvcEtleV0pIHtcbiAgICAgICAgICAvLyBPbmx5IGNhbGwgZGVsZXRlTGlzdGVuZXIgaWYgdGhlcmUgd2FzIGEgbGlzdGVuZXIgcHJldmlvdXNseSBvclxuICAgICAgICAgIC8vIGVsc2Ugd2lsbERlbGV0ZUxpc3RlbmVyIGdldHMgY2FsbGVkIHdoZW4gdGhlcmUgd2Fzbid0IGFjdHVhbGx5IGFcbiAgICAgICAgICAvLyBsaXN0ZW5lciAoZS5nLiwgb25DbGljaz17bnVsbH0pXG4gICAgICAgICAgZGVsZXRlTGlzdGVuZXIodGhpcywgcHJvcEtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNDdXN0b21Db21wb25lbnQodGhpcy5fdGFnLCBsYXN0UHJvcHMpKSB7XG4gICAgICAgIGlmICghUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuZGVsZXRlVmFsdWVGb3JBdHRyaWJ1dGUoZ2V0Tm9kZSh0aGlzKSwgcHJvcEtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkucHJvcGVydGllc1twcm9wS2V5XSB8fCBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShwcm9wS2V5KSkge1xuICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShnZXROb2RlKHRoaXMpLCBwcm9wS2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChwcm9wS2V5IGluIG5leHRQcm9wcykge1xuICAgICAgdmFyIG5leHRQcm9wID0gbmV4dFByb3BzW3Byb3BLZXldO1xuICAgICAgdmFyIGxhc3RQcm9wID0gcHJvcEtleSA9PT0gU1RZTEUgPyB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA6IGxhc3RQcm9wcyAhPSBudWxsID8gbGFzdFByb3BzW3Byb3BLZXldIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKCFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHwgbmV4dFByb3AgPT09IGxhc3RQcm9wIHx8IG5leHRQcm9wID09IG51bGwgJiYgbGFzdFByb3AgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wS2V5ID09PSBTVFlMRSkge1xuICAgICAgICBpZiAobmV4dFByb3ApIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY2hlY2tBbmRXYXJuRm9yTXV0YXRlZFN0eWxlKHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5LCB0aGlzLl9wcmV2aW91c1N0eWxlLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX3ByZXZpb3VzU3R5bGUgPSBuZXh0UHJvcDtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV4dFByb3AgPSB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA9IF9hc3NpZ24oe30sIG5leHRQcm9wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RQcm9wKSB7XG4gICAgICAgICAgLy8gVW5zZXQgc3R5bGVzIG9uIGBsYXN0UHJvcGAgYnV0IG5vdCBvbiBgbmV4dFByb3BgLlxuICAgICAgICAgIGZvciAoc3R5bGVOYW1lIGluIGxhc3RQcm9wKSB7XG4gICAgICAgICAgICBpZiAobGFzdFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSAmJiAoIW5leHRQcm9wIHx8ICFuZXh0UHJvcC5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSkge1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFVwZGF0ZSBzdHlsZXMgdGhhdCBjaGFuZ2VkIHNpbmNlIGBsYXN0UHJvcGAuXG4gICAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbmV4dFByb3ApIHtcbiAgICAgICAgICAgIGlmIChuZXh0UHJvcC5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpICYmIGxhc3RQcm9wW3N0eWxlTmFtZV0gIT09IG5leHRQcm9wW3N0eWxlTmFtZV0pIHtcbiAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzID0gc3R5bGVVcGRhdGVzIHx8IHt9O1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9IG5leHRQcm9wW3N0eWxlTmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFJlbGllcyBvbiBgdXBkYXRlU3R5bGVzQnlJRGAgbm90IG11dGF0aW5nIGBzdHlsZVVwZGF0ZXNgLlxuICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IG5leHRQcm9wO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGlmIChuZXh0UHJvcCkge1xuICAgICAgICAgIGVucXVldWVQdXRMaXN0ZW5lcih0aGlzLCBwcm9wS2V5LCBuZXh0UHJvcCwgdHJhbnNhY3Rpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKGxhc3RQcm9wKSB7XG4gICAgICAgICAgZGVsZXRlTGlzdGVuZXIodGhpcywgcHJvcEtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNDdXN0b21Db21wb25lbnQodGhpcy5fdGFnLCBuZXh0UHJvcHMpKSB7XG4gICAgICAgIGlmICghUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JBdHRyaWJ1dGUoZ2V0Tm9kZSh0aGlzKSwgcHJvcEtleSwgbmV4dFByb3ApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKERPTVByb3BlcnR5LnByb3BlcnRpZXNbcHJvcEtleV0gfHwgRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUocHJvcEtleSkpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBnZXROb2RlKHRoaXMpO1xuICAgICAgICAvLyBJZiB3ZSdyZSB1cGRhdGluZyB0byBudWxsIG9yIHVuZGVmaW5lZCwgd2Ugc2hvdWxkIHJlbW92ZSB0aGUgcHJvcGVydHlcbiAgICAgICAgLy8gZnJvbSB0aGUgRE9NIG5vZGUgaW5zdGVhZCBvZiBpbmFkdmVydGVudGx5IHNldHRpbmcgdG8gYSBzdHJpbmcuIFRoaXNcbiAgICAgICAgLy8gYnJpbmdzIHVzIGluIGxpbmUgd2l0aCB0aGUgc2FtZSBiZWhhdmlvciB3ZSBoYXZlIG9uIGluaXRpYWwgcmVuZGVyLlxuICAgICAgICBpZiAobmV4dFByb3AgIT0gbnVsbCkge1xuICAgICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclByb3BlcnR5KG5vZGUsIHByb3BLZXksIG5leHRQcm9wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShub2RlLCBwcm9wS2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3R5bGVVcGRhdGVzKSB7XG4gICAgICBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JTdHlsZXMoZ2V0Tm9kZSh0aGlzKSwgc3R5bGVVcGRhdGVzLCB0aGlzKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlY29uY2lsZXMgdGhlIGNoaWxkcmVuIHdpdGggdGhlIHZhcmlvdXMgcHJvcGVydGllcyB0aGF0IGFmZmVjdCB0aGVcbiAgICogY2hpbGRyZW4gY29udGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGxhc3RQcm9wc1xuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICovXG4gIF91cGRhdGVET01DaGlsZHJlbjogZnVuY3Rpb24gKGxhc3RQcm9wcywgbmV4dFByb3BzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHZhciBsYXN0Q29udGVudCA9IENPTlRFTlRfVFlQRVNbdHlwZW9mIGxhc3RQcm9wcy5jaGlsZHJlbl0gPyBsYXN0UHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgIHZhciBuZXh0Q29udGVudCA9IENPTlRFTlRfVFlQRVNbdHlwZW9mIG5leHRQcm9wcy5jaGlsZHJlbl0gPyBuZXh0UHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuXG4gICAgdmFyIGxhc3RIdG1sID0gbGFzdFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmIGxhc3RQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWw7XG4gICAgdmFyIG5leHRIdG1sID0gbmV4dFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmIG5leHRQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWw7XG5cbiAgICAvLyBOb3RlIHRoZSB1c2Ugb2YgYCE9YCB3aGljaCBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkLlxuICAgIHZhciBsYXN0Q2hpbGRyZW4gPSBsYXN0Q29udGVudCAhPSBudWxsID8gbnVsbCA6IGxhc3RQcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgbmV4dENoaWxkcmVuID0gbmV4dENvbnRlbnQgIT0gbnVsbCA/IG51bGwgOiBuZXh0UHJvcHMuY2hpbGRyZW47XG5cbiAgICAvLyBJZiB3ZSdyZSBzd2l0Y2hpbmcgZnJvbSBjaGlsZHJlbiB0byBjb250ZW50L2h0bWwgb3IgdmljZSB2ZXJzYSwgcmVtb3ZlXG4gICAgLy8gdGhlIG9sZCBjb250ZW50XG4gICAgdmFyIGxhc3RIYXNDb250ZW50T3JIdG1sID0gbGFzdENvbnRlbnQgIT0gbnVsbCB8fCBsYXN0SHRtbCAhPSBudWxsO1xuICAgIHZhciBuZXh0SGFzQ29udGVudE9ySHRtbCA9IG5leHRDb250ZW50ICE9IG51bGwgfHwgbmV4dEh0bWwgIT0gbnVsbDtcbiAgICBpZiAobGFzdENoaWxkcmVuICE9IG51bGwgJiYgbmV4dENoaWxkcmVuID09IG51bGwpIHtcbiAgICAgIHRoaXMudXBkYXRlQ2hpbGRyZW4obnVsbCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH0gZWxzZSBpZiAobGFzdEhhc0NvbnRlbnRPckh0bWwgJiYgIW5leHRIYXNDb250ZW50T3JIdG1sKSB7XG4gICAgICB0aGlzLnVwZGF0ZVRleHRDb250ZW50KCcnKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldENoaWxkcmVuKHRoaXMuX2RlYnVnSUQsIFtdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmV4dENvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgaWYgKGxhc3RDb250ZW50ICE9PSBuZXh0Q29udGVudCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVRleHRDb250ZW50KCcnICsgbmV4dENvbnRlbnQpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHNldEFuZFZhbGlkYXRlQ29udGVudENoaWxkRGV2LmNhbGwodGhpcywgbmV4dENvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0SHRtbCAhPSBudWxsKSB7XG4gICAgICBpZiAobGFzdEh0bWwgIT09IG5leHRIdG1sKSB7XG4gICAgICAgIHRoaXMudXBkYXRlTWFya3VwKCcnICsgbmV4dEh0bWwpO1xuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uU2V0Q2hpbGRyZW4odGhpcy5fZGVidWdJRCwgW10pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV4dENoaWxkcmVuICE9IG51bGwpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHNldEFuZFZhbGlkYXRlQ29udGVudENoaWxkRGV2LmNhbGwodGhpcywgbnVsbCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlQ2hpbGRyZW4obmV4dENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgfVxuICB9LFxuXG4gIGdldEhvc3ROb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldE5vZGUodGhpcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFsbCBldmVudCByZWdpc3RyYXRpb25zIGZvciB0aGlzIGluc3RhbmNlLiBEb2VzIG5vdCByZW1vdmUgZnJvbVxuICAgKiB0aGUgRE9NLiBUaGF0IG11c3QgYmUgZG9uZSBieSB0aGUgcGFyZW50LlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChzYWZlbHkpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3RhZykge1xuICAgICAgY2FzZSAnYXVkaW8nOlxuICAgICAgY2FzZSAnZm9ybSc6XG4gICAgICBjYXNlICdpZnJhbWUnOlxuICAgICAgY2FzZSAnaW1nJzpcbiAgICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGNhc2UgJ3NvdXJjZSc6XG4gICAgICBjYXNlICd2aWRlbyc6XG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl93cmFwcGVyU3RhdGUubGlzdGVuZXJzO1xuICAgICAgICBpZiAobGlzdGVuZXJzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5yZW1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdpbnB1dCc6XG4gICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgIGlucHV0VmFsdWVUcmFja2luZy5zdG9wVHJhY2tpbmcodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnaHRtbCc6XG4gICAgICBjYXNlICdoZWFkJzpcbiAgICAgIGNhc2UgJ2JvZHknOlxuICAgICAgICAvKipcbiAgICAgICAgICogQ29tcG9uZW50cyBsaWtlIDxodG1sPiA8aGVhZD4gYW5kIDxib2R5PiBjYW4ndCBiZSByZW1vdmVkIG9yIGFkZGVkXG4gICAgICAgICAqIGVhc2lseSBpbiBhIGNyb3NzLWJyb3dzZXIgd2F5LCBob3dldmVyIGl0J3MgdmFsdWFibGUgdG8gYmUgYWJsZSB0b1xuICAgICAgICAgKiB0YWtlIGFkdmFudGFnZSBvZiBSZWFjdCdzIHJlY29uY2lsaWF0aW9uIGZvciBzdHlsaW5nIGFuZCA8dGl0bGU+XG4gICAgICAgICAqIG1hbmFnZW1lbnQuIFNvIHdlIGp1c3QgZG9jdW1lbnQgaXQgYW5kIHRocm93IGluIGRhbmdlcm91cyBjYXNlcy5cbiAgICAgICAgICovXG4gICAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICc8JXM+IHRyaWVkIHRvIHVubW91bnQuIEJlY2F1c2Ugb2YgY3Jvc3MtYnJvd3NlciBxdWlya3MgaXQgaXMgaW1wb3NzaWJsZSB0byB1bm1vdW50IHNvbWUgdG9wLWxldmVsIGNvbXBvbmVudHMgKGVnIDxodG1sPiwgPGhlYWQ+LCBhbmQgPGJvZHk+KSByZWxpYWJseSBhbmQgZWZmaWNpZW50bHkuIFRvIGZpeCB0aGlzLCBoYXZlIGEgc2luZ2xlIHRvcC1sZXZlbCBjb21wb25lbnQgdGhhdCBuZXZlciB1bm1vdW50cyByZW5kZXIgdGhlc2UgZWxlbWVudHMuJywgdGhpcy5fdGFnKSA6IF9wcm9kSW52YXJpYW50KCc2NicsIHRoaXMuX3RhZykgOiB2b2lkIDA7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMudW5tb3VudENoaWxkcmVuKHNhZmVseSk7XG4gICAgUmVhY3RET01Db21wb25lbnRUcmVlLnVuY2FjaGVOb2RlKHRoaXMpO1xuICAgIEV2ZW50UGx1Z2luSHViLmRlbGV0ZUFsbExpc3RlbmVycyh0aGlzKTtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gMDtcbiAgICB0aGlzLl9kb21JRCA9IDA7XG4gICAgdGhpcy5fd3JhcHBlclN0YXRlID0gbnVsbDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBzZXRBbmRWYWxpZGF0ZUNvbnRlbnRDaGlsZERldi5jYWxsKHRoaXMsIG51bGwpO1xuICAgIH1cbiAgfSxcblxuICBnZXRQdWJsaWNJbnN0YW5jZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXROb2RlKHRoaXMpO1xuICB9XG59O1xuXG5fYXNzaWduKFJlYWN0RE9NQ29tcG9uZW50LnByb3RvdHlwZSwgUmVhY3RET01Db21wb25lbnQuTWl4aW4sIFJlYWN0TXVsdGlDaGlsZC5NaXhpbik7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01Db21wb25lbnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NQ29tcG9uZW50LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIERPTUxhenlUcmVlID0gcmVxdWlyZSgnLi9ET01MYXp5VHJlZScpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG5cbnZhciBSZWFjdERPTUVtcHR5Q29tcG9uZW50ID0gZnVuY3Rpb24gKGluc3RhbnRpYXRlKSB7XG4gIC8vIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50IHVzZXMgdGhpczpcbiAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBudWxsO1xuICAvLyBSZWFjdERPTUNvbXBvbmVudFRyZWUgdXNlcyB0aGVzZTpcbiAgdGhpcy5faG9zdE5vZGUgPSBudWxsO1xuICB0aGlzLl9ob3N0UGFyZW50ID0gbnVsbDtcbiAgdGhpcy5faG9zdENvbnRhaW5lckluZm8gPSBudWxsO1xuICB0aGlzLl9kb21JRCA9IDA7XG59O1xuX2Fzc2lnbihSZWFjdERPTUVtcHR5Q29tcG9uZW50LnByb3RvdHlwZSwge1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBob3N0UGFyZW50LCBob3N0Q29udGFpbmVySW5mbywgY29udGV4dCkge1xuICAgIHZhciBkb21JRCA9IGhvc3RDb250YWluZXJJbmZvLl9pZENvdW50ZXIrKztcbiAgICB0aGlzLl9kb21JRCA9IGRvbUlEO1xuICAgIHRoaXMuX2hvc3RQYXJlbnQgPSBob3N0UGFyZW50O1xuICAgIHRoaXMuX2hvc3RDb250YWluZXJJbmZvID0gaG9zdENvbnRhaW5lckluZm87XG5cbiAgICB2YXIgbm9kZVZhbHVlID0gJyByZWFjdC1lbXB0eTogJyArIHRoaXMuX2RvbUlEICsgJyAnO1xuICAgIGlmICh0cmFuc2FjdGlvbi51c2VDcmVhdGVFbGVtZW50KSB7XG4gICAgICB2YXIgb3duZXJEb2N1bWVudCA9IGhvc3RDb250YWluZXJJbmZvLl9vd25lckRvY3VtZW50O1xuICAgICAgdmFyIG5vZGUgPSBvd25lckRvY3VtZW50LmNyZWF0ZUNvbW1lbnQobm9kZVZhbHVlKTtcbiAgICAgIFJlYWN0RE9NQ29tcG9uZW50VHJlZS5wcmVjYWNoZU5vZGUodGhpcywgbm9kZSk7XG4gICAgICByZXR1cm4gRE9NTGF6eVRyZWUobm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0cmFuc2FjdGlvbi5yZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICAgICAgICAvLyBOb3JtYWxseSB3ZSdkIGluc2VydCBhIGNvbW1lbnQgbm9kZSwgYnV0IHNpbmNlIHRoaXMgaXMgYSBzaXR1YXRpb25cbiAgICAgICAgLy8gd2hlcmUgUmVhY3Qgd29uJ3QgdGFrZSBvdmVyIChzdGF0aWMgcGFnZXMpLCB3ZSBjYW4gc2ltcGx5IHJldHVyblxuICAgICAgICAvLyBub3RoaW5nLlxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICByZXR1cm4gJzwhLS0nICsgbm9kZVZhbHVlICsgJy0tPic7XG4gICAgfVxuICB9LFxuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbiAoKSB7fSxcbiAgZ2V0SG9zdE5vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UodGhpcyk7XG4gIH0sXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICBSZWFjdERPTUNvbXBvbmVudFRyZWUudW5jYWNoZU5vZGUodGhpcyk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NRW1wdHlDb21wb25lbnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NRW1wdHlDb21wb25lbnQuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdERPTUZlYXR1cmVGbGFncyA9IHtcbiAgdXNlQ3JlYXRlRWxlbWVudDogdHJ1ZSxcbiAgdXNlRmliZXI6IGZhbHNlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NRmVhdHVyZUZsYWdzO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTUZlYXR1cmVGbGFncy5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NQ2hpbGRyZW5PcGVyYXRpb25zJyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcblxuLyoqXG4gKiBPcGVyYXRpb25zIHVzZWQgdG8gcHJvY2VzcyB1cGRhdGVzIHRvIERPTSBub2Rlcy5cbiAqL1xudmFyIFJlYWN0RE9NSURPcGVyYXRpb25zID0ge1xuICAvKipcbiAgICogVXBkYXRlcyBhIGNvbXBvbmVudCdzIGNoaWxkcmVuIGJ5IHByb2Nlc3NpbmcgYSBzZXJpZXMgb2YgdXBkYXRlcy5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheTxvYmplY3Q+fSB1cGRhdGVzIExpc3Qgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGRhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlczogZnVuY3Rpb24gKHBhcmVudEluc3QsIHVwZGF0ZXMpIHtcbiAgICB2YXIgbm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHBhcmVudEluc3QpO1xuICAgIERPTUNoaWxkcmVuT3BlcmF0aW9ucy5wcm9jZXNzVXBkYXRlcyhub2RlLCB1cGRhdGVzKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUlET3BlcmF0aW9ucztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01JRE9wZXJhdGlvbnMuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50JyksXG4gICAgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHlPcGVyYXRpb25zJyk7XG52YXIgTGlua2VkVmFsdWVVdGlscyA9IHJlcXVpcmUoJy4vTGlua2VkVmFsdWVVdGlscycpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBkaWRXYXJuVmFsdWVMaW5rID0gZmFsc2U7XG52YXIgZGlkV2FybkNoZWNrZWRMaW5rID0gZmFsc2U7XG52YXIgZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlID0gZmFsc2U7XG52YXIgZGlkV2FybkNoZWNrZWREZWZhdWx0Q2hlY2tlZCA9IGZhbHNlO1xudmFyIGRpZFdhcm5Db250cm9sbGVkVG9VbmNvbnRyb2xsZWQgPSBmYWxzZTtcbnZhciBkaWRXYXJuVW5jb250cm9sbGVkVG9Db250cm9sbGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZvcmNlVXBkYXRlSWZNb3VudGVkKCkge1xuICBpZiAodGhpcy5fcm9vdE5vZGVJRCkge1xuICAgIC8vIERPTSBjb21wb25lbnQgaXMgc3RpbGwgbW91bnRlZDsgdXBkYXRlXG4gICAgUmVhY3RET01JbnB1dC51cGRhdGVXcmFwcGVyKHRoaXMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzQ29udHJvbGxlZChwcm9wcykge1xuICB2YXIgdXNlc0NoZWNrZWQgPSBwcm9wcy50eXBlID09PSAnY2hlY2tib3gnIHx8IHByb3BzLnR5cGUgPT09ICdyYWRpbyc7XG4gIHJldHVybiB1c2VzQ2hlY2tlZCA/IHByb3BzLmNoZWNrZWQgIT0gbnVsbCA6IHByb3BzLnZhbHVlICE9IG51bGw7XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhbiA8aW5wdXQ+IGhvc3QgY29tcG9uZW50IHRoYXQgYWxsb3dzIHNldHRpbmcgdGhlc2Ugb3B0aW9uYWxcbiAqIHByb3BzOiBgY2hlY2tlZGAsIGB2YWx1ZWAsIGBkZWZhdWx0Q2hlY2tlZGAsIGFuZCBgZGVmYXVsdFZhbHVlYC5cbiAqXG4gKiBJZiBgY2hlY2tlZGAgb3IgYHZhbHVlYCBhcmUgbm90IHN1cHBsaWVkIChvciBudWxsL3VuZGVmaW5lZCksIHVzZXIgYWN0aW9uc1xuICogdGhhdCBhZmZlY3QgdGhlIGNoZWNrZWQgc3RhdGUgb3IgdmFsdWUgd2lsbCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuXG4gKlxuICogSWYgdGhleSBhcmUgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsIG5vdFxuICogdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LiBJbnN0ZWFkLCB0aGUgcHJvcHMgbXVzdCBjaGFuZ2UgaW4gb3JkZXIgZm9yXG4gKiB0aGUgcmVuZGVyZWQgZWxlbWVudCB0byBiZSB1cGRhdGVkLlxuICpcbiAqIFRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGwgYmUgaW5pdGlhbGl6ZWQgYXMgdW5jaGVja2VkIChvciBgZGVmYXVsdENoZWNrZWRgKVxuICogd2l0aCBhbiBlbXB0eSB2YWx1ZSAob3IgYGRlZmF1bHRWYWx1ZWApLlxuICpcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMi9XRC1odG1sNS0yMDEyMTAyNS90aGUtaW5wdXQtZWxlbWVudC5odG1sXG4gKi9cbnZhciBSZWFjdERPTUlucHV0ID0ge1xuICBnZXRIb3N0UHJvcHM6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcykge1xuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUocHJvcHMpO1xuICAgIHZhciBjaGVja2VkID0gTGlua2VkVmFsdWVVdGlscy5nZXRDaGVja2VkKHByb3BzKTtcblxuICAgIHZhciBob3N0UHJvcHMgPSBfYXNzaWduKHtcbiAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBzZXQgLnR5cGUgYmVmb3JlIGFueSBvdGhlciBwcm9wZXJ0aWVzIChzZXR0aW5nIC52YWx1ZVxuICAgICAgLy8gYmVmb3JlIC50eXBlIG1lYW5zIC52YWx1ZSBpcyBsb3N0IGluIElFMTEgYW5kIGJlbG93KVxuICAgICAgdHlwZTogdW5kZWZpbmVkLFxuICAgICAgLy8gTWFrZSBzdXJlIHdlIHNldCAuc3RlcCBiZWZvcmUgLnZhbHVlIChzZXR0aW5nIC52YWx1ZSBiZWZvcmUgLnN0ZXBcbiAgICAgIC8vIG1lYW5zIC52YWx1ZSBpcyByb3VuZGVkIG9uIG1vdW50LCBiYXNlZCB1cG9uIHN0ZXAgcHJlY2lzaW9uKVxuICAgICAgc3RlcDogdW5kZWZpbmVkLFxuICAgICAgLy8gTWFrZSBzdXJlIHdlIHNldCAubWluICYgLm1heCBiZWZvcmUgLnZhbHVlICh0byBlbnN1cmUgcHJvcGVyIG9yZGVyXG4gICAgICAvLyBpbiBjb3JuZXIgY2FzZXMgc3VjaCBhcyBtaW4gb3IgbWF4IGRlcml2aW5nIGZyb20gdmFsdWUsIGUuZy4gSXNzdWUgIzcxNzApXG4gICAgICBtaW46IHVuZGVmaW5lZCxcbiAgICAgIG1heDogdW5kZWZpbmVkXG4gICAgfSwgcHJvcHMsIHtcbiAgICAgIGRlZmF1bHRDaGVja2VkOiB1bmRlZmluZWQsXG4gICAgICBkZWZhdWx0VmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIHZhbHVlOiB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiBpbnN0Ll93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlLFxuICAgICAgY2hlY2tlZDogY2hlY2tlZCAhPSBudWxsID8gY2hlY2tlZCA6IGluc3QuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZCxcbiAgICAgIG9uQ2hhbmdlOiBpbnN0Ll93cmFwcGVyU3RhdGUub25DaGFuZ2VcbiAgICB9KTtcblxuICAgIHJldHVybiBob3N0UHJvcHM7XG4gIH0sXG5cbiAgbW91bnRXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgTGlua2VkVmFsdWVVdGlscy5jaGVja1Byb3BUeXBlcygnaW5wdXQnLCBwcm9wcywgaW5zdC5fY3VycmVudEVsZW1lbnQuX293bmVyKTtcblxuICAgICAgdmFyIG93bmVyID0gaW5zdC5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuXG4gICAgICBpZiAocHJvcHMudmFsdWVMaW5rICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5WYWx1ZUxpbmspIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdgdmFsdWVMaW5rYCBwcm9wIG9uIGBpbnB1dGAgaXMgZGVwcmVjYXRlZDsgc2V0IGB2YWx1ZWAgYW5kIGBvbkNoYW5nZWAgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgICAgZGlkV2FyblZhbHVlTGluayA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMuY2hlY2tlZExpbmsgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FybkNoZWNrZWRMaW5rKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnYGNoZWNrZWRMaW5rYCBwcm9wIG9uIGBpbnB1dGAgaXMgZGVwcmVjYXRlZDsgc2V0IGB2YWx1ZWAgYW5kIGBvbkNoYW5nZWAgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgICAgZGlkV2FybkNoZWNrZWRMaW5rID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5jaGVja2VkICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZGVmYXVsdENoZWNrZWQgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FybkNoZWNrZWREZWZhdWx0Q2hlY2tlZCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzIGNvbnRhaW5zIGFuIGlucHV0IG9mIHR5cGUgJXMgd2l0aCBib3RoIGNoZWNrZWQgYW5kIGRlZmF1bHRDaGVja2VkIHByb3BzLiAnICsgJ0lucHV0IGVsZW1lbnRzIG11c3QgYmUgZWl0aGVyIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkICcgKyAnKHNwZWNpZnkgZWl0aGVyIHRoZSBjaGVja2VkIHByb3AsIG9yIHRoZSBkZWZhdWx0Q2hlY2tlZCBwcm9wLCBidXQgbm90ICcgKyAnYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgaW5wdXQgJyArICdlbGVtZW50IGFuZCByZW1vdmUgb25lIG9mIHRoZXNlIHByb3BzLiBNb3JlIGluZm86ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnLCBvd25lciAmJiBvd25lci5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JywgcHJvcHMudHlwZSkgOiB2b2lkIDA7XG4gICAgICAgIGRpZFdhcm5DaGVja2VkRGVmYXVsdENoZWNrZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzIGNvbnRhaW5zIGFuIGlucHV0IG9mIHR5cGUgJXMgd2l0aCBib3RoIHZhbHVlIGFuZCBkZWZhdWx0VmFsdWUgcHJvcHMuICcgKyAnSW5wdXQgZWxlbWVudHMgbXVzdCBiZSBlaXRoZXIgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgJyArICcoc3BlY2lmeSBlaXRoZXIgdGhlIHZhbHVlIHByb3AsIG9yIHRoZSBkZWZhdWx0VmFsdWUgcHJvcCwgYnV0IG5vdCAnICsgJ2JvdGgpLiBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIGlucHV0ICcgKyAnZWxlbWVudCBhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJywgb3duZXIgJiYgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcsIHByb3BzLnR5cGUpIDogdm9pZCAwO1xuICAgICAgICBkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWU7XG4gICAgaW5zdC5fd3JhcHBlclN0YXRlID0ge1xuICAgICAgaW5pdGlhbENoZWNrZWQ6IHByb3BzLmNoZWNrZWQgIT0gbnVsbCA/IHByb3BzLmNoZWNrZWQgOiBwcm9wcy5kZWZhdWx0Q2hlY2tlZCxcbiAgICAgIGluaXRpYWxWYWx1ZTogcHJvcHMudmFsdWUgIT0gbnVsbCA/IHByb3BzLnZhbHVlIDogZGVmYXVsdFZhbHVlLFxuICAgICAgbGlzdGVuZXJzOiBudWxsLFxuICAgICAgb25DaGFuZ2U6IF9oYW5kbGVDaGFuZ2UuYmluZChpbnN0KSxcbiAgICAgIGNvbnRyb2xsZWQ6IGlzQ29udHJvbGxlZChwcm9wcylcbiAgICB9O1xuICB9LFxuXG4gIHVwZGF0ZVdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgdmFyIHByb3BzID0gaW5zdC5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGNvbnRyb2xsZWQgPSBpc0NvbnRyb2xsZWQocHJvcHMpO1xuICAgICAgdmFyIG93bmVyID0gaW5zdC5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuXG4gICAgICBpZiAoIWluc3QuX3dyYXBwZXJTdGF0ZS5jb250cm9sbGVkICYmIGNvbnRyb2xsZWQgJiYgIWRpZFdhcm5VbmNvbnRyb2xsZWRUb0NvbnRyb2xsZWQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclcyBpcyBjaGFuZ2luZyBhbiB1bmNvbnRyb2xsZWQgaW5wdXQgb2YgdHlwZSAlcyB0byBiZSBjb250cm9sbGVkLiAnICsgJ0lucHV0IGVsZW1lbnRzIHNob3VsZCBub3Qgc3dpdGNoIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiAnICsgJ0RlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgaW5wdXQgJyArICdlbGVtZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIGNvbXBvbmVudC4gTW9yZSBpbmZvOiBodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cycsIG93bmVyICYmIG93bmVyLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnLCBwcm9wcy50eXBlKSA6IHZvaWQgMDtcbiAgICAgICAgZGlkV2FyblVuY29udHJvbGxlZFRvQ29udHJvbGxlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaW5zdC5fd3JhcHBlclN0YXRlLmNvbnRyb2xsZWQgJiYgIWNvbnRyb2xsZWQgJiYgIWRpZFdhcm5Db250cm9sbGVkVG9VbmNvbnRyb2xsZWQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclcyBpcyBjaGFuZ2luZyBhIGNvbnRyb2xsZWQgaW5wdXQgb2YgdHlwZSAlcyB0byBiZSB1bmNvbnRyb2xsZWQuICcgKyAnSW5wdXQgZWxlbWVudHMgc2hvdWxkIG5vdCBzd2l0Y2ggZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuICcgKyAnRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBpbnB1dCAnICsgJ2VsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LiBNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJywgb3duZXIgJiYgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcsIHByb3BzLnR5cGUpIDogdm9pZCAwO1xuICAgICAgICBkaWRXYXJuQ29udHJvbGxlZFRvVW5jb250cm9sbGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPOiBTaG91bGRuJ3QgdGhpcyBiZSBnZXRDaGVja2VkKHByb3BzKT9cbiAgICB2YXIgY2hlY2tlZCA9IHByb3BzLmNoZWNrZWQ7XG4gICAgaWYgKGNoZWNrZWQgIT0gbnVsbCkge1xuICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkoUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCksICdjaGVja2VkJywgY2hlY2tlZCB8fCBmYWxzZSk7XG4gICAgfVxuXG4gICAgdmFyIG5vZGUgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KTtcbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgaWYgKHZhbHVlID09PSAwICYmIG5vZGUudmFsdWUgPT09ICcnKSB7XG4gICAgICAgIG5vZGUudmFsdWUgPSAnMCc7XG4gICAgICAgIC8vIE5vdGU6IElFOSByZXBvcnRzIGEgbnVtYmVyIGlucHV0cyBhcyAndGV4dCcsIHNvIGNoZWNrIHByb3BzIGluc3RlYWQuXG4gICAgICB9IGVsc2UgaWYgKHByb3BzLnR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIC8vIFNpbXVsYXRlIGBpbnB1dC52YWx1ZUFzTnVtYmVyYC4gSUU5IGRvZXMgbm90IHN1cHBvcnQgaXRcbiAgICAgICAgdmFyIHZhbHVlQXNOdW1iZXIgPSBwYXJzZUZsb2F0KG5vZGUudmFsdWUsIDEwKSB8fCAwO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHZhbHVlICE9IHZhbHVlQXNOdW1iZXIgfHxcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHZhbHVlID09IHZhbHVlQXNOdW1iZXIgJiYgbm9kZS52YWx1ZSAhPSB2YWx1ZSkge1xuICAgICAgICAgIC8vIENhc3QgYHZhbHVlYCB0byBhIHN0cmluZyB0byBlbnN1cmUgdGhlIHZhbHVlIGlzIHNldCBjb3JyZWN0bHkuIFdoaWxlXG4gICAgICAgICAgLy8gYnJvd3NlcnMgdHlwaWNhbGx5IGRvIHRoaXMgYXMgbmVjZXNzYXJ5LCBqc2RvbSBkb2Vzbid0LlxuICAgICAgICAgIG5vZGUudmFsdWUgPSAnJyArIHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5vZGUudmFsdWUgIT09ICcnICsgdmFsdWUpIHtcbiAgICAgICAgLy8gQ2FzdCBgdmFsdWVgIHRvIGEgc3RyaW5nIHRvIGVuc3VyZSB0aGUgdmFsdWUgaXMgc2V0IGNvcnJlY3RseS4gV2hpbGVcbiAgICAgICAgLy8gYnJvd3NlcnMgdHlwaWNhbGx5IGRvIHRoaXMgYXMgbmVjZXNzYXJ5LCBqc2RvbSBkb2Vzbid0LlxuICAgICAgICBub2RlLnZhbHVlID0gJycgKyB2YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BzLnZhbHVlID09IG51bGwgJiYgcHJvcHMuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgLy8gSW4gQ2hyb21lLCBhc3NpZ25pbmcgZGVmYXVsdFZhbHVlIHRvIGNlcnRhaW4gaW5wdXQgdHlwZXMgdHJpZ2dlcnMgaW5wdXQgdmFsaWRhdGlvbi5cbiAgICAgICAgLy8gRm9yIG51bWJlciBpbnB1dHMsIHRoZSBkaXNwbGF5IHZhbHVlIGxvc2VzIHRyYWlsaW5nIGRlY2ltYWwgcG9pbnRzLiBGb3IgZW1haWwgaW5wdXRzLFxuICAgICAgICAvLyBDaHJvbWUgcmFpc2VzIFwiVGhlIHNwZWNpZmllZCB2YWx1ZSA8eD4gaXMgbm90IGEgdmFsaWQgZW1haWwgYWRkcmVzc1wiLlxuICAgICAgICAvL1xuICAgICAgICAvLyBIZXJlIHdlIGNoZWNrIHRvIHNlZSBpZiB0aGUgZGVmYXVsdFZhbHVlIGhhcyBhY3R1YWxseSBjaGFuZ2VkLCBhdm9pZGluZyB0aGVzZSBwcm9ibGVtc1xuICAgICAgICAvLyB3aGVuIHRoZSB1c2VyIGlzIGlucHV0dGluZyB0ZXh0XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzI1M1xuICAgICAgICBpZiAobm9kZS5kZWZhdWx0VmFsdWUgIT09ICcnICsgcHJvcHMuZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgbm9kZS5kZWZhdWx0VmFsdWUgPSAnJyArIHByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHByb3BzLmNoZWNrZWQgPT0gbnVsbCAmJiBwcm9wcy5kZWZhdWx0Q2hlY2tlZCAhPSBudWxsKSB7XG4gICAgICAgIG5vZGUuZGVmYXVsdENoZWNrZWQgPSAhIXByb3BzLmRlZmF1bHRDaGVja2VkO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBwb3N0TW91bnRXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCkge1xuICAgIHZhciBwcm9wcyA9IGluc3QuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuXG4gICAgLy8gVGhpcyBpcyBpbiBwb3N0TW91bnQgYmVjYXVzZSB3ZSBuZWVkIGFjY2VzcyB0byB0aGUgRE9NIG5vZGUsIHdoaWNoIGlzIG5vdFxuICAgIC8vIGF2YWlsYWJsZSB1bnRpbCBhZnRlciB0aGUgY29tcG9uZW50IGhhcyBtb3VudGVkLlxuICAgIHZhciBub2RlID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCk7XG5cbiAgICAvLyBEZXRhY2ggdmFsdWUgZnJvbSBkZWZhdWx0VmFsdWUuIFdlIHdvbid0IGRvIGFueXRoaW5nIGlmIHdlJ3JlIHdvcmtpbmcgb25cbiAgICAvLyBzdWJtaXQgb3IgcmVzZXQgaW5wdXRzIGFzIHRob3NlIHZhbHVlcyAmIGRlZmF1bHRWYWx1ZXMgYXJlIGxpbmtlZC4gVGhleVxuICAgIC8vIGFyZSBub3QgcmVzZXRhYmxlIG5vZGVzIHNvIHRoaXMgb3BlcmF0aW9uIGRvZXNuJ3QgbWF0dGVyIGFuZCBhY3R1YWxseVxuICAgIC8vIHJlbW92ZXMgYnJvd3Nlci1kZWZhdWx0IHZhbHVlcyAoZWcgXCJTdWJtaXQgUXVlcnlcIikgd2hlbiBubyB2YWx1ZSBpc1xuICAgIC8vIHByb3ZpZGVkLlxuXG4gICAgc3dpdGNoIChwcm9wcy50eXBlKSB7XG4gICAgICBjYXNlICdzdWJtaXQnOlxuICAgICAgY2FzZSAncmVzZXQnOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2NvbG9yJzpcbiAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgY2FzZSAnZGF0ZXRpbWUnOlxuICAgICAgY2FzZSAnZGF0ZXRpbWUtbG9jYWwnOlxuICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgY2FzZSAndGltZSc6XG4gICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgLy8gVGhpcyBmaXhlcyB0aGUgbm8tc2hvdyBpc3N1ZSBvbiBpT1MgU2FmYXJpIGFuZCBBbmRyb2lkIENocm9tZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83MjMzXG4gICAgICAgIG5vZGUudmFsdWUgPSAnJztcbiAgICAgICAgbm9kZS52YWx1ZSA9IG5vZGUuZGVmYXVsdFZhbHVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG5vZGUudmFsdWUgPSBub2RlLnZhbHVlO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBOb3JtYWxseSwgd2UnZCBqdXN0IGRvIGBub2RlLmNoZWNrZWQgPSBub2RlLmNoZWNrZWRgIHVwb24gaW5pdGlhbCBtb3VudCwgbGVzcyB0aGlzIGJ1Z1xuICAgIC8vIHRoaXMgaXMgbmVlZGVkIHRvIHdvcmsgYXJvdW5kIGEgY2hyb21lIGJ1ZyB3aGVyZSBzZXR0aW5nIGRlZmF1bHRDaGVja2VkXG4gICAgLy8gd2lsbCBzb21ldGltZXMgaW5mbHVlbmNlIHRoZSB2YWx1ZSBvZiBjaGVja2VkIChldmVuIGFmdGVyIGRldGFjaG1lbnQpLlxuICAgIC8vIFJlZmVyZW5jZTogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NjA4NDE2XG4gICAgLy8gV2UgbmVlZCB0byB0ZW1wb3JhcmlseSB1bnNldCBuYW1lIHRvIGF2b2lkIGRpc3J1cHRpbmcgcmFkaW8gYnV0dG9uIGdyb3Vwcy5cbiAgICB2YXIgbmFtZSA9IG5vZGUubmFtZTtcbiAgICBpZiAobmFtZSAhPT0gJycpIHtcbiAgICAgIG5vZGUubmFtZSA9ICcnO1xuICAgIH1cbiAgICBub2RlLmRlZmF1bHRDaGVja2VkID0gIW5vZGUuZGVmYXVsdENoZWNrZWQ7XG4gICAgbm9kZS5kZWZhdWx0Q2hlY2tlZCA9ICFub2RlLmRlZmF1bHRDaGVja2VkO1xuICAgIGlmIChuYW1lICE9PSAnJykge1xuICAgICAgbm9kZS5uYW1lID0gbmFtZTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9oYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgdmFyIHJldHVyblZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5leGVjdXRlT25DaGFuZ2UocHJvcHMsIGV2ZW50KTtcblxuICAvLyBIZXJlIHdlIHVzZSBhc2FwIHRvIHdhaXQgdW50aWwgYWxsIHVwZGF0ZXMgaGF2ZSBwcm9wYWdhdGVkLCB3aGljaFxuICAvLyBpcyBpbXBvcnRhbnQgd2hlbiB1c2luZyBjb250cm9sbGVkIGNvbXBvbmVudHMgd2l0aGluIGxheWVyczpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNjk4XG4gIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCB0aGlzKTtcblxuICB2YXIgbmFtZSA9IHByb3BzLm5hbWU7XG4gIGlmIChwcm9wcy50eXBlID09PSAncmFkaW8nICYmIG5hbWUgIT0gbnVsbCkge1xuICAgIHZhciByb290Tm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHRoaXMpO1xuICAgIHZhciBxdWVyeVJvb3QgPSByb290Tm9kZTtcblxuICAgIHdoaWxlIChxdWVyeVJvb3QucGFyZW50Tm9kZSkge1xuICAgICAgcXVlcnlSb290ID0gcXVlcnlSb290LnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgLy8gSWYgYHJvb3ROb2RlLmZvcm1gIHdhcyBub24tbnVsbCwgdGhlbiB3ZSBjb3VsZCB0cnkgYGZvcm0uZWxlbWVudHNgLFxuICAgIC8vIGJ1dCB0aGF0IHNvbWV0aW1lcyBiZWhhdmVzIHN0cmFuZ2VseSBpbiBJRTguIFdlIGNvdWxkIGFsc28gdHJ5IHVzaW5nXG4gICAgLy8gYGZvcm0uZ2V0RWxlbWVudHNCeU5hbWVgLCBidXQgdGhhdCB3aWxsIG9ubHkgcmV0dXJuIGRpcmVjdCBjaGlsZHJlblxuICAgIC8vIGFuZCB3b24ndCBpbmNsdWRlIGlucHV0cyB0aGF0IHVzZSB0aGUgSFRNTDUgYGZvcm09YCBhdHRyaWJ1dGUuIFNpbmNlXG4gICAgLy8gdGhlIGlucHV0IG1pZ2h0IG5vdCBldmVuIGJlIGluIGEgZm9ybSwgbGV0J3MganVzdCB1c2UgdGhlIGdsb2JhbFxuICAgIC8vIGBxdWVyeVNlbGVjdG9yQWxsYCB0byBlbnN1cmUgd2UgZG9uJ3QgbWlzcyBhbnl0aGluZy5cbiAgICB2YXIgZ3JvdXAgPSBxdWVyeVJvb3QucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbbmFtZT0nICsgSlNPTi5zdHJpbmdpZnkoJycgKyBuYW1lKSArICddW3R5cGU9XCJyYWRpb1wiXScpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG90aGVyTm9kZSA9IGdyb3VwW2ldO1xuICAgICAgaWYgKG90aGVyTm9kZSA9PT0gcm9vdE5vZGUgfHwgb3RoZXJOb2RlLmZvcm0gIT09IHJvb3ROb2RlLmZvcm0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgaWYgcmFkaW8gYnV0dG9ucyByZW5kZXJlZCBieSBkaWZmZXJlbnQgY29waWVzIG9mIFJlYWN0XG4gICAgICAvLyBhbmQgdGhlIHNhbWUgbmFtZSBhcmUgcmVuZGVyZWQgaW50byB0aGUgc2FtZSBmb3JtIChzYW1lIGFzICMxOTM5KS5cbiAgICAgIC8vIFRoYXQncyBwcm9iYWJseSBva2F5OyB3ZSBkb24ndCBzdXBwb3J0IGl0IGp1c3QgYXMgd2UgZG9uJ3Qgc3VwcG9ydFxuICAgICAgLy8gbWl4aW5nIFJlYWN0IHJhZGlvIGJ1dHRvbnMgd2l0aCBub24tUmVhY3Qgb25lcy5cbiAgICAgIHZhciBvdGhlckluc3RhbmNlID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUob3RoZXJOb2RlKTtcbiAgICAgICFvdGhlckluc3RhbmNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0RE9NSW5wdXQ6IE1peGluZyBSZWFjdCBhbmQgbm9uLVJlYWN0IHJhZGlvIGlucHV0cyB3aXRoIHRoZSBzYW1lIGBuYW1lYCBpcyBub3Qgc3VwcG9ydGVkLicpIDogX3Byb2RJbnZhcmlhbnQoJzkwJykgOiB2b2lkIDA7XG4gICAgICAvLyBJZiB0aGlzIGlzIGEgY29udHJvbGxlZCByYWRpbyBidXR0b24gZ3JvdXAsIGZvcmNpbmcgdGhlIGlucHV0IHRoYXRcbiAgICAgIC8vIHdhcyBwcmV2aW91c2x5IGNoZWNrZWQgdG8gdXBkYXRlIHdpbGwgY2F1c2UgaXQgdG8gYmUgY29tZSByZS1jaGVja2VkXG4gICAgICAvLyBhcyBhcHByb3ByaWF0ZS5cbiAgICAgIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCBvdGhlckluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmV0dXJuVmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JbnB1dDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01JbnB1dC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eScpO1xudmFyIFJlYWN0Q29tcG9uZW50VHJlZUhvb2sgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3RDb21wb25lbnRUcmVlSG9vaycpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIHdhcm5lZFByb3BlcnRpZXMgPSB7fTtcbnZhciByQVJJQSA9IG5ldyBSZWdFeHAoJ14oYXJpYSktWycgKyBET01Qcm9wZXJ0eS5BVFRSSUJVVEVfTkFNRV9DSEFSICsgJ10qJCcpO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BlcnR5KHRhZ05hbWUsIG5hbWUsIGRlYnVnSUQpIHtcbiAgaWYgKHdhcm5lZFByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgd2FybmVkUHJvcGVydGllc1tuYW1lXSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHJBUklBLnRlc3QobmFtZSkpIHtcbiAgICB2YXIgbG93ZXJDYXNlZE5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFyIHN0YW5kYXJkTmFtZSA9IERPTVByb3BlcnR5LmdldFBvc3NpYmxlU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KGxvd2VyQ2FzZWROYW1lKSA/IERPTVByb3BlcnR5LmdldFBvc3NpYmxlU3RhbmRhcmROYW1lW2xvd2VyQ2FzZWROYW1lXSA6IG51bGw7XG5cbiAgICAvLyBJZiB0aGlzIGlzIGFuIGFyaWEtKiBhdHRyaWJ1dGUsIGJ1dCBpcyBub3QgbGlzdGVkIGluIHRoZSBrbm93biBET01cbiAgICAvLyBET00gcHJvcGVydGllcywgdGhlbiBpdCBpcyBhbiBpbnZhbGlkIGFyaWEtKiBhdHRyaWJ1dGUuXG4gICAgaWYgKHN0YW5kYXJkTmFtZSA9PSBudWxsKSB7XG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gYXJpYS0qIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIGxvd2VyY2FzZTsgc3VnZ2VzdCB0aGUgbG93ZXJjYXNlIHZlcnNpb24uXG4gICAgaWYgKG5hbWUgIT09IHN0YW5kYXJkTmFtZSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdVbmtub3duIEFSSUEgYXR0cmlidXRlICVzLiBEaWQgeW91IG1lYW4gJXM/JXMnLCBuYW1lLCBzdGFuZGFyZE5hbWUsIFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQoZGVidWdJRCkpIDogdm9pZCAwO1xuICAgICAgd2FybmVkUHJvcGVydGllc1tuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gd2FybkludmFsaWRBUklBUHJvcHMoZGVidWdJRCwgZWxlbWVudCkge1xuICB2YXIgaW52YWxpZFByb3BzID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIGVsZW1lbnQucHJvcHMpIHtcbiAgICB2YXIgaXNWYWxpZCA9IHZhbGlkYXRlUHJvcGVydHkoZWxlbWVudC50eXBlLCBrZXksIGRlYnVnSUQpO1xuICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgaW52YWxpZFByb3BzLnB1c2goa2V5KTtcbiAgICB9XG4gIH1cblxuICB2YXIgdW5rbm93blByb3BTdHJpbmcgPSBpbnZhbGlkUHJvcHMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgcmV0dXJuICdgJyArIHByb3AgKyAnYCc7XG4gIH0pLmpvaW4oJywgJyk7XG5cbiAgaWYgKGludmFsaWRQcm9wcy5sZW5ndGggPT09IDEpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ludmFsaWQgYXJpYSBwcm9wICVzIG9uIDwlcz4gdGFnLiAnICsgJ0ZvciBkZXRhaWxzLCBzZWUgaHR0cHM6Ly9mYi5tZS9pbnZhbGlkLWFyaWEtcHJvcCVzJywgdW5rbm93blByb3BTdHJpbmcsIGVsZW1lbnQudHlwZSwgUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRTdGFja0FkZGVuZHVtQnlJRChkZWJ1Z0lEKSkgOiB2b2lkIDA7XG4gIH0gZWxzZSBpZiAoaW52YWxpZFByb3BzLmxlbmd0aCA+IDEpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ludmFsaWQgYXJpYSBwcm9wcyAlcyBvbiA8JXM+IHRhZy4gJyArICdGb3IgZGV0YWlscywgc2VlIGh0dHBzOi8vZmIubWUvaW52YWxpZC1hcmlhLXByb3AlcycsIHVua25vd25Qcm9wU3RyaW5nLCBlbGVtZW50LnR5cGUsIFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQoZGVidWdJRCkpIDogdm9pZCAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUVsZW1lbnQoZGVidWdJRCwgZWxlbWVudCkge1xuICBpZiAoZWxlbWVudCA9PSBudWxsIHx8IHR5cGVvZiBlbGVtZW50LnR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChlbGVtZW50LnR5cGUuaW5kZXhPZignLScpID49IDAgfHwgZWxlbWVudC5wcm9wcy5pcykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHdhcm5JbnZhbGlkQVJJQVByb3BzKGRlYnVnSUQsIGVsZW1lbnQpO1xufVxuXG52YXIgUmVhY3RET01JbnZhbGlkQVJJQUhvb2sgPSB7XG4gIG9uQmVmb3JlTW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChkZWJ1Z0lELCBlbGVtZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGhhbmRsZUVsZW1lbnQoZGVidWdJRCwgZWxlbWVudCk7XG4gICAgfVxuICB9LFxuICBvbkJlZm9yZVVwZGF0ZUNvbXBvbmVudDogZnVuY3Rpb24gKGRlYnVnSUQsIGVsZW1lbnQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaGFuZGxlRWxlbWVudChkZWJ1Z0lELCBlbGVtZW50KTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JbnZhbGlkQVJJQUhvb2s7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NSW52YWxpZEFSSUFIb29rLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDb21wb25lbnRUcmVlSG9vayA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudFRyZWVIb29rJyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgZGlkV2FyblZhbHVlTnVsbCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBoYW5kbGVFbGVtZW50KGRlYnVnSUQsIGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZWxlbWVudC50eXBlICE9PSAnaW5wdXQnICYmIGVsZW1lbnQudHlwZSAhPT0gJ3RleHRhcmVhJyAmJiBlbGVtZW50LnR5cGUgIT09ICdzZWxlY3QnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChlbGVtZW50LnByb3BzICE9IG51bGwgJiYgZWxlbWVudC5wcm9wcy52YWx1ZSA9PT0gbnVsbCAmJiAhZGlkV2FyblZhbHVlTnVsbCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnYHZhbHVlYCBwcm9wIG9uIGAlc2Agc2hvdWxkIG5vdCBiZSBudWxsLiAnICsgJ0NvbnNpZGVyIHVzaW5nIHRoZSBlbXB0eSBzdHJpbmcgdG8gY2xlYXIgdGhlIGNvbXBvbmVudCBvciBgdW5kZWZpbmVkYCAnICsgJ2ZvciB1bmNvbnRyb2xsZWQgY29tcG9uZW50cy4lcycsIGVsZW1lbnQudHlwZSwgUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRTdGFja0FkZGVuZHVtQnlJRChkZWJ1Z0lEKSkgOiB2b2lkIDA7XG5cbiAgICBkaWRXYXJuVmFsdWVOdWxsID0gdHJ1ZTtcbiAgfVxufVxuXG52YXIgUmVhY3RET01OdWxsSW5wdXRWYWx1ZVByb3BIb29rID0ge1xuICBvbkJlZm9yZU1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoZGVidWdJRCwgZWxlbWVudCkge1xuICAgIGhhbmRsZUVsZW1lbnQoZGVidWdJRCwgZWxlbWVudCk7XG4gIH0sXG4gIG9uQmVmb3JlVXBkYXRlQ29tcG9uZW50OiBmdW5jdGlvbiAoZGVidWdJRCwgZWxlbWVudCkge1xuICAgIGhhbmRsZUVsZW1lbnQoZGVidWdJRCwgZWxlbWVudCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01OdWxsSW5wdXRWYWx1ZVByb3BIb29rO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTU51bGxJbnB1dFZhbHVlUHJvcEhvb2suanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3QnKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xudmFyIFJlYWN0RE9NU2VsZWN0ID0gcmVxdWlyZSgnLi9SZWFjdERPTVNlbGVjdCcpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbnZhciBkaWRXYXJuSW52YWxpZE9wdGlvbkNoaWxkcmVuID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsYXR0ZW5DaGlsZHJlbihjaGlsZHJlbikge1xuICB2YXIgY29udGVudCA9ICcnO1xuXG4gIC8vIEZsYXR0ZW4gY2hpbGRyZW4gYW5kIHdhcm4gaWYgdGhleSBhcmVuJ3Qgc3RyaW5ncyBvciBudW1iZXJzO1xuICAvLyBpbnZhbGlkIHR5cGVzIGFyZSBpZ25vcmVkLlxuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgY2hpbGQgPT09ICdudW1iZXInKSB7XG4gICAgICBjb250ZW50ICs9IGNoaWxkO1xuICAgIH0gZWxzZSBpZiAoIWRpZFdhcm5JbnZhbGlkT3B0aW9uQ2hpbGRyZW4pIHtcbiAgICAgIGRpZFdhcm5JbnZhbGlkT3B0aW9uQ2hpbGRyZW4gPSB0cnVlO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdPbmx5IHN0cmluZ3MgYW5kIG51bWJlcnMgYXJlIHN1cHBvcnRlZCBhcyA8b3B0aW9uPiBjaGlsZHJlbi4nKSA6IHZvaWQgMDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIEltcGxlbWVudHMgYW4gPG9wdGlvbj4gaG9zdCBjb21wb25lbnQgdGhhdCB3YXJucyB3aGVuIGBzZWxlY3RlZGAgaXMgc2V0LlxuICovXG52YXIgUmVhY3RET01PcHRpb24gPSB7XG4gIG1vdW50V3JhcHBlcjogZnVuY3Rpb24gKGluc3QsIHByb3BzLCBob3N0UGFyZW50KSB7XG4gICAgLy8gVE9ETyAoeXVuZ3N0ZXJzKTogUmVtb3ZlIHN1cHBvcnQgZm9yIGBzZWxlY3RlZGAgaW4gPG9wdGlvbj4uXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHByb3BzLnNlbGVjdGVkID09IG51bGwsICdVc2UgdGhlIGBkZWZhdWx0VmFsdWVgIG9yIGB2YWx1ZWAgcHJvcHMgb24gPHNlbGVjdD4gaW5zdGVhZCBvZiAnICsgJ3NldHRpbmcgYHNlbGVjdGVkYCBvbiA8b3B0aW9uPi4nKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICAvLyBMb29rIHVwIHdoZXRoZXIgdGhpcyBvcHRpb24gaXMgJ3NlbGVjdGVkJ1xuICAgIHZhciBzZWxlY3RWYWx1ZSA9IG51bGw7XG4gICAgaWYgKGhvc3RQYXJlbnQgIT0gbnVsbCkge1xuICAgICAgdmFyIHNlbGVjdFBhcmVudCA9IGhvc3RQYXJlbnQ7XG5cbiAgICAgIGlmIChzZWxlY3RQYXJlbnQuX3RhZyA9PT0gJ29wdGdyb3VwJykge1xuICAgICAgICBzZWxlY3RQYXJlbnQgPSBzZWxlY3RQYXJlbnQuX2hvc3RQYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxlY3RQYXJlbnQgIT0gbnVsbCAmJiBzZWxlY3RQYXJlbnQuX3RhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgc2VsZWN0VmFsdWUgPSBSZWFjdERPTVNlbGVjdC5nZXRTZWxlY3RWYWx1ZUNvbnRleHQoc2VsZWN0UGFyZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgdmFsdWUgaXMgbnVsbCAoZS5nLiwgbm8gc3BlY2lmaWVkIHZhbHVlIG9yIGFmdGVyIGluaXRpYWwgbW91bnQpXG4gICAgLy8gb3IgbWlzc2luZyAoZS5nLiwgZm9yIDxkYXRhbGlzdD4pLCB3ZSBkb24ndCBjaGFuZ2UgcHJvcHMuc2VsZWN0ZWRcbiAgICB2YXIgc2VsZWN0ZWQgPSBudWxsO1xuICAgIGlmIChzZWxlY3RWYWx1ZSAhPSBudWxsKSB7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICBpZiAocHJvcHMudmFsdWUgIT0gbnVsbCkge1xuICAgICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlICsgJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IGZsYXR0ZW5DaGlsZHJlbihwcm9wcy5jaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBzZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2VsZWN0VmFsdWUpKSB7XG4gICAgICAgIC8vIG11bHRpcGxlXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0VmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoJycgKyBzZWxlY3RWYWx1ZVtpXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0ZWQgPSAnJyArIHNlbGVjdFZhbHVlID09PSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnN0Ll93cmFwcGVyU3RhdGUgPSB7IHNlbGVjdGVkOiBzZWxlY3RlZCB9O1xuICB9LFxuXG4gIHBvc3RNb3VudFdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgLy8gdmFsdWU9XCJcIiBzaG91bGQgbWFrZSBhIHZhbHVlIGF0dHJpYnV0ZSAoIzYyMTkpXG4gICAgdmFyIHByb3BzID0gaW5zdC5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gICAgaWYgKHByb3BzLnZhbHVlICE9IG51bGwpIHtcbiAgICAgIHZhciBub2RlID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgndmFsdWUnLCBwcm9wcy52YWx1ZSk7XG4gICAgfVxuICB9LFxuXG4gIGdldEhvc3RQcm9wczogZnVuY3Rpb24gKGluc3QsIHByb3BzKSB7XG4gICAgdmFyIGhvc3RQcm9wcyA9IF9hc3NpZ24oeyBzZWxlY3RlZDogdW5kZWZpbmVkLCBjaGlsZHJlbjogdW5kZWZpbmVkIH0sIHByb3BzKTtcblxuICAgIC8vIFJlYWQgc3RhdGUgb25seSBmcm9tIGluaXRpYWwgbW91bnQgYmVjYXVzZSA8c2VsZWN0PiB1cGRhdGVzIHZhbHVlXG4gICAgLy8gbWFudWFsbHk7IHdlIG5lZWQgdGhlIGluaXRpYWwgc3RhdGUgb25seSBmb3Igc2VydmVyIHJlbmRlcmluZ1xuICAgIGlmIChpbnN0Ll93cmFwcGVyU3RhdGUuc2VsZWN0ZWQgIT0gbnVsbCkge1xuICAgICAgaG9zdFByb3BzLnNlbGVjdGVkID0gaW5zdC5fd3JhcHBlclN0YXRlLnNlbGVjdGVkO1xuICAgIH1cblxuICAgIHZhciBjb250ZW50ID0gZmxhdHRlbkNoaWxkcmVuKHByb3BzLmNoaWxkcmVuKTtcblxuICAgIGlmIChjb250ZW50KSB7XG4gICAgICBob3N0UHJvcHMuY2hpbGRyZW4gPSBjb250ZW50O1xuICAgIH1cblxuICAgIHJldHVybiBob3N0UHJvcHM7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01PcHRpb247XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NT3B0aW9uLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldCA9IHJlcXVpcmUoJy4vZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldCcpO1xudmFyIGdldFRleHRDb250ZW50QWNjZXNzb3IgPSByZXF1aXJlKCcuL2dldFRleHRDb250ZW50QWNjZXNzb3InKTtcblxuLyoqXG4gKiBXaGlsZSBgaXNDb2xsYXBzZWRgIGlzIGF2YWlsYWJsZSBvbiB0aGUgU2VsZWN0aW9uIG9iamVjdCBhbmQgYGNvbGxhcHNlZGBcbiAqIGlzIGF2YWlsYWJsZSBvbiB0aGUgUmFuZ2Ugb2JqZWN0LCBJRTExIHNvbWV0aW1lcyBnZXRzIHRoZW0gd3JvbmcuXG4gKiBJZiB0aGUgYW5jaG9yL2ZvY3VzIG5vZGVzIGFuZCBvZmZzZXRzIGFyZSB0aGUgc2FtZSwgdGhlIHJhbmdlIGlzIGNvbGxhcHNlZC5cbiAqL1xuZnVuY3Rpb24gaXNDb2xsYXBzZWQoYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0LCBmb2N1c05vZGUsIGZvY3VzT2Zmc2V0KSB7XG4gIHJldHVybiBhbmNob3JOb2RlID09PSBmb2N1c05vZGUgJiYgYW5jaG9yT2Zmc2V0ID09PSBmb2N1c09mZnNldDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGFwcHJvcHJpYXRlIGFuY2hvciBhbmQgZm9jdXMgbm9kZS9vZmZzZXQgcGFpcnMgZm9yIElFLlxuICpcbiAqIFRoZSBjYXRjaCBoZXJlIGlzIHRoYXQgSUUncyBzZWxlY3Rpb24gQVBJIGRvZXNuJ3QgcHJvdmlkZSBpbmZvcm1hdGlvblxuICogYWJvdXQgd2hldGhlciB0aGUgc2VsZWN0aW9uIGlzIGZvcndhcmQgb3IgYmFja3dhcmQsIHNvIHdlIGhhdmUgdG9cbiAqIGJlaGF2ZSBhcyB0aG91Z2ggaXQncyBhbHdheXMgZm9yd2FyZC5cbiAqXG4gKiBJRSB0ZXh0IGRpZmZlcnMgZnJvbSBtb2Rlcm4gc2VsZWN0aW9uIGluIHRoYXQgaXQgYmVoYXZlcyBhcyB0aG91Z2hcbiAqIGJsb2NrIGVsZW1lbnRzIGVuZCB3aXRoIGEgbmV3IGxpbmUuIFRoaXMgbWVhbnMgY2hhcmFjdGVyIG9mZnNldHMgd2lsbFxuICogZGlmZmVyIGJldHdlZW4gdGhlIHR3byBBUElzLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRJRU9mZnNldHMobm9kZSkge1xuICB2YXIgc2VsZWN0aW9uID0gZG9jdW1lbnQuc2VsZWN0aW9uO1xuICB2YXIgc2VsZWN0ZWRSYW5nZSA9IHNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICB2YXIgc2VsZWN0ZWRMZW5ndGggPSBzZWxlY3RlZFJhbmdlLnRleHQubGVuZ3RoO1xuXG4gIC8vIER1cGxpY2F0ZSBzZWxlY3Rpb24gc28gd2UgY2FuIG1vdmUgcmFuZ2Ugd2l0aG91dCBicmVha2luZyB1c2VyIHNlbGVjdGlvbi5cbiAgdmFyIGZyb21TdGFydCA9IHNlbGVjdGVkUmFuZ2UuZHVwbGljYXRlKCk7XG4gIGZyb21TdGFydC5tb3ZlVG9FbGVtZW50VGV4dChub2RlKTtcbiAgZnJvbVN0YXJ0LnNldEVuZFBvaW50KCdFbmRUb1N0YXJ0Jywgc2VsZWN0ZWRSYW5nZSk7XG5cbiAgdmFyIHN0YXJ0T2Zmc2V0ID0gZnJvbVN0YXJ0LnRleHQubGVuZ3RoO1xuICB2YXIgZW5kT2Zmc2V0ID0gc3RhcnRPZmZzZXQgKyBzZWxlY3RlZExlbmd0aDtcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydE9mZnNldCxcbiAgICBlbmQ6IGVuZE9mZnNldFxuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7P29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0TW9kZXJuT2Zmc2V0cyhub2RlKSB7XG4gIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uICYmIHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcblxuICBpZiAoIXNlbGVjdGlvbiB8fCBzZWxlY3Rpb24ucmFuZ2VDb3VudCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGFuY2hvck5vZGUgPSBzZWxlY3Rpb24uYW5jaG9yTm9kZTtcbiAgdmFyIGFuY2hvck9mZnNldCA9IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQ7XG4gIHZhciBmb2N1c05vZGUgPSBzZWxlY3Rpb24uZm9jdXNOb2RlO1xuICB2YXIgZm9jdXNPZmZzZXQgPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQ7XG5cbiAgdmFyIGN1cnJlbnRSYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuXG4gIC8vIEluIEZpcmVmb3gsIHJhbmdlLnN0YXJ0Q29udGFpbmVyIGFuZCByYW5nZS5lbmRDb250YWluZXIgY2FuIGJlIFwiYW5vbnltb3VzXG4gIC8vIGRpdnNcIiwgZS5nLiB0aGUgdXAvZG93biBidXR0b25zIG9uIGFuIDxpbnB1dCB0eXBlPVwibnVtYmVyXCI+LiBBbm9ueW1vdXNcbiAgLy8gZGl2cyBkbyBub3Qgc2VlbSB0byBleHBvc2UgcHJvcGVydGllcywgdHJpZ2dlcmluZyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcbiAgLy8gZXJyb3JcIiBpZiBhbnkgb2YgaXRzIHByb3BlcnRpZXMgYXJlIGFjY2Vzc2VkLiBUaGUgb25seSBzZWVtaW5nbHkgcG9zc2libGVcbiAgLy8gd2F5IHRvIGF2b2lkIGVycm9yaW5nIGlzIHRvIGFjY2VzcyBhIHByb3BlcnR5IHRoYXQgdHlwaWNhbGx5IHdvcmtzIGZvclxuICAvLyBub24tYW5vbnltb3VzIGRpdnMgYW5kIGNhdGNoIGFueSBlcnJvciB0aGF0IG1heSBvdGhlcndpc2UgYXJpc2UuIFNlZVxuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0yMDg0MjdcbiAgdHJ5IHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cbiAgICBjdXJyZW50UmFuZ2Uuc3RhcnRDb250YWluZXIubm9kZVR5cGU7XG4gICAgY3VycmVudFJhbmdlLmVuZENvbnRhaW5lci5ub2RlVHlwZTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBJZiB0aGUgbm9kZSBhbmQgb2Zmc2V0IHZhbHVlcyBhcmUgdGhlIHNhbWUsIHRoZSBzZWxlY3Rpb24gaXMgY29sbGFwc2VkLlxuICAvLyBgU2VsZWN0aW9uLmlzQ29sbGFwc2VkYCBpcyBhdmFpbGFibGUgbmF0aXZlbHksIGJ1dCBJRSBzb21ldGltZXMgZ2V0c1xuICAvLyB0aGlzIHZhbHVlIHdyb25nLlxuICB2YXIgaXNTZWxlY3Rpb25Db2xsYXBzZWQgPSBpc0NvbGxhcHNlZChzZWxlY3Rpb24uYW5jaG9yTm9kZSwgc2VsZWN0aW9uLmFuY2hvck9mZnNldCwgc2VsZWN0aW9uLmZvY3VzTm9kZSwgc2VsZWN0aW9uLmZvY3VzT2Zmc2V0KTtcblxuICB2YXIgcmFuZ2VMZW5ndGggPSBpc1NlbGVjdGlvbkNvbGxhcHNlZCA/IDAgOiBjdXJyZW50UmFuZ2UudG9TdHJpbmcoKS5sZW5ndGg7XG5cbiAgdmFyIHRlbXBSYW5nZSA9IGN1cnJlbnRSYW5nZS5jbG9uZVJhbmdlKCk7XG4gIHRlbXBSYW5nZS5zZWxlY3ROb2RlQ29udGVudHMobm9kZSk7XG4gIHRlbXBSYW5nZS5zZXRFbmQoY3VycmVudFJhbmdlLnN0YXJ0Q29udGFpbmVyLCBjdXJyZW50UmFuZ2Uuc3RhcnRPZmZzZXQpO1xuXG4gIHZhciBpc1RlbXBSYW5nZUNvbGxhcHNlZCA9IGlzQ29sbGFwc2VkKHRlbXBSYW5nZS5zdGFydENvbnRhaW5lciwgdGVtcFJhbmdlLnN0YXJ0T2Zmc2V0LCB0ZW1wUmFuZ2UuZW5kQ29udGFpbmVyLCB0ZW1wUmFuZ2UuZW5kT2Zmc2V0KTtcblxuICB2YXIgc3RhcnQgPSBpc1RlbXBSYW5nZUNvbGxhcHNlZCA/IDAgOiB0ZW1wUmFuZ2UudG9TdHJpbmcoKS5sZW5ndGg7XG4gIHZhciBlbmQgPSBzdGFydCArIHJhbmdlTGVuZ3RoO1xuXG4gIC8vIERldGVjdCB3aGV0aGVyIHRoZSBzZWxlY3Rpb24gaXMgYmFja3dhcmQuXG4gIHZhciBkZXRlY3Rpb25SYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIGRldGVjdGlvblJhbmdlLnNldFN0YXJ0KGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCk7XG4gIGRldGVjdGlvblJhbmdlLnNldEVuZChmb2N1c05vZGUsIGZvY3VzT2Zmc2V0KTtcbiAgdmFyIGlzQmFja3dhcmQgPSBkZXRlY3Rpb25SYW5nZS5jb2xsYXBzZWQ7XG5cbiAgcmV0dXJuIHtcbiAgICBzdGFydDogaXNCYWNrd2FyZCA/IGVuZCA6IHN0YXJ0LFxuICAgIGVuZDogaXNCYWNrd2FyZCA/IHN0YXJ0IDogZW5kXG4gIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcGFyYW0ge29iamVjdH0gb2Zmc2V0c1xuICovXG5mdW5jdGlvbiBzZXRJRU9mZnNldHMobm9kZSwgb2Zmc2V0cykge1xuICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKS5kdXBsaWNhdGUoKTtcbiAgdmFyIHN0YXJ0LCBlbmQ7XG5cbiAgaWYgKG9mZnNldHMuZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IG9mZnNldHMuc3RhcnQ7XG4gICAgZW5kID0gc3RhcnQ7XG4gIH0gZWxzZSBpZiAob2Zmc2V0cy5zdGFydCA+IG9mZnNldHMuZW5kKSB7XG4gICAgc3RhcnQgPSBvZmZzZXRzLmVuZDtcbiAgICBlbmQgPSBvZmZzZXRzLnN0YXJ0O1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0ID0gb2Zmc2V0cy5zdGFydDtcbiAgICBlbmQgPSBvZmZzZXRzLmVuZDtcbiAgfVxuXG4gIHJhbmdlLm1vdmVUb0VsZW1lbnRUZXh0KG5vZGUpO1xuICByYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIHN0YXJ0KTtcbiAgcmFuZ2Uuc2V0RW5kUG9pbnQoJ0VuZFRvU3RhcnQnLCByYW5nZSk7XG4gIHJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIGVuZCAtIHN0YXJ0KTtcbiAgcmFuZ2Uuc2VsZWN0KCk7XG59XG5cbi8qKlxuICogSW4gbW9kZXJuIG5vbi1JRSBicm93c2Vycywgd2UgY2FuIHN1cHBvcnQgYm90aCBmb3J3YXJkIGFuZCBiYWNrd2FyZFxuICogc2VsZWN0aW9ucy5cbiAqXG4gKiBOb3RlOiBJRTEwKyBzdXBwb3J0cyB0aGUgU2VsZWN0aW9uIG9iamVjdCwgYnV0IGl0IGRvZXMgbm90IHN1cHBvcnRcbiAqIHRoZSBgZXh0ZW5kYCBtZXRob2QsIHdoaWNoIG1lYW5zIHRoYXQgZXZlbiBpbiBtb2Rlcm4gSUUsIGl0J3Mgbm90IHBvc3NpYmxlXG4gKiB0byBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZSBhIGJhY2t3YXJkIHNlbGVjdGlvbi4gVGh1cywgZm9yIGFsbCBJRVxuICogdmVyc2lvbnMsIHdlIHVzZSB0aGUgb2xkIElFIEFQSSB0byBjcmVhdGUgb3VyIHNlbGVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcGFyYW0ge29iamVjdH0gb2Zmc2V0c1xuICovXG5mdW5jdGlvbiBzZXRNb2Rlcm5PZmZzZXRzKG5vZGUsIG9mZnNldHMpIHtcbiAgaWYgKCF3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGxlbmd0aCA9IG5vZGVbZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpXS5sZW5ndGg7XG4gIHZhciBzdGFydCA9IE1hdGgubWluKG9mZnNldHMuc3RhcnQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSBvZmZzZXRzLmVuZCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiBNYXRoLm1pbihvZmZzZXRzLmVuZCwgbGVuZ3RoKTtcblxuICAvLyBJRSAxMSB1c2VzIG1vZGVybiBzZWxlY3Rpb24sIGJ1dCBkb2Vzbid0IHN1cHBvcnQgdGhlIGV4dGVuZCBtZXRob2QuXG4gIC8vIEZsaXAgYmFja3dhcmQgc2VsZWN0aW9ucywgc28gd2UgY2FuIHNldCB3aXRoIGEgc2luZ2xlIHJhbmdlLlxuICBpZiAoIXNlbGVjdGlvbi5leHRlbmQgJiYgc3RhcnQgPiBlbmQpIHtcbiAgICB2YXIgdGVtcCA9IGVuZDtcbiAgICBlbmQgPSBzdGFydDtcbiAgICBzdGFydCA9IHRlbXA7XG4gIH1cblxuICB2YXIgc3RhcnRNYXJrZXIgPSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KG5vZGUsIHN0YXJ0KTtcbiAgdmFyIGVuZE1hcmtlciA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQobm9kZSwgZW5kKTtcblxuICBpZiAoc3RhcnRNYXJrZXIgJiYgZW5kTWFya2VyKSB7XG4gICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICByYW5nZS5zZXRTdGFydChzdGFydE1hcmtlci5ub2RlLCBzdGFydE1hcmtlci5vZmZzZXQpO1xuICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcblxuICAgIGlmIChzdGFydCA+IGVuZCkge1xuICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAgICAgIHNlbGVjdGlvbi5leHRlbmQoZW5kTWFya2VyLm5vZGUsIGVuZE1hcmtlci5vZmZzZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYW5nZS5zZXRFbmQoZW5kTWFya2VyLm5vZGUsIGVuZE1hcmtlci5vZmZzZXQpO1xuICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHVzZUlFT2Zmc2V0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiAnc2VsZWN0aW9uJyBpbiBkb2N1bWVudCAmJiAhKCdnZXRTZWxlY3Rpb24nIGluIHdpbmRvdyk7XG5cbnZhciBSZWFjdERPTVNlbGVjdGlvbiA9IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICAgKi9cbiAgZ2V0T2Zmc2V0czogdXNlSUVPZmZzZXRzID8gZ2V0SUVPZmZzZXRzIDogZ2V0TW9kZXJuT2Zmc2V0cyxcblxuICAvKipcbiAgICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvZmZzZXRzXG4gICAqL1xuICBzZXRPZmZzZXRzOiB1c2VJRU9mZnNldHMgPyBzZXRJRU9mZnNldHMgOiBzZXRNb2Rlcm5PZmZzZXRzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NU2VsZWN0aW9uO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTVNlbGVjdGlvbi5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RGVmYXVsdEluamVjdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3REZWZhdWx0SW5qZWN0aW9uJyk7XG52YXIgUmVhY3RTZXJ2ZXJSZW5kZXJpbmcgPSByZXF1aXJlKCcuL1JlYWN0U2VydmVyUmVuZGVyaW5nJyk7XG52YXIgUmVhY3RWZXJzaW9uID0gcmVxdWlyZSgnLi9SZWFjdFZlcnNpb24nKTtcblxuUmVhY3REZWZhdWx0SW5qZWN0aW9uLmluamVjdCgpO1xuXG52YXIgUmVhY3RET01TZXJ2ZXIgPSB7XG4gIHJlbmRlclRvU3RyaW5nOiBSZWFjdFNlcnZlclJlbmRlcmluZy5yZW5kZXJUb1N0cmluZyxcbiAgcmVuZGVyVG9TdGF0aWNNYXJrdXA6IFJlYWN0U2VydmVyUmVuZGVyaW5nLnJlbmRlclRvU3RhdGljTWFya3VwLFxuICB2ZXJzaW9uOiBSZWFjdFZlcnNpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01TZXJ2ZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NU2VydmVyLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpLFxuICAgIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBET01DaGlsZHJlbk9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0RPTUNoaWxkcmVuT3BlcmF0aW9ucycpO1xudmFyIERPTUxhenlUcmVlID0gcmVxdWlyZSgnLi9ET01MYXp5VHJlZScpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG5cbnZhciBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIgPSByZXF1aXJlKCcuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlcicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHZhbGlkYXRlRE9NTmVzdGluZyA9IHJlcXVpcmUoJy4vdmFsaWRhdGVET01OZXN0aW5nJyk7XG5cbi8qKlxuICogVGV4dCBub2RlcyB2aW9sYXRlIGEgY291cGxlIGFzc3VtcHRpb25zIHRoYXQgUmVhY3QgbWFrZXMgYWJvdXQgY29tcG9uZW50czpcbiAqXG4gKiAgLSBXaGVuIG1vdW50aW5nIHRleHQgaW50byB0aGUgRE9NLCBhZGphY2VudCB0ZXh0IG5vZGVzIGFyZSBtZXJnZWQuXG4gKiAgLSBUZXh0IG5vZGVzIGNhbm5vdCBiZSBhc3NpZ25lZCBhIFJlYWN0IHJvb3QgSUQuXG4gKlxuICogVGhpcyBjb21wb25lbnQgaXMgdXNlZCB0byB3cmFwIHN0cmluZ3MgYmV0d2VlbiBjb21tZW50IG5vZGVzIHNvIHRoYXQgdGhleVxuICogY2FuIHVuZGVyZ28gdGhlIHNhbWUgcmVjb25jaWxpYXRpb24gdGhhdCBpcyBhcHBsaWVkIHRvIGVsZW1lbnRzLlxuICpcbiAqIFRPRE86IEludmVzdGlnYXRlIHJlcHJlc2VudGluZyBSZWFjdCBjb21wb25lbnRzIGluIHRoZSBET00gd2l0aCB0ZXh0IG5vZGVzLlxuICpcbiAqIEBjbGFzcyBSZWFjdERPTVRleHRDb21wb25lbnRcbiAqIEBleHRlbmRzIFJlYWN0Q29tcG9uZW50XG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0RE9NVGV4dENvbXBvbmVudCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIC8vIFRPRE86IFRoaXMgaXMgcmVhbGx5IGEgUmVhY3RUZXh0IChSZWFjdE5vZGUpLCBub3QgYSBSZWFjdEVsZW1lbnRcbiAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSB0ZXh0O1xuICB0aGlzLl9zdHJpbmdUZXh0ID0gJycgKyB0ZXh0O1xuICAvLyBSZWFjdERPTUNvbXBvbmVudFRyZWUgdXNlcyB0aGVzZTpcbiAgdGhpcy5faG9zdE5vZGUgPSBudWxsO1xuICB0aGlzLl9ob3N0UGFyZW50ID0gbnVsbDtcblxuICAvLyBQcm9wZXJ0aWVzXG4gIHRoaXMuX2RvbUlEID0gMDtcbiAgdGhpcy5fbW91bnRJbmRleCA9IDA7XG4gIHRoaXMuX2Nsb3NpbmdDb21tZW50ID0gbnVsbDtcbiAgdGhpcy5fY29tbWVudE5vZGVzID0gbnVsbDtcbn07XG5cbl9hc3NpZ24oUmVhY3RET01UZXh0Q29tcG9uZW50LnByb3RvdHlwZSwge1xuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgbWFya3VwIGZvciB0aGlzIHRleHQgbm9kZS4gVGhpcyBub2RlIGlzIG5vdCBpbnRlbmRlZCB0byBoYXZlXG4gICAqIGFueSBmZWF0dXJlcyBiZXNpZGVzIGNvbnRhaW5pbmcgdGV4dCBjb250ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgZm9yIHRoaXMgdGV4dCBub2RlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCBjb250ZXh0KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBwYXJlbnRJbmZvO1xuICAgICAgaWYgKGhvc3RQYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICBwYXJlbnRJbmZvID0gaG9zdFBhcmVudC5fYW5jZXN0b3JJbmZvO1xuICAgICAgfSBlbHNlIGlmIChob3N0Q29udGFpbmVySW5mbyAhPSBudWxsKSB7XG4gICAgICAgIHBhcmVudEluZm8gPSBob3N0Q29udGFpbmVySW5mby5fYW5jZXN0b3JJbmZvO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmVudEluZm8pIHtcbiAgICAgICAgLy8gcGFyZW50SW5mbyBzaG91bGQgYWx3YXlzIGJlIHByZXNlbnQgZXhjZXB0IGZvciB0aGUgdG9wLWxldmVsXG4gICAgICAgIC8vIGNvbXBvbmVudCB3aGVuIHNlcnZlciByZW5kZXJpbmdcbiAgICAgICAgdmFsaWRhdGVET01OZXN0aW5nKG51bGwsIHRoaXMuX3N0cmluZ1RleHQsIHRoaXMsIHBhcmVudEluZm8pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkb21JRCA9IGhvc3RDb250YWluZXJJbmZvLl9pZENvdW50ZXIrKztcbiAgICB2YXIgb3BlbmluZ1ZhbHVlID0gJyByZWFjdC10ZXh0OiAnICsgZG9tSUQgKyAnICc7XG4gICAgdmFyIGNsb3NpbmdWYWx1ZSA9ICcgL3JlYWN0LXRleHQgJztcbiAgICB0aGlzLl9kb21JRCA9IGRvbUlEO1xuICAgIHRoaXMuX2hvc3RQYXJlbnQgPSBob3N0UGFyZW50O1xuICAgIGlmICh0cmFuc2FjdGlvbi51c2VDcmVhdGVFbGVtZW50KSB7XG4gICAgICB2YXIgb3duZXJEb2N1bWVudCA9IGhvc3RDb250YWluZXJJbmZvLl9vd25lckRvY3VtZW50O1xuICAgICAgdmFyIG9wZW5pbmdDb21tZW50ID0gb3duZXJEb2N1bWVudC5jcmVhdGVDb21tZW50KG9wZW5pbmdWYWx1ZSk7XG4gICAgICB2YXIgY2xvc2luZ0NvbW1lbnQgPSBvd25lckRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoY2xvc2luZ1ZhbHVlKTtcbiAgICAgIHZhciBsYXp5VHJlZSA9IERPTUxhenlUcmVlKG93bmVyRG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpKTtcbiAgICAgIERPTUxhenlUcmVlLnF1ZXVlQ2hpbGQobGF6eVRyZWUsIERPTUxhenlUcmVlKG9wZW5pbmdDb21tZW50KSk7XG4gICAgICBpZiAodGhpcy5fc3RyaW5nVGV4dCkge1xuICAgICAgICBET01MYXp5VHJlZS5xdWV1ZUNoaWxkKGxhenlUcmVlLCBET01MYXp5VHJlZShvd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMuX3N0cmluZ1RleHQpKSk7XG4gICAgICB9XG4gICAgICBET01MYXp5VHJlZS5xdWV1ZUNoaWxkKGxhenlUcmVlLCBET01MYXp5VHJlZShjbG9zaW5nQ29tbWVudCkpO1xuICAgICAgUmVhY3RET01Db21wb25lbnRUcmVlLnByZWNhY2hlTm9kZSh0aGlzLCBvcGVuaW5nQ29tbWVudCk7XG4gICAgICB0aGlzLl9jbG9zaW5nQ29tbWVudCA9IGNsb3NpbmdDb21tZW50O1xuICAgICAgcmV0dXJuIGxhenlUcmVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZXNjYXBlZFRleHQgPSBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodGhpcy5fc3RyaW5nVGV4dCk7XG5cbiAgICAgIGlmICh0cmFuc2FjdGlvbi5yZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICAgICAgICAvLyBOb3JtYWxseSB3ZSdkIHdyYXAgdGhpcyBiZXR3ZWVuIGNvbW1lbnQgbm9kZXMgZm9yIHRoZSByZWFzb25zIHN0YXRlZFxuICAgICAgICAvLyBhYm92ZSwgYnV0IHNpbmNlIHRoaXMgaXMgYSBzaXR1YXRpb24gd2hlcmUgUmVhY3Qgd29uJ3QgdGFrZSBvdmVyXG4gICAgICAgIC8vIChzdGF0aWMgcGFnZXMpLCB3ZSBjYW4gc2ltcGx5IHJldHVybiB0aGUgdGV4dCBhcyBpdCBpcy5cbiAgICAgICAgcmV0dXJuIGVzY2FwZWRUZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJzwhLS0nICsgb3BlbmluZ1ZhbHVlICsgJy0tPicgKyBlc2NhcGVkVGV4dCArICc8IS0tJyArIGNsb3NpbmdWYWx1ZSArICctLT4nO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGlzIGNvbXBvbmVudCBieSB1cGRhdGluZyB0aGUgdGV4dCBjb250ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0VGV4dH0gbmV4dFRleHQgVGhlIG5leHQgdGV4dCBjb250ZW50XG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqL1xuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbiAobmV4dFRleHQsIHRyYW5zYWN0aW9uKSB7XG4gICAgaWYgKG5leHRUZXh0ICE9PSB0aGlzLl9jdXJyZW50RWxlbWVudCkge1xuICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBuZXh0VGV4dDtcbiAgICAgIHZhciBuZXh0U3RyaW5nVGV4dCA9ICcnICsgbmV4dFRleHQ7XG4gICAgICBpZiAobmV4dFN0cmluZ1RleHQgIT09IHRoaXMuX3N0cmluZ1RleHQpIHtcbiAgICAgICAgLy8gVE9ETzogU2F2ZSB0aGlzIGFzIHBlbmRpbmcgcHJvcHMgYW5kIHVzZSBwZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnlcbiAgICAgICAgLy8gYW5kL29yIHVwZGF0ZUNvbXBvbmVudCB0byBkbyB0aGUgYWN0dWFsIHVwZGF0ZSBmb3IgY29uc2lzdGVuY3kgd2l0aFxuICAgICAgICAvLyBvdGhlciBjb21wb25lbnQgdHlwZXM/XG4gICAgICAgIHRoaXMuX3N0cmluZ1RleHQgPSBuZXh0U3RyaW5nVGV4dDtcbiAgICAgICAgdmFyIGNvbW1lbnROb2RlcyA9IHRoaXMuZ2V0SG9zdE5vZGUoKTtcbiAgICAgICAgRE9NQ2hpbGRyZW5PcGVyYXRpb25zLnJlcGxhY2VEZWxpbWl0ZWRUZXh0KGNvbW1lbnROb2Rlc1swXSwgY29tbWVudE5vZGVzWzFdLCBuZXh0U3RyaW5nVGV4dCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGdldEhvc3ROb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhvc3ROb2RlID0gdGhpcy5fY29tbWVudE5vZGVzO1xuICAgIGlmIChob3N0Tm9kZSkge1xuICAgICAgcmV0dXJuIGhvc3ROb2RlO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX2Nsb3NpbmdDb21tZW50KSB7XG4gICAgICB2YXIgb3BlbmluZ0NvbW1lbnQgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZSh0aGlzKTtcbiAgICAgIHZhciBub2RlID0gb3BlbmluZ0NvbW1lbnQubmV4dFNpYmxpbmc7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAhKG5vZGUgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTWlzc2luZyBjbG9zaW5nIGNvbW1lbnQgZm9yIHRleHQgY29tcG9uZW50ICVzJywgdGhpcy5fZG9tSUQpIDogX3Byb2RJbnZhcmlhbnQoJzY3JywgdGhpcy5fZG9tSUQpIDogdm9pZCAwO1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAmJiBub2RlLm5vZGVWYWx1ZSA9PT0gJyAvcmVhY3QtdGV4dCAnKSB7XG4gICAgICAgICAgdGhpcy5fY2xvc2luZ0NvbW1lbnQgPSBub2RlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgIH1cbiAgICBob3N0Tm9kZSA9IFt0aGlzLl9ob3N0Tm9kZSwgdGhpcy5fY2xvc2luZ0NvbW1lbnRdO1xuICAgIHRoaXMuX2NvbW1lbnROb2RlcyA9IGhvc3ROb2RlO1xuICAgIHJldHVybiBob3N0Tm9kZTtcbiAgfSxcblxuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fY2xvc2luZ0NvbW1lbnQgPSBudWxsO1xuICAgIHRoaXMuX2NvbW1lbnROb2RlcyA9IG51bGw7XG4gICAgUmVhY3RET01Db21wb25lbnRUcmVlLnVuY2FjaGVOb2RlKHRoaXMpO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVRleHRDb21wb25lbnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NVGV4dENvbXBvbmVudC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKSxcbiAgICBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgTGlua2VkVmFsdWVVdGlscyA9IHJlcXVpcmUoJy4vTGlua2VkVmFsdWVVdGlscycpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBkaWRXYXJuVmFsdWVMaW5rID0gZmFsc2U7XG52YXIgZGlkV2FyblZhbERlZmF1bHRWYWwgPSBmYWxzZTtcblxuZnVuY3Rpb24gZm9yY2VVcGRhdGVJZk1vdW50ZWQoKSB7XG4gIGlmICh0aGlzLl9yb290Tm9kZUlEKSB7XG4gICAgLy8gRE9NIGNvbXBvbmVudCBpcyBzdGlsbCBtb3VudGVkOyB1cGRhdGVcbiAgICBSZWFjdERPTVRleHRhcmVhLnVwZGF0ZVdyYXBwZXIodGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgPHRleHRhcmVhPiBob3N0IGNvbXBvbmVudCB0aGF0IGFsbG93cyBzZXR0aW5nIGB2YWx1ZWAsIGFuZFxuICogYGRlZmF1bHRWYWx1ZWAuIFRoaXMgZGlmZmVycyBmcm9tIHRoZSB0cmFkaXRpb25hbCBET00gQVBJIGJlY2F1c2UgdmFsdWUgaXNcbiAqIHVzdWFsbHkgc2V0IGFzIFBDREFUQSBjaGlsZHJlbi5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnMgdGhhdCBhZmZlY3QgdGhlXG4gKiB2YWx1ZSB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIHN1cHBsaWVkIChhbmQgbm90IG51bGwvdW5kZWZpbmVkKSwgdGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbFxuICogbm90IHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC4gSW5zdGVhZCwgdGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGNoYW5nZSBpblxuICogb3JkZXIgZm9yIHRoZSByZW5kZXJlZCBlbGVtZW50IHRvIGJlIHVwZGF0ZWQuXG4gKlxuICogVGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBiZSBpbml0aWFsaXplZCB3aXRoIGFuIGVtcHR5IHZhbHVlLCB0aGUgcHJvcFxuICogYGRlZmF1bHRWYWx1ZWAgaWYgc3BlY2lmaWVkLCBvciB0aGUgY2hpbGRyZW4gY29udGVudCAoZGVwcmVjYXRlZCkuXG4gKi9cbnZhciBSZWFjdERPTVRleHRhcmVhID0ge1xuICBnZXRIb3N0UHJvcHM6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcykge1xuICAgICEocHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBkb2VzIG5vdCBtYWtlIHNlbnNlIG9uIDx0ZXh0YXJlYT4uJykgOiBfcHJvZEludmFyaWFudCgnOTEnKSA6IHZvaWQgMDtcblxuICAgIC8vIEFsd2F5cyBzZXQgY2hpbGRyZW4gdG8gdGhlIHNhbWUgdGhpbmcuIEluIElFOSwgdGhlIHNlbGVjdGlvbiByYW5nZSB3aWxsXG4gICAgLy8gZ2V0IHJlc2V0IGlmIGB0ZXh0Q29udGVudGAgaXMgbXV0YXRlZC4gIFdlIGNvdWxkIGFkZCBhIGNoZWNrIGluIHNldFRleHRDb250ZW50XG4gICAgLy8gdG8gb25seSBzZXQgdGhlIHZhbHVlIGlmL3doZW4gdGhlIHZhbHVlIGRpZmZlcnMgZnJvbSB0aGUgbm9kZSB2YWx1ZSAod2hpY2ggd291bGRcbiAgICAvLyBjb21wbGV0ZWx5IHNvbHZlIHRoaXMgSUU5IGJ1ZyksIGJ1dCBTZWJhc3RpYW4rQmVuIHNlZW1lZCB0byBsaWtlIHRoaXMgc29sdXRpb24uXG4gICAgLy8gVGhlIHZhbHVlIGNhbiBiZSBhIGJvb2xlYW4gb3Igb2JqZWN0IHNvIHRoYXQncyB3aHkgaXQncyBmb3JjZWQgdG8gYmUgYSBzdHJpbmcuXG4gICAgdmFyIGhvc3RQcm9wcyA9IF9hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgICBjaGlsZHJlbjogJycgKyBpbnN0Ll93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlLFxuICAgICAgb25DaGFuZ2U6IGluc3QuX3dyYXBwZXJTdGF0ZS5vbkNoYW5nZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhvc3RQcm9wcztcbiAgfSxcblxuICBtb3VudFdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBMaW5rZWRWYWx1ZVV0aWxzLmNoZWNrUHJvcFR5cGVzKCd0ZXh0YXJlYScsIHByb3BzLCBpbnN0Ll9jdXJyZW50RWxlbWVudC5fb3duZXIpO1xuICAgICAgaWYgKHByb3BzLnZhbHVlTGluayAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuVmFsdWVMaW5rKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnYHZhbHVlTGlua2AgcHJvcCBvbiBgdGV4dGFyZWFgIGlzIGRlcHJlY2F0ZWQ7IHNldCBgdmFsdWVgIGFuZCBgb25DaGFuZ2VgIGluc3RlYWQuJykgOiB2b2lkIDA7XG4gICAgICAgIGRpZFdhcm5WYWx1ZUxpbmsgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5WYWxEZWZhdWx0VmFsKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnVGV4dGFyZWEgZWxlbWVudHMgbXVzdCBiZSBlaXRoZXIgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgJyArICcoc3BlY2lmeSBlaXRoZXIgdGhlIHZhbHVlIHByb3AsIG9yIHRoZSBkZWZhdWx0VmFsdWUgcHJvcCwgYnV0IG5vdCAnICsgJ2JvdGgpLiBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIHRleHRhcmVhICcgKyAnYW5kIHJlbW92ZSBvbmUgb2YgdGhlc2UgcHJvcHMuIE1vcmUgaW5mbzogJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cycpIDogdm9pZCAwO1xuICAgICAgICBkaWRXYXJuVmFsRGVmYXVsdFZhbCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG4gICAgdmFyIGluaXRpYWxWYWx1ZSA9IHZhbHVlO1xuXG4gICAgLy8gT25seSBib3RoZXIgZmV0Y2hpbmcgZGVmYXVsdCB2YWx1ZSBpZiB3ZSdyZSBnb2luZyB0byB1c2UgaXRcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICAgIC8vIFRPRE8gKHl1bmdzdGVycyk6IFJlbW92ZSBzdXBwb3J0IGZvciBjaGlsZHJlbiBjb250ZW50IGluIDx0ZXh0YXJlYT4uXG4gICAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdVc2UgdGhlIGBkZWZhdWx0VmFsdWVgIG9yIGB2YWx1ZWAgcHJvcHMgaW5zdGVhZCBvZiBzZXR0aW5nICcgKyAnY2hpbGRyZW4gb24gPHRleHRhcmVhPi4nKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgICAhKGRlZmF1bHRWYWx1ZSA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdJZiB5b3Ugc3VwcGx5IGBkZWZhdWx0VmFsdWVgIG9uIGEgPHRleHRhcmVhPiwgZG8gbm90IHBhc3MgY2hpbGRyZW4uJykgOiBfcHJvZEludmFyaWFudCgnOTInKSA6IHZvaWQgMDtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICAgICAgIShjaGlsZHJlbi5sZW5ndGggPD0gMSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnPHRleHRhcmVhPiBjYW4gb25seSBoYXZlIGF0IG1vc3Qgb25lIGNoaWxkLicpIDogX3Byb2RJbnZhcmlhbnQoJzkzJykgOiB2b2lkIDA7XG4gICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlblswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9ICcnICsgY2hpbGRyZW47XG4gICAgICB9XG4gICAgICBpZiAoZGVmYXVsdFZhbHVlID09IG51bGwpIHtcbiAgICAgICAgZGVmYXVsdFZhbHVlID0gJyc7XG4gICAgICB9XG4gICAgICBpbml0aWFsVmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgfVxuXG4gICAgaW5zdC5fd3JhcHBlclN0YXRlID0ge1xuICAgICAgaW5pdGlhbFZhbHVlOiAnJyArIGluaXRpYWxWYWx1ZSxcbiAgICAgIGxpc3RlbmVyczogbnVsbCxcbiAgICAgIG9uQ2hhbmdlOiBfaGFuZGxlQ2hhbmdlLmJpbmQoaW5zdClcbiAgICB9O1xuICB9LFxuXG4gIHVwZGF0ZVdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgdmFyIHByb3BzID0gaW5zdC5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgICB2YXIgbm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUocHJvcHMpO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAvLyBDYXN0IGB2YWx1ZWAgdG8gYSBzdHJpbmcgdG8gZW5zdXJlIHRoZSB2YWx1ZSBpcyBzZXQgY29ycmVjdGx5LiBXaGlsZVxuICAgICAgLy8gYnJvd3NlcnMgdHlwaWNhbGx5IGRvIHRoaXMgYXMgbmVjZXNzYXJ5LCBqc2RvbSBkb2Vzbid0LlxuICAgICAgdmFyIG5ld1ZhbHVlID0gJycgKyB2YWx1ZTtcblxuICAgICAgLy8gVG8gYXZvaWQgc2lkZSBlZmZlY3RzIChzdWNoIGFzIGxvc2luZyB0ZXh0IHNlbGVjdGlvbiksIG9ubHkgc2V0IHZhbHVlIGlmIGNoYW5nZWRcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gbm9kZS52YWx1ZSkge1xuICAgICAgICBub2RlLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMuZGVmYXVsdFZhbHVlID09IG51bGwpIHtcbiAgICAgICAgbm9kZS5kZWZhdWx0VmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzLmRlZmF1bHRWYWx1ZSAhPSBudWxsKSB7XG4gICAgICBub2RlLmRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gIH0sXG5cbiAgcG9zdE1vdW50V3JhcHBlcjogZnVuY3Rpb24gKGluc3QpIHtcbiAgICAvLyBUaGlzIGlzIGluIHBvc3RNb3VudCBiZWNhdXNlIHdlIG5lZWQgYWNjZXNzIHRvIHRoZSBET00gbm9kZSwgd2hpY2ggaXMgbm90XG4gICAgLy8gYXZhaWxhYmxlIHVudGlsIGFmdGVyIHRoZSBjb21wb25lbnQgaGFzIG1vdW50ZWQuXG4gICAgdmFyIG5vZGUgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KTtcbiAgICB2YXIgdGV4dENvbnRlbnQgPSBub2RlLnRleHRDb250ZW50O1xuXG4gICAgLy8gT25seSBzZXQgbm9kZS52YWx1ZSBpZiB0ZXh0Q29udGVudCBpcyBlcXVhbCB0byB0aGUgZXhwZWN0ZWRcbiAgICAvLyBpbml0aWFsIHZhbHVlLiBJbiBJRTEwL0lFMTEgdGhlcmUgaXMgYSBidWcgd2hlcmUgdGhlIHBsYWNlaG9sZGVyIGF0dHJpYnV0ZVxuICAgIC8vIHdpbGwgcG9wdWxhdGUgdGV4dENvbnRlbnQgYXMgd2VsbC5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy8xMDE1MjUvXG4gICAgaWYgKHRleHRDb250ZW50ID09PSBpbnN0Ll93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlKSB7XG4gICAgICBub2RlLnZhbHVlID0gdGV4dENvbnRlbnQ7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBfaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gIHZhciBwcm9wcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICB2YXIgcmV0dXJuVmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmV4ZWN1dGVPbkNoYW5nZShwcm9wcywgZXZlbnQpO1xuICBSZWFjdFVwZGF0ZXMuYXNhcChmb3JjZVVwZGF0ZUlmTW91bnRlZCwgdGhpcyk7XG4gIHJldHVybiByZXR1cm5WYWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVRleHRhcmVhO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTVRleHRhcmVhLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogUmV0dXJuIHRoZSBsb3dlc3QgY29tbW9uIGFuY2VzdG9yIG9mIEEgYW5kIEIsIG9yIG51bGwgaWYgdGhleSBhcmUgaW5cbiAqIGRpZmZlcmVudCB0cmVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IoaW5zdEEsIGluc3RCKSB7XG4gICEoJ19ob3N0Tm9kZScgaW4gaW5zdEEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2dldE5vZGVGcm9tSW5zdGFuY2U6IEludmFsaWQgYXJndW1lbnQuJykgOiBfcHJvZEludmFyaWFudCgnMzMnKSA6IHZvaWQgMDtcbiAgISgnX2hvc3ROb2RlJyBpbiBpbnN0QikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZ2V0Tm9kZUZyb21JbnN0YW5jZTogSW52YWxpZCBhcmd1bWVudC4nKSA6IF9wcm9kSW52YXJpYW50KCczMycpIDogdm9pZCAwO1xuXG4gIHZhciBkZXB0aEEgPSAwO1xuICBmb3IgKHZhciB0ZW1wQSA9IGluc3RBOyB0ZW1wQTsgdGVtcEEgPSB0ZW1wQS5faG9zdFBhcmVudCkge1xuICAgIGRlcHRoQSsrO1xuICB9XG4gIHZhciBkZXB0aEIgPSAwO1xuICBmb3IgKHZhciB0ZW1wQiA9IGluc3RCOyB0ZW1wQjsgdGVtcEIgPSB0ZW1wQi5faG9zdFBhcmVudCkge1xuICAgIGRlcHRoQisrO1xuICB9XG5cbiAgLy8gSWYgQSBpcyBkZWVwZXIsIGNyYXdsIHVwLlxuICB3aGlsZSAoZGVwdGhBIC0gZGVwdGhCID4gMCkge1xuICAgIGluc3RBID0gaW5zdEEuX2hvc3RQYXJlbnQ7XG4gICAgZGVwdGhBLS07XG4gIH1cblxuICAvLyBJZiBCIGlzIGRlZXBlciwgY3Jhd2wgdXAuXG4gIHdoaWxlIChkZXB0aEIgLSBkZXB0aEEgPiAwKSB7XG4gICAgaW5zdEIgPSBpbnN0Qi5faG9zdFBhcmVudDtcbiAgICBkZXB0aEItLTtcbiAgfVxuXG4gIC8vIFdhbGsgaW4gbG9ja3N0ZXAgdW50aWwgd2UgZmluZCBhIG1hdGNoLlxuICB2YXIgZGVwdGggPSBkZXB0aEE7XG4gIHdoaWxlIChkZXB0aC0tKSB7XG4gICAgaWYgKGluc3RBID09PSBpbnN0Qikge1xuICAgICAgcmV0dXJuIGluc3RBO1xuICAgIH1cbiAgICBpbnN0QSA9IGluc3RBLl9ob3N0UGFyZW50O1xuICAgIGluc3RCID0gaW5zdEIuX2hvc3RQYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogUmV0dXJuIGlmIEEgaXMgYW4gYW5jZXN0b3Igb2YgQi5cbiAqL1xuZnVuY3Rpb24gaXNBbmNlc3RvcihpbnN0QSwgaW5zdEIpIHtcbiAgISgnX2hvc3ROb2RlJyBpbiBpbnN0QSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnaXNBbmNlc3RvcjogSW52YWxpZCBhcmd1bWVudC4nKSA6IF9wcm9kSW52YXJpYW50KCczNScpIDogdm9pZCAwO1xuICAhKCdfaG9zdE5vZGUnIGluIGluc3RCKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdpc0FuY2VzdG9yOiBJbnZhbGlkIGFyZ3VtZW50LicpIDogX3Byb2RJbnZhcmlhbnQoJzM1JykgOiB2b2lkIDA7XG5cbiAgd2hpbGUgKGluc3RCKSB7XG4gICAgaWYgKGluc3RCID09PSBpbnN0QSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGluc3RCID0gaW5zdEIuX2hvc3RQYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgcGFyZW50IGluc3RhbmNlIG9mIHRoZSBwYXNzZWQtaW4gaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudEluc3RhbmNlKGluc3QpIHtcbiAgISgnX2hvc3ROb2RlJyBpbiBpbnN0KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdnZXRQYXJlbnRJbnN0YW5jZTogSW52YWxpZCBhcmd1bWVudC4nKSA6IF9wcm9kSW52YXJpYW50KCczNicpIDogdm9pZCAwO1xuXG4gIHJldHVybiBpbnN0Ll9ob3N0UGFyZW50O1xufVxuXG4vKipcbiAqIFNpbXVsYXRlcyB0aGUgdHJhdmVyc2FsIG9mIGEgdHdvLXBoYXNlLCBjYXB0dXJlL2J1YmJsZSBldmVudCBkaXNwYXRjaC5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VUd29QaGFzZShpbnN0LCBmbiwgYXJnKSB7XG4gIHZhciBwYXRoID0gW107XG4gIHdoaWxlIChpbnN0KSB7XG4gICAgcGF0aC5wdXNoKGluc3QpO1xuICAgIGluc3QgPSBpbnN0Ll9ob3N0UGFyZW50O1xuICB9XG4gIHZhciBpO1xuICBmb3IgKGkgPSBwYXRoLmxlbmd0aDsgaS0tID4gMDspIHtcbiAgICBmbihwYXRoW2ldLCAnY2FwdHVyZWQnLCBhcmcpO1xuICB9XG4gIGZvciAoaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgZm4ocGF0aFtpXSwgJ2J1YmJsZWQnLCBhcmcpO1xuICB9XG59XG5cbi8qKlxuICogVHJhdmVyc2VzIHRoZSBJRCBoaWVyYXJjaHkgYW5kIGludm9rZXMgdGhlIHN1cHBsaWVkIGBjYmAgb24gYW55IElEcyB0aGF0XG4gKiBzaG91bGQgd291bGQgcmVjZWl2ZSBhIGBtb3VzZUVudGVyYCBvciBgbW91c2VMZWF2ZWAgZXZlbnQuXG4gKlxuICogRG9lcyBub3QgaW52b2tlIHRoZSBjYWxsYmFjayBvbiB0aGUgbmVhcmVzdCBjb21tb24gYW5jZXN0b3IgYmVjYXVzZSBub3RoaW5nXG4gKiBcImVudGVyZWRcIiBvciBcImxlZnRcIiB0aGF0IGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlRW50ZXJMZWF2ZShmcm9tLCB0bywgZm4sIGFyZ0Zyb20sIGFyZ1RvKSB7XG4gIHZhciBjb21tb24gPSBmcm9tICYmIHRvID8gZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IoZnJvbSwgdG8pIDogbnVsbDtcbiAgdmFyIHBhdGhGcm9tID0gW107XG4gIHdoaWxlIChmcm9tICYmIGZyb20gIT09IGNvbW1vbikge1xuICAgIHBhdGhGcm9tLnB1c2goZnJvbSk7XG4gICAgZnJvbSA9IGZyb20uX2hvc3RQYXJlbnQ7XG4gIH1cbiAgdmFyIHBhdGhUbyA9IFtdO1xuICB3aGlsZSAodG8gJiYgdG8gIT09IGNvbW1vbikge1xuICAgIHBhdGhUby5wdXNoKHRvKTtcbiAgICB0byA9IHRvLl9ob3N0UGFyZW50O1xuICB9XG4gIHZhciBpO1xuICBmb3IgKGkgPSAwOyBpIDwgcGF0aEZyb20ubGVuZ3RoOyBpKyspIHtcbiAgICBmbihwYXRoRnJvbVtpXSwgJ2J1YmJsZWQnLCBhcmdGcm9tKTtcbiAgfVxuICBmb3IgKGkgPSBwYXRoVG8ubGVuZ3RoOyBpLS0gPiAwOykge1xuICAgIGZuKHBhdGhUb1tpXSwgJ2NhcHR1cmVkJywgYXJnVG8pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FuY2VzdG9yOiBpc0FuY2VzdG9yLFxuICBnZXRMb3dlc3RDb21tb25BbmNlc3RvcjogZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IsXG4gIGdldFBhcmVudEluc3RhbmNlOiBnZXRQYXJlbnRJbnN0YW5jZSxcbiAgdHJhdmVyc2VUd29QaGFzZTogdHJhdmVyc2VUd29QaGFzZSxcbiAgdHJhdmVyc2VFbnRlckxlYXZlOiB0cmF2ZXJzZUVudGVyTGVhdmVcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NVHJlZVRyYXZlcnNhbC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eScpO1xudmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luUmVnaXN0cnknKTtcbnZhciBSZWFjdENvbXBvbmVudFRyZWVIb29rID0gcmVxdWlyZSgncmVhY3QvbGliL1JlYWN0Q29tcG9uZW50VHJlZUhvb2snKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciByZWFjdFByb3BzID0ge1xuICAgIGNoaWxkcmVuOiB0cnVlLFxuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB0cnVlLFxuICAgIGtleTogdHJ1ZSxcbiAgICByZWY6IHRydWUsXG5cbiAgICBhdXRvRm9jdXM6IHRydWUsXG4gICAgZGVmYXVsdFZhbHVlOiB0cnVlLFxuICAgIHZhbHVlTGluazogdHJ1ZSxcbiAgICBkZWZhdWx0Q2hlY2tlZDogdHJ1ZSxcbiAgICBjaGVja2VkTGluazogdHJ1ZSxcbiAgICBpbm5lckhUTUw6IHRydWUsXG4gICAgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nOiB0cnVlLFxuICAgIG9uRm9jdXNJbjogdHJ1ZSxcbiAgICBvbkZvY3VzT3V0OiB0cnVlXG4gIH07XG4gIHZhciB3YXJuZWRQcm9wZXJ0aWVzID0ge307XG5cbiAgdmFyIHZhbGlkYXRlUHJvcGVydHkgPSBmdW5jdGlvbiAodGFnTmFtZSwgbmFtZSwgZGVidWdJRCkge1xuICAgIGlmIChET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5hbWUpIHx8IERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHJlYWN0UHJvcHMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgcmVhY3RQcm9wc1tuYW1lXSB8fCB3YXJuZWRQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFByb3BlcnRpZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHdhcm5lZFByb3BlcnRpZXNbbmFtZV0gPSB0cnVlO1xuICAgIHZhciBsb3dlckNhc2VkTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIGRhdGEtKiBhdHRyaWJ1dGVzIHNob3VsZCBiZSBsb3dlcmNhc2U7IHN1Z2dlc3QgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG4gICAgdmFyIHN0YW5kYXJkTmFtZSA9IERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKGxvd2VyQ2FzZWROYW1lKSA/IGxvd2VyQ2FzZWROYW1lIDogRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWUuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpID8gRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWVbbG93ZXJDYXNlZE5hbWVdIDogbnVsbDtcblxuICAgIHZhciByZWdpc3RyYXRpb25OYW1lID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5wb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KGxvd2VyQ2FzZWROYW1lKSA/IEV2ZW50UGx1Z2luUmVnaXN0cnkucG9zc2libGVSZWdpc3RyYXRpb25OYW1lc1tsb3dlckNhc2VkTmFtZV0gOiBudWxsO1xuXG4gICAgaWYgKHN0YW5kYXJkTmFtZSAhPSBudWxsKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1Vua25vd24gRE9NIHByb3BlcnR5ICVzLiBEaWQgeW91IG1lYW4gJXM/JXMnLCBuYW1lLCBzdGFuZGFyZE5hbWUsIFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQoZGVidWdJRCkpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChyZWdpc3RyYXRpb25OYW1lICE9IG51bGwpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnVW5rbm93biBldmVudCBoYW5kbGVyIHByb3BlcnR5ICVzLiBEaWQgeW91IG1lYW4gYCVzYD8lcycsIG5hbWUsIHJlZ2lzdHJhdGlvbk5hbWUsIFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQoZGVidWdJRCkpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIHdlcmUgdW5hYmxlIHRvIGd1ZXNzIHdoaWNoIHByb3AgdGhlIHVzZXIgaW50ZW5kZWQuXG4gICAgICAvLyBJdCBpcyBsaWtlbHkgdGhhdCB0aGUgdXNlciB3YXMganVzdCBibGluZGx5IHNwcmVhZGluZy9mb3J3YXJkaW5nIHByb3BzXG4gICAgICAvLyBDb21wb25lbnRzIHNob3VsZCBiZSBjYXJlZnVsIHRvIG9ubHkgcmVuZGVyIHZhbGlkIHByb3BzL2F0dHJpYnV0ZXMuXG4gICAgICAvLyBXYXJuaW5nIHdpbGwgYmUgaW52b2tlZCBpbiB3YXJuVW5rbm93blByb3BlcnRpZXMgdG8gYWxsb3cgZ3JvdXBpbmcuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuXG52YXIgd2FyblVua25vd25Qcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGRlYnVnSUQsIGVsZW1lbnQpIHtcbiAgdmFyIHVua25vd25Qcm9wcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gZWxlbWVudC5wcm9wcykge1xuICAgIHZhciBpc1ZhbGlkID0gdmFsaWRhdGVQcm9wZXJ0eShlbGVtZW50LnR5cGUsIGtleSwgZGVidWdJRCk7XG4gICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICB1bmtub3duUHJvcHMucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciB1bmtub3duUHJvcFN0cmluZyA9IHVua25vd25Qcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICByZXR1cm4gJ2AnICsgcHJvcCArICdgJztcbiAgfSkuam9pbignLCAnKTtcblxuICBpZiAodW5rbm93blByb3BzLmxlbmd0aCA9PT0gMSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnVW5rbm93biBwcm9wICVzIG9uIDwlcz4gdGFnLiBSZW1vdmUgdGhpcyBwcm9wIGZyb20gdGhlIGVsZW1lbnQuICcgKyAnRm9yIGRldGFpbHMsIHNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXVua25vd24tcHJvcCVzJywgdW5rbm93blByb3BTdHJpbmcsIGVsZW1lbnQudHlwZSwgUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRTdGFja0FkZGVuZHVtQnlJRChkZWJ1Z0lEKSkgOiB2b2lkIDA7XG4gIH0gZWxzZSBpZiAodW5rbm93blByb3BzLmxlbmd0aCA+IDEpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1Vua25vd24gcHJvcHMgJXMgb24gPCVzPiB0YWcuIFJlbW92ZSB0aGVzZSBwcm9wcyBmcm9tIHRoZSBlbGVtZW50LiAnICsgJ0ZvciBkZXRhaWxzLCBzZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC11bmtub3duLXByb3AlcycsIHVua25vd25Qcm9wU3RyaW5nLCBlbGVtZW50LnR5cGUsIFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQoZGVidWdJRCkpIDogdm9pZCAwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBoYW5kbGVFbGVtZW50KGRlYnVnSUQsIGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQgPT0gbnVsbCB8fCB0eXBlb2YgZWxlbWVudC50eXBlICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZWxlbWVudC50eXBlLmluZGV4T2YoJy0nKSA+PSAwIHx8IGVsZW1lbnQucHJvcHMuaXMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgd2FyblVua25vd25Qcm9wZXJ0aWVzKGRlYnVnSUQsIGVsZW1lbnQpO1xufVxuXG52YXIgUmVhY3RET01Vbmtub3duUHJvcGVydHlIb29rID0ge1xuICBvbkJlZm9yZU1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoZGVidWdJRCwgZWxlbWVudCkge1xuICAgIGhhbmRsZUVsZW1lbnQoZGVidWdJRCwgZWxlbWVudCk7XG4gIH0sXG4gIG9uQmVmb3JlVXBkYXRlQ29tcG9uZW50OiBmdW5jdGlvbiAoZGVidWdJRCwgZWxlbWVudCkge1xuICAgIGhhbmRsZUVsZW1lbnQoZGVidWdJRCwgZWxlbWVudCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01Vbmtub3duUHJvcGVydHlIb29rO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTVVua25vd25Qcm9wZXJ0eUhvb2suanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNi1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0SW52YWxpZFNldFN0YXRlV2FybmluZ0hvb2sgPSByZXF1aXJlKCcuL1JlYWN0SW52YWxpZFNldFN0YXRlV2FybmluZ0hvb2snKTtcbnZhciBSZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vayA9IHJlcXVpcmUoJy4vUmVhY3RIb3N0T3BlcmF0aW9uSGlzdG9yeUhvb2snKTtcbnZhciBSZWFjdENvbXBvbmVudFRyZWVIb29rID0gcmVxdWlyZSgncmVhY3QvbGliL1JlYWN0Q29tcG9uZW50VHJlZUhvb2snKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBwZXJmb3JtYW5jZU5vdyA9IHJlcXVpcmUoJ2ZianMvbGliL3BlcmZvcm1hbmNlTm93Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIGhvb2tzID0gW107XG52YXIgZGlkSG9va1Rocm93Rm9yRXZlbnQgPSB7fTtcblxuZnVuY3Rpb24gY2FsbEhvb2soZXZlbnQsIGZuLCBjb250ZXh0LCBhcmcxLCBhcmcyLCBhcmczLCBhcmc0LCBhcmc1KSB7XG4gIHRyeSB7XG4gICAgZm4uY2FsbChjb250ZXh0LCBhcmcxLCBhcmcyLCBhcmczLCBhcmc0LCBhcmc1KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGRpZEhvb2tUaHJvd0ZvckV2ZW50W2V2ZW50XSwgJ0V4Y2VwdGlvbiB0aHJvd24gYnkgaG9vayB3aGlsZSBoYW5kbGluZyAlczogJXMnLCBldmVudCwgZSArICdcXG4nICsgZS5zdGFjaykgOiB2b2lkIDA7XG4gICAgZGlkSG9va1Rocm93Rm9yRXZlbnRbZXZlbnRdID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0RXZlbnQoZXZlbnQsIGFyZzEsIGFyZzIsIGFyZzMsIGFyZzQsIGFyZzUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBob29rID0gaG9va3NbaV07XG4gICAgdmFyIGZuID0gaG9va1tldmVudF07XG4gICAgaWYgKGZuKSB7XG4gICAgICBjYWxsSG9vayhldmVudCwgZm4sIGhvb2ssIGFyZzEsIGFyZzIsIGFyZzMsIGFyZzQsIGFyZzUpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgaXNQcm9maWxpbmcgPSBmYWxzZTtcbnZhciBmbHVzaEhpc3RvcnkgPSBbXTtcbnZhciBsaWZlQ3ljbGVUaW1lclN0YWNrID0gW107XG52YXIgY3VycmVudEZsdXNoTmVzdGluZyA9IDA7XG52YXIgY3VycmVudEZsdXNoTWVhc3VyZW1lbnRzID0gW107XG52YXIgY3VycmVudEZsdXNoU3RhcnRUaW1lID0gMDtcbnZhciBjdXJyZW50VGltZXJEZWJ1Z0lEID0gbnVsbDtcbnZhciBjdXJyZW50VGltZXJTdGFydFRpbWUgPSAwO1xudmFyIGN1cnJlbnRUaW1lck5lc3RlZEZsdXNoRHVyYXRpb24gPSAwO1xudmFyIGN1cnJlbnRUaW1lclR5cGUgPSBudWxsO1xuXG52YXIgbGlmZUN5Y2xlVGltZXJIYXNXYXJuZWQgPSBmYWxzZTtcblxuZnVuY3Rpb24gY2xlYXJIaXN0b3J5KCkge1xuICBSZWFjdENvbXBvbmVudFRyZWVIb29rLnB1cmdlVW5tb3VudGVkQ29tcG9uZW50cygpO1xuICBSZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vay5jbGVhckhpc3RvcnkoKTtcbn1cblxuZnVuY3Rpb24gZ2V0VHJlZVNuYXBzaG90KHJlZ2lzdGVyZWRJRHMpIHtcbiAgcmV0dXJuIHJlZ2lzdGVyZWRJRHMucmVkdWNlKGZ1bmN0aW9uICh0cmVlLCBpZCkge1xuICAgIHZhciBvd25lcklEID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRPd25lcklEKGlkKTtcbiAgICB2YXIgcGFyZW50SUQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFBhcmVudElEKGlkKTtcbiAgICB0cmVlW2lkXSA9IHtcbiAgICAgIGRpc3BsYXlOYW1lOiBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldERpc3BsYXlOYW1lKGlkKSxcbiAgICAgIHRleHQ6IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0VGV4dChpZCksXG4gICAgICB1cGRhdGVDb3VudDogUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRVcGRhdGVDb3VudChpZCksXG4gICAgICBjaGlsZElEczogUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRDaGlsZElEcyhpZCksXG4gICAgICAvLyBUZXh0IG5vZGVzIGRvbid0IGhhdmUgb3duZXJzIGJ1dCB0aGlzIGlzIGNsb3NlIGVub3VnaC5cbiAgICAgIG93bmVySUQ6IG93bmVySUQgfHwgcGFyZW50SUQgJiYgUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRPd25lcklEKHBhcmVudElEKSB8fCAwLFxuICAgICAgcGFyZW50SUQ6IHBhcmVudElEXG4gICAgfTtcbiAgICByZXR1cm4gdHJlZTtcbiAgfSwge30pO1xufVxuXG5mdW5jdGlvbiByZXNldE1lYXN1cmVtZW50cygpIHtcbiAgdmFyIHByZXZpb3VzU3RhcnRUaW1lID0gY3VycmVudEZsdXNoU3RhcnRUaW1lO1xuICB2YXIgcHJldmlvdXNNZWFzdXJlbWVudHMgPSBjdXJyZW50Rmx1c2hNZWFzdXJlbWVudHM7XG4gIHZhciBwcmV2aW91c09wZXJhdGlvbnMgPSBSZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vay5nZXRIaXN0b3J5KCk7XG5cbiAgaWYgKGN1cnJlbnRGbHVzaE5lc3RpbmcgPT09IDApIHtcbiAgICBjdXJyZW50Rmx1c2hTdGFydFRpbWUgPSAwO1xuICAgIGN1cnJlbnRGbHVzaE1lYXN1cmVtZW50cyA9IFtdO1xuICAgIGNsZWFySGlzdG9yeSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChwcmV2aW91c01lYXN1cmVtZW50cy5sZW5ndGggfHwgcHJldmlvdXNPcGVyYXRpb25zLmxlbmd0aCkge1xuICAgIHZhciByZWdpc3RlcmVkSURzID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRSZWdpc3RlcmVkSURzKCk7XG4gICAgZmx1c2hIaXN0b3J5LnB1c2goe1xuICAgICAgZHVyYXRpb246IHBlcmZvcm1hbmNlTm93KCkgLSBwcmV2aW91c1N0YXJ0VGltZSxcbiAgICAgIG1lYXN1cmVtZW50czogcHJldmlvdXNNZWFzdXJlbWVudHMgfHwgW10sXG4gICAgICBvcGVyYXRpb25zOiBwcmV2aW91c09wZXJhdGlvbnMgfHwgW10sXG4gICAgICB0cmVlU25hcHNob3Q6IGdldFRyZWVTbmFwc2hvdChyZWdpc3RlcmVkSURzKVxuICAgIH0pO1xuICB9XG5cbiAgY2xlYXJIaXN0b3J5KCk7XG4gIGN1cnJlbnRGbHVzaFN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlTm93KCk7XG4gIGN1cnJlbnRGbHVzaE1lYXN1cmVtZW50cyA9IFtdO1xufVxuXG5mdW5jdGlvbiBjaGVja0RlYnVnSUQoZGVidWdJRCkge1xuICB2YXIgYWxsb3dSb290ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICBpZiAoYWxsb3dSb290ICYmIGRlYnVnSUQgPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFkZWJ1Z0lEKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdSZWFjdERlYnVnVG9vbDogZGVidWdJRCBtYXkgbm90IGJlIGVtcHR5LicpIDogdm9pZCAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJlZ2luTGlmZUN5Y2xlVGltZXIoZGVidWdJRCwgdGltZXJUeXBlKSB7XG4gIGlmIChjdXJyZW50Rmx1c2hOZXN0aW5nID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChjdXJyZW50VGltZXJUeXBlICYmICFsaWZlQ3ljbGVUaW1lckhhc1dhcm5lZCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnVGhlcmUgaXMgYW4gaW50ZXJuYWwgZXJyb3IgaW4gdGhlIFJlYWN0IHBlcmZvcm1hbmNlIG1lYXN1cmVtZW50IGNvZGUuICcgKyAnRGlkIG5vdCBleHBlY3QgJXMgdGltZXIgdG8gc3RhcnQgd2hpbGUgJXMgdGltZXIgaXMgc3RpbGwgaW4gJyArICdwcm9ncmVzcyBmb3IgJXMgaW5zdGFuY2UuJywgdGltZXJUeXBlLCBjdXJyZW50VGltZXJUeXBlIHx8ICdubycsIGRlYnVnSUQgPT09IGN1cnJlbnRUaW1lckRlYnVnSUQgPyAndGhlIHNhbWUnIDogJ2Fub3RoZXInKSA6IHZvaWQgMDtcbiAgICBsaWZlQ3ljbGVUaW1lckhhc1dhcm5lZCA9IHRydWU7XG4gIH1cbiAgY3VycmVudFRpbWVyU3RhcnRUaW1lID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgY3VycmVudFRpbWVyTmVzdGVkRmx1c2hEdXJhdGlvbiA9IDA7XG4gIGN1cnJlbnRUaW1lckRlYnVnSUQgPSBkZWJ1Z0lEO1xuICBjdXJyZW50VGltZXJUeXBlID0gdGltZXJUeXBlO1xufVxuXG5mdW5jdGlvbiBlbmRMaWZlQ3ljbGVUaW1lcihkZWJ1Z0lELCB0aW1lclR5cGUpIHtcbiAgaWYgKGN1cnJlbnRGbHVzaE5lc3RpbmcgPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGN1cnJlbnRUaW1lclR5cGUgIT09IHRpbWVyVHlwZSAmJiAhbGlmZUN5Y2xlVGltZXJIYXNXYXJuZWQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1RoZXJlIGlzIGFuIGludGVybmFsIGVycm9yIGluIHRoZSBSZWFjdCBwZXJmb3JtYW5jZSBtZWFzdXJlbWVudCBjb2RlLiAnICsgJ1dlIGRpZCBub3QgZXhwZWN0ICVzIHRpbWVyIHRvIHN0b3Agd2hpbGUgJXMgdGltZXIgaXMgc3RpbGwgaW4gJyArICdwcm9ncmVzcyBmb3IgJXMgaW5zdGFuY2UuIFBsZWFzZSByZXBvcnQgdGhpcyBhcyBhIGJ1ZyBpbiBSZWFjdC4nLCB0aW1lclR5cGUsIGN1cnJlbnRUaW1lclR5cGUgfHwgJ25vJywgZGVidWdJRCA9PT0gY3VycmVudFRpbWVyRGVidWdJRCA/ICd0aGUgc2FtZScgOiAnYW5vdGhlcicpIDogdm9pZCAwO1xuICAgIGxpZmVDeWNsZVRpbWVySGFzV2FybmVkID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNQcm9maWxpbmcpIHtcbiAgICBjdXJyZW50Rmx1c2hNZWFzdXJlbWVudHMucHVzaCh7XG4gICAgICB0aW1lclR5cGU6IHRpbWVyVHlwZSxcbiAgICAgIGluc3RhbmNlSUQ6IGRlYnVnSUQsXG4gICAgICBkdXJhdGlvbjogcGVyZm9ybWFuY2VOb3coKSAtIGN1cnJlbnRUaW1lclN0YXJ0VGltZSAtIGN1cnJlbnRUaW1lck5lc3RlZEZsdXNoRHVyYXRpb25cbiAgICB9KTtcbiAgfVxuICBjdXJyZW50VGltZXJTdGFydFRpbWUgPSAwO1xuICBjdXJyZW50VGltZXJOZXN0ZWRGbHVzaER1cmF0aW9uID0gMDtcbiAgY3VycmVudFRpbWVyRGVidWdJRCA9IG51bGw7XG4gIGN1cnJlbnRUaW1lclR5cGUgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBwYXVzZUN1cnJlbnRMaWZlQ3ljbGVUaW1lcigpIHtcbiAgdmFyIGN1cnJlbnRUaW1lciA9IHtcbiAgICBzdGFydFRpbWU6IGN1cnJlbnRUaW1lclN0YXJ0VGltZSxcbiAgICBuZXN0ZWRGbHVzaFN0YXJ0VGltZTogcGVyZm9ybWFuY2VOb3coKSxcbiAgICBkZWJ1Z0lEOiBjdXJyZW50VGltZXJEZWJ1Z0lELFxuICAgIHRpbWVyVHlwZTogY3VycmVudFRpbWVyVHlwZVxuICB9O1xuICBsaWZlQ3ljbGVUaW1lclN0YWNrLnB1c2goY3VycmVudFRpbWVyKTtcbiAgY3VycmVudFRpbWVyU3RhcnRUaW1lID0gMDtcbiAgY3VycmVudFRpbWVyTmVzdGVkRmx1c2hEdXJhdGlvbiA9IDA7XG4gIGN1cnJlbnRUaW1lckRlYnVnSUQgPSBudWxsO1xuICBjdXJyZW50VGltZXJUeXBlID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gcmVzdW1lQ3VycmVudExpZmVDeWNsZVRpbWVyKCkge1xuICB2YXIgX2xpZmVDeWNsZVRpbWVyU3RhY2skID0gbGlmZUN5Y2xlVGltZXJTdGFjay5wb3AoKSxcbiAgICAgIHN0YXJ0VGltZSA9IF9saWZlQ3ljbGVUaW1lclN0YWNrJC5zdGFydFRpbWUsXG4gICAgICBuZXN0ZWRGbHVzaFN0YXJ0VGltZSA9IF9saWZlQ3ljbGVUaW1lclN0YWNrJC5uZXN0ZWRGbHVzaFN0YXJ0VGltZSxcbiAgICAgIGRlYnVnSUQgPSBfbGlmZUN5Y2xlVGltZXJTdGFjayQuZGVidWdJRCxcbiAgICAgIHRpbWVyVHlwZSA9IF9saWZlQ3ljbGVUaW1lclN0YWNrJC50aW1lclR5cGU7XG5cbiAgdmFyIG5lc3RlZEZsdXNoRHVyYXRpb24gPSBwZXJmb3JtYW5jZU5vdygpIC0gbmVzdGVkRmx1c2hTdGFydFRpbWU7XG4gIGN1cnJlbnRUaW1lclN0YXJ0VGltZSA9IHN0YXJ0VGltZTtcbiAgY3VycmVudFRpbWVyTmVzdGVkRmx1c2hEdXJhdGlvbiArPSBuZXN0ZWRGbHVzaER1cmF0aW9uO1xuICBjdXJyZW50VGltZXJEZWJ1Z0lEID0gZGVidWdJRDtcbiAgY3VycmVudFRpbWVyVHlwZSA9IHRpbWVyVHlwZTtcbn1cblxudmFyIGxhc3RNYXJrVGltZVN0YW1wID0gMDtcbnZhciBjYW5Vc2VQZXJmb3JtYW5jZU1lYXN1cmUgPSB0eXBlb2YgcGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5tYXJrID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5jbGVhck1hcmtzID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5tZWFzdXJlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5jbGVhck1lYXN1cmVzID09PSAnZnVuY3Rpb24nO1xuXG5mdW5jdGlvbiBzaG91bGRNYXJrKGRlYnVnSUQpIHtcbiAgaWYgKCFpc1Byb2ZpbGluZyB8fCAhY2FuVXNlUGVyZm9ybWFuY2VNZWFzdXJlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBlbGVtZW50ID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRFbGVtZW50KGRlYnVnSUQpO1xuICBpZiAoZWxlbWVudCA9PSBudWxsIHx8IHR5cGVvZiBlbGVtZW50ICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaXNIb3N0RWxlbWVudCA9IHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnO1xuICBpZiAoaXNIb3N0RWxlbWVudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbWFya0JlZ2luKGRlYnVnSUQsIG1hcmtUeXBlKSB7XG4gIGlmICghc2hvdWxkTWFyayhkZWJ1Z0lEKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBtYXJrTmFtZSA9IGRlYnVnSUQgKyAnOjonICsgbWFya1R5cGU7XG4gIGxhc3RNYXJrVGltZVN0YW1wID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgcGVyZm9ybWFuY2UubWFyayhtYXJrTmFtZSk7XG59XG5cbmZ1bmN0aW9uIG1hcmtFbmQoZGVidWdJRCwgbWFya1R5cGUpIHtcbiAgaWYgKCFzaG91bGRNYXJrKGRlYnVnSUQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG1hcmtOYW1lID0gZGVidWdJRCArICc6OicgKyBtYXJrVHlwZTtcbiAgdmFyIGRpc3BsYXlOYW1lID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXREaXNwbGF5TmFtZShkZWJ1Z0lEKSB8fCAnVW5rbm93bic7XG5cbiAgLy8gQ2hyb21lIGhhcyBhbiBpc3N1ZSBvZiBkcm9wcGluZyBtYXJrZXJzIHJlY29yZGVkIHRvbyBmYXN0OlxuICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD02NDA2NTJcbiAgLy8gVG8gd29yayBhcm91bmQgdGhpcywgd2Ugd2lsbCBub3QgcmVwb3J0IHZlcnkgc21hbGwgbWVhc3VyZW1lbnRzLlxuICAvLyBJIGRldGVybWluZWQgdGhlIG1hZ2ljIG51bWJlciBieSB0d2Vha2luZyBpdCBiYWNrIGFuZCBmb3J0aC5cbiAgLy8gMC4wNW1zIHdhcyBlbm91Z2ggdG8gcHJldmVudCB0aGUgaXNzdWUsIGJ1dCBJIHNldCBpdCB0byAwLjFtcyB0byBiZSBzYWZlLlxuICAvLyBXaGVuIHRoZSBidWcgaXMgZml4ZWQsIHdlIGNhbiBgbWVhc3VyZSgpYCB1bmNvbmRpdGlvbmFsbHkgaWYgd2Ugd2FudCB0by5cbiAgdmFyIHRpbWVTdGFtcCA9IHBlcmZvcm1hbmNlTm93KCk7XG4gIGlmICh0aW1lU3RhbXAgLSBsYXN0TWFya1RpbWVTdGFtcCA+IDAuMSkge1xuICAgIHZhciBtZWFzdXJlbWVudE5hbWUgPSBkaXNwbGF5TmFtZSArICcgWycgKyBtYXJrVHlwZSArICddJztcbiAgICBwZXJmb3JtYW5jZS5tZWFzdXJlKG1lYXN1cmVtZW50TmFtZSwgbWFya05hbWUpO1xuICB9XG5cbiAgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyhtYXJrTmFtZSk7XG4gIGlmIChtZWFzdXJlbWVudE5hbWUpIHtcbiAgICBwZXJmb3JtYW5jZS5jbGVhck1lYXN1cmVzKG1lYXN1cmVtZW50TmFtZSk7XG4gIH1cbn1cblxudmFyIFJlYWN0RGVidWdUb29sID0ge1xuICBhZGRIb29rOiBmdW5jdGlvbiAoaG9vaykge1xuICAgIGhvb2tzLnB1c2goaG9vayk7XG4gIH0sXG4gIHJlbW92ZUhvb2s6IGZ1bmN0aW9uIChob29rKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGhvb2tzW2ldID09PSBob29rKSB7XG4gICAgICAgIGhvb2tzLnNwbGljZShpLCAxKTtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgaXNQcm9maWxpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNQcm9maWxpbmc7XG4gIH0sXG4gIGJlZ2luUHJvZmlsaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGlzUHJvZmlsaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaXNQcm9maWxpbmcgPSB0cnVlO1xuICAgIGZsdXNoSGlzdG9yeS5sZW5ndGggPSAwO1xuICAgIHJlc2V0TWVhc3VyZW1lbnRzKCk7XG4gICAgUmVhY3REZWJ1Z1Rvb2wuYWRkSG9vayhSZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vayk7XG4gIH0sXG4gIGVuZFByb2ZpbGluZzogZnVuY3Rpb24gKCkge1xuICAgIGlmICghaXNQcm9maWxpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpc1Byb2ZpbGluZyA9IGZhbHNlO1xuICAgIHJlc2V0TWVhc3VyZW1lbnRzKCk7XG4gICAgUmVhY3REZWJ1Z1Rvb2wucmVtb3ZlSG9vayhSZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vayk7XG4gIH0sXG4gIGdldEZsdXNoSGlzdG9yeTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmbHVzaEhpc3Rvcnk7XG4gIH0sXG4gIG9uQmVnaW5GbHVzaDogZnVuY3Rpb24gKCkge1xuICAgIGN1cnJlbnRGbHVzaE5lc3RpbmcrKztcbiAgICByZXNldE1lYXN1cmVtZW50cygpO1xuICAgIHBhdXNlQ3VycmVudExpZmVDeWNsZVRpbWVyKCk7XG4gICAgZW1pdEV2ZW50KCdvbkJlZ2luRmx1c2gnKTtcbiAgfSxcbiAgb25FbmRGbHVzaDogZnVuY3Rpb24gKCkge1xuICAgIHJlc2V0TWVhc3VyZW1lbnRzKCk7XG4gICAgY3VycmVudEZsdXNoTmVzdGluZy0tO1xuICAgIHJlc3VtZUN1cnJlbnRMaWZlQ3ljbGVUaW1lcigpO1xuICAgIGVtaXRFdmVudCgnb25FbmRGbHVzaCcpO1xuICB9LFxuICBvbkJlZ2luTGlmZUN5Y2xlVGltZXI6IGZ1bmN0aW9uIChkZWJ1Z0lELCB0aW1lclR5cGUpIHtcbiAgICBjaGVja0RlYnVnSUQoZGVidWdJRCk7XG4gICAgZW1pdEV2ZW50KCdvbkJlZ2luTGlmZUN5Y2xlVGltZXInLCBkZWJ1Z0lELCB0aW1lclR5cGUpO1xuICAgIG1hcmtCZWdpbihkZWJ1Z0lELCB0aW1lclR5cGUpO1xuICAgIGJlZ2luTGlmZUN5Y2xlVGltZXIoZGVidWdJRCwgdGltZXJUeXBlKTtcbiAgfSxcbiAgb25FbmRMaWZlQ3ljbGVUaW1lcjogZnVuY3Rpb24gKGRlYnVnSUQsIHRpbWVyVHlwZSkge1xuICAgIGNoZWNrRGVidWdJRChkZWJ1Z0lEKTtcbiAgICBlbmRMaWZlQ3ljbGVUaW1lcihkZWJ1Z0lELCB0aW1lclR5cGUpO1xuICAgIG1hcmtFbmQoZGVidWdJRCwgdGltZXJUeXBlKTtcbiAgICBlbWl0RXZlbnQoJ29uRW5kTGlmZUN5Y2xlVGltZXInLCBkZWJ1Z0lELCB0aW1lclR5cGUpO1xuICB9LFxuICBvbkJlZ2luUHJvY2Vzc2luZ0NoaWxkQ29udGV4dDogZnVuY3Rpb24gKCkge1xuICAgIGVtaXRFdmVudCgnb25CZWdpblByb2Nlc3NpbmdDaGlsZENvbnRleHQnKTtcbiAgfSxcbiAgb25FbmRQcm9jZXNzaW5nQ2hpbGRDb250ZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgZW1pdEV2ZW50KCdvbkVuZFByb2Nlc3NpbmdDaGlsZENvbnRleHQnKTtcbiAgfSxcbiAgb25Ib3N0T3BlcmF0aW9uOiBmdW5jdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgY2hlY2tEZWJ1Z0lEKG9wZXJhdGlvbi5pbnN0YW5jZUlEKTtcbiAgICBlbWl0RXZlbnQoJ29uSG9zdE9wZXJhdGlvbicsIG9wZXJhdGlvbik7XG4gIH0sXG4gIG9uU2V0U3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICBlbWl0RXZlbnQoJ29uU2V0U3RhdGUnKTtcbiAgfSxcbiAgb25TZXRDaGlsZHJlbjogZnVuY3Rpb24gKGRlYnVnSUQsIGNoaWxkRGVidWdJRHMpIHtcbiAgICBjaGVja0RlYnVnSUQoZGVidWdJRCk7XG4gICAgY2hpbGREZWJ1Z0lEcy5mb3JFYWNoKGNoZWNrRGVidWdJRCk7XG4gICAgZW1pdEV2ZW50KCdvblNldENoaWxkcmVuJywgZGVidWdJRCwgY2hpbGREZWJ1Z0lEcyk7XG4gIH0sXG4gIG9uQmVmb3JlTW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChkZWJ1Z0lELCBlbGVtZW50LCBwYXJlbnREZWJ1Z0lEKSB7XG4gICAgY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpO1xuICAgIGNoZWNrRGVidWdJRChwYXJlbnREZWJ1Z0lELCB0cnVlKTtcbiAgICBlbWl0RXZlbnQoJ29uQmVmb3JlTW91bnRDb21wb25lbnQnLCBkZWJ1Z0lELCBlbGVtZW50LCBwYXJlbnREZWJ1Z0lEKTtcbiAgICBtYXJrQmVnaW4oZGVidWdJRCwgJ21vdW50Jyk7XG4gIH0sXG4gIG9uTW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChkZWJ1Z0lEKSB7XG4gICAgY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpO1xuICAgIG1hcmtFbmQoZGVidWdJRCwgJ21vdW50Jyk7XG4gICAgZW1pdEV2ZW50KCdvbk1vdW50Q29tcG9uZW50JywgZGVidWdJRCk7XG4gIH0sXG4gIG9uQmVmb3JlVXBkYXRlQ29tcG9uZW50OiBmdW5jdGlvbiAoZGVidWdJRCwgZWxlbWVudCkge1xuICAgIGNoZWNrRGVidWdJRChkZWJ1Z0lEKTtcbiAgICBlbWl0RXZlbnQoJ29uQmVmb3JlVXBkYXRlQ29tcG9uZW50JywgZGVidWdJRCwgZWxlbWVudCk7XG4gICAgbWFya0JlZ2luKGRlYnVnSUQsICd1cGRhdGUnKTtcbiAgfSxcbiAgb25VcGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uIChkZWJ1Z0lEKSB7XG4gICAgY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpO1xuICAgIG1hcmtFbmQoZGVidWdJRCwgJ3VwZGF0ZScpO1xuICAgIGVtaXRFdmVudCgnb25VcGRhdGVDb21wb25lbnQnLCBkZWJ1Z0lEKTtcbiAgfSxcbiAgb25CZWZvcmVVbm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoZGVidWdJRCkge1xuICAgIGNoZWNrRGVidWdJRChkZWJ1Z0lEKTtcbiAgICBlbWl0RXZlbnQoJ29uQmVmb3JlVW5tb3VudENvbXBvbmVudCcsIGRlYnVnSUQpO1xuICAgIG1hcmtCZWdpbihkZWJ1Z0lELCAndW5tb3VudCcpO1xuICB9LFxuICBvblVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChkZWJ1Z0lEKSB7XG4gICAgY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpO1xuICAgIG1hcmtFbmQoZGVidWdJRCwgJ3VubW91bnQnKTtcbiAgICBlbWl0RXZlbnQoJ29uVW5tb3VudENvbXBvbmVudCcsIGRlYnVnSUQpO1xuICB9LFxuICBvblRlc3RFdmVudDogZnVuY3Rpb24gKCkge1xuICAgIGVtaXRFdmVudCgnb25UZXN0RXZlbnQnKTtcbiAgfVxufTtcblxuLy8gVE9ETyByZW1vdmUgdGhlc2Ugd2hlbiBSTi93d3cgZ2V0cyB1cGRhdGVkXG5SZWFjdERlYnVnVG9vbC5hZGREZXZ0b29sID0gUmVhY3REZWJ1Z1Rvb2wuYWRkSG9vaztcblJlYWN0RGVidWdUb29sLnJlbW92ZURldnRvb2wgPSBSZWFjdERlYnVnVG9vbC5yZW1vdmVIb29rO1xuXG5SZWFjdERlYnVnVG9vbC5hZGRIb29rKFJlYWN0SW52YWxpZFNldFN0YXRlV2FybmluZ0hvb2spO1xuUmVhY3REZWJ1Z1Rvb2wuYWRkSG9vayhSZWFjdENvbXBvbmVudFRyZWVIb29rKTtcbnZhciB1cmwgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgd2luZG93LmxvY2F0aW9uLmhyZWYgfHwgJyc7XG5pZiAoL1s/Jl1yZWFjdF9wZXJmXFxiLy50ZXN0KHVybCkpIHtcbiAgUmVhY3REZWJ1Z1Rvb2wuYmVnaW5Qcm9maWxpbmcoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERlYnVnVG9vbDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3REZWJ1Z1Rvb2wuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gVGhlIFN5bWJvbCB1c2VkIHRvIHRhZyB0aGUgUmVhY3RFbGVtZW50IHR5cGUuIElmIHRoZXJlIGlzIG5vIG5hdGl2ZSBTeW1ib2xcbi8vIG5vciBwb2x5ZmlsbCwgdGhlbiBhIHBsYWluIG51bWJlciBpcyB1c2VkIGZvciBwZXJmb3JtYW5jZS5cblxudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sWydmb3InXSAmJiBTeW1ib2xbJ2ZvciddKCdyZWFjdC5lbGVtZW50JykgfHwgMHhlYWM3O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJFQUNUX0VMRU1FTlRfVFlQRTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RFbGVtZW50U3ltYm9sLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luSHViJyk7XG5cbmZ1bmN0aW9uIHJ1bkV2ZW50UXVldWVJbkJhdGNoKGV2ZW50cykge1xuICBFdmVudFBsdWdpbkh1Yi5lbnF1ZXVlRXZlbnRzKGV2ZW50cyk7XG4gIEV2ZW50UGx1Z2luSHViLnByb2Nlc3NFdmVudFF1ZXVlKGZhbHNlKTtcbn1cblxudmFyIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW4gPSB7XG4gIC8qKlxuICAgKiBTdHJlYW1zIGEgZmlyZWQgdG9wLWxldmVsIGV2ZW50IHRvIGBFdmVudFBsdWdpbkh1YmAgd2hlcmUgcGx1Z2lucyBoYXZlIHRoZVxuICAgKiBvcHBvcnR1bml0eSB0byBjcmVhdGUgYFJlYWN0RXZlbnRgcyB0byBiZSBkaXNwYXRjaGVkLlxuICAgKi9cbiAgaGFuZGxlVG9wTGV2ZWw6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIHZhciBldmVudHMgPSBFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICBydW5FdmVudFF1ZXVlSW5CYXRjaChldmVudHMpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXZlbnRFbWl0dGVyTWl4aW47XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RXZlbnRFbWl0dGVyTWl4aW4uanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgRXZlbnRMaXN0ZW5lciA9IHJlcXVpcmUoJ2ZianMvbGliL0V2ZW50TGlzdGVuZXInKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuXG52YXIgZ2V0RXZlbnRUYXJnZXQgPSByZXF1aXJlKCcuL2dldEV2ZW50VGFyZ2V0Jyk7XG52YXIgZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbicpO1xuXG4vKipcbiAqIEZpbmQgdGhlIGRlZXBlc3QgUmVhY3QgY29tcG9uZW50IGNvbXBsZXRlbHkgY29udGFpbmluZyB0aGUgcm9vdCBvZiB0aGVcbiAqIHBhc3NlZC1pbiBpbnN0YW5jZSAoZm9yIHVzZSB3aGVuIGVudGlyZSBSZWFjdCB0cmVlcyBhcmUgbmVzdGVkIHdpdGhpbiBlYWNoXG4gKiBvdGhlcikuIElmIFJlYWN0IHRyZWVzIGFyZSBub3QgbmVzdGVkLCByZXR1cm5zIG51bGwuXG4gKi9cbmZ1bmN0aW9uIGZpbmRQYXJlbnQoaW5zdCkge1xuICAvLyBUT0RPOiBJdCBtYXkgYmUgYSBnb29kIGlkZWEgdG8gY2FjaGUgdGhpcyB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IERPTVxuICAvLyB0cmF2ZXJzYWwsIGJ1dCBjYWNoaW5nIGlzIGRpZmZpY3VsdCB0byBkbyBjb3JyZWN0bHkgd2l0aG91dCB1c2luZyBhXG4gIC8vIG11dGF0aW9uIG9ic2VydmVyIHRvIGxpc3RlbiBmb3IgYWxsIERPTSBjaGFuZ2VzLlxuICB3aGlsZSAoaW5zdC5faG9zdFBhcmVudCkge1xuICAgIGluc3QgPSBpbnN0Ll9ob3N0UGFyZW50O1xuICB9XG4gIHZhciByb290Tm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuICB2YXIgY29udGFpbmVyID0gcm9vdE5vZGUucGFyZW50Tm9kZTtcbiAgcmV0dXJuIFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShjb250YWluZXIpO1xufVxuXG4vLyBVc2VkIHRvIHN0b3JlIGFuY2VzdG9yIGhpZXJhcmNoeSBpbiB0b3AgbGV2ZWwgY2FsbGJhY2tcbmZ1bmN0aW9uIFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHRoaXMudG9wTGV2ZWxUeXBlID0gdG9wTGV2ZWxUeXBlO1xuICB0aGlzLm5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQ7XG4gIHRoaXMuYW5jZXN0b3JzID0gW107XG59XG5fYXNzaWduKFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5wcm90b3R5cGUsIHtcbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudG9wTGV2ZWxUeXBlID0gbnVsbDtcbiAgICB0aGlzLm5hdGl2ZUV2ZW50ID0gbnVsbDtcbiAgICB0aGlzLmFuY2VzdG9ycy5sZW5ndGggPSAwO1xuICB9XG59KTtcblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcsIFBvb2xlZENsYXNzLnR3b0FyZ3VtZW50UG9vbGVyKTtcblxuZnVuY3Rpb24gaGFuZGxlVG9wTGV2ZWxJbXBsKGJvb2tLZWVwaW5nKSB7XG4gIHZhciBuYXRpdmVFdmVudFRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50KTtcbiAgdmFyIHRhcmdldEluc3QgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUobmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gIC8vIExvb3AgdGhyb3VnaCB0aGUgaGllcmFyY2h5LCBpbiBjYXNlIHRoZXJlJ3MgYW55IG5lc3RlZCBjb21wb25lbnRzLlxuICAvLyBJdCdzIGltcG9ydGFudCB0aGF0IHdlIGJ1aWxkIHRoZSBhcnJheSBvZiBhbmNlc3RvcnMgYmVmb3JlIGNhbGxpbmcgYW55XG4gIC8vIGV2ZW50IGhhbmRsZXJzLCBiZWNhdXNlIGV2ZW50IGhhbmRsZXJzIGNhbiBtb2RpZnkgdGhlIERPTSwgbGVhZGluZyB0b1xuICAvLyBpbmNvbnNpc3RlbmNpZXMgd2l0aCBSZWFjdE1vdW50J3Mgbm9kZSBjYWNoZS4gU2VlICMxMTA1LlxuICB2YXIgYW5jZXN0b3IgPSB0YXJnZXRJbnN0O1xuICBkbyB7XG4gICAgYm9va0tlZXBpbmcuYW5jZXN0b3JzLnB1c2goYW5jZXN0b3IpO1xuICAgIGFuY2VzdG9yID0gYW5jZXN0b3IgJiYgZmluZFBhcmVudChhbmNlc3Rvcik7XG4gIH0gd2hpbGUgKGFuY2VzdG9yKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5sZW5ndGg7IGkrKykge1xuICAgIHRhcmdldEluc3QgPSBib29rS2VlcGluZy5hbmNlc3RvcnNbaV07XG4gICAgUmVhY3RFdmVudExpc3RlbmVyLl9oYW5kbGVUb3BMZXZlbChib29rS2VlcGluZy50b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50LCBnZXRFdmVudFRhcmdldChib29rS2VlcGluZy5uYXRpdmVFdmVudCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNjcm9sbFZhbHVlTW9uaXRvcihjYikge1xuICB2YXIgc2Nyb2xsUG9zaXRpb24gPSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbih3aW5kb3cpO1xuICBjYihzY3JvbGxQb3NpdGlvbik7XG59XG5cbnZhciBSZWFjdEV2ZW50TGlzdGVuZXIgPSB7XG4gIF9lbmFibGVkOiB0cnVlLFxuICBfaGFuZGxlVG9wTGV2ZWw6IG51bGwsXG5cbiAgV0lORE9XX0hBTkRMRTogRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gd2luZG93IDogbnVsbCxcblxuICBzZXRIYW5kbGVUb3BMZXZlbDogZnVuY3Rpb24gKGhhbmRsZVRvcExldmVsKSB7XG4gICAgUmVhY3RFdmVudExpc3RlbmVyLl9oYW5kbGVUb3BMZXZlbCA9IGhhbmRsZVRvcExldmVsO1xuICB9LFxuXG4gIHNldEVuYWJsZWQ6IGZ1bmN0aW9uIChlbmFibGVkKSB7XG4gICAgUmVhY3RFdmVudExpc3RlbmVyLl9lbmFibGVkID0gISFlbmFibGVkO1xuICB9LFxuXG4gIGlzRW5hYmxlZDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYXBzIHRvcC1sZXZlbCBldmVudHMgYnkgdXNpbmcgZXZlbnQgYnViYmxpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGhhbmRsZXJCYXNlTmFtZSBFdmVudCBuYW1lIChlLmcuIFwiY2xpY2tcIikuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50IEVsZW1lbnQgb24gd2hpY2ggdG8gYXR0YWNoIGxpc3RlbmVyLlxuICAgKiBAcmV0dXJuIHs/b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCBhIHJlbW92ZSBmdW5jdGlvbiB3aGljaCB3aWxsIGZvcmNlZnVsbHlcbiAgICogICAgICAgICAgICAgICAgICByZW1vdmUgdGhlIGxpc3RlbmVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXBCdWJibGVkRXZlbnQ6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgZWxlbWVudCkge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBFdmVudExpc3RlbmVyLmxpc3RlbihlbGVtZW50LCBoYW5kbGVyQmFzZU5hbWUsIFJlYWN0RXZlbnRMaXN0ZW5lci5kaXNwYXRjaEV2ZW50LmJpbmQobnVsbCwgdG9wTGV2ZWxUeXBlKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYXBzIGEgdG9wLWxldmVsIGV2ZW50IGJ5IHVzaW5nIGV2ZW50IGNhcHR1cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFuZGxlckJhc2VOYW1lIEV2ZW50IG5hbWUgKGUuZy4gXCJjbGlja1wiKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnQgRWxlbWVudCBvbiB3aGljaCB0byBhdHRhY2ggbGlzdGVuZXIuXG4gICAqIEByZXR1cm4gez9vYmplY3R9IEFuIG9iamVjdCB3aXRoIGEgcmVtb3ZlIGZ1bmN0aW9uIHdoaWNoIHdpbGwgZm9yY2VmdWxseVxuICAgKiAgICAgICAgICAgICAgICAgIHJlbW92ZSB0aGUgbGlzdGVuZXIuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdHJhcENhcHR1cmVkRXZlbnQ6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgZWxlbWVudCkge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBFdmVudExpc3RlbmVyLmNhcHR1cmUoZWxlbWVudCwgaGFuZGxlckJhc2VOYW1lLCBSZWFjdEV2ZW50TGlzdGVuZXIuZGlzcGF0Y2hFdmVudC5iaW5kKG51bGwsIHRvcExldmVsVHlwZSkpO1xuICB9LFxuXG4gIG1vbml0b3JTY3JvbGxWYWx1ZTogZnVuY3Rpb24gKHJlZnJlc2gpIHtcbiAgICB2YXIgY2FsbGJhY2sgPSBzY3JvbGxWYWx1ZU1vbml0b3IuYmluZChudWxsLCByZWZyZXNoKTtcbiAgICBFdmVudExpc3RlbmVyLmxpc3Rlbih3aW5kb3csICdzY3JvbGwnLCBjYWxsYmFjayk7XG4gIH0sXG5cbiAgZGlzcGF0Y2hFdmVudDogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgICBpZiAoIVJlYWN0RXZlbnRMaXN0ZW5lci5fZW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBib29rS2VlcGluZyA9IFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5nZXRQb29sZWQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCk7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEV2ZW50IHF1ZXVlIGJlaW5nIHByb2Nlc3NlZCBpbiB0aGUgc2FtZSBjeWNsZSBhbGxvd3NcbiAgICAgIC8vIGBwcmV2ZW50RGVmYXVsdGAuXG4gICAgICBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMoaGFuZGxlVG9wTGV2ZWxJbXBsLCBib29rS2VlcGluZyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5yZWxlYXNlKGJvb2tLZWVwaW5nKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFdmVudExpc3RlbmVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdEV2ZW50TGlzdGVuZXIuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNi1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhpc3RvcnkgPSBbXTtcblxudmFyIFJlYWN0SG9zdE9wZXJhdGlvbkhpc3RvcnlIb29rID0ge1xuICBvbkhvc3RPcGVyYXRpb246IGZ1bmN0aW9uIChvcGVyYXRpb24pIHtcbiAgICBoaXN0b3J5LnB1c2gob3BlcmF0aW9uKTtcbiAgfSxcbiAgY2xlYXJIaXN0b3J5OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKFJlYWN0SG9zdE9wZXJhdGlvbkhpc3RvcnlIb29rLl9wcmV2ZW50Q2xlYXJpbmcpIHtcbiAgICAgIC8vIFNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIHRlc3RzLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGhpc3RvcnkgPSBbXTtcbiAgfSxcbiAgZ2V0SGlzdG9yeTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBoaXN0b3J5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0SG9zdE9wZXJhdGlvbkhpc3RvcnlIb29rO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vay5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eScpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpbkh1YicpO1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luVXRpbHMnKTtcbnZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbXB0eUNvbXBvbmVudCcpO1xudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJy4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyJyk7XG52YXIgUmVhY3RIb3N0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdEhvc3RDb21wb25lbnQnKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuXG52YXIgUmVhY3RJbmplY3Rpb24gPSB7XG4gIENvbXBvbmVudDogUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5pbmplY3Rpb24sXG4gIERPTVByb3BlcnR5OiBET01Qcm9wZXJ0eS5pbmplY3Rpb24sXG4gIEVtcHR5Q29tcG9uZW50OiBSZWFjdEVtcHR5Q29tcG9uZW50LmluamVjdGlvbixcbiAgRXZlbnRQbHVnaW5IdWI6IEV2ZW50UGx1Z2luSHViLmluamVjdGlvbixcbiAgRXZlbnRQbHVnaW5VdGlsczogRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24sXG4gIEV2ZW50RW1pdHRlcjogUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmluamVjdGlvbixcbiAgSG9zdENvbXBvbmVudDogUmVhY3RIb3N0Q29tcG9uZW50LmluamVjdGlvbixcbiAgVXBkYXRlczogUmVhY3RVcGRhdGVzLmluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEluamVjdGlvbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RJbmplY3Rpb24uanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNi1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwcm9jZXNzaW5nQ2hpbGRDb250ZXh0ID0gZmFsc2U7XG5cbiAgdmFyIHdhcm5JbnZhbGlkU2V0U3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIXByb2Nlc3NpbmdDaGlsZENvbnRleHQsICdzZXRTdGF0ZSguLi4pOiBDYW5ub3QgY2FsbCBzZXRTdGF0ZSgpIGluc2lkZSBnZXRDaGlsZENvbnRleHQoKScpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgUmVhY3RJbnZhbGlkU2V0U3RhdGVXYXJuaW5nSG9vayA9IHtcbiAgb25CZWdpblByb2Nlc3NpbmdDaGlsZENvbnRleHQ6IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzaW5nQ2hpbGRDb250ZXh0ID0gdHJ1ZTtcbiAgfSxcbiAgb25FbmRQcm9jZXNzaW5nQ2hpbGRDb250ZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzc2luZ0NoaWxkQ29udGV4dCA9IGZhbHNlO1xuICB9LFxuICBvblNldFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgd2FybkludmFsaWRTZXRTdGF0ZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0SW52YWxpZFNldFN0YXRlV2FybmluZ0hvb2s7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0SW52YWxpZFNldFN0YXRlV2FybmluZ0hvb2suanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZU1hcCcpO1xudmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluc3RydW1lbnRhdGlvbicpO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xudmFyIFJlYWN0Q2hpbGRSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdENoaWxkUmVjb25jaWxlcicpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBmbGF0dGVuQ2hpbGRyZW4gPSByZXF1aXJlKCcuL2ZsYXR0ZW5DaGlsZHJlbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIE1ha2UgYW4gdXBkYXRlIGZvciBtYXJrdXAgdG8gYmUgcmVuZGVyZWQgYW5kIGluc2VydGVkIGF0IGEgc3VwcGxpZWQgaW5kZXguXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgdGhhdCByZW5kZXJzIGludG8gYW4gZWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0b0luZGV4IERlc3RpbmF0aW9uIGluZGV4LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbWFrZUluc2VydE1hcmt1cChtYXJrdXAsIGFmdGVyTm9kZSwgdG9JbmRleCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0lOU0VSVF9NQVJLVVAnLFxuICAgIGNvbnRlbnQ6IG1hcmt1cCxcbiAgICBmcm9tSW5kZXg6IG51bGwsXG4gICAgZnJvbU5vZGU6IG51bGwsXG4gICAgdG9JbmRleDogdG9JbmRleCxcbiAgICBhZnRlck5vZGU6IGFmdGVyTm9kZVxuICB9O1xufVxuXG4vKipcbiAqIE1ha2UgYW4gdXBkYXRlIGZvciBtb3ZpbmcgYW4gZXhpc3RpbmcgZWxlbWVudCB0byBhbm90aGVyIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggU291cmNlIGluZGV4IG9mIHRoZSBleGlzdGluZyBlbGVtZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggRGVzdGluYXRpb24gaW5kZXggb2YgdGhlIGVsZW1lbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBtYWtlTW92ZShjaGlsZCwgYWZ0ZXJOb2RlLCB0b0luZGV4KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnTU9WRV9FWElTVElORycsXG4gICAgY29udGVudDogbnVsbCxcbiAgICBmcm9tSW5kZXg6IGNoaWxkLl9tb3VudEluZGV4LFxuICAgIGZyb21Ob2RlOiBSZWFjdFJlY29uY2lsZXIuZ2V0SG9zdE5vZGUoY2hpbGQpLFxuICAgIHRvSW5kZXg6IHRvSW5kZXgsXG4gICAgYWZ0ZXJOb2RlOiBhZnRlck5vZGVcbiAgfTtcbn1cblxuLyoqXG4gKiBNYWtlIGFuIHVwZGF0ZSBmb3IgcmVtb3ZpbmcgYW4gZWxlbWVudCBhdCBhbiBpbmRleC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IEluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJlbW92ZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG1ha2VSZW1vdmUoY2hpbGQsIG5vZGUpIHtcbiAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdSRU1PVkVfTk9ERScsXG4gICAgY29udGVudDogbnVsbCxcbiAgICBmcm9tSW5kZXg6IGNoaWxkLl9tb3VudEluZGV4LFxuICAgIGZyb21Ob2RlOiBub2RlLFxuICAgIHRvSW5kZXg6IG51bGwsXG4gICAgYWZ0ZXJOb2RlOiBudWxsXG4gIH07XG59XG5cbi8qKlxuICogTWFrZSBhbiB1cGRhdGUgZm9yIHNldHRpbmcgdGhlIG1hcmt1cCBvZiBhIG5vZGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgdGhhdCByZW5kZXJzIGludG8gYW4gZWxlbWVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG1ha2VTZXRNYXJrdXAobWFya3VwKSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnU0VUX01BUktVUCcsXG4gICAgY29udGVudDogbWFya3VwLFxuICAgIGZyb21JbmRleDogbnVsbCxcbiAgICBmcm9tTm9kZTogbnVsbCxcbiAgICB0b0luZGV4OiBudWxsLFxuICAgIGFmdGVyTm9kZTogbnVsbFxuICB9O1xufVxuXG4vKipcbiAqIE1ha2UgYW4gdXBkYXRlIGZvciBzZXR0aW5nIHRoZSB0ZXh0IGNvbnRlbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRDb250ZW50IFRleHQgY29udGVudCB0byBzZXQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBtYWtlVGV4dENvbnRlbnQodGV4dENvbnRlbnQpIHtcbiAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdURVhUX0NPTlRFTlQnLFxuICAgIGNvbnRlbnQ6IHRleHRDb250ZW50LFxuICAgIGZyb21JbmRleDogbnVsbCxcbiAgICBmcm9tTm9kZTogbnVsbCxcbiAgICB0b0luZGV4OiBudWxsLFxuICAgIGFmdGVyTm9kZTogbnVsbFxuICB9O1xufVxuXG4vKipcbiAqIFB1c2ggYW4gdXBkYXRlLCBpZiBhbnksIG9udG8gdGhlIHF1ZXVlLiBDcmVhdGVzIGEgbmV3IHF1ZXVlIGlmIG5vbmUgaXNcbiAqIHBhc3NlZCBhbmQgYWx3YXlzIHJldHVybnMgdGhlIHF1ZXVlLiBNdXRhdGl2ZS5cbiAqL1xuZnVuY3Rpb24gZW5xdWV1ZShxdWV1ZSwgdXBkYXRlKSB7XG4gIGlmICh1cGRhdGUpIHtcbiAgICBxdWV1ZSA9IHF1ZXVlIHx8IFtdO1xuICAgIHF1ZXVlLnB1c2godXBkYXRlKTtcbiAgfVxuICByZXR1cm4gcXVldWU7XG59XG5cbi8qKlxuICogUHJvY2Vzc2VzIGFueSBlbnF1ZXVlZCB1cGRhdGVzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHByb2Nlc3NRdWV1ZShpbnN0LCB1cGRhdGVRdWV1ZSkge1xuICBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnByb2Nlc3NDaGlsZHJlblVwZGF0ZXMoaW5zdCwgdXBkYXRlUXVldWUpO1xufVxuXG52YXIgc2V0Q2hpbGRyZW5Gb3JJbnN0cnVtZW50YXRpb24gPSBlbXB0eUZ1bmN0aW9uO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGdldERlYnVnSUQgPSBmdW5jdGlvbiAoaW5zdCkge1xuICAgIGlmICghaW5zdC5fZGVidWdJRCkge1xuICAgICAgLy8gQ2hlY2sgZm9yIEFSVC1saWtlIGluc3RhbmNlcy4gVE9ETzogVGhpcyBpcyBzaWxseS9ncm9zcy5cbiAgICAgIHZhciBpbnRlcm5hbDtcbiAgICAgIGlmIChpbnRlcm5hbCA9IFJlYWN0SW5zdGFuY2VNYXAuZ2V0KGluc3QpKSB7XG4gICAgICAgIGluc3QgPSBpbnRlcm5hbDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluc3QuX2RlYnVnSUQ7XG4gIH07XG4gIHNldENoaWxkcmVuRm9ySW5zdHJ1bWVudGF0aW9uID0gZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgdmFyIGRlYnVnSUQgPSBnZXREZWJ1Z0lEKHRoaXMpO1xuICAgIC8vIFRPRE86IFJlYWN0IE5hdGl2ZSBlbXB0eSBjb21wb25lbnRzIGFyZSBhbHNvIG11bHRpY2hpbGQuXG4gICAgLy8gVGhpcyBtZWFucyB0aGV5IHN0aWxsIGdldCBpbnRvIHRoaXMgbWV0aG9kIGJ1dCBkb24ndCBoYXZlIF9kZWJ1Z0lELlxuICAgIGlmIChkZWJ1Z0lEICE9PSAwKSB7XG4gICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRDaGlsZHJlbihkZWJ1Z0lELCBjaGlsZHJlbiA/IE9iamVjdC5rZXlzKGNoaWxkcmVuKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW5ba2V5XS5fZGVidWdJRDtcbiAgICAgIH0pIDogW10pO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBSZWFjdE11bHRpQ2hpbGQgYXJlIGNhcGFibGUgb2YgcmVjb25jaWxpbmcgbXVsdGlwbGUgY2hpbGRyZW4uXG4gKlxuICogQGNsYXNzIFJlYWN0TXVsdGlDaGlsZFxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdE11bHRpQ2hpbGQgPSB7XG4gIC8qKlxuICAgKiBQcm92aWRlcyBjb21tb24gZnVuY3Rpb25hbGl0eSBmb3IgY29tcG9uZW50cyB0aGF0IG11c3QgcmVjb25jaWxlIG11bHRpcGxlXG4gICAqIGNoaWxkcmVuLiBUaGlzIGlzIHVzZWQgYnkgYFJlYWN0RE9NQ29tcG9uZW50YCB0byBtb3VudCwgdXBkYXRlLCBhbmRcbiAgICogdW5tb3VudCBjaGlsZCBjb21wb25lbnRzLlxuICAgKlxuICAgKiBAbGVuZHMge1JlYWN0TXVsdGlDaGlsZC5wcm90b3R5cGV9XG4gICAqL1xuICBNaXhpbjoge1xuICAgIF9yZWNvbmNpbGVySW5zdGFudGlhdGVDaGlsZHJlbjogZnVuY3Rpb24gKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIHNlbGZEZWJ1Z0lEID0gZ2V0RGVidWdJRCh0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3RDaGlsZFJlY29uY2lsZXIuaW5zdGFudGlhdGVDaGlsZHJlbihuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQsIHNlbGZEZWJ1Z0lEKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3RDaGlsZFJlY29uY2lsZXIuaW5zdGFudGlhdGVDaGlsZHJlbihuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICBfcmVjb25jaWxlclVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbiAocHJldkNoaWxkcmVuLCBuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cywgbW91bnRJbWFnZXMsIHJlbW92ZWROb2RlcywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgIHZhciBuZXh0Q2hpbGRyZW47XG4gICAgICB2YXIgc2VsZkRlYnVnSUQgPSAwO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgc2VsZkRlYnVnSUQgPSBnZXREZWJ1Z0lEKHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5fY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICAgICAgICAgIG5leHRDaGlsZHJlbiA9IGZsYXR0ZW5DaGlsZHJlbihuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cywgc2VsZkRlYnVnSUQpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudXBkYXRlQ2hpbGRyZW4ocHJldkNoaWxkcmVuLCBuZXh0Q2hpbGRyZW4sIG1vdW50SW1hZ2VzLCByZW1vdmVkTm9kZXMsIHRyYW5zYWN0aW9uLCB0aGlzLCB0aGlzLl9ob3N0Q29udGFpbmVySW5mbywgY29udGV4dCwgc2VsZkRlYnVnSUQpO1xuICAgICAgICAgIHJldHVybiBuZXh0Q2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5leHRDaGlsZHJlbiA9IGZsYXR0ZW5DaGlsZHJlbihuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cywgc2VsZkRlYnVnSUQpO1xuICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudXBkYXRlQ2hpbGRyZW4ocHJldkNoaWxkcmVuLCBuZXh0Q2hpbGRyZW4sIG1vdW50SW1hZ2VzLCByZW1vdmVkTm9kZXMsIHRyYW5zYWN0aW9uLCB0aGlzLCB0aGlzLl9ob3N0Q29udGFpbmVySW5mbywgY29udGV4dCwgc2VsZkRlYnVnSUQpO1xuICAgICAgcmV0dXJuIG5leHRDaGlsZHJlbjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgXCJtb3VudCBpbWFnZVwiIGZvciBlYWNoIG9mIHRoZSBzdXBwbGllZCBjaGlsZHJlbi4gSW4gdGhlIGNhc2VcbiAgICAgKiBvZiBgUmVhY3RET01Db21wb25lbnRgLCBhIG1vdW50IGltYWdlIGlzIGEgc3RyaW5nIG9mIG1hcmt1cC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmVzdGVkQ2hpbGRyZW4gTmVzdGVkIGNoaWxkIG1hcHMuXG4gICAgICogQHJldHVybiB7YXJyYXl9IEFuIGFycmF5IG9mIG1vdW50ZWQgcmVwcmVzZW50YXRpb25zLlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIG1vdW50Q2hpbGRyZW46IGZ1bmN0aW9uIChuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuX3JlY29uY2lsZXJJbnN0YW50aWF0ZUNoaWxkcmVuKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gY2hpbGRyZW47XG5cbiAgICAgIHZhciBtb3VudEltYWdlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5bbmFtZV07XG4gICAgICAgICAgdmFyIHNlbGZEZWJ1Z0lEID0gMDtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgc2VsZkRlYnVnSUQgPSBnZXREZWJ1Z0lEKHRoaXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbW91bnRJbWFnZSA9IFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudChjaGlsZCwgdHJhbnNhY3Rpb24sIHRoaXMsIHRoaXMuX2hvc3RDb250YWluZXJJbmZvLCBjb250ZXh0LCBzZWxmRGVidWdJRCk7XG4gICAgICAgICAgY2hpbGQuX21vdW50SW5kZXggPSBpbmRleCsrO1xuICAgICAgICAgIG1vdW50SW1hZ2VzLnB1c2gobW91bnRJbWFnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgc2V0Q2hpbGRyZW5Gb3JJbnN0cnVtZW50YXRpb24uY2FsbCh0aGlzLCBjaGlsZHJlbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtb3VudEltYWdlcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgYW55IHJlbmRlcmVkIGNoaWxkcmVuIHdpdGggYSB0ZXh0IGNvbnRlbnQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5leHRDb250ZW50IFN0cmluZyBvZiBjb250ZW50LlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHVwZGF0ZVRleHRDb250ZW50OiBmdW5jdGlvbiAobmV4dENvbnRlbnQpIHtcbiAgICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgLy8gUmVtb3ZlIGFueSByZW5kZXJlZCBjaGlsZHJlbi5cbiAgICAgIFJlYWN0Q2hpbGRSZWNvbmNpbGVyLnVubW91bnRDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIGZhbHNlKTtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICAgIGlmIChwcmV2Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndXBkYXRlVGV4dENvbnRlbnQgY2FsbGVkIG9uIG5vbi1lbXB0eSBjb21wb25lbnQuJykgOiBfcHJvZEludmFyaWFudCgnMTE4JykgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBuZXcgdGV4dCBjb250ZW50LlxuICAgICAgdmFyIHVwZGF0ZXMgPSBbbWFrZVRleHRDb250ZW50KG5leHRDb250ZW50KV07XG4gICAgICBwcm9jZXNzUXVldWUodGhpcywgdXBkYXRlcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIGFueSByZW5kZXJlZCBjaGlsZHJlbiB3aXRoIGEgbWFya3VwIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXh0TWFya3VwIFN0cmluZyBvZiBtYXJrdXAuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdXBkYXRlTWFya3VwOiBmdW5jdGlvbiAobmV4dE1hcmt1cCkge1xuICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICAvLyBSZW1vdmUgYW55IHJlbmRlcmVkIGNoaWxkcmVuLlxuICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudW5tb3VudENoaWxkcmVuKHByZXZDaGlsZHJlbiwgZmFsc2UpO1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBwcmV2Q2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd1cGRhdGVUZXh0Q29udGVudCBjYWxsZWQgb24gbm9uLWVtcHR5IGNvbXBvbmVudC4nKSA6IF9wcm9kSW52YXJpYW50KCcxMTgnKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHVwZGF0ZXMgPSBbbWFrZVNldE1hcmt1cChuZXh0TWFya3VwKV07XG4gICAgICBwcm9jZXNzUXVldWUodGhpcywgdXBkYXRlcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHJlbmRlcmVkIGNoaWxkcmVuIHdpdGggbmV3IGNoaWxkcmVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cyBOZXN0ZWQgY2hpbGQgZWxlbWVudCBtYXBzLlxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB1cGRhdGVDaGlsZHJlbjogZnVuY3Rpb24gKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgLy8gSG9vayB1c2VkIGJ5IFJlYWN0IEFSVFxuICAgICAgdGhpcy5fdXBkYXRlQ2hpbGRyZW4obmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cyBOZXN0ZWQgY2hpbGQgZWxlbWVudCBtYXBzLlxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAZmluYWxcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgX3VwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbiAobmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5fcmVuZGVyZWRDaGlsZHJlbjtcbiAgICAgIHZhciByZW1vdmVkTm9kZXMgPSB7fTtcbiAgICAgIHZhciBtb3VudEltYWdlcyA9IFtdO1xuICAgICAgdmFyIG5leHRDaGlsZHJlbiA9IHRoaXMuX3JlY29uY2lsZXJVcGRhdGVDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCBtb3VudEltYWdlcywgcmVtb3ZlZE5vZGVzLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICBpZiAoIW5leHRDaGlsZHJlbiAmJiAhcHJldkNoaWxkcmVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB1cGRhdGVzID0gbnVsbDtcbiAgICAgIHZhciBuYW1lO1xuICAgICAgLy8gYG5leHRJbmRleGAgd2lsbCBpbmNyZW1lbnQgZm9yIGVhY2ggY2hpbGQgaW4gYG5leHRDaGlsZHJlbmAsIGJ1dFxuICAgICAgLy8gYGxhc3RJbmRleGAgd2lsbCBiZSB0aGUgbGFzdCBpbmRleCB2aXNpdGVkIGluIGBwcmV2Q2hpbGRyZW5gLlxuICAgICAgdmFyIG5leHRJbmRleCA9IDA7XG4gICAgICB2YXIgbGFzdEluZGV4ID0gMDtcbiAgICAgIC8vIGBuZXh0TW91bnRJbmRleGAgd2lsbCBpbmNyZW1lbnQgZm9yIGVhY2ggbmV3bHkgbW91bnRlZCBjaGlsZC5cbiAgICAgIHZhciBuZXh0TW91bnRJbmRleCA9IDA7XG4gICAgICB2YXIgbGFzdFBsYWNlZE5vZGUgPSBudWxsO1xuICAgICAgZm9yIChuYW1lIGluIG5leHRDaGlsZHJlbikge1xuICAgICAgICBpZiAoIW5leHRDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRyZW4gJiYgcHJldkNoaWxkcmVuW25hbWVdO1xuICAgICAgICB2YXIgbmV4dENoaWxkID0gbmV4dENoaWxkcmVuW25hbWVdO1xuICAgICAgICBpZiAocHJldkNoaWxkID09PSBuZXh0Q2hpbGQpIHtcbiAgICAgICAgICB1cGRhdGVzID0gZW5xdWV1ZSh1cGRhdGVzLCB0aGlzLm1vdmVDaGlsZChwcmV2Q2hpbGQsIGxhc3RQbGFjZWROb2RlLCBuZXh0SW5kZXgsIGxhc3RJbmRleCkpO1xuICAgICAgICAgIGxhc3RJbmRleCA9IE1hdGgubWF4KHByZXZDaGlsZC5fbW91bnRJbmRleCwgbGFzdEluZGV4KTtcbiAgICAgICAgICBwcmV2Q2hpbGQuX21vdW50SW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHByZXZDaGlsZCkge1xuICAgICAgICAgICAgLy8gVXBkYXRlIGBsYXN0SW5kZXhgIGJlZm9yZSBgX21vdW50SW5kZXhgIGdldHMgdW5zZXQgYnkgdW5tb3VudGluZy5cbiAgICAgICAgICAgIGxhc3RJbmRleCA9IE1hdGgubWF4KHByZXZDaGlsZC5fbW91bnRJbmRleCwgbGFzdEluZGV4KTtcbiAgICAgICAgICAgIC8vIFRoZSBgcmVtb3ZlZE5vZGVzYCBsb29wIGJlbG93IHdpbGwgYWN0dWFsbHkgcmVtb3ZlIHRoZSBjaGlsZC5cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gVGhlIGNoaWxkIG11c3QgYmUgaW5zdGFudGlhdGVkIGJlZm9yZSBpdCdzIG1vdW50ZWQuXG4gICAgICAgICAgdXBkYXRlcyA9IGVucXVldWUodXBkYXRlcywgdGhpcy5fbW91bnRDaGlsZEF0SW5kZXgobmV4dENoaWxkLCBtb3VudEltYWdlc1tuZXh0TW91bnRJbmRleF0sIGxhc3RQbGFjZWROb2RlLCBuZXh0SW5kZXgsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSk7XG4gICAgICAgICAgbmV4dE1vdW50SW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICBuZXh0SW5kZXgrKztcbiAgICAgICAgbGFzdFBsYWNlZE5vZGUgPSBSZWFjdFJlY29uY2lsZXIuZ2V0SG9zdE5vZGUobmV4dENoaWxkKTtcbiAgICAgIH1cbiAgICAgIC8vIFJlbW92ZSBjaGlsZHJlbiB0aGF0IGFyZSBubyBsb25nZXIgcHJlc2VudC5cbiAgICAgIGZvciAobmFtZSBpbiByZW1vdmVkTm9kZXMpIHtcbiAgICAgICAgaWYgKHJlbW92ZWROb2Rlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIHVwZGF0ZXMgPSBlbnF1ZXVlKHVwZGF0ZXMsIHRoaXMuX3VubW91bnRDaGlsZChwcmV2Q2hpbGRyZW5bbmFtZV0sIHJlbW92ZWROb2Rlc1tuYW1lXSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodXBkYXRlcykge1xuICAgICAgICBwcm9jZXNzUXVldWUodGhpcywgdXBkYXRlcyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gbmV4dENoaWxkcmVuO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBzZXRDaGlsZHJlbkZvckluc3RydW1lbnRhdGlvbi5jYWxsKHRoaXMsIG5leHRDaGlsZHJlbik7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVubW91bnRzIGFsbCByZW5kZXJlZCBjaGlsZHJlbi4gVGhpcyBzaG91bGQgYmUgdXNlZCB0byBjbGVhbiB1cCBjaGlsZHJlblxuICAgICAqIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgdW5tb3VudGVkLiBJdCBkb2VzIG5vdCBhY3R1YWxseSBwZXJmb3JtIGFueVxuICAgICAqIGJhY2tlbmQgb3BlcmF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHVubW91bnRDaGlsZHJlbjogZnVuY3Rpb24gKHNhZmVseSkge1xuICAgICAgdmFyIHJlbmRlcmVkQ2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudW5tb3VudENoaWxkcmVuKHJlbmRlcmVkQ2hpbGRyZW4sIHNhZmVseSk7XG4gICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW92ZXMgYSBjaGlsZCBjb21wb25lbnQgdG8gdGhlIHN1cHBsaWVkIGluZGV4LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIG1vdmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggRGVzdGluYXRpb24gaW5kZXggb2YgdGhlIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxhc3RJbmRleCBMYXN0IGluZGV4IHZpc2l0ZWQgb2YgdGhlIHNpYmxpbmdzIG9mIGBjaGlsZGAuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG1vdmVDaGlsZDogZnVuY3Rpb24gKGNoaWxkLCBhZnRlck5vZGUsIHRvSW5kZXgsIGxhc3RJbmRleCkge1xuICAgICAgLy8gSWYgdGhlIGluZGV4IG9mIGBjaGlsZGAgaXMgbGVzcyB0aGFuIGBsYXN0SW5kZXhgLCB0aGVuIGl0IG5lZWRzIHRvXG4gICAgICAvLyBiZSBtb3ZlZC4gT3RoZXJ3aXNlLCB3ZSBkbyBub3QgbmVlZCB0byBtb3ZlIGl0IGJlY2F1c2UgYSBjaGlsZCB3aWxsIGJlXG4gICAgICAvLyBpbnNlcnRlZCBvciBtb3ZlZCBiZWZvcmUgYGNoaWxkYC5cbiAgICAgIGlmIChjaGlsZC5fbW91bnRJbmRleCA8IGxhc3RJbmRleCkge1xuICAgICAgICByZXR1cm4gbWFrZU1vdmUoY2hpbGQsIGFmdGVyTm9kZSwgdG9JbmRleCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjaGlsZCBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDb21wb25lbnQgdG8gY3JlYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb3VudEltYWdlIE1hcmt1cCB0byBpbnNlcnQuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGNyZWF0ZUNoaWxkOiBmdW5jdGlvbiAoY2hpbGQsIGFmdGVyTm9kZSwgbW91bnRJbWFnZSkge1xuICAgICAgcmV0dXJuIG1ha2VJbnNlcnRNYXJrdXAobW91bnRJbWFnZSwgYWZ0ZXJOb2RlLCBjaGlsZC5fbW91bnRJbmRleCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBjaGlsZCBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDaGlsZCB0byByZW1vdmUuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHJlbW92ZUNoaWxkOiBmdW5jdGlvbiAoY2hpbGQsIG5vZGUpIHtcbiAgICAgIHJldHVybiBtYWtlUmVtb3ZlKGNoaWxkLCBub2RlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW91bnRzIGEgY2hpbGQgd2l0aCB0aGUgc3VwcGxpZWQgbmFtZS5cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoaXMgaXMgcGFydCBvZiBgdXBkYXRlQ2hpbGRyZW5gIGFuZCBpcyBoZXJlIGZvciByZWFkYWJpbGl0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byBtb3VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBjaGlsZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gaW5zZXJ0IHRoZSBjaGlsZC5cbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfbW91bnRDaGlsZEF0SW5kZXg6IGZ1bmN0aW9uIChjaGlsZCwgbW91bnRJbWFnZSwgYWZ0ZXJOb2RlLCBpbmRleCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgIGNoaWxkLl9tb3VudEluZGV4ID0gaW5kZXg7XG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVDaGlsZChjaGlsZCwgYWZ0ZXJOb2RlLCBtb3VudEltYWdlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5tb3VudHMgYSByZW5kZXJlZCBjaGlsZC5cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoaXMgaXMgcGFydCBvZiBgdXBkYXRlQ2hpbGRyZW5gIGFuZCBpcyBoZXJlIGZvciByZWFkYWJpbGl0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byB1bm1vdW50LlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3VubW91bnRDaGlsZDogZnVuY3Rpb24gKGNoaWxkLCBub2RlKSB7XG4gICAgICB2YXIgdXBkYXRlID0gdGhpcy5yZW1vdmVDaGlsZChjaGlsZCwgbm9kZSk7XG4gICAgICBjaGlsZC5fbW91bnRJbmRleCA9IG51bGw7XG4gICAgICByZXR1cm4gdXBkYXRlO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE11bHRpQ2hpbGQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0TXVsdGlDaGlsZC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYG9iamVjdGAgaXMgYSB2YWxpZCBvd25lci5cbiAqIEBmaW5hbFxuICovXG5mdW5jdGlvbiBpc1ZhbGlkT3duZXIob2JqZWN0KSB7XG4gIHJldHVybiAhIShvYmplY3QgJiYgdHlwZW9mIG9iamVjdC5hdHRhY2hSZWYgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iamVjdC5kZXRhY2hSZWYgPT09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIFJlYWN0T3duZXJzIGFyZSBjYXBhYmxlIG9mIHN0b3JpbmcgcmVmZXJlbmNlcyB0byBvd25lZCBjb21wb25lbnRzLlxuICpcbiAqIEFsbCBjb21wb25lbnRzIGFyZSBjYXBhYmxlIG9mIC8vYmVpbmcvLyByZWZlcmVuY2VkIGJ5IG93bmVyIGNvbXBvbmVudHMsIGJ1dFxuICogb25seSBSZWFjdE93bmVyIGNvbXBvbmVudHMgYXJlIGNhcGFibGUgb2YgLy9yZWZlcmVuY2luZy8vIG93bmVkIGNvbXBvbmVudHMuXG4gKiBUaGUgbmFtZWQgcmVmZXJlbmNlIGlzIGtub3duIGFzIGEgXCJyZWZcIi5cbiAqXG4gKiBSZWZzIGFyZSBhdmFpbGFibGUgd2hlbiBtb3VudGVkIGFuZCB1cGRhdGVkIGR1cmluZyByZWNvbmNpbGlhdGlvbi5cbiAqXG4gKiAgIHZhciBNeUNvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICogICAgICAgcmV0dXJuIChcbiAqICAgICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfT5cbiAqICAgICAgICAgICA8Q3VzdG9tQ29tcG9uZW50IHJlZj1cImN1c3RvbVwiIC8+XG4gKiAgICAgICAgIDwvZGl2PlxuICogICAgICAgKTtcbiAqICAgICB9LFxuICogICAgIGhhbmRsZUNsaWNrOiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHRoaXMucmVmcy5jdXN0b20uaGFuZGxlQ2xpY2soKTtcbiAqICAgICB9LFxuICogICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHRoaXMucmVmcy5jdXN0b20uaW5pdGlhbGl6ZSgpO1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogUmVmcyBzaG91bGQgcmFyZWx5IGJlIHVzZWQuIFdoZW4gcmVmcyBhcmUgdXNlZCwgdGhleSBzaG91bGQgb25seSBiZSBkb25lIHRvXG4gKiBjb250cm9sIGRhdGEgdGhhdCBpcyBub3QgaGFuZGxlZCBieSBSZWFjdCdzIGRhdGEgZmxvdy5cbiAqXG4gKiBAY2xhc3MgUmVhY3RPd25lclxuICovXG52YXIgUmVhY3RPd25lciA9IHtcbiAgLyoqXG4gICAqIEFkZHMgYSBjb21wb25lbnQgYnkgcmVmIHRvIGFuIG93bmVyIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50IENvbXBvbmVudCB0byByZWZlcmVuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgTmFtZSBieSB3aGljaCB0byByZWZlciB0byB0aGUgY29tcG9uZW50LlxuICAgKiBAcGFyYW0ge1JlYWN0T3duZXJ9IG93bmVyIENvbXBvbmVudCBvbiB3aGljaCB0byByZWNvcmQgdGhlIHJlZi5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgYWRkQ29tcG9uZW50QXNSZWZUbzogZnVuY3Rpb24gKGNvbXBvbmVudCwgcmVmLCBvd25lcikge1xuICAgICFpc1ZhbGlkT3duZXIob3duZXIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2FkZENvbXBvbmVudEFzUmVmVG8oLi4uKTogT25seSBhIFJlYWN0T3duZXIgY2FuIGhhdmUgcmVmcy4gWW91IG1pZ2h0IGJlIGFkZGluZyBhIHJlZiB0byBhIGNvbXBvbmVudCB0aGF0IHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgYSBjb21wb25lbnRcXCdzIGByZW5kZXJgIG1ldGhvZCwgb3IgeW91IGhhdmUgbXVsdGlwbGUgY29waWVzIG9mIFJlYWN0IGxvYWRlZCAoZGV0YWlsczogaHR0cHM6Ly9mYi5tZS9yZWFjdC1yZWZzLW11c3QtaGF2ZS1vd25lcikuJykgOiBfcHJvZEludmFyaWFudCgnMTE5JykgOiB2b2lkIDA7XG4gICAgb3duZXIuYXR0YWNoUmVmKHJlZiwgY29tcG9uZW50KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGNvbXBvbmVudCBieSByZWYgZnJvbSBhbiBvd25lciBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gZGVyZWZlcmVuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgTmFtZSBvZiB0aGUgcmVmIHRvIHJlbW92ZS5cbiAgICogQHBhcmFtIHtSZWFjdE93bmVyfSBvd25lciBDb21wb25lbnQgb24gd2hpY2ggdGhlIHJlZiBpcyByZWNvcmRlZC5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tOiBmdW5jdGlvbiAoY29tcG9uZW50LCByZWYsIG93bmVyKSB7XG4gICAgIWlzVmFsaWRPd25lcihvd25lcikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tKC4uLik6IE9ubHkgYSBSZWFjdE93bmVyIGNhbiBoYXZlIHJlZnMuIFlvdSBtaWdodCBiZSByZW1vdmluZyBhIHJlZiB0byBhIGNvbXBvbmVudCB0aGF0IHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgYSBjb21wb25lbnRcXCdzIGByZW5kZXJgIG1ldGhvZCwgb3IgeW91IGhhdmUgbXVsdGlwbGUgY29waWVzIG9mIFJlYWN0IGxvYWRlZCAoZGV0YWlsczogaHR0cHM6Ly9mYi5tZS9yZWFjdC1yZWZzLW11c3QtaGF2ZS1vd25lcikuJykgOiBfcHJvZEludmFyaWFudCgnMTIwJykgOiB2b2lkIDA7XG4gICAgdmFyIG93bmVyUHVibGljSW5zdGFuY2UgPSBvd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgIC8vIENoZWNrIHRoYXQgYGNvbXBvbmVudGAncyBvd25lciBpcyBzdGlsbCBhbGl2ZSBhbmQgdGhhdCBgY29tcG9uZW50YCBpcyBzdGlsbCB0aGUgY3VycmVudCByZWZcbiAgICAvLyBiZWNhdXNlIHdlIGRvIG5vdCB3YW50IHRvIGRldGFjaCB0aGUgcmVmIGlmIGFub3RoZXIgY29tcG9uZW50IHN0b2xlIGl0LlxuICAgIGlmIChvd25lclB1YmxpY0luc3RhbmNlICYmIG93bmVyUHVibGljSW5zdGFuY2UucmVmc1tyZWZdID09PSBjb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKSkge1xuICAgICAgb3duZXIuZGV0YWNoUmVmKHJlZik7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0T3duZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0T3duZXIuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0ge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0ge1xuICAgIHByb3A6ICdwcm9wJyxcbiAgICBjb250ZXh0OiAnY29udGV4dCcsXG4gICAgY2hpbGRDb250ZXh0OiAnY2hpbGQgY29udGV4dCdcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgQ2FsbGJhY2tRdWV1ZSA9IHJlcXVpcmUoJy4vQ2FsbGJhY2tRdWV1ZScpO1xudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJy4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyJyk7XG52YXIgUmVhY3RJbnB1dFNlbGVjdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnB1dFNlbGVjdGlvbicpO1xudmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluc3RydW1lbnRhdGlvbicpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9UcmFuc2FjdGlvbicpO1xudmFyIFJlYWN0VXBkYXRlUXVldWUgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlUXVldWUnKTtcblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQsIHdoZW4gcG9zc2libGUsIHRoZSBzZWxlY3Rpb24gcmFuZ2UgKGN1cnJlbnRseSBzZWxlY3RlZCB0ZXh0XG4gKiBpbnB1dCkgaXMgbm90IGRpc3R1cmJlZCBieSBwZXJmb3JtaW5nIHRoZSB0cmFuc2FjdGlvbi5cbiAqL1xudmFyIFNFTEVDVElPTl9SRVNUT1JBVElPTiA9IHtcbiAgLyoqXG4gICAqIEByZXR1cm4ge1NlbGVjdGlvbn0gU2VsZWN0aW9uIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgaW5pdGlhbGl6ZTogUmVhY3RJbnB1dFNlbGVjdGlvbi5nZXRTZWxlY3Rpb25JbmZvcm1hdGlvbixcbiAgLyoqXG4gICAqIEBwYXJhbSB7U2VsZWN0aW9ufSBzZWwgU2VsZWN0aW9uIGluZm9ybWF0aW9uIHJldHVybmVkIGZyb20gYGluaXRpYWxpemVgLlxuICAgKi9cbiAgY2xvc2U6IFJlYWN0SW5wdXRTZWxlY3Rpb24ucmVzdG9yZVNlbGVjdGlvblxufTtcblxuLyoqXG4gKiBTdXBwcmVzc2VzIGV2ZW50cyAoYmx1ci9mb2N1cykgdGhhdCBjb3VsZCBiZSBpbmFkdmVydGVudGx5IGRpc3BhdGNoZWQgZHVlIHRvXG4gKiBoaWdoIGxldmVsIERPTSBtYW5pcHVsYXRpb25zIChsaWtlIHRlbXBvcmFyaWx5IHJlbW92aW5nIGEgdGV4dCBpbnB1dCBmcm9tIHRoZVxuICogRE9NKS5cbiAqL1xudmFyIEVWRU5UX1NVUFBSRVNTSU9OID0ge1xuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVGhlIGVuYWJsZWQgc3RhdHVzIG9mIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGJlZm9yZVxuICAgKiB0aGUgcmVjb25jaWxpYXRpb24uXG4gICAqL1xuICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN1cnJlbnRseUVuYWJsZWQgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuaXNFbmFibGVkKCk7XG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnNldEVuYWJsZWQoZmFsc2UpO1xuICAgIHJldHVybiBjdXJyZW50bHlFbmFibGVkO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHByZXZpb3VzbHlFbmFibGVkIEVuYWJsZWQgc3RhdHVzIG9mXG4gICAqICAgYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgYmVmb3JlIHRoZSByZWNvbmNpbGlhdGlvbiBvY2N1cnJlZC4gYGNsb3NlYFxuICAgKiAgIHJlc3RvcmVzIHRoZSBwcmV2aW91cyB2YWx1ZS5cbiAgICovXG4gIGNsb3NlOiBmdW5jdGlvbiAocHJldmlvdXNseUVuYWJsZWQpIHtcbiAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuc2V0RW5hYmxlZChwcmV2aW91c2x5RW5hYmxlZCk7XG4gIH1cbn07XG5cbi8qKlxuICogUHJvdmlkZXMgYSBxdWV1ZSBmb3IgY29sbGVjdGluZyBgY29tcG9uZW50RGlkTW91bnRgIGFuZFxuICogYGNvbXBvbmVudERpZFVwZGF0ZWAgY2FsbGJhY2tzIGR1cmluZyB0aGUgdHJhbnNhY3Rpb24uXG4gKi9cbnZhciBPTl9ET01fUkVBRFlfUVVFVUVJTkcgPSB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgaW50ZXJuYWwgYG9uRE9NUmVhZHlgIHF1ZXVlLlxuICAgKi9cbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5LnJlc2V0KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFmdGVyIERPTSBpcyBmbHVzaGVkLCBpbnZva2UgYWxsIHJlZ2lzdGVyZWQgYG9uRE9NUmVhZHlgIGNhbGxiYWNrcy5cbiAgICovXG4gIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkubm90aWZ5QWxsKCk7XG4gIH1cbn07XG5cbi8qKlxuICogRXhlY3V0ZWQgd2l0aGluIHRoZSBzY29wZSBvZiB0aGUgYFRyYW5zYWN0aW9uYCBpbnN0YW5jZS4gQ29uc2lkZXIgdGhlc2UgYXNcbiAqIGJlaW5nIG1lbWJlciBtZXRob2RzLCBidXQgd2l0aCBhbiBpbXBsaWVkIG9yZGVyaW5nIHdoaWxlIGJlaW5nIGlzb2xhdGVkIGZyb21cbiAqIGVhY2ggb3RoZXIuXG4gKi9cbnZhciBUUkFOU0FDVElPTl9XUkFQUEVSUyA9IFtTRUxFQ1RJT05fUkVTVE9SQVRJT04sIEVWRU5UX1NVUFBSRVNTSU9OLCBPTl9ET01fUkVBRFlfUVVFVUVJTkddO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUUkFOU0FDVElPTl9XUkFQUEVSUy5wdXNoKHtcbiAgICBpbml0aWFsaXplOiBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpbkZsdXNoLFxuICAgIGNsb3NlOiBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRGbHVzaFxuICB9KTtcbn1cblxuLyoqXG4gKiBDdXJyZW50bHk6XG4gKiAtIFRoZSBvcmRlciB0aGF0IHRoZXNlIGFyZSBsaXN0ZWQgaW4gdGhlIHRyYW5zYWN0aW9uIGlzIGNyaXRpY2FsOlxuICogLSBTdXBwcmVzc2VzIGV2ZW50cy5cbiAqIC0gUmVzdG9yZXMgc2VsZWN0aW9uIHJhbmdlLlxuICpcbiAqIEZ1dHVyZTpcbiAqIC0gUmVzdG9yZSBkb2N1bWVudC9vdmVyZmxvdyBzY3JvbGwgcG9zaXRpb25zIHRoYXQgd2VyZSB1bmludGVudGlvbmFsbHlcbiAqICAgbW9kaWZpZWQgdmlhIERPTSBpbnNlcnRpb25zIGFib3ZlIHRoZSB0b3Agdmlld3BvcnQgYm91bmRhcnkuXG4gKiAtIEltcGxlbWVudC9pbnRlZ3JhdGUgd2l0aCBjdXN0b21pemVkIGNvbnN0cmFpbnQgYmFzZWQgbGF5b3V0IHN5c3RlbSBhbmQga2VlcFxuICogICB0cmFjayBvZiB3aGljaCBkaW1lbnNpb25zIG11c3QgYmUgcmVtZWFzdXJlZC5cbiAqXG4gKiBAY2xhc3MgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvblxuICovXG5mdW5jdGlvbiBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uKHVzZUNyZWF0ZUVsZW1lbnQpIHtcbiAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xuICAvLyBPbmx5IHNlcnZlci1zaWRlIHJlbmRlcmluZyByZWFsbHkgbmVlZHMgdGhpcyBvcHRpb24gKHNlZVxuICAvLyBgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdgKSwgYnV0IHNlcnZlci1zaWRlIHVzZXNcbiAgLy8gYFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb25gIGluc3RlYWQuIFRoaXMgb3B0aW9uIGlzIGhlcmUgc28gdGhhdCBpdCdzXG4gIC8vIGFjY2Vzc2libGUgYW5kIGRlZmF1bHRzIHRvIGZhbHNlIHdoZW4gYFJlYWN0RE9NQ29tcG9uZW50YCBhbmRcbiAgLy8gYFJlYWN0RE9NVGV4dENvbXBvbmVudGAgY2hlY2tzIGl0IGluIGBtb3VudENvbXBvbmVudGAuYFxuICB0aGlzLnJlbmRlclRvU3RhdGljTWFya3VwID0gZmFsc2U7XG4gIHRoaXMucmVhY3RNb3VudFJlYWR5ID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQobnVsbCk7XG4gIHRoaXMudXNlQ3JlYXRlRWxlbWVudCA9IHVzZUNyZWF0ZUVsZW1lbnQ7XG59XG5cbnZhciBNaXhpbiA9IHtcbiAgLyoqXG4gICAqIEBzZWUgVHJhbnNhY3Rpb25cbiAgICogQGFic3RyYWN0XG4gICAqIEBmaW5hbFxuICAgKiBAcmV0dXJuIHthcnJheTxvYmplY3Q+fSBMaXN0IG9mIG9wZXJhdGlvbiB3cmFwIHByb2NlZHVyZXMuXG4gICAqICAgVE9ETzogY29udmVydCB0byBhcnJheTxUcmFuc2FjdGlvbldyYXBwZXI+XG4gICAqL1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBxdWV1ZSB0byBjb2xsZWN0IGBvbkRPTVJlYWR5YCBjYWxsYmFja3Mgd2l0aC5cbiAgICovXG4gIGdldFJlYWN0TW91bnRSZWFkeTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWN0TW91bnRSZWFkeTtcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgcXVldWUgdG8gY29sbGVjdCBSZWFjdCBhc3luYyBldmVudHMuXG4gICAqL1xuICBnZXRVcGRhdGVRdWV1ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBSZWFjdFVwZGF0ZVF1ZXVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTYXZlIGN1cnJlbnQgdHJhbnNhY3Rpb24gc3RhdGUgLS0gaWYgdGhlIHJldHVybiB2YWx1ZSBmcm9tIHRoaXMgbWV0aG9kIGlzXG4gICAqIHBhc3NlZCB0byBgcm9sbGJhY2tgLCB0aGUgdHJhbnNhY3Rpb24gd2lsbCBiZSByZXNldCB0byB0aGF0IHN0YXRlLlxuICAgKi9cbiAgY2hlY2twb2ludDogZnVuY3Rpb24gKCkge1xuICAgIC8vIHJlYWN0TW91bnRSZWFkeSBpcyB0aGUgb3VyIG9ubHkgc3RhdGVmdWwgd3JhcHBlclxuICAgIHJldHVybiB0aGlzLnJlYWN0TW91bnRSZWFkeS5jaGVja3BvaW50KCk7XG4gIH0sXG5cbiAgcm9sbGJhY2s6IGZ1bmN0aW9uIChjaGVja3BvaW50KSB7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkucm9sbGJhY2soY2hlY2twb2ludCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGBQb29sZWRDbGFzc2AgbG9va3MgZm9yIHRoaXMsIGFuZCB3aWxsIGludm9rZSB0aGlzIGJlZm9yZSBhbGxvd2luZyB0aGlzXG4gICAqIGluc3RhbmNlIHRvIGJlIHJldXNlZC5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5yZWFjdE1vdW50UmVhZHkpO1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5ID0gbnVsbDtcbiAgfVxufTtcblxuX2Fzc2lnbihSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLnByb3RvdHlwZSwgVHJhbnNhY3Rpb24sIE1peGluKTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb247XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24uanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0T3duZXInKTtcblxudmFyIFJlYWN0UmVmID0ge307XG5cbmZ1bmN0aW9uIGF0dGFjaFJlZihyZWYsIGNvbXBvbmVudCwgb3duZXIpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYoY29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCkpO1xuICB9IGVsc2Uge1xuICAgIC8vIExlZ2FjeSByZWZcbiAgICBSZWFjdE93bmVyLmFkZENvbXBvbmVudEFzUmVmVG8oY29tcG9uZW50LCByZWYsIG93bmVyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXRhY2hSZWYocmVmLCBjb21wb25lbnQsIG93bmVyKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKG51bGwpO1xuICB9IGVsc2Uge1xuICAgIC8vIExlZ2FjeSByZWZcbiAgICBSZWFjdE93bmVyLnJlbW92ZUNvbXBvbmVudEFzUmVmRnJvbShjb21wb25lbnQsIHJlZiwgb3duZXIpO1xuICB9XG59XG5cblJlYWN0UmVmLmF0dGFjaFJlZnMgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQgPT09IG51bGwgfHwgdHlwZW9mIGVsZW1lbnQgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciByZWYgPSBlbGVtZW50LnJlZjtcbiAgaWYgKHJlZiAhPSBudWxsKSB7XG4gICAgYXR0YWNoUmVmKHJlZiwgaW5zdGFuY2UsIGVsZW1lbnQuX293bmVyKTtcbiAgfVxufTtcblxuUmVhY3RSZWYuc2hvdWxkVXBkYXRlUmVmcyA9IGZ1bmN0aW9uIChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpIHtcbiAgLy8gSWYgZWl0aGVyIHRoZSBvd25lciBvciBhIGByZWZgIGhhcyBjaGFuZ2VkLCBtYWtlIHN1cmUgdGhlIG5ld2VzdCBvd25lclxuICAvLyBoYXMgc3RvcmVkIGEgcmVmZXJlbmNlIHRvIGB0aGlzYCwgYW5kIHRoZSBwcmV2aW91cyBvd25lciAoaWYgZGlmZmVyZW50KVxuICAvLyBoYXMgZm9yZ290dGVuIHRoZSByZWZlcmVuY2UgdG8gYHRoaXNgLiBXZSB1c2UgdGhlIGVsZW1lbnQgaW5zdGVhZFxuICAvLyBvZiB0aGUgcHVibGljIHRoaXMucHJvcHMgYmVjYXVzZSB0aGUgcG9zdCBwcm9jZXNzaW5nIGNhbm5vdCBkZXRlcm1pbmVcbiAgLy8gYSByZWYuIFRoZSByZWYgY29uY2VwdHVhbGx5IGxpdmVzIG9uIHRoZSBlbGVtZW50LlxuXG4gIC8vIFRPRE86IFNob3VsZCB0aGlzIGV2ZW4gYmUgcG9zc2libGU/IFRoZSBvd25lciBjYW5ub3QgY2hhbmdlIGJlY2F1c2VcbiAgLy8gaXQncyBmb3JiaWRkZW4gYnkgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQuIFRoZSByZWYgY2FuIGNoYW5nZVxuICAvLyBpZiB5b3Ugc3dhcCB0aGUga2V5cyBvZiBidXQgbm90IHRoZSByZWZzLiBSZWNvbnNpZGVyIHdoZXJlIHRoaXMgY2hlY2tcbiAgLy8gaXMgbWFkZS4gSXQgcHJvYmFibHkgYmVsb25ncyB3aGVyZSB0aGUga2V5IGNoZWNraW5nIGFuZFxuICAvLyBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50IGlzIGRvbmUuXG5cbiAgdmFyIHByZXZSZWYgPSBudWxsO1xuICB2YXIgcHJldk93bmVyID0gbnVsbDtcbiAgaWYgKHByZXZFbGVtZW50ICE9PSBudWxsICYmIHR5cGVvZiBwcmV2RWxlbWVudCA9PT0gJ29iamVjdCcpIHtcbiAgICBwcmV2UmVmID0gcHJldkVsZW1lbnQucmVmO1xuICAgIHByZXZPd25lciA9IHByZXZFbGVtZW50Ll9vd25lcjtcbiAgfVxuXG4gIHZhciBuZXh0UmVmID0gbnVsbDtcbiAgdmFyIG5leHRPd25lciA9IG51bGw7XG4gIGlmIChuZXh0RWxlbWVudCAhPT0gbnVsbCAmJiB0eXBlb2YgbmV4dEVsZW1lbnQgPT09ICdvYmplY3QnKSB7XG4gICAgbmV4dFJlZiA9IG5leHRFbGVtZW50LnJlZjtcbiAgICBuZXh0T3duZXIgPSBuZXh0RWxlbWVudC5fb3duZXI7XG4gIH1cblxuICByZXR1cm4gcHJldlJlZiAhPT0gbmV4dFJlZiB8fFxuICAvLyBJZiBvd25lciBjaGFuZ2VzIGJ1dCB3ZSBoYXZlIGFuIHVuY2hhbmdlZCBmdW5jdGlvbiByZWYsIGRvbid0IHVwZGF0ZSByZWZzXG4gIHR5cGVvZiBuZXh0UmVmID09PSAnc3RyaW5nJyAmJiBuZXh0T3duZXIgIT09IHByZXZPd25lcjtcbn07XG5cblJlYWN0UmVmLmRldGFjaFJlZnMgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQgPT09IG51bGwgfHwgdHlwZW9mIGVsZW1lbnQgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciByZWYgPSBlbGVtZW50LnJlZjtcbiAgaWYgKHJlZiAhPSBudWxsKSB7XG4gICAgZGV0YWNoUmVmKHJlZiwgaW5zdGFuY2UsIGVsZW1lbnQuX293bmVyKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFJlZjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RSZWYuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFNlcnZlckJhdGNoaW5nU3RyYXRlZ3kgPSB7XG4gIGlzQmF0Y2hpbmdVcGRhdGVzOiBmYWxzZSxcbiAgYmF0Y2hlZFVwZGF0ZXM6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIC8vIERvbid0IGRvIGFueXRoaW5nIGhlcmUuIER1cmluZyB0aGUgc2VydmVyIHJlbmRlcmluZyB3ZSBkb24ndCB3YW50IHRvXG4gICAgLy8gc2NoZWR1bGUgYW55IHVwZGF0ZXMuIFdlIHdpbGwgc2ltcGx5IGlnbm9yZSB0aGVtLlxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RTZXJ2ZXJCYXRjaGluZ1N0cmF0ZWd5LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QvbGliL1JlYWN0Jyk7XG52YXIgUmVhY3RET01Db250YWluZXJJbmZvID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbnRhaW5lckluZm8nKTtcbnZhciBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5ID0gcmVxdWlyZSgnLi9SZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5Jyk7XG52YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG52YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9IHJlcXVpcmUoJy4vUmVhY3RNYXJrdXBDaGVja3N1bScpO1xudmFyIFJlYWN0UmVjb25jaWxlciA9IHJlcXVpcmUoJy4vUmVhY3RSZWNvbmNpbGVyJyk7XG52YXIgUmVhY3RTZXJ2ZXJCYXRjaGluZ1N0cmF0ZWd5ID0gcmVxdWlyZSgnLi9SZWFjdFNlcnZlckJhdGNoaW5nU3RyYXRlZ3knKTtcbnZhciBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uJyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlPYmplY3QnKTtcbnZhciBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50Jyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBwZW5kaW5nVHJhbnNhY3Rpb25zID0gMDtcblxuLyoqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgSFRNTCBtYXJrdXBcbiAqL1xuZnVuY3Rpb24gcmVuZGVyVG9TdHJpbmdJbXBsKGVsZW1lbnQsIG1ha2VTdGF0aWNNYXJrdXApIHtcbiAgdmFyIHRyYW5zYWN0aW9uO1xuICB0cnkge1xuICAgIFJlYWN0VXBkYXRlcy5pbmplY3Rpb24uaW5qZWN0QmF0Y2hpbmdTdHJhdGVneShSZWFjdFNlcnZlckJhdGNoaW5nU3RyYXRlZ3kpO1xuXG4gICAgdHJhbnNhY3Rpb24gPSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLmdldFBvb2xlZChtYWtlU3RhdGljTWFya3VwKTtcblxuICAgIHBlbmRpbmdUcmFuc2FjdGlvbnMrKztcblxuICAgIHJldHVybiB0cmFuc2FjdGlvbi5wZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoZWxlbWVudCwgdHJ1ZSk7XG4gICAgICB2YXIgbWFya3VwID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cmFuc2FjdGlvbiwgbnVsbCwgUmVhY3RET01Db250YWluZXJJbmZvKCksIGVtcHR5T2JqZWN0LCAwIC8qIHBhcmVudERlYnVnSUQgKi9cbiAgICAgICk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Vbm1vdW50Q29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLl9kZWJ1Z0lEKTtcbiAgICAgIH1cbiAgICAgIGlmICghbWFrZVN0YXRpY01hcmt1cCkge1xuICAgICAgICBtYXJrdXAgPSBSZWFjdE1hcmt1cENoZWNrc3VtLmFkZENoZWNrc3VtVG9NYXJrdXAobWFya3VwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXJrdXA7XG4gICAgfSwgbnVsbCk7XG4gIH0gZmluYWxseSB7XG4gICAgcGVuZGluZ1RyYW5zYWN0aW9ucy0tO1xuICAgIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ucmVsZWFzZSh0cmFuc2FjdGlvbik7XG4gICAgLy8gUmV2ZXJ0IHRvIHRoZSBET00gYmF0Y2hpbmcgc3RyYXRlZ3kgc2luY2UgdGhlc2UgdHdvIHJlbmRlcmVyc1xuICAgIC8vIGN1cnJlbnRseSBzaGFyZSB0aGVzZSBzdGF0ZWZ1bCBtb2R1bGVzLlxuICAgIGlmICghcGVuZGluZ1RyYW5zYWN0aW9ucykge1xuICAgICAgUmVhY3RVcGRhdGVzLmluamVjdGlvbi5pbmplY3RCYXRjaGluZ1N0cmF0ZWd5KFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbmRlciBhIFJlYWN0RWxlbWVudCB0byBpdHMgaW5pdGlhbCBIVE1MLiBUaGlzIHNob3VsZCBvbmx5IGJlIHVzZWQgb24gdGhlXG4gKiBzZXJ2ZXIuXG4gKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3Rkb21zZXJ2ZXIucmVuZGVydG9zdHJpbmdcbiAqL1xuZnVuY3Rpb24gcmVuZGVyVG9TdHJpbmcoZWxlbWVudCkge1xuICAhUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncmVuZGVyVG9TdHJpbmcoKTogWW91IG11c3QgcGFzcyBhIHZhbGlkIFJlYWN0RWxlbWVudC4nKSA6IF9wcm9kSW52YXJpYW50KCc0NicpIDogdm9pZCAwO1xuICByZXR1cm4gcmVuZGVyVG9TdHJpbmdJbXBsKGVsZW1lbnQsIGZhbHNlKTtcbn1cblxuLyoqXG4gKiBTaW1pbGFyIHRvIHJlbmRlclRvU3RyaW5nLCBleGNlcHQgdGhpcyBkb2Vzbid0IGNyZWF0ZSBleHRyYSBET00gYXR0cmlidXRlc1xuICogc3VjaCBhcyBkYXRhLXJlYWN0LWlkIHRoYXQgUmVhY3QgdXNlcyBpbnRlcm5hbGx5LlxuICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdG9wLWxldmVsLWFwaS5odG1sI3JlYWN0ZG9tc2VydmVyLnJlbmRlcnRvc3RhdGljbWFya3VwXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclRvU3RhdGljTWFya3VwKGVsZW1lbnQpIHtcbiAgIVJlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3JlbmRlclRvU3RhdGljTWFya3VwKCk6IFlvdSBtdXN0IHBhc3MgYSB2YWxpZCBSZWFjdEVsZW1lbnQuJykgOiBfcHJvZEludmFyaWFudCgnNDcnKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHJlbmRlclRvU3RyaW5nSW1wbChlbGVtZW50LCB0cnVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlbmRlclRvU3RyaW5nOiByZW5kZXJUb1N0cmluZyxcbiAgcmVuZGVyVG9TdGF0aWNNYXJrdXA6IHJlbmRlclRvU3RhdGljTWFya3VwXG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdFNlcnZlclJlbmRlcmluZy5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgUmVhY3RVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVRdWV1ZScpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gd2Fybk5vb3AocHVibGljSW5zdGFuY2UsIGNhbGxlck5hbWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBwdWJsaWNJbnN0YW5jZS5jb25zdHJ1Y3RvcjtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzKC4uLik6IENhbiBvbmx5IHVwZGF0ZSBhIG1vdW50aW5nIGNvbXBvbmVudC4gJyArICdUaGlzIHVzdWFsbHkgbWVhbnMgeW91IGNhbGxlZCAlcygpIG91dHNpZGUgY29tcG9uZW50V2lsbE1vdW50KCkgb24gdGhlIHNlcnZlci4gJyArICdUaGlzIGlzIGEgbm8tb3AuIFBsZWFzZSBjaGVjayB0aGUgY29kZSBmb3IgdGhlICVzIGNvbXBvbmVudC4nLCBjYWxsZXJOYW1lLCBjYWxsZXJOYW1lLCBjb25zdHJ1Y3RvciAmJiAoY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgY29uc3RydWN0b3IubmFtZSkgfHwgJ1JlYWN0Q2xhc3MnKSA6IHZvaWQgMDtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHVwZGF0ZSBxdWV1ZSB1c2VkIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLlxuICogSXQgZGVsZWdhdGVzIHRvIFJlYWN0VXBkYXRlUXVldWUgd2hpbGUgc2VydmVyIHJlbmRlcmluZyBpcyBpbiBwcm9ncmVzcyBhbmRcbiAqIHN3aXRjaGVzIHRvIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlIGFmdGVyIHRoZSB0cmFuc2FjdGlvbiBoYXMgY29tcGxldGVkLlxuICogQGNsYXNzIFJlYWN0U2VydmVyVXBkYXRlUXVldWVcbiAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gKi9cblxudmFyIFJlYWN0U2VydmVyVXBkYXRlUXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlYWN0U2VydmVyVXBkYXRlUXVldWUodHJhbnNhY3Rpb24pIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZSk7XG5cbiAgICB0aGlzLnRyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb247XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IHRoaXMgY29tcG9zaXRlIGNvbXBvbmVudCBpcyBtb3VudGVkLlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB3ZSB3YW50IHRvIHRlc3QuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgbW91bnRlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBmaW5hbFxuICAgKi9cblxuXG4gIFJlYWN0U2VydmVyVXBkYXRlUXVldWUucHJvdG90eXBlLmlzTW91bnRlZCA9IGZ1bmN0aW9uIGlzTW91bnRlZChwdWJsaWNJbnN0YW5jZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICAvKipcbiAgICogRW5xdWV1ZSBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhZnRlciBhbGwgdGhlIHBlbmRpbmcgdXBkYXRlc1xuICAgKiBoYXZlIHByb2Nlc3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdG8gdXNlIGFzIGB0aGlzYCBjb250ZXh0LlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cblxuXG4gIFJlYWN0U2VydmVyVXBkYXRlUXVldWUucHJvdG90eXBlLmVucXVldWVDYWxsYmFjayA9IGZ1bmN0aW9uIGVucXVldWVDYWxsYmFjayhwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2ssIGNhbGxlck5hbWUpIHtcbiAgICBpZiAodGhpcy50cmFuc2FjdGlvbi5pc0luVHJhbnNhY3Rpb24oKSkge1xuICAgICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlQ2FsbGJhY2socHVibGljSW5zdGFuY2UsIGNhbGxiYWNrLCBjYWxsZXJOYW1lKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEZvcmNlcyBhbiB1cGRhdGUuIFRoaXMgc2hvdWxkIG9ubHkgYmUgaW52b2tlZCB3aGVuIGl0IGlzIGtub3duIHdpdGhcbiAgICogY2VydGFpbnR5IHRoYXQgd2UgYXJlICoqbm90KiogaW4gYSBET00gdHJhbnNhY3Rpb24uXG4gICAqXG4gICAqIFlvdSBtYXkgd2FudCB0byBjYWxsIHRoaXMgd2hlbiB5b3Uga25vdyB0aGF0IHNvbWUgZGVlcGVyIGFzcGVjdCBvZiB0aGVcbiAgICogY29tcG9uZW50J3Mgc3RhdGUgaGFzIGNoYW5nZWQgYnV0IGBzZXRTdGF0ZWAgd2FzIG5vdCBjYWxsZWQuXG4gICAqXG4gICAqIFRoaXMgd2lsbCBub3QgaW52b2tlIGBzaG91bGRDb21wb25lbnRVcGRhdGVgLCBidXQgaXQgd2lsbCBpbnZva2VcbiAgICogYGNvbXBvbmVudFdpbGxVcGRhdGVgIGFuZCBgY29tcG9uZW50RGlkVXBkYXRlYC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cblxuXG4gIFJlYWN0U2VydmVyVXBkYXRlUXVldWUucHJvdG90eXBlLmVucXVldWVGb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uIGVucXVldWVGb3JjZVVwZGF0ZShwdWJsaWNJbnN0YW5jZSkge1xuICAgIGlmICh0aGlzLnRyYW5zYWN0aW9uLmlzSW5UcmFuc2FjdGlvbigpKSB7XG4gICAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVGb3JjZVVwZGF0ZShwdWJsaWNJbnN0YW5jZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5Ob29wKHB1YmxpY0luc3RhbmNlLCAnZm9yY2VVcGRhdGUnKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBvZiB0aGUgc3RhdGUuIEFsd2F5cyB1c2UgdGhpcyBvciBgc2V0U3RhdGVgIHRvIG11dGF0ZSBzdGF0ZS5cbiAgICogWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICAgKlxuICAgKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICAgKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb259IGNvbXBsZXRlU3RhdGUgTmV4dCBzdGF0ZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuXG5cbiAgUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZS5wcm90b3R5cGUuZW5xdWV1ZVJlcGxhY2VTdGF0ZSA9IGZ1bmN0aW9uIGVucXVldWVSZXBsYWNlU3RhdGUocHVibGljSW5zdGFuY2UsIGNvbXBsZXRlU3RhdGUpIHtcbiAgICBpZiAodGhpcy50cmFuc2FjdGlvbi5pc0luVHJhbnNhY3Rpb24oKSkge1xuICAgICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlUmVwbGFjZVN0YXRlKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2Fybk5vb3AocHVibGljSW5zdGFuY2UsICdyZXBsYWNlU3RhdGUnKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBUaGlzIG9ubHkgZXhpc3RzIGJlY2F1c2UgX3BlbmRpbmdTdGF0ZSBpc1xuICAgKiBpbnRlcm5hbC4gVGhpcyBwcm92aWRlcyBhIG1lcmdpbmcgc3RyYXRlZ3kgdGhhdCBpcyBub3QgYXZhaWxhYmxlIHRvIGRlZXBcbiAgICogcHJvcGVydGllcyB3aGljaCBpcyBjb25mdXNpbmcuIFRPRE86IEV4cG9zZSBwZW5kaW5nU3RhdGUgb3IgZG9uJ3QgdXNlIGl0XG4gICAqIGR1cmluZyB0aGUgbWVyZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBzdGF0ZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuXG5cbiAgUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZS5wcm90b3R5cGUuZW5xdWV1ZVNldFN0YXRlID0gZnVuY3Rpb24gZW5xdWV1ZVNldFN0YXRlKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsU3RhdGUpIHtcbiAgICBpZiAodGhpcy50cmFuc2FjdGlvbi5pc0luVHJhbnNhY3Rpb24oKSkge1xuICAgICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlU2V0U3RhdGUocHVibGljSW5zdGFuY2UsIHBhcnRpYWxTdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5Ob29wKHB1YmxpY0luc3RhbmNlLCAnc2V0U3RhdGUnKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0U2VydmVyVXBkYXRlUXVldWU7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZS5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIE5TID0ge1xuICB4bGluazogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLFxuICB4bWw6ICdodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UnXG59O1xuXG4vLyBXZSB1c2UgYXR0cmlidXRlcyBmb3IgZXZlcnl0aGluZyBTVkcgc28gbGV0J3MgYXZvaWQgc29tZSBkdXBsaWNhdGlvbiBhbmQgcnVuXG4vLyBjb2RlIGluc3RlYWQuXG4vLyBUaGUgZm9sbG93aW5nIGFyZSBhbGwgc3BlY2lmaWVkIGluIHRoZSBIVE1MIGNvbmZpZyBhbHJlYWR5IHNvIHdlIGV4Y2x1ZGUgaGVyZS5cbi8vIC0gY2xhc3MgKGFzIGNsYXNzTmFtZSlcbi8vIC0gY29sb3Jcbi8vIC0gaGVpZ2h0XG4vLyAtIGlkXG4vLyAtIGxhbmdcbi8vIC0gbWF4XG4vLyAtIG1lZGlhXG4vLyAtIG1ldGhvZFxuLy8gLSBtaW5cbi8vIC0gbmFtZVxuLy8gLSBzdHlsZVxuLy8gLSB0YXJnZXRcbi8vIC0gdHlwZVxuLy8gLSB3aWR0aFxudmFyIEFUVFJTID0ge1xuICBhY2NlbnRIZWlnaHQ6ICdhY2NlbnQtaGVpZ2h0JyxcbiAgYWNjdW11bGF0ZTogMCxcbiAgYWRkaXRpdmU6IDAsXG4gIGFsaWdubWVudEJhc2VsaW5lOiAnYWxpZ25tZW50LWJhc2VsaW5lJyxcbiAgYWxsb3dSZW9yZGVyOiAnYWxsb3dSZW9yZGVyJyxcbiAgYWxwaGFiZXRpYzogMCxcbiAgYW1wbGl0dWRlOiAwLFxuICBhcmFiaWNGb3JtOiAnYXJhYmljLWZvcm0nLFxuICBhc2NlbnQ6IDAsXG4gIGF0dHJpYnV0ZU5hbWU6ICdhdHRyaWJ1dGVOYW1lJyxcbiAgYXR0cmlidXRlVHlwZTogJ2F0dHJpYnV0ZVR5cGUnLFxuICBhdXRvUmV2ZXJzZTogJ2F1dG9SZXZlcnNlJyxcbiAgYXppbXV0aDogMCxcbiAgYmFzZUZyZXF1ZW5jeTogJ2Jhc2VGcmVxdWVuY3knLFxuICBiYXNlUHJvZmlsZTogJ2Jhc2VQcm9maWxlJyxcbiAgYmFzZWxpbmVTaGlmdDogJ2Jhc2VsaW5lLXNoaWZ0JyxcbiAgYmJveDogMCxcbiAgYmVnaW46IDAsXG4gIGJpYXM6IDAsXG4gIGJ5OiAwLFxuICBjYWxjTW9kZTogJ2NhbGNNb2RlJyxcbiAgY2FwSGVpZ2h0OiAnY2FwLWhlaWdodCcsXG4gIGNsaXA6IDAsXG4gIGNsaXBQYXRoOiAnY2xpcC1wYXRoJyxcbiAgY2xpcFJ1bGU6ICdjbGlwLXJ1bGUnLFxuICBjbGlwUGF0aFVuaXRzOiAnY2xpcFBhdGhVbml0cycsXG4gIGNvbG9ySW50ZXJwb2xhdGlvbjogJ2NvbG9yLWludGVycG9sYXRpb24nLFxuICBjb2xvckludGVycG9sYXRpb25GaWx0ZXJzOiAnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJyxcbiAgY29sb3JQcm9maWxlOiAnY29sb3ItcHJvZmlsZScsXG4gIGNvbG9yUmVuZGVyaW5nOiAnY29sb3ItcmVuZGVyaW5nJyxcbiAgY29udGVudFNjcmlwdFR5cGU6ICdjb250ZW50U2NyaXB0VHlwZScsXG4gIGNvbnRlbnRTdHlsZVR5cGU6ICdjb250ZW50U3R5bGVUeXBlJyxcbiAgY3Vyc29yOiAwLFxuICBjeDogMCxcbiAgY3k6IDAsXG4gIGQ6IDAsXG4gIGRlY2VsZXJhdGU6IDAsXG4gIGRlc2NlbnQ6IDAsXG4gIGRpZmZ1c2VDb25zdGFudDogJ2RpZmZ1c2VDb25zdGFudCcsXG4gIGRpcmVjdGlvbjogMCxcbiAgZGlzcGxheTogMCxcbiAgZGl2aXNvcjogMCxcbiAgZG9taW5hbnRCYXNlbGluZTogJ2RvbWluYW50LWJhc2VsaW5lJyxcbiAgZHVyOiAwLFxuICBkeDogMCxcbiAgZHk6IDAsXG4gIGVkZ2VNb2RlOiAnZWRnZU1vZGUnLFxuICBlbGV2YXRpb246IDAsXG4gIGVuYWJsZUJhY2tncm91bmQ6ICdlbmFibGUtYmFja2dyb3VuZCcsXG4gIGVuZDogMCxcbiAgZXhwb25lbnQ6IDAsXG4gIGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQ6ICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJyxcbiAgZmlsbDogMCxcbiAgZmlsbE9wYWNpdHk6ICdmaWxsLW9wYWNpdHknLFxuICBmaWxsUnVsZTogJ2ZpbGwtcnVsZScsXG4gIGZpbHRlcjogMCxcbiAgZmlsdGVyUmVzOiAnZmlsdGVyUmVzJyxcbiAgZmlsdGVyVW5pdHM6ICdmaWx0ZXJVbml0cycsXG4gIGZsb29kQ29sb3I6ICdmbG9vZC1jb2xvcicsXG4gIGZsb29kT3BhY2l0eTogJ2Zsb29kLW9wYWNpdHknLFxuICBmb2N1c2FibGU6IDAsXG4gIGZvbnRGYW1pbHk6ICdmb250LWZhbWlseScsXG4gIGZvbnRTaXplOiAnZm9udC1zaXplJyxcbiAgZm9udFNpemVBZGp1c3Q6ICdmb250LXNpemUtYWRqdXN0JyxcbiAgZm9udFN0cmV0Y2g6ICdmb250LXN0cmV0Y2gnLFxuICBmb250U3R5bGU6ICdmb250LXN0eWxlJyxcbiAgZm9udFZhcmlhbnQ6ICdmb250LXZhcmlhbnQnLFxuICBmb250V2VpZ2h0OiAnZm9udC13ZWlnaHQnLFxuICBmb3JtYXQ6IDAsXG4gIGZyb206IDAsXG4gIGZ4OiAwLFxuICBmeTogMCxcbiAgZzE6IDAsXG4gIGcyOiAwLFxuICBnbHlwaE5hbWU6ICdnbHlwaC1uYW1lJyxcbiAgZ2x5cGhPcmllbnRhdGlvbkhvcml6b250YWw6ICdnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsJyxcbiAgZ2x5cGhPcmllbnRhdGlvblZlcnRpY2FsOiAnZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwnLFxuICBnbHlwaFJlZjogJ2dseXBoUmVmJyxcbiAgZ3JhZGllbnRUcmFuc2Zvcm06ICdncmFkaWVudFRyYW5zZm9ybScsXG4gIGdyYWRpZW50VW5pdHM6ICdncmFkaWVudFVuaXRzJyxcbiAgaGFuZ2luZzogMCxcbiAgaG9yaXpBZHZYOiAnaG9yaXotYWR2LXgnLFxuICBob3Jpek9yaWdpblg6ICdob3Jpei1vcmlnaW4teCcsXG4gIGlkZW9ncmFwaGljOiAwLFxuICBpbWFnZVJlbmRlcmluZzogJ2ltYWdlLXJlbmRlcmluZycsXG4gICdpbic6IDAsXG4gIGluMjogMCxcbiAgaW50ZXJjZXB0OiAwLFxuICBrOiAwLFxuICBrMTogMCxcbiAgazI6IDAsXG4gIGszOiAwLFxuICBrNDogMCxcbiAga2VybmVsTWF0cml4OiAna2VybmVsTWF0cml4JyxcbiAga2VybmVsVW5pdExlbmd0aDogJ2tlcm5lbFVuaXRMZW5ndGgnLFxuICBrZXJuaW5nOiAwLFxuICBrZXlQb2ludHM6ICdrZXlQb2ludHMnLFxuICBrZXlTcGxpbmVzOiAna2V5U3BsaW5lcycsXG4gIGtleVRpbWVzOiAna2V5VGltZXMnLFxuICBsZW5ndGhBZGp1c3Q6ICdsZW5ndGhBZGp1c3QnLFxuICBsZXR0ZXJTcGFjaW5nOiAnbGV0dGVyLXNwYWNpbmcnLFxuICBsaWdodGluZ0NvbG9yOiAnbGlnaHRpbmctY29sb3InLFxuICBsaW1pdGluZ0NvbmVBbmdsZTogJ2xpbWl0aW5nQ29uZUFuZ2xlJyxcbiAgbG9jYWw6IDAsXG4gIG1hcmtlckVuZDogJ21hcmtlci1lbmQnLFxuICBtYXJrZXJNaWQ6ICdtYXJrZXItbWlkJyxcbiAgbWFya2VyU3RhcnQ6ICdtYXJrZXItc3RhcnQnLFxuICBtYXJrZXJIZWlnaHQ6ICdtYXJrZXJIZWlnaHQnLFxuICBtYXJrZXJVbml0czogJ21hcmtlclVuaXRzJyxcbiAgbWFya2VyV2lkdGg6ICdtYXJrZXJXaWR0aCcsXG4gIG1hc2s6IDAsXG4gIG1hc2tDb250ZW50VW5pdHM6ICdtYXNrQ29udGVudFVuaXRzJyxcbiAgbWFza1VuaXRzOiAnbWFza1VuaXRzJyxcbiAgbWF0aGVtYXRpY2FsOiAwLFxuICBtb2RlOiAwLFxuICBudW1PY3RhdmVzOiAnbnVtT2N0YXZlcycsXG4gIG9mZnNldDogMCxcbiAgb3BhY2l0eTogMCxcbiAgb3BlcmF0b3I6IDAsXG4gIG9yZGVyOiAwLFxuICBvcmllbnQ6IDAsXG4gIG9yaWVudGF0aW9uOiAwLFxuICBvcmlnaW46IDAsXG4gIG92ZXJmbG93OiAwLFxuICBvdmVybGluZVBvc2l0aW9uOiAnb3ZlcmxpbmUtcG9zaXRpb24nLFxuICBvdmVybGluZVRoaWNrbmVzczogJ292ZXJsaW5lLXRoaWNrbmVzcycsXG4gIHBhaW50T3JkZXI6ICdwYWludC1vcmRlcicsXG4gIHBhbm9zZTE6ICdwYW5vc2UtMScsXG4gIHBhdGhMZW5ndGg6ICdwYXRoTGVuZ3RoJyxcbiAgcGF0dGVybkNvbnRlbnRVbml0czogJ3BhdHRlcm5Db250ZW50VW5pdHMnLFxuICBwYXR0ZXJuVHJhbnNmb3JtOiAncGF0dGVyblRyYW5zZm9ybScsXG4gIHBhdHRlcm5Vbml0czogJ3BhdHRlcm5Vbml0cycsXG4gIHBvaW50ZXJFdmVudHM6ICdwb2ludGVyLWV2ZW50cycsXG4gIHBvaW50czogMCxcbiAgcG9pbnRzQXRYOiAncG9pbnRzQXRYJyxcbiAgcG9pbnRzQXRZOiAncG9pbnRzQXRZJyxcbiAgcG9pbnRzQXRaOiAncG9pbnRzQXRaJyxcbiAgcHJlc2VydmVBbHBoYTogJ3ByZXNlcnZlQWxwaGEnLFxuICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiAncHJlc2VydmVBc3BlY3RSYXRpbycsXG4gIHByaW1pdGl2ZVVuaXRzOiAncHJpbWl0aXZlVW5pdHMnLFxuICByOiAwLFxuICByYWRpdXM6IDAsXG4gIHJlZlg6ICdyZWZYJyxcbiAgcmVmWTogJ3JlZlknLFxuICByZW5kZXJpbmdJbnRlbnQ6ICdyZW5kZXJpbmctaW50ZW50JyxcbiAgcmVwZWF0Q291bnQ6ICdyZXBlYXRDb3VudCcsXG4gIHJlcGVhdER1cjogJ3JlcGVhdER1cicsXG4gIHJlcXVpcmVkRXh0ZW5zaW9uczogJ3JlcXVpcmVkRXh0ZW5zaW9ucycsXG4gIHJlcXVpcmVkRmVhdHVyZXM6ICdyZXF1aXJlZEZlYXR1cmVzJyxcbiAgcmVzdGFydDogMCxcbiAgcmVzdWx0OiAwLFxuICByb3RhdGU6IDAsXG4gIHJ4OiAwLFxuICByeTogMCxcbiAgc2NhbGU6IDAsXG4gIHNlZWQ6IDAsXG4gIHNoYXBlUmVuZGVyaW5nOiAnc2hhcGUtcmVuZGVyaW5nJyxcbiAgc2xvcGU6IDAsXG4gIHNwYWNpbmc6IDAsXG4gIHNwZWN1bGFyQ29uc3RhbnQ6ICdzcGVjdWxhckNvbnN0YW50JyxcbiAgc3BlY3VsYXJFeHBvbmVudDogJ3NwZWN1bGFyRXhwb25lbnQnLFxuICBzcGVlZDogMCxcbiAgc3ByZWFkTWV0aG9kOiAnc3ByZWFkTWV0aG9kJyxcbiAgc3RhcnRPZmZzZXQ6ICdzdGFydE9mZnNldCcsXG4gIHN0ZERldmlhdGlvbjogJ3N0ZERldmlhdGlvbicsXG4gIHN0ZW1oOiAwLFxuICBzdGVtdjogMCxcbiAgc3RpdGNoVGlsZXM6ICdzdGl0Y2hUaWxlcycsXG4gIHN0b3BDb2xvcjogJ3N0b3AtY29sb3InLFxuICBzdG9wT3BhY2l0eTogJ3N0b3Atb3BhY2l0eScsXG4gIHN0cmlrZXRocm91Z2hQb3NpdGlvbjogJ3N0cmlrZXRocm91Z2gtcG9zaXRpb24nLFxuICBzdHJpa2V0aHJvdWdoVGhpY2tuZXNzOiAnc3RyaWtldGhyb3VnaC10aGlja25lc3MnLFxuICBzdHJpbmc6IDAsXG4gIHN0cm9rZTogMCxcbiAgc3Ryb2tlRGFzaGFycmF5OiAnc3Ryb2tlLWRhc2hhcnJheScsXG4gIHN0cm9rZURhc2hvZmZzZXQ6ICdzdHJva2UtZGFzaG9mZnNldCcsXG4gIHN0cm9rZUxpbmVjYXA6ICdzdHJva2UtbGluZWNhcCcsXG4gIHN0cm9rZUxpbmVqb2luOiAnc3Ryb2tlLWxpbmVqb2luJyxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogJ3N0cm9rZS1taXRlcmxpbWl0JyxcbiAgc3Ryb2tlT3BhY2l0eTogJ3N0cm9rZS1vcGFjaXR5JyxcbiAgc3Ryb2tlV2lkdGg6ICdzdHJva2Utd2lkdGgnLFxuICBzdXJmYWNlU2NhbGU6ICdzdXJmYWNlU2NhbGUnLFxuICBzeXN0ZW1MYW5ndWFnZTogJ3N5c3RlbUxhbmd1YWdlJyxcbiAgdGFibGVWYWx1ZXM6ICd0YWJsZVZhbHVlcycsXG4gIHRhcmdldFg6ICd0YXJnZXRYJyxcbiAgdGFyZ2V0WTogJ3RhcmdldFknLFxuICB0ZXh0QW5jaG9yOiAndGV4dC1hbmNob3InLFxuICB0ZXh0RGVjb3JhdGlvbjogJ3RleHQtZGVjb3JhdGlvbicsXG4gIHRleHRSZW5kZXJpbmc6ICd0ZXh0LXJlbmRlcmluZycsXG4gIHRleHRMZW5ndGg6ICd0ZXh0TGVuZ3RoJyxcbiAgdG86IDAsXG4gIHRyYW5zZm9ybTogMCxcbiAgdTE6IDAsXG4gIHUyOiAwLFxuICB1bmRlcmxpbmVQb3NpdGlvbjogJ3VuZGVybGluZS1wb3NpdGlvbicsXG4gIHVuZGVybGluZVRoaWNrbmVzczogJ3VuZGVybGluZS10aGlja25lc3MnLFxuICB1bmljb2RlOiAwLFxuICB1bmljb2RlQmlkaTogJ3VuaWNvZGUtYmlkaScsXG4gIHVuaWNvZGVSYW5nZTogJ3VuaWNvZGUtcmFuZ2UnLFxuICB1bml0c1BlckVtOiAndW5pdHMtcGVyLWVtJyxcbiAgdkFscGhhYmV0aWM6ICd2LWFscGhhYmV0aWMnLFxuICB2SGFuZ2luZzogJ3YtaGFuZ2luZycsXG4gIHZJZGVvZ3JhcGhpYzogJ3YtaWRlb2dyYXBoaWMnLFxuICB2TWF0aGVtYXRpY2FsOiAndi1tYXRoZW1hdGljYWwnLFxuICB2YWx1ZXM6IDAsXG4gIHZlY3RvckVmZmVjdDogJ3ZlY3Rvci1lZmZlY3QnLFxuICB2ZXJzaW9uOiAwLFxuICB2ZXJ0QWR2WTogJ3ZlcnQtYWR2LXknLFxuICB2ZXJ0T3JpZ2luWDogJ3ZlcnQtb3JpZ2luLXgnLFxuICB2ZXJ0T3JpZ2luWTogJ3ZlcnQtb3JpZ2luLXknLFxuICB2aWV3Qm94OiAndmlld0JveCcsXG4gIHZpZXdUYXJnZXQ6ICd2aWV3VGFyZ2V0JyxcbiAgdmlzaWJpbGl0eTogMCxcbiAgd2lkdGhzOiAwLFxuICB3b3JkU3BhY2luZzogJ3dvcmQtc3BhY2luZycsXG4gIHdyaXRpbmdNb2RlOiAnd3JpdGluZy1tb2RlJyxcbiAgeDogMCxcbiAgeEhlaWdodDogJ3gtaGVpZ2h0JyxcbiAgeDE6IDAsXG4gIHgyOiAwLFxuICB4Q2hhbm5lbFNlbGVjdG9yOiAneENoYW5uZWxTZWxlY3RvcicsXG4gIHhsaW5rQWN0dWF0ZTogJ3hsaW5rOmFjdHVhdGUnLFxuICB4bGlua0FyY3JvbGU6ICd4bGluazphcmNyb2xlJyxcbiAgeGxpbmtIcmVmOiAneGxpbms6aHJlZicsXG4gIHhsaW5rUm9sZTogJ3hsaW5rOnJvbGUnLFxuICB4bGlua1Nob3c6ICd4bGluazpzaG93JyxcbiAgeGxpbmtUaXRsZTogJ3hsaW5rOnRpdGxlJyxcbiAgeGxpbmtUeXBlOiAneGxpbms6dHlwZScsXG4gIHhtbEJhc2U6ICd4bWw6YmFzZScsXG4gIHhtbG5zOiAwLFxuICB4bWxuc1hsaW5rOiAneG1sbnM6eGxpbmsnLFxuICB4bWxMYW5nOiAneG1sOmxhbmcnLFxuICB4bWxTcGFjZTogJ3htbDpzcGFjZScsXG4gIHk6IDAsXG4gIHkxOiAwLFxuICB5MjogMCxcbiAgeUNoYW5uZWxTZWxlY3RvcjogJ3lDaGFubmVsU2VsZWN0b3InLFxuICB6OiAwLFxuICB6b29tQW5kUGFuOiAnem9vbUFuZFBhbidcbn07XG5cbnZhciBTVkdET01Qcm9wZXJ0eUNvbmZpZyA9IHtcbiAgUHJvcGVydGllczoge30sXG4gIERPTUF0dHJpYnV0ZU5hbWVzcGFjZXM6IHtcbiAgICB4bGlua0FjdHVhdGU6IE5TLnhsaW5rLFxuICAgIHhsaW5rQXJjcm9sZTogTlMueGxpbmssXG4gICAgeGxpbmtIcmVmOiBOUy54bGluayxcbiAgICB4bGlua1JvbGU6IE5TLnhsaW5rLFxuICAgIHhsaW5rU2hvdzogTlMueGxpbmssXG4gICAgeGxpbmtUaXRsZTogTlMueGxpbmssXG4gICAgeGxpbmtUeXBlOiBOUy54bGluayxcbiAgICB4bWxCYXNlOiBOUy54bWwsXG4gICAgeG1sTGFuZzogTlMueG1sLFxuICAgIHhtbFNwYWNlOiBOUy54bWxcbiAgfSxcbiAgRE9NQXR0cmlidXRlTmFtZXM6IHt9XG59O1xuXG5PYmplY3Qua2V5cyhBVFRSUykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIFNWR0RPTVByb3BlcnR5Q29uZmlnLlByb3BlcnRpZXNba2V5XSA9IDA7XG4gIGlmIChBVFRSU1trZXldKSB7XG4gICAgU1ZHRE9NUHJvcGVydHlDb25maWcuRE9NQXR0cmlidXRlTmFtZXNba2V5XSA9IEFUVFJTW2tleV07XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNWR0RPTVByb3BlcnR5Q29uZmlnO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9TVkdET01Qcm9wZXJ0eUNvbmZpZy5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKCcuL0V2ZW50UHJvcGFnYXRvcnMnKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBSZWFjdElucHV0U2VsZWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdElucHV0U2VsZWN0aW9uJyk7XG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG5cbnZhciBnZXRBY3RpdmVFbGVtZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudCcpO1xudmFyIGlzVGV4dElucHV0RWxlbWVudCA9IHJlcXVpcmUoJy4vaXNUZXh0SW5wdXRFbGVtZW50Jyk7XG52YXIgc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgnZmJqcy9saWIvc2hhbGxvd0VxdWFsJyk7XG5cbnZhciBza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIDw9IDExO1xuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgc2VsZWN0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6ICdvblNlbGVjdCcsXG4gICAgICBjYXB0dXJlZDogJ29uU2VsZWN0Q2FwdHVyZSdcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogWyd0b3BCbHVyJywgJ3RvcENvbnRleHRNZW51JywgJ3RvcEZvY3VzJywgJ3RvcEtleURvd24nLCAndG9wS2V5VXAnLCAndG9wTW91c2VEb3duJywgJ3RvcE1vdXNlVXAnLCAndG9wU2VsZWN0aW9uQ2hhbmdlJ11cbiAgfVxufTtcblxudmFyIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRJbnN0ID0gbnVsbDtcbnZhciBsYXN0U2VsZWN0aW9uID0gbnVsbDtcbnZhciBtb3VzZURvd24gPSBmYWxzZTtcblxuLy8gVHJhY2sgd2hldGhlciBhIGxpc3RlbmVyIGV4aXN0cyBmb3IgdGhpcyBwbHVnaW4uIElmIG5vbmUgZXhpc3QsIHdlIGRvXG4vLyBub3QgZXh0cmFjdCBldmVudHMuIFNlZSAjMzYzOS5cbnZhciBoYXNMaXN0ZW5lciA9IGZhbHNlO1xuXG4vKipcbiAqIEdldCBhbiBvYmplY3Qgd2hpY2ggaXMgYSB1bmlxdWUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGN1cnJlbnQgc2VsZWN0aW9uLlxuICpcbiAqIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBub3QgYmUgY29uc2lzdGVudCBhY3Jvc3Mgbm9kZXMgb3IgYnJvd3NlcnMsIGJ1dFxuICogdHdvIGlkZW50aWNhbCBzZWxlY3Rpb25zIG9uIHRoZSBzYW1lIG5vZGUgd2lsbCByZXR1cm4gaWRlbnRpY2FsIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldFNlbGVjdGlvbihub2RlKSB7XG4gIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIG5vZGUgJiYgUmVhY3RJbnB1dFNlbGVjdGlvbi5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMobm9kZSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IG5vZGUuc2VsZWN0aW9uU3RhcnQsXG4gICAgICBlbmQ6IG5vZGUuc2VsZWN0aW9uRW5kXG4gICAgfTtcbiAgfSBlbHNlIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAgYW5jaG9yTm9kZTogc2VsZWN0aW9uLmFuY2hvck5vZGUsXG4gICAgICBhbmNob3JPZmZzZXQ6IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQsXG4gICAgICBmb2N1c05vZGU6IHNlbGVjdGlvbi5mb2N1c05vZGUsXG4gICAgICBmb2N1c09mZnNldDogc2VsZWN0aW9uLmZvY3VzT2Zmc2V0XG4gICAgfTtcbiAgfSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24pIHtcbiAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICByZXR1cm4ge1xuICAgICAgcGFyZW50RWxlbWVudDogcmFuZ2UucGFyZW50RWxlbWVudCgpLFxuICAgICAgdGV4dDogcmFuZ2UudGV4dCxcbiAgICAgIHRvcDogcmFuZ2UuYm91bmRpbmdUb3AsXG4gICAgICBsZWZ0OiByYW5nZS5ib3VuZGluZ0xlZnRcbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogUG9sbCBzZWxlY3Rpb24gdG8gc2VlIHdoZXRoZXIgaXQncyBjaGFuZ2VkLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHJldHVybiB7P1N5bnRoZXRpY0V2ZW50fVxuICovXG5mdW5jdGlvbiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgLy8gRW5zdXJlIHdlIGhhdmUgdGhlIHJpZ2h0IGVsZW1lbnQsIGFuZCB0aGF0IHRoZSB1c2VyIGlzIG5vdCBkcmFnZ2luZyBhXG4gIC8vIHNlbGVjdGlvbiAodGhpcyBtYXRjaGVzIG5hdGl2ZSBgc2VsZWN0YCBldmVudCBiZWhhdmlvcikuIEluIEhUTUw1LCBzZWxlY3RcbiAgLy8gZmlyZXMgb25seSBvbiBpbnB1dCBhbmQgdGV4dGFyZWEgdGh1cyBpZiB0aGVyZSdzIG5vIGZvY3VzZWQgZWxlbWVudCB3ZVxuICAvLyB3b24ndCBkaXNwYXRjaC5cbiAgaWYgKG1vdXNlRG93biB8fCBhY3RpdmVFbGVtZW50ID09IG51bGwgfHwgYWN0aXZlRWxlbWVudCAhPT0gZ2V0QWN0aXZlRWxlbWVudCgpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBPbmx5IGZpcmUgd2hlbiBzZWxlY3Rpb24gaGFzIGFjdHVhbGx5IGNoYW5nZWQuXG4gIHZhciBjdXJyZW50U2VsZWN0aW9uID0gZ2V0U2VsZWN0aW9uKGFjdGl2ZUVsZW1lbnQpO1xuICBpZiAoIWxhc3RTZWxlY3Rpb24gfHwgIXNoYWxsb3dFcXVhbChsYXN0U2VsZWN0aW9uLCBjdXJyZW50U2VsZWN0aW9uKSkge1xuICAgIGxhc3RTZWxlY3Rpb24gPSBjdXJyZW50U2VsZWN0aW9uO1xuXG4gICAgdmFyIHN5bnRoZXRpY0V2ZW50ID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMuc2VsZWN0LCBhY3RpdmVFbGVtZW50SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcblxuICAgIHN5bnRoZXRpY0V2ZW50LnR5cGUgPSAnc2VsZWN0JztcbiAgICBzeW50aGV0aWNFdmVudC50YXJnZXQgPSBhY3RpdmVFbGVtZW50O1xuXG4gICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKHN5bnRoZXRpY0V2ZW50KTtcblxuICAgIHJldHVybiBzeW50aGV0aWNFdmVudDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFRoaXMgcGx1Z2luIGNyZWF0ZXMgYW4gYG9uU2VsZWN0YCBldmVudCB0aGF0IG5vcm1hbGl6ZXMgc2VsZWN0IGV2ZW50c1xuICogYWNyb3NzIGZvcm0gZWxlbWVudHMuXG4gKlxuICogU3VwcG9ydGVkIGVsZW1lbnRzIGFyZTpcbiAqIC0gaW5wdXQgKHNlZSBgaXNUZXh0SW5wdXRFbGVtZW50YClcbiAqIC0gdGV4dGFyZWFcbiAqIC0gY29udGVudEVkaXRhYmxlXG4gKlxuICogVGhpcyBkaWZmZXJzIGZyb20gbmF0aXZlIGJyb3dzZXIgaW1wbGVtZW50YXRpb25zIGluIHRoZSBmb2xsb3dpbmcgd2F5czpcbiAqIC0gRmlyZXMgb24gY29udGVudEVkaXRhYmxlIGZpZWxkcyBhcyB3ZWxsIGFzIGlucHV0cy5cbiAqIC0gRmlyZXMgZm9yIGNvbGxhcHNlZCBzZWxlY3Rpb24uXG4gKiAtIEZpcmVzIGFmdGVyIHVzZXIgaW5wdXQuXG4gKi9cbnZhciBTZWxlY3RFdmVudFBsdWdpbiA9IHtcbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICBpZiAoIWhhc0xpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0Tm9kZSA9IHRhcmdldEluc3QgPyBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZSh0YXJnZXRJbnN0KSA6IHdpbmRvdztcblxuICAgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgICAvLyBUcmFjayB0aGUgaW5wdXQgbm9kZSB0aGF0IGhhcyBmb2N1cy5cbiAgICAgIGNhc2UgJ3RvcEZvY3VzJzpcbiAgICAgICAgaWYgKGlzVGV4dElucHV0RWxlbWVudCh0YXJnZXROb2RlKSB8fCB0YXJnZXROb2RlLmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudCA9IHRhcmdldE5vZGU7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudEluc3QgPSB0YXJnZXRJbnN0O1xuICAgICAgICAgIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wQmx1cic6XG4gICAgICAgIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgICAgICBhY3RpdmVFbGVtZW50SW5zdCA9IG51bGw7XG4gICAgICAgIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIERvbid0IGZpcmUgdGhlIGV2ZW50IHdoaWxlIHRoZSB1c2VyIGlzIGRyYWdnaW5nLiBUaGlzIG1hdGNoZXMgdGhlXG4gICAgICAvLyBzZW1hbnRpY3Mgb2YgdGhlIG5hdGl2ZSBzZWxlY3QgZXZlbnQuXG4gICAgICBjYXNlICd0b3BNb3VzZURvd24nOlxuICAgICAgICBtb3VzZURvd24gPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcENvbnRleHRNZW51JzpcbiAgICAgIGNhc2UgJ3RvcE1vdXNlVXAnOlxuICAgICAgICBtb3VzZURvd24gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICAvLyBDaHJvbWUgYW5kIElFIGZpcmUgbm9uLXN0YW5kYXJkIGV2ZW50IHdoZW4gc2VsZWN0aW9uIGlzIGNoYW5nZWQgKGFuZFxuICAgICAgLy8gc29tZXRpbWVzIHdoZW4gaXQgaGFzbid0KS4gSUUncyBldmVudCBmaXJlcyBvdXQgb2Ygb3JkZXIgd2l0aCByZXNwZWN0XG4gICAgICAvLyB0byBrZXkgYW5kIGlucHV0IGV2ZW50cyBvbiBkZWxldGlvbiwgc28gd2UgZGlzY2FyZCBpdC5cbiAgICAgIC8vXG4gICAgICAvLyBGaXJlZm94IGRvZXNuJ3Qgc3VwcG9ydCBzZWxlY3Rpb25jaGFuZ2UsIHNvIGNoZWNrIHNlbGVjdGlvbiBzdGF0dXNcbiAgICAgIC8vIGFmdGVyIGVhY2gga2V5IGVudHJ5LiBUaGUgc2VsZWN0aW9uIGNoYW5nZXMgYWZ0ZXIga2V5ZG93biBhbmQgYmVmb3JlXG4gICAgICAvLyBrZXl1cCwgYnV0IHdlIGNoZWNrIG9uIGtleWRvd24gYXMgd2VsbCBpbiB0aGUgY2FzZSBvZiBob2xkaW5nIGRvd24gYVxuICAgICAgLy8ga2V5LCB3aGVuIG11bHRpcGxlIGtleWRvd24gZXZlbnRzIGFyZSBmaXJlZCBidXQgb25seSBvbmUga2V5dXAgaXMuXG4gICAgICAvLyBUaGlzIGlzIGFsc28gb3VyIGFwcHJvYWNoIGZvciBJRSBoYW5kbGluZywgZm9yIHRoZSByZWFzb24gYWJvdmUuXG4gICAgICBjYXNlICd0b3BTZWxlY3Rpb25DaGFuZ2UnOlxuICAgICAgICBpZiAoc2tpcFNlbGVjdGlvbkNoYW5nZUV2ZW50KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgIGNhc2UgJ3RvcEtleURvd24nOlxuICAgICAgY2FzZSAndG9wS2V5VXAnOlxuICAgICAgICByZXR1cm4gY29uc3RydWN0U2VsZWN0RXZlbnQobmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICBkaWRQdXRMaXN0ZW5lcjogZnVuY3Rpb24gKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyKSB7XG4gICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWUgPT09ICdvblNlbGVjdCcpIHtcbiAgICAgIGhhc0xpc3RlbmVyID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2VsZWN0RXZlbnRQbHVnaW47XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1NlbGVjdEV2ZW50UGx1Z2luLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBFdmVudExpc3RlbmVyID0gcmVxdWlyZSgnZmJqcy9saWIvRXZlbnRMaXN0ZW5lcicpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKCcuL0V2ZW50UHJvcGFnYXRvcnMnKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xudmFyIFN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNBbmltYXRpb25FdmVudCcpO1xudmFyIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNDbGlwYm9hcmRFdmVudCcpO1xudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xudmFyIFN5bnRoZXRpY0ZvY3VzRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0ZvY3VzRXZlbnQnKTtcbnZhciBTeW50aGV0aWNLZXlib2FyZEV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNLZXlib2FyZEV2ZW50Jyk7XG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljTW91c2VFdmVudCcpO1xudmFyIFN5bnRoZXRpY0RyYWdFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRHJhZ0V2ZW50Jyk7XG52YXIgU3ludGhldGljVG91Y2hFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVG91Y2hFdmVudCcpO1xudmFyIFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVHJhbnNpdGlvbkV2ZW50Jyk7XG52YXIgU3ludGhldGljVUlFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVUlFdmVudCcpO1xudmFyIFN5bnRoZXRpY1doZWVsRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1doZWVsRXZlbnQnKTtcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgZ2V0RXZlbnRDaGFyQ29kZSA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRDaGFyQ29kZScpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIFR1cm5zXG4gKiBbJ2Fib3J0JywgLi4uXVxuICogaW50b1xuICogZXZlbnRUeXBlcyA9IHtcbiAqICAgJ2Fib3J0Jzoge1xuICogICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gKiAgICAgICBidWJibGVkOiAnb25BYm9ydCcsXG4gKiAgICAgICBjYXB0dXJlZDogJ29uQWJvcnRDYXB0dXJlJyxcbiAqICAgICB9LFxuICogICAgIGRlcGVuZGVuY2llczogWyd0b3BBYm9ydCddLFxuICogICB9LFxuICogICAuLi5cbiAqIH07XG4gKiB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWcgPSB7XG4gKiAgICd0b3BBYm9ydCc6IHsgc2FtZUNvbmZpZyB9XG4gKiB9O1xuICovXG52YXIgZXZlbnRUeXBlcyA9IHt9O1xudmFyIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZyA9IHt9O1xuWydhYm9ydCcsICdhbmltYXRpb25FbmQnLCAnYW5pbWF0aW9uSXRlcmF0aW9uJywgJ2FuaW1hdGlvblN0YXJ0JywgJ2JsdXInLCAnY2FuUGxheScsICdjYW5QbGF5VGhyb3VnaCcsICdjbGljaycsICdjb250ZXh0TWVudScsICdjb3B5JywgJ2N1dCcsICdkb3VibGVDbGljaycsICdkcmFnJywgJ2RyYWdFbmQnLCAnZHJhZ0VudGVyJywgJ2RyYWdFeGl0JywgJ2RyYWdMZWF2ZScsICdkcmFnT3ZlcicsICdkcmFnU3RhcnQnLCAnZHJvcCcsICdkdXJhdGlvbkNoYW5nZScsICdlbXB0aWVkJywgJ2VuY3J5cHRlZCcsICdlbmRlZCcsICdlcnJvcicsICdmb2N1cycsICdpbnB1dCcsICdpbnZhbGlkJywgJ2tleURvd24nLCAna2V5UHJlc3MnLCAna2V5VXAnLCAnbG9hZCcsICdsb2FkZWREYXRhJywgJ2xvYWRlZE1ldGFkYXRhJywgJ2xvYWRTdGFydCcsICdtb3VzZURvd24nLCAnbW91c2VNb3ZlJywgJ21vdXNlT3V0JywgJ21vdXNlT3ZlcicsICdtb3VzZVVwJywgJ3Bhc3RlJywgJ3BhdXNlJywgJ3BsYXknLCAncGxheWluZycsICdwcm9ncmVzcycsICdyYXRlQ2hhbmdlJywgJ3Jlc2V0JywgJ3Njcm9sbCcsICdzZWVrZWQnLCAnc2Vla2luZycsICdzdGFsbGVkJywgJ3N1Ym1pdCcsICdzdXNwZW5kJywgJ3RpbWVVcGRhdGUnLCAndG91Y2hDYW5jZWwnLCAndG91Y2hFbmQnLCAndG91Y2hNb3ZlJywgJ3RvdWNoU3RhcnQnLCAndHJhbnNpdGlvbkVuZCcsICd2b2x1bWVDaGFuZ2UnLCAnd2FpdGluZycsICd3aGVlbCddLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHZhciBjYXBpdGFsaXplZEV2ZW50ID0gZXZlbnRbMF0udG9VcHBlckNhc2UoKSArIGV2ZW50LnNsaWNlKDEpO1xuICB2YXIgb25FdmVudCA9ICdvbicgKyBjYXBpdGFsaXplZEV2ZW50O1xuICB2YXIgdG9wRXZlbnQgPSAndG9wJyArIGNhcGl0YWxpemVkRXZlbnQ7XG5cbiAgdmFyIHR5cGUgPSB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IG9uRXZlbnQsXG4gICAgICBjYXB0dXJlZDogb25FdmVudCArICdDYXB0dXJlJ1xuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbdG9wRXZlbnRdXG4gIH07XG4gIGV2ZW50VHlwZXNbZXZlbnRdID0gdHlwZTtcbiAgdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnW3RvcEV2ZW50XSA9IHR5cGU7XG59KTtcblxudmFyIG9uQ2xpY2tMaXN0ZW5lcnMgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGljdGlvbmFyeUtleShpbnN0KSB7XG4gIC8vIFByZXZlbnRzIFY4IHBlcmZvcm1hbmNlIGlzc3VlOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC83MjMyXG4gIHJldHVybiAnLicgKyBpbnN0Ll9yb290Tm9kZUlEO1xufVxuXG5mdW5jdGlvbiBpc0ludGVyYWN0aXZlKHRhZykge1xuICByZXR1cm4gdGFnID09PSAnYnV0dG9uJyB8fCB0YWcgPT09ICdpbnB1dCcgfHwgdGFnID09PSAnc2VsZWN0JyB8fCB0YWcgPT09ICd0ZXh0YXJlYSc7XG59XG5cbnZhciBTaW1wbGVFdmVudFBsdWdpbiA9IHtcbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICB2YXIgZGlzcGF0Y2hDb25maWcgPSB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdG9wTGV2ZWxUeXBlXTtcbiAgICBpZiAoIWRpc3BhdGNoQ29uZmlnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIEV2ZW50Q29uc3RydWN0b3I7XG4gICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgIGNhc2UgJ3RvcEFib3J0JzpcbiAgICAgIGNhc2UgJ3RvcENhblBsYXknOlxuICAgICAgY2FzZSAndG9wQ2FuUGxheVRocm91Z2gnOlxuICAgICAgY2FzZSAndG9wRHVyYXRpb25DaGFuZ2UnOlxuICAgICAgY2FzZSAndG9wRW1wdGllZCc6XG4gICAgICBjYXNlICd0b3BFbmNyeXB0ZWQnOlxuICAgICAgY2FzZSAndG9wRW5kZWQnOlxuICAgICAgY2FzZSAndG9wRXJyb3InOlxuICAgICAgY2FzZSAndG9wSW5wdXQnOlxuICAgICAgY2FzZSAndG9wSW52YWxpZCc6XG4gICAgICBjYXNlICd0b3BMb2FkJzpcbiAgICAgIGNhc2UgJ3RvcExvYWRlZERhdGEnOlxuICAgICAgY2FzZSAndG9wTG9hZGVkTWV0YWRhdGEnOlxuICAgICAgY2FzZSAndG9wTG9hZFN0YXJ0JzpcbiAgICAgIGNhc2UgJ3RvcFBhdXNlJzpcbiAgICAgIGNhc2UgJ3RvcFBsYXknOlxuICAgICAgY2FzZSAndG9wUGxheWluZyc6XG4gICAgICBjYXNlICd0b3BQcm9ncmVzcyc6XG4gICAgICBjYXNlICd0b3BSYXRlQ2hhbmdlJzpcbiAgICAgIGNhc2UgJ3RvcFJlc2V0JzpcbiAgICAgIGNhc2UgJ3RvcFNlZWtlZCc6XG4gICAgICBjYXNlICd0b3BTZWVraW5nJzpcbiAgICAgIGNhc2UgJ3RvcFN0YWxsZWQnOlxuICAgICAgY2FzZSAndG9wU3VibWl0JzpcbiAgICAgIGNhc2UgJ3RvcFN1c3BlbmQnOlxuICAgICAgY2FzZSAndG9wVGltZVVwZGF0ZSc6XG4gICAgICBjYXNlICd0b3BWb2x1bWVDaGFuZ2UnOlxuICAgICAgY2FzZSAndG9wV2FpdGluZyc6XG4gICAgICAgIC8vIEhUTUwgRXZlbnRzXG4gICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5kZXguaHRtbCNldmVudHMtMFxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wS2V5UHJlc3MnOlxuICAgICAgICAvLyBGaXJlZm94IGNyZWF0ZXMgYSBrZXlwcmVzcyBldmVudCBmb3IgZnVuY3Rpb24ga2V5cyB0b28uIFRoaXMgcmVtb3Zlc1xuICAgICAgICAvLyB0aGUgdW53YW50ZWQga2V5cHJlc3MgZXZlbnRzLiBFbnRlciBpcyBob3dldmVyIGJvdGggcHJpbnRhYmxlIGFuZFxuICAgICAgICAvLyBub24tcHJpbnRhYmxlLiBPbmUgd291bGQgZXhwZWN0IFRhYiB0byBiZSBhcyB3ZWxsIChidXQgaXQgaXNuJ3QpLlxuICAgICAgICBpZiAoZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSAndG9wS2V5RG93bic6XG4gICAgICBjYXNlICd0b3BLZXlVcCc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcEJsdXInOlxuICAgICAgY2FzZSAndG9wRm9jdXMnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3BDbGljayc6XG4gICAgICAgIC8vIEZpcmVmb3ggY3JlYXRlcyBhIGNsaWNrIGV2ZW50IG9uIHJpZ2h0IG1vdXNlIGNsaWNrcy4gVGhpcyByZW1vdmVzIHRoZVxuICAgICAgICAvLyB1bndhbnRlZCBjbGljayBldmVudHMuXG4gICAgICAgIGlmIChuYXRpdmVFdmVudC5idXR0b24gPT09IDIpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSAndG9wRG91YmxlQ2xpY2snOlxuICAgICAgY2FzZSAndG9wTW91c2VEb3duJzpcbiAgICAgIGNhc2UgJ3RvcE1vdXNlTW92ZSc6XG4gICAgICBjYXNlICd0b3BNb3VzZVVwJzpcbiAgICAgIC8vIFRPRE86IERpc2FibGVkIGVsZW1lbnRzIHNob3VsZCBub3QgcmVzcG9uZCB0byBtb3VzZSBldmVudHNcbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgJ3RvcE1vdXNlT3V0JzpcbiAgICAgIGNhc2UgJ3RvcE1vdXNlT3Zlcic6XG4gICAgICBjYXNlICd0b3BDb250ZXh0TWVudSc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcERyYWcnOlxuICAgICAgY2FzZSAndG9wRHJhZ0VuZCc6XG4gICAgICBjYXNlICd0b3BEcmFnRW50ZXInOlxuICAgICAgY2FzZSAndG9wRHJhZ0V4aXQnOlxuICAgICAgY2FzZSAndG9wRHJhZ0xlYXZlJzpcbiAgICAgIGNhc2UgJ3RvcERyYWdPdmVyJzpcbiAgICAgIGNhc2UgJ3RvcERyYWdTdGFydCc6XG4gICAgICBjYXNlICd0b3BEcm9wJzpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0RyYWdFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3BUb3VjaENhbmNlbCc6XG4gICAgICBjYXNlICd0b3BUb3VjaEVuZCc6XG4gICAgICBjYXNlICd0b3BUb3VjaE1vdmUnOlxuICAgICAgY2FzZSAndG9wVG91Y2hTdGFydCc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNUb3VjaEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcEFuaW1hdGlvbkVuZCc6XG4gICAgICBjYXNlICd0b3BBbmltYXRpb25JdGVyYXRpb24nOlxuICAgICAgY2FzZSAndG9wQW5pbWF0aW9uU3RhcnQnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljQW5pbWF0aW9uRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wVHJhbnNpdGlvbkVuZCc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wU2Nyb2xsJzpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1VJRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wV2hlZWwnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljV2hlZWxFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3BDb3B5JzpcbiAgICAgIGNhc2UgJ3RvcEN1dCc6XG4gICAgICBjYXNlICd0b3BQYXN0ZSc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNDbGlwYm9hcmRFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgICFFdmVudENvbnN0cnVjdG9yID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1NpbXBsZUV2ZW50UGx1Z2luOiBVbmhhbmRsZWQgZXZlbnQgdHlwZSwgYCVzYC4nLCB0b3BMZXZlbFR5cGUpIDogX3Byb2RJbnZhcmlhbnQoJzg2JywgdG9wTGV2ZWxUeXBlKSA6IHZvaWQgMDtcbiAgICB2YXIgZXZlbnQgPSBFdmVudENvbnN0cnVjdG9yLmdldFBvb2xlZChkaXNwYXRjaENvbmZpZywgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgIHJldHVybiBldmVudDtcbiAgfSxcblxuICBkaWRQdXRMaXN0ZW5lcjogZnVuY3Rpb24gKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyKSB7XG4gICAgLy8gTW9iaWxlIFNhZmFyaSBkb2VzIG5vdCBmaXJlIHByb3Blcmx5IGJ1YmJsZSBjbGljayBldmVudHMgb25cbiAgICAvLyBub24taW50ZXJhY3RpdmUgZWxlbWVudHMsIHdoaWNoIG1lYW5zIGRlbGVnYXRlZCBjbGljayBsaXN0ZW5lcnMgZG8gbm90XG4gICAgLy8gZmlyZS4gVGhlIHdvcmthcm91bmQgZm9yIHRoaXMgYnVnIGludm9sdmVzIGF0dGFjaGluZyBhbiBlbXB0eSBjbGlja1xuICAgIC8vIGxpc3RlbmVyIG9uIHRoZSB0YXJnZXQgbm9kZS5cbiAgICAvLyBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxMC8wOS9jbGlja19ldmVudF9kZWwuaHRtbFxuICAgIGlmIChyZWdpc3RyYXRpb25OYW1lID09PSAnb25DbGljaycgJiYgIWlzSW50ZXJhY3RpdmUoaW5zdC5fdGFnKSkge1xuICAgICAgdmFyIGtleSA9IGdldERpY3Rpb25hcnlLZXkoaW5zdCk7XG4gICAgICB2YXIgbm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuICAgICAgaWYgKCFvbkNsaWNrTGlzdGVuZXJzW2tleV0pIHtcbiAgICAgICAgb25DbGlja0xpc3RlbmVyc1trZXldID0gRXZlbnRMaXN0ZW5lci5saXN0ZW4obm9kZSwgJ2NsaWNrJywgZW1wdHlGdW5jdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHdpbGxEZWxldGVMaXN0ZW5lcjogZnVuY3Rpb24gKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICBpZiAocmVnaXN0cmF0aW9uTmFtZSA9PT0gJ29uQ2xpY2snICYmICFpc0ludGVyYWN0aXZlKGluc3QuX3RhZykpIHtcbiAgICAgIHZhciBrZXkgPSBnZXREaWN0aW9uYXJ5S2V5KGluc3QpO1xuICAgICAgb25DbGlja0xpc3RlbmVyc1trZXldLnJlbW92ZSgpO1xuICAgICAgZGVsZXRlIG9uQ2xpY2tMaXN0ZW5lcnNba2V5XTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2ltcGxlRXZlbnRQbHVnaW47XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1NpbXBsZUV2ZW50UGx1Z2luLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWFuaW1hdGlvbnMvI0FuaW1hdGlvbkV2ZW50LWludGVyZmFjZVxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQW5pbWF0aW9uRXZlbnRcbiAqL1xudmFyIEFuaW1hdGlvbkV2ZW50SW50ZXJmYWNlID0ge1xuICBhbmltYXRpb25OYW1lOiBudWxsLFxuICBlbGFwc2VkVGltZTogbnVsbCxcbiAgcHNldWRvRWxlbWVudDogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHJldHVybiBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50LCBBbmltYXRpb25FdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljQW5pbWF0aW9uRXZlbnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0FuaW1hdGlvbkV2ZW50LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9jbGlwYm9hcmQtYXBpcy9cbiAqL1xudmFyIENsaXBib2FyZEV2ZW50SW50ZXJmYWNlID0ge1xuICBjbGlwYm9hcmREYXRhOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gJ2NsaXBib2FyZERhdGEnIGluIGV2ZW50ID8gZXZlbnQuY2xpcGJvYXJkRGF0YSA6IHdpbmRvdy5jbGlwYm9hcmREYXRhO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNDbGlwYm9hcmRFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICByZXR1cm4gU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNDbGlwYm9hcmRFdmVudCwgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNDbGlwYm9hcmRFdmVudC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtY29tcG9zaXRpb25ldmVudHNcbiAqL1xudmFyIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGRhdGE6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljQ29tcG9zaXRpb25FdmVudCwgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljQ29tcG9zaXRpb25FdmVudDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvU3ludGhldGljQ29tcG9zaXRpb25FdmVudC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY01vdXNlRXZlbnQnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIERyYWdFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBEcmFnRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGRhdGFUcmFuc2ZlcjogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljRHJhZ0V2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHJldHVybiBTeW50aGV0aWNNb3VzZUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNNb3VzZUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNEcmFnRXZlbnQsIERyYWdFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljRHJhZ0V2ZW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNEcmFnRXZlbnQuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNVSUV2ZW50Jyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBGb2N1c0V2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIEZvY3VzRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHJlbGF0ZWRUYXJnZXQ6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0ZvY3VzRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0ZvY3VzRXZlbnQsIEZvY3VzRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0ZvY3VzRXZlbnQuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRXZlbnQnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMTMxMTA1XG4gKiAgICAgIC8jZXZlbnRzLWlucHV0ZXZlbnRzXG4gKi9cbnZhciBJbnB1dEV2ZW50SW50ZXJmYWNlID0ge1xuICBkYXRhOiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNJbnB1dEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHJldHVybiBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0lucHV0RXZlbnQsIElucHV0RXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0lucHV0RXZlbnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0lucHV0RXZlbnQuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNVSUV2ZW50Jyk7XG5cbnZhciBnZXRFdmVudENoYXJDb2RlID0gcmVxdWlyZSgnLi9nZXRFdmVudENoYXJDb2RlJyk7XG52YXIgZ2V0RXZlbnRLZXkgPSByZXF1aXJlKCcuL2dldEV2ZW50S2V5Jyk7XG52YXIgZ2V0RXZlbnRNb2RpZmllclN0YXRlID0gcmVxdWlyZSgnLi9nZXRFdmVudE1vZGlmaWVyU3RhdGUnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEtleWJvYXJkRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgS2V5Ym9hcmRFdmVudEludGVyZmFjZSA9IHtcbiAga2V5OiBnZXRFdmVudEtleSxcbiAgbG9jYXRpb246IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIHJlcGVhdDogbnVsbCxcbiAgbG9jYWxlOiBudWxsLFxuICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gIC8vIExlZ2FjeSBJbnRlcmZhY2VcbiAgY2hhckNvZGU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIGBjaGFyQ29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleVByZXNzIGV2ZW50IGFuZCByZXByZXNlbnRzIHRoZSB2YWx1ZSBvZlxuICAgIC8vIHRoZSBhY3R1YWwgcHJpbnRhYmxlIGNoYXJhY3Rlci5cblxuICAgIC8vIEtleVByZXNzIGlzIGRlcHJlY2F0ZWQsIGJ1dCBpdHMgcmVwbGFjZW1lbnQgaXMgbm90IHlldCBmaW5hbCBhbmQgbm90XG4gICAgLy8gaW1wbGVtZW50ZWQgaW4gYW55IG1ham9yIGJyb3dzZXIuIE9ubHkgS2V5UHJlc3MgaGFzIGNoYXJDb2RlLlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICByZXR1cm4gZ2V0RXZlbnRDaGFyQ29kZShldmVudCk7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9LFxuICBrZXlDb2RlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBga2V5Q29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleURvd24vVXAgZXZlbnQgYW5kIHJlcHJlc2VudHMgdGhlIHZhbHVlIG9mXG4gICAgLy8gcGh5c2ljYWwga2V5Ym9hcmQga2V5LlxuXG4gICAgLy8gVGhlIGFjdHVhbCBtZWFuaW5nIG9mIHRoZSB2YWx1ZSBkZXBlbmRzIG9uIHRoZSB1c2Vycycga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gd2hpY2ggY2Fubm90IGJlIGRldGVjdGVkLiBBc3N1bWluZyB0aGF0IGl0IGlzIGEgVVMga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gcHJvdmlkZXMgYSBzdXJwcmlzaW5nbHkgYWNjdXJhdGUgbWFwcGluZyBmb3IgVVMgYW5kIEV1cm9wZWFuIHVzZXJzLlxuICAgIC8vIER1ZSB0byB0aGlzLCBpdCBpcyBsZWZ0IHRvIHRoZSB1c2VyIHRvIGltcGxlbWVudCBhdCB0aGlzIHRpbWUuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG4gIHdoaWNoOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBgd2hpY2hgIGlzIGFuIGFsaWFzIGZvciBlaXRoZXIgYGtleUNvZGVgIG9yIGBjaGFyQ29kZWAgZGVwZW5kaW5nIG9uIHRoZVxuICAgIC8vIHR5cGUgb2YgdGhlIGV2ZW50LlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICByZXR1cm4gZ2V0RXZlbnRDaGFyQ29kZShldmVudCk7XG4gICAgfVxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5ZG93bicgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgICAgcmV0dXJuIGV2ZW50LmtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNLZXlib2FyZEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHJldHVybiBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNLZXlib2FyZEV2ZW50LCBLZXlib2FyZEV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNLZXlib2FyZEV2ZW50LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljVUlFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVUlFdmVudCcpO1xuXG52YXIgZ2V0RXZlbnRNb2RpZmllclN0YXRlID0gcmVxdWlyZSgnLi9nZXRFdmVudE1vZGlmaWVyU3RhdGUnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFRvdWNoRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvdG91Y2gtZXZlbnRzL1xuICovXG52YXIgVG91Y2hFdmVudEludGVyZmFjZSA9IHtcbiAgdG91Y2hlczogbnVsbCxcbiAgdGFyZ2V0VG91Y2hlczogbnVsbCxcbiAgY2hhbmdlZFRvdWNoZXM6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljVG91Y2hFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICByZXR1cm4gU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljVG91Y2hFdmVudCwgVG91Y2hFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljVG91Y2hFdmVudDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvU3ludGhldGljVG91Y2hFdmVudC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAwOS9XRC1jc3MzLXRyYW5zaXRpb25zLTIwMDkwMzIwLyN0cmFuc2l0aW9uLWV2ZW50cy1cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1RyYW5zaXRpb25FdmVudFxuICovXG52YXIgVHJhbnNpdGlvbkV2ZW50SW50ZXJmYWNlID0ge1xuICBwcm9wZXJ0eU5hbWU6IG51bGwsXG4gIGVsYXBzZWRUaW1lOiBudWxsLFxuICBwc2V1ZG9FbGVtZW50OiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljVHJhbnNpdGlvbkV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHJldHVybiBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudCwgVHJhbnNpdGlvbkV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY1RyYW5zaXRpb25FdmVudC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY01vdXNlRXZlbnQnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFdoZWVsRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgV2hlZWxFdmVudEludGVyZmFjZSA9IHtcbiAgZGVsdGFYOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gJ2RlbHRhWCcgaW4gZXZlbnQgPyBldmVudC5kZWx0YVggOiAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YVhgIGZvciBXZWJraXQgYW5kIG5vcm1hbGl6ZSAocmlnaHQgaXMgcG9zaXRpdmUpLlxuICAgICd3aGVlbERlbHRhWCcgaW4gZXZlbnQgPyAtZXZlbnQud2hlZWxEZWx0YVggOiAwO1xuICB9LFxuICBkZWx0YVk6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiAnZGVsdGFZJyBpbiBldmVudCA/IGV2ZW50LmRlbHRhWSA6IC8vIEZhbGxiYWNrIHRvIGB3aGVlbERlbHRhWWAgZm9yIFdlYmtpdCBhbmQgbm9ybWFsaXplIChkb3duIGlzIHBvc2l0aXZlKS5cbiAgICAnd2hlZWxEZWx0YVknIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFZIDogLy8gRmFsbGJhY2sgdG8gYHdoZWVsRGVsdGFgIGZvciBJRTw5IGFuZCBub3JtYWxpemUgKGRvd24gaXMgcG9zaXRpdmUpLlxuICAgICd3aGVlbERlbHRhJyBpbiBldmVudCA/IC1ldmVudC53aGVlbERlbHRhIDogMDtcbiAgfSxcbiAgZGVsdGFaOiBudWxsLFxuXG4gIC8vIEJyb3dzZXJzIHdpdGhvdXQgXCJkZWx0YU1vZGVcIiBpcyByZXBvcnRpbmcgaW4gcmF3IHdoZWVsIGRlbHRhIHdoZXJlIG9uZVxuICAvLyBub3RjaCBvbiB0aGUgc2Nyb2xsIGlzIGFsd2F5cyArLy0gMTIwLCByb3VnaGx5IGVxdWl2YWxlbnQgdG8gcGl4ZWxzLlxuICAvLyBBIGdvb2QgYXBwcm94aW1hdGlvbiBvZiBET01fREVMVEFfTElORSAoMSkgaXMgNSUgb2Ygdmlld3BvcnQgc2l6ZSBvclxuICAvLyB+NDAgcGl4ZWxzLCBmb3IgRE9NX0RFTFRBX1NDUkVFTiAoMikgaXQgaXMgODcuNSUgb2Ygdmlld3BvcnQgc2l6ZS5cbiAgZGVsdGFNb2RlOiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNNb3VzZUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNXaGVlbEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHJldHVybiBTeW50aGV0aWNNb3VzZUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNNb3VzZUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNXaGVlbEV2ZW50LCBXaGVlbEV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNXaGVlbEV2ZW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNXaGVlbEV2ZW50LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBNT0QgPSA2NTUyMTtcblxuLy8gYWRsZXIzMiBpcyBub3QgY3J5cHRvZ3JhcGhpY2FsbHkgc3Ryb25nLCBhbmQgaXMgb25seSB1c2VkIHRvIHNhbml0eSBjaGVjayB0aGF0XG4vLyBtYXJrdXAgZ2VuZXJhdGVkIG9uIHRoZSBzZXJ2ZXIgbWF0Y2hlcyB0aGUgbWFya3VwIGdlbmVyYXRlZCBvbiB0aGUgY2xpZW50LlxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiAoYSBtb2RpZmllZCB2ZXJzaW9uIG9mIHRoZSBTaGVldEpTIHZlcnNpb24pIGhhcyBiZWVuIG9wdGltaXplZFxuLy8gZm9yIG91ciB1c2UgY2FzZSwgYXQgdGhlIGV4cGVuc2Ugb2YgY29uZm9ybWluZyB0byB0aGUgYWRsZXIzMiBzcGVjaWZpY2F0aW9uXG4vLyBmb3Igbm9uLWFzY2lpIGlucHV0cy5cbmZ1bmN0aW9uIGFkbGVyMzIoZGF0YSkge1xuICB2YXIgYSA9IDE7XG4gIHZhciBiID0gMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGRhdGEubGVuZ3RoO1xuICB2YXIgbSA9IGwgJiB+MHgzO1xuICB3aGlsZSAoaSA8IG0pIHtcbiAgICB2YXIgbiA9IE1hdGgubWluKGkgKyA0MDk2LCBtKTtcbiAgICBmb3IgKDsgaSA8IG47IGkgKz0gNCkge1xuICAgICAgYiArPSAoYSArPSBkYXRhLmNoYXJDb2RlQXQoaSkpICsgKGEgKz0gZGF0YS5jaGFyQ29kZUF0KGkgKyAxKSkgKyAoYSArPSBkYXRhLmNoYXJDb2RlQXQoaSArIDIpKSArIChhICs9IGRhdGEuY2hhckNvZGVBdChpICsgMykpO1xuICAgIH1cbiAgICBhICU9IE1PRDtcbiAgICBiICU9IE1PRDtcbiAgfVxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIGIgKz0gYSArPSBkYXRhLmNoYXJDb2RlQXQoaSk7XG4gIH1cbiAgYSAlPSBNT0Q7XG4gIGIgJT0gTU9EO1xuICByZXR1cm4gYSB8IGIgPDwgMTY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYWRsZXIzMjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvYWRsZXIzMi5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcycpO1xudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIFJlYWN0Q29tcG9uZW50VHJlZUhvb2s7XG5cbmlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAvLyBUZW1wb3JhcnkgaGFjay5cbiAgLy8gSW5saW5lIHJlcXVpcmVzIGRvbid0IHdvcmsgd2VsbCB3aXRoIEplc3Q6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzI0MFxuICAvLyBSZW1vdmUgdGhlIGlubGluZSByZXF1aXJlcyB3aGVuIHdlIGRvbid0IG5lZWQgdGhlbSBhbnltb3JlOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC83MTc4XG4gIFJlYWN0Q29tcG9uZW50VHJlZUhvb2sgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3RDb21wb25lbnRUcmVlSG9vaycpO1xufVxuXG52YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHZhbHVlcyBtYXRjaCB3aXRoIHRoZSB0eXBlIHNwZWNzLlxuICogRXJyb3IgbWVzc2FnZXMgYXJlIG1lbW9yaXplZCBhbmQgd2lsbCBvbmx5IGJlIHNob3duIG9uY2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHR5cGVTcGVjcyBNYXAgb2YgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZXMgUnVudGltZSB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHR5cGUtY2hlY2tlZFxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudE5hbWUgTmFtZSBvZiB0aGUgY29tcG9uZW50IGZvciBlcnJvciBtZXNzYWdlcy5cbiAqIEBwYXJhbSB7P29iamVjdH0gZWxlbWVudCBUaGUgUmVhY3QgZWxlbWVudCB0aGF0IGlzIGJlaW5nIHR5cGUtY2hlY2tlZFxuICogQHBhcmFtIHs/bnVtYmVyfSBkZWJ1Z0lEIFRoZSBSZWFjdCBjb21wb25lbnQgaW5zdGFuY2UgdGhhdCBpcyBiZWluZyB0eXBlLWNoZWNrZWRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNoZWNrUmVhY3RUeXBlU3BlYyh0eXBlU3BlY3MsIHZhbHVlcywgbG9jYXRpb24sIGNvbXBvbmVudE5hbWUsIGVsZW1lbnQsIGRlYnVnSUQpIHtcbiAgZm9yICh2YXIgdHlwZVNwZWNOYW1lIGluIHR5cGVTcGVjcykge1xuICAgIGlmICh0eXBlU3BlY3MuaGFzT3duUHJvcGVydHkodHlwZVNwZWNOYW1lKSkge1xuICAgICAgdmFyIGVycm9yO1xuICAgICAgLy8gUHJvcCB0eXBlIHZhbGlkYXRpb24gbWF5IHRocm93LiBJbiBjYXNlIHRoZXkgZG8sIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgIC8vIGZhaWwgdGhlIHJlbmRlciBwaGFzZSB3aGVyZSBpdCBkaWRuJ3QgZmFpbCBiZWZvcmUuIFNvIHdlIGxvZyBpdC5cbiAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICEodHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICclczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIFJlYWN0LlByb3BUeXBlcy4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSwgdHlwZVNwZWNOYW1lKSA6IF9wcm9kSW52YXJpYW50KCc4NCcsIGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJywgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLCB0eXBlU3BlY05hbWUpIDogdm9pZCAwO1xuICAgICAgICBlcnJvciA9IHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdKHZhbHVlcywgdHlwZVNwZWNOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgbnVsbCwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgIH1cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFlcnJvciB8fCBlcnJvciBpbnN0YW5jZW9mIEVycm9yLCAnJXM6IHR5cGUgc3BlY2lmaWNhdGlvbiBvZiAlcyBgJXNgIGlzIGludmFsaWQ7IHRoZSB0eXBlIGNoZWNrZXIgJyArICdmdW5jdGlvbiBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gYEVycm9yYCBidXQgcmV0dXJuZWQgYSAlcy4gJyArICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciAnICsgJ2NyZWF0b3IgKGFycmF5T2YsIGluc3RhbmNlT2YsIG9iamVjdE9mLCBvbmVPZiwgb25lT2ZUeXBlLCBhbmQgJyArICdzaGFwZSBhbGwgcmVxdWlyZSBhbiBhcmd1bWVudCkuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sIHR5cGVTcGVjTmFtZSwgdHlwZW9mIGVycm9yKSA6IHZvaWQgMDtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmICEoZXJyb3IubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKSB7XG4gICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAvLyBzYW1lIGVycm9yLlxuICAgICAgICBsb2dnZWRUeXBlRmFpbHVyZXNbZXJyb3IubWVzc2FnZV0gPSB0cnVlO1xuXG4gICAgICAgIHZhciBjb21wb25lbnRTdGFja0luZm8gPSAnJztcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICghUmVhY3RDb21wb25lbnRUcmVlSG9vaykge1xuICAgICAgICAgICAgUmVhY3RDb21wb25lbnRUcmVlSG9vayA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudFRyZWVIb29rJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkZWJ1Z0lEICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb21wb25lbnRTdGFja0luZm8gPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFN0YWNrQWRkZW5kdW1CeUlEKGRlYnVnSUQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29tcG9uZW50U3RhY2tJbmZvID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRDdXJyZW50U3RhY2tBZGRlbmR1bShlbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ZhaWxlZCAlcyB0eXBlOiAlcyVzJywgbG9jYXRpb24sIGVycm9yLm1lc3NhZ2UsIGNvbXBvbmVudFN0YWNrSW5mbykgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2hlY2tSZWFjdFR5cGVTcGVjO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9jaGVja1JlYWN0VHlwZVNwZWMuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDU1NQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vQ1NTUHJvcGVydHknKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgaXNVbml0bGVzc051bWJlciA9IENTU1Byb3BlcnR5LmlzVW5pdGxlc3NOdW1iZXI7XG52YXIgc3R5bGVXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSBpbnRvIHRoZSBwcm9wZXIgY3NzIHdyaXRhYmxlIHZhbHVlLiBUaGUgc3R5bGUgbmFtZSBgbmFtZWBcbiAqIHNob3VsZCBiZSBsb2dpY2FsIChubyBoeXBoZW5zKSwgYXMgc3BlY2lmaWVkXG4gKiBpbiBgQ1NTUHJvcGVydHkuaXNVbml0bGVzc051bWJlcmAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQ1NTIHByb3BlcnR5IG5hbWUgc3VjaCBhcyBgdG9wTWFyZ2luYC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQ1NTIHByb3BlcnR5IHZhbHVlIHN1Y2ggYXMgYDEwcHhgLlxuICogQHBhcmFtIHtSZWFjdERPTUNvbXBvbmVudH0gY29tcG9uZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5vcm1hbGl6ZWQgc3R5bGUgdmFsdWUgd2l0aCBkaW1lbnNpb25zIGFwcGxpZWQuXG4gKi9cbmZ1bmN0aW9uIGRhbmdlcm91c1N0eWxlVmFsdWUobmFtZSwgdmFsdWUsIGNvbXBvbmVudCwgaXNDdXN0b21Qcm9wZXJ0eSkge1xuICAvLyBOb3RlIHRoYXQgd2UndmUgcmVtb3ZlZCBlc2NhcGVUZXh0Rm9yQnJvd3NlcigpIGNhbGxzIGhlcmUgc2luY2UgdGhlXG4gIC8vIHdob2xlIHN0cmluZyB3aWxsIGJlIGVzY2FwZWQgd2hlbiB0aGUgYXR0cmlidXRlIGlzIGluamVjdGVkIGludG9cbiAgLy8gdGhlIG1hcmt1cC4gSWYgeW91IHByb3ZpZGUgdW5zYWZlIHVzZXIgZGF0YSBoZXJlIHRoZXkgY2FuIGluamVjdFxuICAvLyBhcmJpdHJhcnkgQ1NTIHdoaWNoIG1heSBiZSBwcm9ibGVtYXRpYyAoSSBjb3VsZG4ndCByZXBybyB0aGlzKTpcbiAgLy8gaHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9YU1NfRmlsdGVyX0V2YXNpb25fQ2hlYXRfU2hlZXRcbiAgLy8gaHR0cDovL3d3dy50aGVzcGFubmVyLmNvLnVrLzIwMDcvMTEvMjYvdWx0aW1hdGUteHNzLWNzcy1pbmplY3Rpb24vXG4gIC8vIFRoaXMgaXMgbm90IGFuIFhTUyBob2xlIGJ1dCBpbnN0ZWFkIGEgcG90ZW50aWFsIENTUyBpbmplY3Rpb24gaXNzdWVcbiAgLy8gd2hpY2ggaGFzIGxlYWQgdG8gYSBncmVhdGVyIGRpc2N1c3Npb24gYWJvdXQgaG93IHdlJ3JlIGdvaW5nIHRvXG4gIC8vIHRydXN0IFVSTHMgbW92aW5nIGZvcndhcmQuIFNlZSAjMjExNTkwMVxuXG4gIHZhciBpc0VtcHR5ID0gdmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyB8fCB2YWx1ZSA9PT0gJyc7XG4gIGlmIChpc0VtcHR5KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgdmFyIGlzTm9uTnVtZXJpYyA9IGlzTmFOKHZhbHVlKTtcbiAgaWYgKGlzQ3VzdG9tUHJvcGVydHkgfHwgaXNOb25OdW1lcmljIHx8IHZhbHVlID09PSAwIHx8IGlzVW5pdGxlc3NOdW1iZXIuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgaXNVbml0bGVzc051bWJlcltuYW1lXSkge1xuICAgIHJldHVybiAnJyArIHZhbHVlOyAvLyBjYXN0IHRvIHN0cmluZ1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gQWxsb3cgJzAnIHRvIHBhc3MgdGhyb3VnaCB3aXRob3V0IHdhcm5pbmcuIDAgaXMgYWxyZWFkeSBzcGVjaWFsIGFuZFxuICAgICAgLy8gZG9lc24ndCByZXF1aXJlIHVuaXRzLCBzbyB3ZSBkb24ndCBuZWVkIHRvIHdhcm4gYWJvdXQgaXQuXG4gICAgICBpZiAoY29tcG9uZW50ICYmIHZhbHVlICE9PSAnMCcpIHtcbiAgICAgICAgdmFyIG93bmVyID0gY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgICAgIHZhciBvd25lck5hbWUgPSBvd25lciA/IG93bmVyLmdldE5hbWUoKSA6IG51bGw7XG4gICAgICAgIGlmIChvd25lck5hbWUgJiYgIXN0eWxlV2FybmluZ3Nbb3duZXJOYW1lXSkge1xuICAgICAgICAgIHN0eWxlV2FybmluZ3Nbb3duZXJOYW1lXSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKG93bmVyTmFtZSkge1xuICAgICAgICAgIHZhciB3YXJuaW5ncyA9IHN0eWxlV2FybmluZ3Nbb3duZXJOYW1lXTtcbiAgICAgICAgICB3YXJuZWQgPSB3YXJuaW5nc1tuYW1lXTtcbiAgICAgICAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgICAgICAgd2FybmluZ3NbbmFtZV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnYSBgJXNgIHRhZyAob3duZXI6IGAlc2ApIHdhcyBwYXNzZWQgYSBudW1lcmljIHN0cmluZyB2YWx1ZSAnICsgJ2ZvciBDU1MgcHJvcGVydHkgYCVzYCAodmFsdWU6IGAlc2ApIHdoaWNoIHdpbGwgYmUgdHJlYXRlZCAnICsgJ2FzIGEgdW5pdGxlc3MgbnVtYmVyIGluIGEgZnV0dXJlIHZlcnNpb24gb2YgUmVhY3QuJywgY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC50eXBlLCBvd25lck5hbWUgfHwgJ3Vua25vd24nLCBuYW1lLCB2YWx1ZSkgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlICsgJ3B4Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkYW5nZXJvdXNTdHlsZVZhbHVlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9kYW5nZXJvdXNTdHlsZVZhbHVlLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VNYXAnKTtcblxudmFyIGdldEhvc3RDb21wb25lbnRGcm9tQ29tcG9zaXRlID0gcmVxdWlyZSgnLi9nZXRIb3N0Q29tcG9uZW50RnJvbUNvbXBvc2l0ZScpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgRE9NIG5vZGUgcmVuZGVyZWQgYnkgdGhpcyBlbGVtZW50LlxuICpcbiAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdGRvbS5maW5kZG9tbm9kZVxuICpcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR8RE9NRWxlbWVudH0gY29tcG9uZW50T3JFbGVtZW50XG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH0gVGhlIHJvb3Qgbm9kZSBvZiB0aGlzIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRET01Ob2RlKGNvbXBvbmVudE9yRWxlbWVudCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBvd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gICAgaWYgKG93bmVyICE9PSBudWxsKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhvd25lci5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIsICclcyBpcyBhY2Nlc3NpbmcgZmluZERPTU5vZGUgaW5zaWRlIGl0cyByZW5kZXIoKS4gJyArICdyZW5kZXIoKSBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uIG9mIHByb3BzIGFuZCBzdGF0ZS4gSXQgc2hvdWxkICcgKyAnbmV2ZXIgYWNjZXNzIHNvbWV0aGluZyB0aGF0IHJlcXVpcmVzIHN0YWxlIGRhdGEgZnJvbSB0aGUgcHJldmlvdXMgJyArICdyZW5kZXIsIHN1Y2ggYXMgcmVmcy4gTW92ZSB0aGlzIGxvZ2ljIHRvIGNvbXBvbmVudERpZE1vdW50IGFuZCAnICsgJ2NvbXBvbmVudERpZFVwZGF0ZSBpbnN0ZWFkLicsIG93bmVyLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgIG93bmVyLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciA9IHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChjb21wb25lbnRPckVsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChjb21wb25lbnRPckVsZW1lbnQubm9kZVR5cGUgPT09IDEpIHtcbiAgICByZXR1cm4gY29tcG9uZW50T3JFbGVtZW50O1xuICB9XG5cbiAgdmFyIGluc3QgPSBSZWFjdEluc3RhbmNlTWFwLmdldChjb21wb25lbnRPckVsZW1lbnQpO1xuICBpZiAoaW5zdCkge1xuICAgIGluc3QgPSBnZXRIb3N0Q29tcG9uZW50RnJvbUNvbXBvc2l0ZShpbnN0KTtcbiAgICByZXR1cm4gaW5zdCA/IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpIDogbnVsbDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY29tcG9uZW50T3JFbGVtZW50LnJlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdmaW5kRE9NTm9kZSB3YXMgY2FsbGVkIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuJykgOiBfcHJvZEludmFyaWFudCgnNDQnKSA6IHZvaWQgMDtcbiAgfSBlbHNlIHtcbiAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRWxlbWVudCBhcHBlYXJzIHRvIGJlIG5laXRoZXIgUmVhY3RDb21wb25lbnQgbm9yIERPTU5vZGUgKGtleXM6ICVzKScsIE9iamVjdC5rZXlzKGNvbXBvbmVudE9yRWxlbWVudCkpIDogX3Byb2RJbnZhcmlhbnQoJzQ1JywgT2JqZWN0LmtleXMoY29tcG9uZW50T3JFbGVtZW50KSkgOiB2b2lkIDA7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmaW5kRE9NTm9kZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvZmluZERPTU5vZGUuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEtleUVzY2FwZVV0aWxzID0gcmVxdWlyZSgnLi9LZXlFc2NhcGVVdGlscycpO1xudmFyIHRyYXZlcnNlQWxsQ2hpbGRyZW4gPSByZXF1aXJlKCcuL3RyYXZlcnNlQWxsQ2hpbGRyZW4nKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgUmVhY3RDb21wb25lbnRUcmVlSG9vaztcblxuaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnKSB7XG4gIC8vIFRlbXBvcmFyeSBoYWNrLlxuICAvLyBJbmxpbmUgcmVxdWlyZXMgZG9uJ3Qgd29yayB3ZWxsIHdpdGggSmVzdDpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83MjQwXG4gIC8vIFJlbW92ZSB0aGUgaW5saW5lIHJlcXVpcmVzIHdoZW4gd2UgZG9uJ3QgbmVlZCB0aGVtIGFueW1vcmU6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzcxNzhcbiAgUmVhY3RDb21wb25lbnRUcmVlSG9vayA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudFRyZWVIb29rJyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gdHJhdmVyc2VDb250ZXh0IENvbnRleHQgcGFzc2VkIHRocm91Z2ggdHJhdmVyc2FsLlxuICogQHBhcmFtIHs/UmVhY3RDb21wb25lbnR9IGNoaWxkIFJlYWN0IGNoaWxkIGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7IXN0cmluZ30gbmFtZSBTdHJpbmcgbmFtZSBvZiBrZXkgcGF0aCB0byBjaGlsZC5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gc2VsZkRlYnVnSUQgT3B0aW9uYWwgZGVidWdJRCBvZiB0aGUgY3VycmVudCBpbnRlcm5hbCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gZmxhdHRlblNpbmdsZUNoaWxkSW50b0NvbnRleHQodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSwgc2VsZkRlYnVnSUQpIHtcbiAgLy8gV2UgZm91bmQgYSBjb21wb25lbnQgaW5zdGFuY2UuXG4gIGlmICh0cmF2ZXJzZUNvbnRleHQgJiYgdHlwZW9mIHRyYXZlcnNlQ29udGV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzdWx0ID0gdHJhdmVyc2VDb250ZXh0O1xuICAgIHZhciBrZXlVbmlxdWUgPSByZXN1bHRbbmFtZV0gPT09IHVuZGVmaW5lZDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFSZWFjdENvbXBvbmVudFRyZWVIb29rKSB7XG4gICAgICAgIFJlYWN0Q29tcG9uZW50VHJlZUhvb2sgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3RDb21wb25lbnRUcmVlSG9vaycpO1xuICAgICAgfVxuICAgICAgaWYgKCFrZXlVbmlxdWUpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdmbGF0dGVuQ2hpbGRyZW4oLi4uKTogRW5jb3VudGVyZWQgdHdvIGNoaWxkcmVuIHdpdGggdGhlIHNhbWUga2V5LCAnICsgJ2Alc2AuIENoaWxkIGtleXMgbXVzdCBiZSB1bmlxdWU7IHdoZW4gdHdvIGNoaWxkcmVuIHNoYXJlIGEga2V5LCBvbmx5ICcgKyAndGhlIGZpcnN0IGNoaWxkIHdpbGwgYmUgdXNlZC4lcycsIEtleUVzY2FwZVV0aWxzLnVuZXNjYXBlKG5hbWUpLCBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFN0YWNrQWRkZW5kdW1CeUlEKHNlbGZEZWJ1Z0lEKSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChrZXlVbmlxdWUgJiYgY2hpbGQgIT0gbnVsbCkge1xuICAgICAgcmVzdWx0W25hbWVdID0gY2hpbGQ7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRmxhdHRlbnMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLiBBbnkgbnVsbFxuICogY2hpbGRyZW4gd2lsbCBub3QgYmUgaW5jbHVkZWQgaW4gdGhlIHJlc3VsdGluZyBvYmplY3QuXG4gKiBAcmV0dXJuIHshb2JqZWN0fSBmbGF0dGVuZWQgY2hpbGRyZW4ga2V5ZWQgYnkgbmFtZS5cbiAqL1xuZnVuY3Rpb24gZmxhdHRlbkNoaWxkcmVuKGNoaWxkcmVuLCBzZWxmRGVidWdJRCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICB2YXIgcmVzdWx0ID0ge307XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jdGlvbiAodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSkge1xuICAgICAgcmV0dXJuIGZsYXR0ZW5TaW5nbGVDaGlsZEludG9Db250ZXh0KHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUsIHNlbGZEZWJ1Z0lEKTtcbiAgICB9LCByZXN1bHQpO1xuICB9IGVsc2Uge1xuICAgIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZsYXR0ZW5TaW5nbGVDaGlsZEludG9Db250ZXh0LCByZXN1bHQpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkNoaWxkcmVuO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9mbGF0dGVuQ2hpbGRyZW4uanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBnZXRFdmVudENoYXJDb2RlID0gcmVxdWlyZSgnLi9nZXRFdmVudENoYXJDb2RlJyk7XG5cbi8qKlxuICogTm9ybWFsaXphdGlvbiBvZiBkZXByZWNhdGVkIEhUTUw1IGBrZXlgIHZhbHVlc1xuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudCNLZXlfbmFtZXNcbiAqL1xudmFyIG5vcm1hbGl6ZUtleSA9IHtcbiAgRXNjOiAnRXNjYXBlJyxcbiAgU3BhY2ViYXI6ICcgJyxcbiAgTGVmdDogJ0Fycm93TGVmdCcsXG4gIFVwOiAnQXJyb3dVcCcsXG4gIFJpZ2h0OiAnQXJyb3dSaWdodCcsXG4gIERvd246ICdBcnJvd0Rvd24nLFxuICBEZWw6ICdEZWxldGUnLFxuICBXaW46ICdPUycsXG4gIE1lbnU6ICdDb250ZXh0TWVudScsXG4gIEFwcHM6ICdDb250ZXh0TWVudScsXG4gIFNjcm9sbDogJ1Njcm9sbExvY2snLFxuICBNb3pQcmludGFibGVLZXk6ICdVbmlkZW50aWZpZWQnXG59O1xuXG4vKipcbiAqIFRyYW5zbGF0aW9uIGZyb20gbGVnYWN5IGBrZXlDb2RlYCB0byBIVE1MNSBga2V5YFxuICogT25seSBzcGVjaWFsIGtleXMgc3VwcG9ydGVkLCBhbGwgb3RoZXJzIGRlcGVuZCBvbiBrZXlib2FyZCBsYXlvdXQgb3IgYnJvd3NlclxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudCNLZXlfbmFtZXNcbiAqL1xudmFyIHRyYW5zbGF0ZVRvS2V5ID0ge1xuICA4OiAnQmFja3NwYWNlJyxcbiAgOTogJ1RhYicsXG4gIDEyOiAnQ2xlYXInLFxuICAxMzogJ0VudGVyJyxcbiAgMTY6ICdTaGlmdCcsXG4gIDE3OiAnQ29udHJvbCcsXG4gIDE4OiAnQWx0JyxcbiAgMTk6ICdQYXVzZScsXG4gIDIwOiAnQ2Fwc0xvY2snLFxuICAyNzogJ0VzY2FwZScsXG4gIDMyOiAnICcsXG4gIDMzOiAnUGFnZVVwJyxcbiAgMzQ6ICdQYWdlRG93bicsXG4gIDM1OiAnRW5kJyxcbiAgMzY6ICdIb21lJyxcbiAgMzc6ICdBcnJvd0xlZnQnLFxuICAzODogJ0Fycm93VXAnLFxuICAzOTogJ0Fycm93UmlnaHQnLFxuICA0MDogJ0Fycm93RG93bicsXG4gIDQ1OiAnSW5zZXJ0JyxcbiAgNDY6ICdEZWxldGUnLFxuICAxMTI6ICdGMScsXG4gIDExMzogJ0YyJyxcbiAgMTE0OiAnRjMnLFxuICAxMTU6ICdGNCcsXG4gIDExNjogJ0Y1JyxcbiAgMTE3OiAnRjYnLFxuICAxMTg6ICdGNycsXG4gIDExOTogJ0Y4JyxcbiAgMTIwOiAnRjknLFxuICAxMjE6ICdGMTAnLFxuICAxMjI6ICdGMTEnLFxuICAxMjM6ICdGMTInLFxuICAxNDQ6ICdOdW1Mb2NrJyxcbiAgMTQ1OiAnU2Nyb2xsTG9jaycsXG4gIDIyNDogJ01ldGEnXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge3N0cmluZ30gTm9ybWFsaXplZCBga2V5YCBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZ2V0RXZlbnRLZXkobmF0aXZlRXZlbnQpIHtcbiAgaWYgKG5hdGl2ZUV2ZW50LmtleSkge1xuICAgIC8vIE5vcm1hbGl6ZSBpbmNvbnNpc3RlbnQgdmFsdWVzIHJlcG9ydGVkIGJ5IGJyb3dzZXJzIGR1ZSB0b1xuICAgIC8vIGltcGxlbWVudGF0aW9ucyBvZiBhIHdvcmtpbmcgZHJhZnQgc3BlY2lmaWNhdGlvbi5cblxuICAgIC8vIEZpcmVGb3ggaW1wbGVtZW50cyBga2V5YCBidXQgcmV0dXJucyBgTW96UHJpbnRhYmxlS2V5YCBmb3IgYWxsXG4gICAgLy8gcHJpbnRhYmxlIGNoYXJhY3RlcnMgKG5vcm1hbGl6ZWQgdG8gYFVuaWRlbnRpZmllZGApLCBpZ25vcmUgaXQuXG4gICAgdmFyIGtleSA9IG5vcm1hbGl6ZUtleVtuYXRpdmVFdmVudC5rZXldIHx8IG5hdGl2ZUV2ZW50LmtleTtcbiAgICBpZiAoa2V5ICE9PSAnVW5pZGVudGlmaWVkJykge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICAvLyBCcm93c2VyIGRvZXMgbm90IGltcGxlbWVudCBga2V5YCwgcG9seWZpbGwgYXMgbXVjaCBvZiBpdCBhcyB3ZSBjYW4uXG4gIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgdmFyIGNoYXJDb2RlID0gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCk7XG5cbiAgICAvLyBUaGUgZW50ZXIta2V5IGlzIHRlY2huaWNhbGx5IGJvdGggcHJpbnRhYmxlIGFuZCBub24tcHJpbnRhYmxlIGFuZCBjYW5cbiAgICAvLyB0aHVzIGJlIGNhcHR1cmVkIGJ5IGBrZXlwcmVzc2AsIG5vIG90aGVyIG5vbi1wcmludGFibGUga2V5IHNob3VsZC5cbiAgICByZXR1cm4gY2hhckNvZGUgPT09IDEzID8gJ0VudGVyJyA6IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICB9XG4gIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAna2V5ZG93bicgfHwgbmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgIC8vIFdoaWxlIHVzZXIga2V5Ym9hcmQgbGF5b3V0IGRldGVybWluZXMgdGhlIGFjdHVhbCBtZWFuaW5nIG9mIGVhY2hcbiAgICAvLyBga2V5Q29kZWAgdmFsdWUsIGFsbW9zdCBhbGwgZnVuY3Rpb24ga2V5cyBoYXZlIGEgdW5pdmVyc2FsIHZhbHVlLlxuICAgIHJldHVybiB0cmFuc2xhdGVUb0tleVtuYXRpdmVFdmVudC5rZXlDb2RlXSB8fCAnVW5pZGVudGlmaWVkJztcbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RXZlbnRLZXk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL2dldEV2ZW50S2V5LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qIGdsb2JhbCBTeW1ib2wgKi9cblxudmFyIElURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InOyAvLyBCZWZvcmUgU3ltYm9sIHNwZWMuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgaXRlcmF0b3IgbWV0aG9kIGZ1bmN0aW9uIGNvbnRhaW5lZCBvbiB0aGUgaXRlcmFibGUgb2JqZWN0LlxuICpcbiAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICpcbiAqICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obXlJdGVyYWJsZSk7XG4gKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAqICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChteUl0ZXJhYmxlKTtcbiAqICAgICAgIC4uLlxuICogICAgIH1cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IG1heWJlSXRlcmFibGVcbiAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXSk7XG4gIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBpdGVyYXRvckZuO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SXRlcmF0b3JGbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvZ2V0SXRlcmF0b3JGbi5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBHaXZlbiBhbnkgbm9kZSByZXR1cm4gdGhlIGZpcnN0IGxlYWYgbm9kZSB3aXRob3V0IGNoaWxkcmVuLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHJldHVybiB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX1cbiAqL1xuXG5mdW5jdGlvbiBnZXRMZWFmTm9kZShub2RlKSB7XG4gIHdoaWxlIChub2RlICYmIG5vZGUuZmlyc3RDaGlsZCkge1xuICAgIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogR2V0IHRoZSBuZXh0IHNpYmxpbmcgd2l0aGluIGEgY29udGFpbmVyLiBUaGlzIHdpbGwgd2FsayB1cCB0aGVcbiAqIERPTSBpZiBhIG5vZGUncyBzaWJsaW5ncyBoYXZlIGJlZW4gZXhoYXVzdGVkLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHJldHVybiB7P0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9XG4gKi9cbmZ1bmN0aW9uIGdldFNpYmxpbmdOb2RlKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XG4gICAgfVxuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgb2JqZWN0IGRlc2NyaWJpbmcgdGhlIG5vZGVzIHdoaWNoIGNvbnRhaW4gY2hhcmFjdGVycyBhdCBvZmZzZXQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSByb290XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KHJvb3QsIG9mZnNldCkge1xuICB2YXIgbm9kZSA9IGdldExlYWZOb2RlKHJvb3QpO1xuICB2YXIgbm9kZVN0YXJ0ID0gMDtcbiAgdmFyIG5vZGVFbmQgPSAwO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIG5vZGVFbmQgPSBub2RlU3RhcnQgKyBub2RlLnRleHRDb250ZW50Lmxlbmd0aDtcblxuICAgICAgaWYgKG5vZGVTdGFydCA8PSBvZmZzZXQgJiYgbm9kZUVuZCA+PSBvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgIG9mZnNldDogb2Zmc2V0IC0gbm9kZVN0YXJ0XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG5vZGVTdGFydCA9IG5vZGVFbmQ7XG4gICAgfVxuXG4gICAgbm9kZSA9IGdldExlYWZOb2RlKGdldFNpYmxpbmdOb2RlKG5vZGUpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL2dldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBtYXBwaW5nIG9mIHN0YW5kYXJkIHZlbmRvciBwcmVmaXhlcyB1c2luZyB0aGUgZGVmaW5lZCBzdHlsZSBwcm9wZXJ0eSBhbmQgZXZlbnQgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGVQcm9wXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBtYWtlUHJlZml4TWFwKHN0eWxlUHJvcCwgZXZlbnROYW1lKSB7XG4gIHZhciBwcmVmaXhlcyA9IHt9O1xuXG4gIHByZWZpeGVzW3N0eWxlUHJvcC50b0xvd2VyQ2FzZSgpXSA9IGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuICBwcmVmaXhlc1snV2Via2l0JyArIHN0eWxlUHJvcF0gPSAnd2Via2l0JyArIGV2ZW50TmFtZTtcbiAgcHJlZml4ZXNbJ01veicgKyBzdHlsZVByb3BdID0gJ21veicgKyBldmVudE5hbWU7XG4gIHByZWZpeGVzWydtcycgKyBzdHlsZVByb3BdID0gJ01TJyArIGV2ZW50TmFtZTtcbiAgcHJlZml4ZXNbJ08nICsgc3R5bGVQcm9wXSA9ICdvJyArIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gIHJldHVybiBwcmVmaXhlcztcbn1cblxuLyoqXG4gKiBBIGxpc3Qgb2YgZXZlbnQgbmFtZXMgdG8gYSBjb25maWd1cmFibGUgbGlzdCBvZiB2ZW5kb3IgcHJlZml4ZXMuXG4gKi9cbnZhciB2ZW5kb3JQcmVmaXhlcyA9IHtcbiAgYW5pbWF0aW9uZW5kOiBtYWtlUHJlZml4TWFwKCdBbmltYXRpb24nLCAnQW5pbWF0aW9uRW5kJyksXG4gIGFuaW1hdGlvbml0ZXJhdGlvbjogbWFrZVByZWZpeE1hcCgnQW5pbWF0aW9uJywgJ0FuaW1hdGlvbkl0ZXJhdGlvbicpLFxuICBhbmltYXRpb25zdGFydDogbWFrZVByZWZpeE1hcCgnQW5pbWF0aW9uJywgJ0FuaW1hdGlvblN0YXJ0JyksXG4gIHRyYW5zaXRpb25lbmQ6IG1ha2VQcmVmaXhNYXAoJ1RyYW5zaXRpb24nLCAnVHJhbnNpdGlvbkVuZCcpXG59O1xuXG4vKipcbiAqIEV2ZW50IG5hbWVzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gZGV0ZWN0ZWQgYW5kIHByZWZpeGVkIChpZiBhcHBsaWNhYmxlKS5cbiAqL1xudmFyIHByZWZpeGVkRXZlbnROYW1lcyA9IHt9O1xuXG4vKipcbiAqIEVsZW1lbnQgdG8gY2hlY2sgZm9yIHByZWZpeGVzIG9uLlxuICovXG52YXIgc3R5bGUgPSB7fTtcblxuLyoqXG4gKiBCb290c3RyYXAgaWYgYSBET00gZXhpc3RzLlxuICovXG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG5cbiAgLy8gT24gc29tZSBwbGF0Zm9ybXMsIGluIHBhcnRpY3VsYXIgc29tZSByZWxlYXNlcyBvZiBBbmRyb2lkIDQueCxcbiAgLy8gdGhlIHVuLXByZWZpeGVkIFwiYW5pbWF0aW9uXCIgYW5kIFwidHJhbnNpdGlvblwiIHByb3BlcnRpZXMgYXJlIGRlZmluZWQgb24gdGhlXG4gIC8vIHN0eWxlIG9iamVjdCBidXQgdGhlIGV2ZW50cyB0aGF0IGZpcmUgd2lsbCBzdGlsbCBiZSBwcmVmaXhlZCwgc28gd2UgbmVlZFxuICAvLyB0byBjaGVjayBpZiB0aGUgdW4tcHJlZml4ZWQgZXZlbnRzIGFyZSB1c2FibGUsIGFuZCBpZiBub3QgcmVtb3ZlIHRoZW0gZnJvbSB0aGUgbWFwLlxuICBpZiAoISgnQW5pbWF0aW9uRXZlbnQnIGluIHdpbmRvdykpIHtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbjtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbjtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uO1xuICB9XG5cbiAgLy8gU2FtZSBhcyBhYm92ZVxuICBpZiAoISgnVHJhbnNpdGlvbkV2ZW50JyBpbiB3aW5kb3cpKSB7XG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbjtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGRldGVybWluZSB0aGUgY29ycmVjdCB2ZW5kb3IgcHJlZml4ZWQgZXZlbnQgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShldmVudE5hbWUpIHtcbiAgaWYgKHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdKSB7XG4gICAgcmV0dXJuIHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdO1xuICB9IGVsc2UgaWYgKCF2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdKSB7XG4gICAgcmV0dXJuIGV2ZW50TmFtZTtcbiAgfVxuXG4gIHZhciBwcmVmaXhNYXAgPSB2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdO1xuXG4gIGZvciAodmFyIHN0eWxlUHJvcCBpbiBwcmVmaXhNYXApIHtcbiAgICBpZiAocHJlZml4TWFwLmhhc093blByb3BlcnR5KHN0eWxlUHJvcCkgJiYgc3R5bGVQcm9wIGluIHN0eWxlKSB7XG4gICAgICByZXR1cm4gcHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0gPSBwcmVmaXhNYXBbc3R5bGVQcm9wXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWU7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1kb20vbGliL2dldFZlbmRvclByZWZpeGVkRXZlbnROYW1lLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyID0gcmVxdWlyZSgnLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXInKTtcblxuLyoqXG4gKiBFc2NhcGVzIGF0dHJpYnV0ZSB2YWx1ZSB0byBwcmV2ZW50IHNjcmlwdGluZyBhdHRhY2tzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gZXNjYXBlLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiBlc2NhcGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpIHtcbiAgcmV0dXJuICdcIicgKyBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodmFsdWUpICsgJ1wiJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZSgnLi9SZWFjdE1vdW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RNb3VudC5yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LWRvbS9saWIvcmVuZGVyU3VidHJlZUludG9Db250YWluZXIuanMiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvUmVhY3RET01TZXJ2ZXInKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtZG9tL3NlcnZlci5qcyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuOC42XG4gKiByZWFjdC1pcy5kZXZlbG9wbWVudC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQtbGlrZSB0eXBlcy4gSWYgdGhlcmUgaXMgbm8gbmF0aXZlIFN5bWJvbFxuLy8gbm9yIHBvbHlmaWxsLCB0aGVuIGEgcGxhaW4gbnVtYmVyIGlzIHVzZWQgZm9yIHBlcmZvcm1hbmNlLlxudmFyIGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcblxudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcbnZhciBSRUFDVF9QT1JUQUxfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnBvcnRhbCcpIDogMHhlYWNhO1xudmFyIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5mcmFnbWVudCcpIDogMHhlYWNiO1xudmFyIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5zdHJpY3RfbW9kZScpIDogMHhlYWNjO1xudmFyIFJFQUNUX1BST0ZJTEVSX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5wcm9maWxlcicpIDogMHhlYWQyO1xudmFyIFJFQUNUX1BST1ZJREVSX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5wcm92aWRlcicpIDogMHhlYWNkO1xudmFyIFJFQUNUX0NPTlRFWFRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmNvbnRleHQnKSA6IDB4ZWFjZTtcbnZhciBSRUFDVF9BU1lOQ19NT0RFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5hc3luY19tb2RlJykgOiAweGVhY2Y7XG52YXIgUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5jb25jdXJyZW50X21vZGUnKSA6IDB4ZWFjZjtcbnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZm9yd2FyZF9yZWYnKSA6IDB4ZWFkMDtcbnZhciBSRUFDVF9TVVNQRU5TRV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2UnKSA6IDB4ZWFkMTtcbnZhciBSRUFDVF9NRU1PX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5tZW1vJykgOiAweGVhZDM7XG52YXIgUkVBQ1RfTEFaWV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QubGF6eScpIDogMHhlYWQ0O1xuXG5mdW5jdGlvbiBpc1ZhbGlkRWxlbWVudFR5cGUodHlwZSkge1xuICByZXR1cm4gdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nIHx8XG4gIC8vIE5vdGU6IGl0cyB0eXBlb2YgbWlnaHQgYmUgb3RoZXIgdGhhbiAnc3ltYm9sJyBvciAnbnVtYmVyJyBpZiBpdCdzIGEgcG9seWZpbGwuXG4gIHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX1RZUEUgfHwgdHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwgJiYgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9NRU1PX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfUFJPVklERVJfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSk7XG59XG5cbi8qKlxuICogRm9ya2VkIGZyb20gZmJqcy93YXJuaW5nOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9lNjZiYTIwYWQ1YmU0MzNlYjU0NDIzZjJiMDk3ZDgyOTMyNGQ5ZGU2L3BhY2thZ2VzL2ZianMvc3JjL19fZm9ya3NfXy93YXJuaW5nLmpzXG4gKlxuICogT25seSBjaGFuZ2UgaXMgd2UgdXNlIGNvbnNvbGUud2FybiBpbnN0ZWFkIG9mIGNvbnNvbGUuZXJyb3IsXG4gKiBhbmQgZG8gbm90aGluZyB3aGVuICdjb25zb2xlJyBpcyBub3Qgc3VwcG9ydGVkLlxuICogVGhpcyByZWFsbHkgc2ltcGxpZmllcyB0aGUgY29kZS5cbiAqIC0tLVxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBsb3dQcmlvcml0eVdhcm5pbmcgPSBmdW5jdGlvbiAoKSB7fTtcblxue1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcblxuICBsb3dQcmlvcml0eVdhcm5pbmcgPSBmdW5jdGlvbiAoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYGxvd1ByaW9yaXR5V2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KHVuZGVmaW5lZCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBsb3dQcmlvcml0eVdhcm5pbmckMSA9IGxvd1ByaW9yaXR5V2FybmluZztcblxuZnVuY3Rpb24gdHlwZU9mKG9iamVjdCkge1xuICBpZiAodHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsKSB7XG4gICAgdmFyICQkdHlwZW9mID0gb2JqZWN0LiQkdHlwZW9mO1xuICAgIHN3aXRjaCAoJCR0eXBlb2YpIHtcbiAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICB2YXIgdHlwZSA9IG9iamVjdC50eXBlO1xuXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgIGNhc2UgUkVBQ1RfQVNZTkNfTU9ERV9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHZhciAkJHR5cGVvZlR5cGUgPSB0eXBlICYmIHR5cGUuJCR0eXBlb2Y7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoJCR0eXBlb2ZUeXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfUFJPVklERVJfVFlQRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gJCR0eXBlb2ZUeXBlO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAkJHR5cGVvZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgIHJldHVybiAkJHR5cGVvZjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vLyBBc3luY01vZGUgaXMgZGVwcmVjYXRlZCBhbG9uZyB3aXRoIGlzQXN5bmNNb2RlXG52YXIgQXN5bmNNb2RlID0gUkVBQ1RfQVNZTkNfTU9ERV9UWVBFO1xudmFyIENvbmN1cnJlbnRNb2RlID0gUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEU7XG52YXIgQ29udGV4dENvbnN1bWVyID0gUkVBQ1RfQ09OVEVYVF9UWVBFO1xudmFyIENvbnRleHRQcm92aWRlciA9IFJFQUNUX1BST1ZJREVSX1RZUEU7XG52YXIgRWxlbWVudCA9IFJFQUNUX0VMRU1FTlRfVFlQRTtcbnZhciBGb3J3YXJkUmVmID0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTtcbnZhciBGcmFnbWVudCA9IFJFQUNUX0ZSQUdNRU5UX1RZUEU7XG52YXIgTGF6eSA9IFJFQUNUX0xBWllfVFlQRTtcbnZhciBNZW1vID0gUkVBQ1RfTUVNT19UWVBFO1xudmFyIFBvcnRhbCA9IFJFQUNUX1BPUlRBTF9UWVBFO1xudmFyIFByb2ZpbGVyID0gUkVBQ1RfUFJPRklMRVJfVFlQRTtcbnZhciBTdHJpY3RNb2RlID0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRTtcbnZhciBTdXNwZW5zZSA9IFJFQUNUX1NVU1BFTlNFX1RZUEU7XG5cbnZhciBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSA9IGZhbHNlO1xuXG4vLyBBc3luY01vZGUgc2hvdWxkIGJlIGRlcHJlY2F0ZWRcbmZ1bmN0aW9uIGlzQXN5bmNNb2RlKG9iamVjdCkge1xuICB7XG4gICAgaWYgKCFoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSkge1xuICAgICAgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGUgPSB0cnVlO1xuICAgICAgbG93UHJpb3JpdHlXYXJuaW5nJDEoZmFsc2UsICdUaGUgUmVhY3RJcy5pc0FzeW5jTW9kZSgpIGFsaWFzIGhhcyBiZWVuIGRlcHJlY2F0ZWQsICcgKyAnYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBSZWFjdCAxNysuIFVwZGF0ZSB5b3VyIGNvZGUgdG8gdXNlICcgKyAnUmVhY3RJcy5pc0NvbmN1cnJlbnRNb2RlKCkgaW5zdGVhZC4gSXQgaGFzIHRoZSBleGFjdCBzYW1lIEFQSS4nKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGlzQ29uY3VycmVudE1vZGUob2JqZWN0KSB8fCB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfQVNZTkNfTU9ERV9UWVBFO1xufVxuZnVuY3Rpb24gaXNDb25jdXJyZW50TW9kZShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzQ29udGV4dENvbnN1bWVyKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0NPTlRFWFRfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzQ29udGV4dFByb3ZpZGVyKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1BST1ZJREVSX1RZUEU7XG59XG5mdW5jdGlvbiBpc0VsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwgJiYgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG59XG5mdW5jdGlvbiBpc0ZvcndhcmRSZWYob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzRnJhZ21lbnQob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzTGF6eShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9MQVpZX1RZUEU7XG59XG5mdW5jdGlvbiBpc01lbW8ob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfTUVNT19UWVBFO1xufVxuZnVuY3Rpb24gaXNQb3J0YWwob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfUE9SVEFMX1RZUEU7XG59XG5mdW5jdGlvbiBpc1Byb2ZpbGVyKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG59XG5mdW5jdGlvbiBpc1N0cmljdE1vZGUob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzU3VzcGVuc2Uob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfU1VTUEVOU0VfVFlQRTtcbn1cblxuZXhwb3J0cy50eXBlT2YgPSB0eXBlT2Y7XG5leHBvcnRzLkFzeW5jTW9kZSA9IEFzeW5jTW9kZTtcbmV4cG9ydHMuQ29uY3VycmVudE1vZGUgPSBDb25jdXJyZW50TW9kZTtcbmV4cG9ydHMuQ29udGV4dENvbnN1bWVyID0gQ29udGV4dENvbnN1bWVyO1xuZXhwb3J0cy5Db250ZXh0UHJvdmlkZXIgPSBDb250ZXh0UHJvdmlkZXI7XG5leHBvcnRzLkVsZW1lbnQgPSBFbGVtZW50O1xuZXhwb3J0cy5Gb3J3YXJkUmVmID0gRm9yd2FyZFJlZjtcbmV4cG9ydHMuRnJhZ21lbnQgPSBGcmFnbWVudDtcbmV4cG9ydHMuTGF6eSA9IExhenk7XG5leHBvcnRzLk1lbW8gPSBNZW1vO1xuZXhwb3J0cy5Qb3J0YWwgPSBQb3J0YWw7XG5leHBvcnRzLlByb2ZpbGVyID0gUHJvZmlsZXI7XG5leHBvcnRzLlN0cmljdE1vZGUgPSBTdHJpY3RNb2RlO1xuZXhwb3J0cy5TdXNwZW5zZSA9IFN1c3BlbnNlO1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGUgPSBpc1ZhbGlkRWxlbWVudFR5cGU7XG5leHBvcnRzLmlzQXN5bmNNb2RlID0gaXNBc3luY01vZGU7XG5leHBvcnRzLmlzQ29uY3VycmVudE1vZGUgPSBpc0NvbmN1cnJlbnRNb2RlO1xuZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lciA9IGlzQ29udGV4dENvbnN1bWVyO1xuZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlciA9IGlzQ29udGV4dFByb3ZpZGVyO1xuZXhwb3J0cy5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG5leHBvcnRzLmlzRm9yd2FyZFJlZiA9IGlzRm9yd2FyZFJlZjtcbmV4cG9ydHMuaXNGcmFnbWVudCA9IGlzRnJhZ21lbnQ7XG5leHBvcnRzLmlzTGF6eSA9IGlzTGF6eTtcbmV4cG9ydHMuaXNNZW1vID0gaXNNZW1vO1xuZXhwb3J0cy5pc1BvcnRhbCA9IGlzUG9ydGFsO1xuZXhwb3J0cy5pc1Byb2ZpbGVyID0gaXNQcm9maWxlcjtcbmV4cG9ydHMuaXNTdHJpY3RNb2RlID0gaXNTdHJpY3RNb2RlO1xuZXhwb3J0cy5pc1N1c3BlbnNlID0gaXNTdXNwZW5zZTtcbiAgfSkoKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QtaXMvY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjZcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1xudmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxyPWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTY7ZnVuY3Rpb24gdChhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIHI6Y2FzZSBxOmNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIHYoYSl7cmV0dXJuIHQoYSk9PT1tfWV4cG9ydHMudHlwZU9mPXQ7ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO1xuZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT1yO2V4cG9ydHMuTWVtbz1xO2V4cG9ydHMuUG9ydGFsPWQ7ZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW4pfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpfHx0KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXY7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWt9O1xuZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09cn07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1xfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1mfTtcbmV4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PXB9O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSBhcyBjcmVhdGVIaXN0b3J5IH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vUm91dGVyXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cblxudmFyIEJyb3dzZXJSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQnJvd3NlclJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJvd3NlclJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJyb3dzZXJSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpO1xuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gQnJvd3NlclJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlclJvdXRlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LXJvdXRlci1kb20vZXMvQnJvd3NlclJvdXRlci5qcyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUhhc2hIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhhc2hSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpO1xuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSksXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBIYXNoUm91dGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtcm91dGVyLWRvbS9lcy9IYXNoUm91dGVyLmpzIiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBNZW1vcnlSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9NZW1vcnlSb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtcm91dGVyLWRvbS9lcy9NZW1vcnlSb3V0ZXIuanMiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IFJvdXRlIGZyb20gXCIuL1JvdXRlXCI7XG5pbXBvcnQgTGluayBmcm9tIFwiLi9MaW5rXCI7XG5cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbnZhciBOYXZMaW5rID0gZnVuY3Rpb24gTmF2TGluayhfcmVmKSB7XG4gIHZhciB0byA9IF9yZWYudG8sXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBzdHlsZSA9IF9yZWYuc3R5bGUsXG4gICAgICBnZXRJc0FjdGl2ZSA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWZbXCJhcmlhLWN1cnJlbnRcIl0sXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcInRvXCIsIFwiZXhhY3RcIiwgXCJzdHJpY3RcIiwgXCJsb2NhdGlvblwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwic3R5bGVcIiwgXCJpc0FjdGl2ZVwiLCBcImFyaWEtY3VycmVudFwiXSk7XG5cbiAgdmFyIHBhdGggPSAodHlwZW9mIHRvID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodG8pKSA9PT0gXCJvYmplY3RcIiA/IHRvLnBhdGhuYW1lIDogdG87XG5cbiAgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcbiAgdmFyIGVzY2FwZWRQYXRoID0gcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwge1xuICAgIHBhdGg6IGVzY2FwZWRQYXRoLFxuICAgIGV4YWN0OiBleGFjdCxcbiAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKF9yZWYyKSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfcmVmMi5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaCA9IF9yZWYyLm1hdGNoO1xuXG4gICAgICB2YXIgaXNBY3RpdmUgPSAhIShnZXRJc0FjdGl2ZSA/IGdldElzQWN0aXZlKG1hdGNoLCBsb2NhdGlvbikgOiBtYXRjaCk7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHtcbiAgICAgICAgdG86IHRvLFxuICAgICAgICBjbGFzc05hbWU6IGlzQWN0aXZlID8gW2NsYXNzTmFtZSwgYWN0aXZlQ2xhc3NOYW1lXS5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSkuam9pbihcIiBcIikgOiBjbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZSwgYWN0aXZlU3R5bGUpIDogc3R5bGUsXG4gICAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50IHx8IG51bGxcbiAgICAgIH0sIHJlc3QpKTtcbiAgICB9XG4gIH0pO1xufTtcblxuTmF2TGluay5wcm9wVHlwZXMgPSB7XG4gIHRvOiBMaW5rLnByb3BUeXBlcy50byxcbiAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICBcImFyaWEtY3VycmVudFwiOiBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSlcbn07XG5cbk5hdkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmVDbGFzc05hbWU6IFwiYWN0aXZlXCIsXG4gIFwiYXJpYS1jdXJyZW50XCI6IFwicGFnZVwiXG59O1xuXG5leHBvcnQgZGVmYXVsdCBOYXZMaW5rO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtcm91dGVyLWRvbS9lcy9OYXZMaW5rLmpzIiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBQcm9tcHQgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Qcm9tcHRcIjtcblxuZXhwb3J0IGRlZmF1bHQgUHJvbXB0O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtcm91dGVyLWRvbS9lcy9Qcm9tcHQuanMiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJlZGlyZWN0IGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvUmVkaXJlY3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgUmVkaXJlY3Q7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1yb3V0ZXItZG9tL2VzL1JlZGlyZWN0LmpzIiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBTdGF0aWNSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9TdGF0aWNSb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtcm91dGVyLWRvbS9lcy9TdGF0aWNSb3V0ZXIuanMiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFN3aXRjaCBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1N3aXRjaFwiO1xuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2g7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1yb3V0ZXItZG9tL2VzL1N3aXRjaC5qcyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgZ2VuZXJhdGVQYXRoIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvZ2VuZXJhdGVQYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlUGF0aDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0LXJvdXRlci1kb20vZXMvZ2VuZXJhdGVQYXRoLmpzIiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcInJlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGhcIjtcblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtcm91dGVyLWRvbS9lcy9tYXRjaFBhdGguanMiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IHdpdGhSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1yb3V0ZXItZG9tL2VzL3dpdGhSb3V0ZXIuanMiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbW9yeVJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtcm91dGVyL2VzL01lbW9yeVJvdXRlci5qcyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5XG4gKiBmcm9tIGEgc2NyZWVuIHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxudmFyIFByb21wdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQcm9tcHQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFByb21wdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvbXB0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLnVuYmxvY2spIHRoaXMudW5ibG9jaygpO1xuXG4gICAgdGhpcy51bmJsb2NrID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5LmJsb2NrKG1lc3NhZ2UpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykge1xuICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICB0aGlzLnVuYmxvY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMud2hlbikgdGhpcy5lbmFibGUodGhpcy5wcm9wcy5tZXNzYWdlKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMud2hlbikge1xuICAgICAgaWYgKCF0aGlzLnByb3BzLndoZW4gfHwgdGhpcy5wcm9wcy5tZXNzYWdlICE9PSBuZXh0UHJvcHMubWVzc2FnZSkgdGhpcy5lbmFibGUobmV4dFByb3BzLm1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICB9XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuZGlzYWJsZSgpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBQcm9tcHQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblByb21wdC5wcm9wVHlwZXMgPSB7XG4gIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICBtZXNzYWdlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pLmlzUmVxdWlyZWRcbn07XG5Qcm9tcHQuZGVmYXVsdFByb3BzID0ge1xuICB3aGVuOiB0cnVlXG59O1xuUHJvbXB0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBibG9jazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBQcm9tcHQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1yb3V0ZXIvZXMvUHJvbXB0LmpzIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IGdlbmVyYXRlUGF0aCBmcm9tIFwiLi9nZW5lcmF0ZVBhdGhcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgdXBkYXRpbmcgdGhlIGxvY2F0aW9uIHByb2dyYW1tYXRpY2FsbHlcbiAqIHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxudmFyIFJlZGlyZWN0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJlZGlyZWN0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWRpcmVjdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVkaXJlY3QpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBSZWRpcmVjdC5wcm90b3R5cGUuaXNTdGF0aWMgPSBmdW5jdGlvbiBpc1N0YXRpYygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnJvdXRlciAmJiB0aGlzLmNvbnRleHQucm91dGVyLnN0YXRpY0NvbnRleHQ7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICBpZiAodGhpcy5pc1N0YXRpYygpKSB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAoIXRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgcHJldlRvID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcbiAgICB2YXIgbmV4dFRvID0gY3JlYXRlTG9jYXRpb24odGhpcy5wcm9wcy50byk7XG5cbiAgICBpZiAobG9jYXRpb25zQXJlRXF1YWwocHJldlRvLCBuZXh0VG8pKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIllvdSB0cmllZCB0byByZWRpcmVjdCB0byB0aGUgc2FtZSByb3V0ZSB5b3UncmUgY3VycmVudGx5IG9uOiBcIiArIChcIlxcXCJcIiArIG5leHRUby5wYXRobmFtZSArIG5leHRUby5zZWFyY2ggKyBcIlxcXCJcIikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wdXRlVG8gPSBmdW5jdGlvbiBjb21wdXRlVG8oX3JlZikge1xuICAgIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgICB0byA9IF9yZWYudG87XG5cbiAgICBpZiAoY29tcHV0ZWRNYXRjaCkge1xuICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0bztcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucGVyZm9ybSA9IGZ1bmN0aW9uIHBlcmZvcm0oKSB7XG4gICAgdmFyIGhpc3RvcnkgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgdmFyIHB1c2ggPSB0aGlzLnByb3BzLnB1c2g7XG5cbiAgICB2YXIgdG8gPSB0aGlzLmNvbXB1dGVUbyh0aGlzLnByb3BzKTtcblxuICAgIGlmIChwdXNoKSB7XG4gICAgICBoaXN0b3J5LnB1c2godG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaXN0b3J5LnJlcGxhY2UodG8pO1xuICAgIH1cbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSZWRpcmVjdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICBjb21wdXRlZE1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LCAvLyBwcml2YXRlLCBmcm9tIDxTd2l0Y2g+XG4gIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbn07XG5SZWRpcmVjdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHB1c2g6IGZhbHNlXG59O1xuUmVkaXJlY3QuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICByZXBsYWNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUmVkaXJlY3Q7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1yb3V0ZXIvZXMvUmVkaXJlY3QuanMiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGNyZWF0ZVBhdGggfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxudmFyIGFkZExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufTtcblxudmFyIGFkZEJhc2VuYW1lID0gZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn07XG5cbnZhciBzdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcblxuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn07XG5cbnZhciBjcmVhdGVVUkwgPSBmdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59O1xuXG52YXIgc3RhdGljSGFuZGxlciA9IGZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSk7XG4gIH07XG59O1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cbnZhciBTdGF0aWNSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0aWNSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNyZWF0ZUhyZWYgPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChfdGhpcy5wcm9wcy5iYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dDtcblxuICAgICAgY29udGV4dC5hY3Rpb24gPSBcIlBVU0hcIjtcbiAgICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICAgIH0sIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gXCJSRVBMQUNFXCI7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjoge1xuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLmNvbnRleHRcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJhc2VuYW1lID0gX3Byb3BzLmJhc2VuYW1lLFxuICAgICAgICBjb250ZXh0ID0gX3Byb3BzLmNvbnRleHQsXG4gICAgICAgIGxvY2F0aW9uID0gX3Byb3BzLmxvY2F0aW9uLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFtcImJhc2VuYW1lXCIsIFwiY29udGV4dFwiLCBcImxvY2F0aW9uXCJdKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogdGhpcy5jcmVhdGVIcmVmLFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHByb3BzLCB7IGhpc3Rvcnk6IGhpc3RvcnkgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbn07XG5TdGF0aWNSb3V0ZXIuZGVmYXVsdFByb3BzID0ge1xuICBiYXNlbmFtZTogXCJcIixcbiAgbG9jYXRpb246IFwiL1wiXG59O1xuU3RhdGljUm91dGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBTdGF0aWNSb3V0ZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyLmpzIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCIuL21hdGNoUGF0aFwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN3aXRjaCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcm91dGUgPSB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuXG4gICAgdmFyIG1hdGNoID0gdm9pZCAwLFxuICAgICAgICBjaGlsZCA9IHZvaWQgMDtcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgICAgdmFyIF9lbGVtZW50JHByb3BzID0gZWxlbWVudC5wcm9wcyxcbiAgICAgICAgICAgIHBhdGhQcm9wID0gX2VsZW1lbnQkcHJvcHMucGF0aCxcbiAgICAgICAgICAgIGV4YWN0ID0gX2VsZW1lbnQkcHJvcHMuZXhhY3QsXG4gICAgICAgICAgICBzdHJpY3QgPSBfZWxlbWVudCRwcm9wcy5zdHJpY3QsXG4gICAgICAgICAgICBzZW5zaXRpdmUgPSBfZWxlbWVudCRwcm9wcy5zZW5zaXRpdmUsXG4gICAgICAgICAgICBmcm9tID0gX2VsZW1lbnQkcHJvcHMuZnJvbTtcblxuICAgICAgICB2YXIgcGF0aCA9IHBhdGhQcm9wIHx8IGZyb207XG5cbiAgICAgICAgY2hpbGQgPSBlbGVtZW50O1xuICAgICAgICBtYXRjaCA9IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBleGFjdDogZXhhY3QsIHN0cmljdDogc3RyaWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9LCByb3V0ZS5tYXRjaCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHsgbG9jYXRpb246IGxvY2F0aW9uLCBjb21wdXRlZE1hdGNoOiBtYXRjaCB9KSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3dpdGNoLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvdXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtcm91dGVyL2VzL1N3aXRjaC5qcyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tIFwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIjtcbmltcG9ydCBSb3V0ZSBmcm9tIFwiLi9Sb3V0ZVwiO1xuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG52YXIgd2l0aFJvdXRlciA9IGZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcIndyYXBwZWRDb21wb25lbnRSZWZcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHtcbiAgICAgIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbihyb3V0ZUNvbXBvbmVudFByb3BzKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCByb3V0ZUNvbXBvbmVudFByb3BzLCB7XG4gICAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gXCJ3aXRoUm91dGVyKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIjtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuICBDLnByb3BUeXBlcyA9IHtcbiAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMuZnVuY1xuICB9O1xuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC1yb3V0ZXIvZXMvd2l0aFJvdXRlci5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRTY3JvbGxUb3AgPSBnZXRTY3JvbGxUb3A7XG5leHBvcnRzLnNldFNjcm9sbFRvcCA9IHNldFNjcm9sbFRvcDtcbmV4cG9ydHMuZ2V0T2Zmc2V0VG9wID0gZ2V0T2Zmc2V0VG9wO1xuZnVuY3Rpb24gZ2V0U2Nyb2xsVG9wKCkge1xuICAvLyBqUXVlcnkgPT4gJCgnaHRtbCwgYm9keScpLnNjcm9sbFRvcFxuICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDtcbn1cblxuZnVuY3Rpb24gc2V0U2Nyb2xsVG9wKHBvc2l0aW9uKSB7XG4gIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPSBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IHBvc2l0aW9uO1xufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXRUb3AoZWxlbWVudCkge1xuICB2YXIgX2VsZW1lbnQkZ2V0Qm91bmRpbmdDID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIHRvcCA9IF9lbGVtZW50JGdldEJvdW5kaW5nQy50b3A7XG5cbiAgcmV0dXJuIHRvcCArIGdldFNjcm9sbFRvcCgpO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtc2Nyb2xsY2hvci9saWIvdXRpbHMuanMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfc2VydmVyID0gcmVxdWlyZSgncmVhY3QtZG9tL3NlcnZlcicpO1xuXG52YXIgX3NlcnZlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXJ2ZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svcmVhY3Qtc3RhcnRlci9pc3N1ZXMvMzdcbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbnZhciBTVkdJbmplY3RvciA9IGlzQnJvd3NlciA/IHJlcXVpcmUoJ3N2Zy1pbmplY3RvcicpIDogdW5kZWZpbmVkO1xuXG52YXIgUmVhY3RTVkcgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmVhY3RTVkcsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJlYWN0U1ZHKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWFjdFNWRyk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gUmVhY3RTVkcuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihSZWFjdFNWRykpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnJlZkNhbGxiYWNrID0gZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgX3RoaXMucmVtb3ZlU1ZHKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgX3RoaXMucmVuZGVyU1ZHKCk7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmVhY3RTVkcsIFt7XG4gICAga2V5OiAncmVuZGVyU1ZHJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyU1ZHKCkge1xuICAgICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0aGlzLnByb3BzO1xuXG4gICAgICBpZiAodGhpcy5jb250YWluZXIgaW5zdGFuY2VvZiBOb2RlKSB7XG4gICAgICAgIHZhciBlYWNoID0gcHJvcHMuY2FsbGJhY2ssXG4gICAgICAgICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgICBldmFsU2NyaXB0cyA9IHByb3BzLmV2YWxTY3JpcHRzLFxuICAgICAgICAgICAgcGF0aCA9IHByb3BzLnBhdGgsXG4gICAgICAgICAgICBzdHlsZSA9IHByb3BzLnN0eWxlO1xuXG5cbiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBkaXYuaW5uZXJIVE1MID0gX3NlcnZlcjIuZGVmYXVsdC5yZW5kZXJUb1N0YXRpY01hcmt1cChfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogY2xhc3NOYW1lLCAnZGF0YS1zcmMnOiBwYXRoLCBzdHlsZTogc3R5bGUgfSlcbiAgICAgICAgKSk7XG5cbiAgICAgICAgdmFyIHdyYXBwZXIgPSB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXYuZmlyc3RDaGlsZCk7XG5cbiAgICAgICAgU1ZHSW5qZWN0b3Iod3JhcHBlci5maXJzdENoaWxkLCB7XG4gICAgICAgICAgZXZhbFNjcmlwdHM6IGV2YWxTY3JpcHRzLFxuICAgICAgICAgIGVhY2g6IGVhY2hcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlU1ZHJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlU1ZHKCkge1xuICAgICAgaWYgKHRoaXMuY29udGFpbmVyIGluc3RhbmNlb2YgTm9kZSAmJiB0aGlzLmNvbnRhaW5lci5maXJzdENoaWxkIGluc3RhbmNlb2YgTm9kZSkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVDaGlsZCh0aGlzLmNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHRoaXMucmVtb3ZlU1ZHKCk7XG4gICAgICB0aGlzLnJlbmRlclNWRyhuZXh0UHJvcHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgcmVmOiB0aGlzLnJlZkNhbGxiYWNrLCBjbGFzc05hbWU6IHRoaXMucHJvcHMud3JhcHBlckNsYXNzTmFtZSB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVhY3RTVkc7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5SZWFjdFNWRy5kZWZhdWx0UHJvcHMgPSB7XG4gIGNhbGxiYWNrOiBmdW5jdGlvbiBjYWxsYmFjaygpIHt9LFxuICBjbGFzc05hbWU6IG51bGwsXG4gIGV2YWxTY3JpcHRzOiAnbmV2ZXInLFxuICBzdHlsZToge30sXG4gIHdyYXBwZXJDbGFzc05hbWU6IG51bGxcbn07XG5SZWFjdFNWRy5wcm9wVHlwZXMgPSB7XG4gIGNhbGxiYWNrOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGV2YWxTY3JpcHRzOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFsnYWx3YXlzJywgJ29uY2UnLCAnbmV2ZXInXSksXG4gIHBhdGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgd3JhcHBlckNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBSZWFjdFNWRztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3Qtc3ZnL2xpYi9pbmRleC5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEVzY2FwZSBhbmQgd3JhcCBrZXkgc28gaXQgaXMgc2FmZSB0byB1c2UgYXMgYSByZWFjdGlkXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSB0byBiZSBlc2NhcGVkLlxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgZXNjYXBlZCBrZXkuXG4gKi9cblxuZnVuY3Rpb24gZXNjYXBlKGtleSkge1xuICB2YXIgZXNjYXBlUmVnZXggPSAvWz06XS9nO1xuICB2YXIgZXNjYXBlckxvb2t1cCA9IHtcbiAgICAnPSc6ICc9MCcsXG4gICAgJzonOiAnPTInXG4gIH07XG4gIHZhciBlc2NhcGVkU3RyaW5nID0gKCcnICsga2V5KS5yZXBsYWNlKGVzY2FwZVJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICByZXR1cm4gZXNjYXBlckxvb2t1cFttYXRjaF07XG4gIH0pO1xuXG4gIHJldHVybiAnJCcgKyBlc2NhcGVkU3RyaW5nO1xufVxuXG4vKipcbiAqIFVuZXNjYXBlIGFuZCB1bndyYXAga2V5IGZvciBodW1hbi1yZWFkYWJsZSBkaXNwbGF5XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSB0byB1bmVzY2FwZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIHVuZXNjYXBlZCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHVuZXNjYXBlKGtleSkge1xuICB2YXIgdW5lc2NhcGVSZWdleCA9IC8oPTB8PTIpL2c7XG4gIHZhciB1bmVzY2FwZXJMb29rdXAgPSB7XG4gICAgJz0wJzogJz0nLFxuICAgICc9Mic6ICc6J1xuICB9O1xuICB2YXIga2V5U3Vic3RyaW5nID0ga2V5WzBdID09PSAnLicgJiYga2V5WzFdID09PSAnJCcgPyBrZXkuc3Vic3RyaW5nKDIpIDoga2V5LnN1YnN0cmluZygxKTtcblxuICByZXR1cm4gKCcnICsga2V5U3Vic3RyaW5nKS5yZXBsYWNlKHVuZXNjYXBlUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiB1bmVzY2FwZXJMb29rdXBbbWF0Y2hdO1xuICB9KTtcbn1cblxudmFyIEtleUVzY2FwZVV0aWxzID0ge1xuICBlc2NhcGU6IGVzY2FwZSxcbiAgdW5lc2NhcGU6IHVuZXNjYXBlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEtleUVzY2FwZVV0aWxzO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QvbGliL0tleUVzY2FwZVV0aWxzLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBTdGF0aWMgcG9vbGVycy4gU2V2ZXJhbCBjdXN0b20gdmVyc2lvbnMgZm9yIGVhY2ggcG90ZW50aWFsIG51bWJlciBvZlxuICogYXJndW1lbnRzLiBBIGNvbXBsZXRlbHkgZ2VuZXJpYyBwb29sZXIgaXMgZWFzeSB0byBpbXBsZW1lbnQsIGJ1dCB3b3VsZFxuICogcmVxdWlyZSBhY2Nlc3NpbmcgdGhlIGBhcmd1bWVudHNgIG9iamVjdC4gSW4gZWFjaCBvZiB0aGVzZSwgYHRoaXNgIHJlZmVycyB0b1xuICogdGhlIENsYXNzIGl0c2VsZiwgbm90IGFuIGluc3RhbmNlLiBJZiBhbnkgb3RoZXJzIGFyZSBuZWVkZWQsIHNpbXBseSBhZGQgdGhlbVxuICogaGVyZSwgb3IgaW4gdGhlaXIgb3duIGZpbGVzLlxuICovXG52YXIgb25lQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbiAoY29weUZpZWxkc0Zyb20pIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgY29weUZpZWxkc0Zyb20pO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGNvcHlGaWVsZHNGcm9tKTtcbiAgfVxufTtcblxudmFyIHR3b0FyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24gKGExLCBhMikge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMik7XG4gIH1cbn07XG5cbnZhciB0aHJlZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24gKGExLCBhMiwgYTMpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyLCBhMyk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMyk7XG4gIH1cbn07XG5cbnZhciBmb3VyQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbiAoYTEsIGEyLCBhMywgYTQpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyLCBhMywgYTQpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMiwgYTMsIGE0KTtcbiAgfVxufTtcblxudmFyIHN0YW5kYXJkUmVsZWFzZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgIShpbnN0YW5jZSBpbnN0YW5jZW9mIEtsYXNzKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdUcnlpbmcgdG8gcmVsZWFzZSBhbiBpbnN0YW5jZSBpbnRvIGEgcG9vbCBvZiBhIGRpZmZlcmVudCB0eXBlLicpIDogX3Byb2RJbnZhcmlhbnQoJzI1JykgOiB2b2lkIDA7XG4gIGluc3RhbmNlLmRlc3RydWN0b3IoKTtcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGggPCBLbGFzcy5wb29sU2l6ZSkge1xuICAgIEtsYXNzLmluc3RhbmNlUG9vbC5wdXNoKGluc3RhbmNlKTtcbiAgfVxufTtcblxudmFyIERFRkFVTFRfUE9PTF9TSVpFID0gMTA7XG52YXIgREVGQVVMVF9QT09MRVIgPSBvbmVBcmd1bWVudFBvb2xlcjtcblxuLyoqXG4gKiBBdWdtZW50cyBgQ29weUNvbnN0cnVjdG9yYCB0byBiZSBhIHBvb2xhYmxlIGNsYXNzLCBhdWdtZW50aW5nIG9ubHkgdGhlIGNsYXNzXG4gKiBpdHNlbGYgKHN0YXRpY2FsbHkpIG5vdCBhZGRpbmcgYW55IHByb3RvdHlwaWNhbCBmaWVsZHMuIEFueSBDb3B5Q29uc3RydWN0b3JcbiAqIHlvdSBnaXZlIHRoaXMgbWF5IGhhdmUgYSBgcG9vbFNpemVgIHByb3BlcnR5LCBhbmQgd2lsbCBsb29rIGZvciBhXG4gKiBwcm90b3R5cGljYWwgYGRlc3RydWN0b3JgIG9uIGluc3RhbmNlcy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBDb3B5Q29uc3RydWN0b3IgQ29uc3RydWN0b3IgdGhhdCBjYW4gYmUgdXNlZCB0byByZXNldC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBvb2xlciBDdXN0b21pemFibGUgcG9vbGVyLlxuICovXG52YXIgYWRkUG9vbGluZ1RvID0gZnVuY3Rpb24gKENvcHlDb25zdHJ1Y3RvciwgcG9vbGVyKSB7XG4gIC8vIENhc3RpbmcgYXMgYW55IHNvIHRoYXQgZmxvdyBpZ25vcmVzIHRoZSBhY3R1YWwgaW1wbGVtZW50YXRpb24gYW5kIHRydXN0c1xuICAvLyBpdCB0byBtYXRjaCB0aGUgdHlwZSB3ZSBkZWNsYXJlZFxuICB2YXIgTmV3S2xhc3MgPSBDb3B5Q29uc3RydWN0b3I7XG4gIE5ld0tsYXNzLmluc3RhbmNlUG9vbCA9IFtdO1xuICBOZXdLbGFzcy5nZXRQb29sZWQgPSBwb29sZXIgfHwgREVGQVVMVF9QT09MRVI7XG4gIGlmICghTmV3S2xhc3MucG9vbFNpemUpIHtcbiAgICBOZXdLbGFzcy5wb29sU2l6ZSA9IERFRkFVTFRfUE9PTF9TSVpFO1xuICB9XG4gIE5ld0tsYXNzLnJlbGVhc2UgPSBzdGFuZGFyZFJlbGVhc2VyO1xuICByZXR1cm4gTmV3S2xhc3M7XG59O1xuXG52YXIgUG9vbGVkQ2xhc3MgPSB7XG4gIGFkZFBvb2xpbmdUbzogYWRkUG9vbGluZ1RvLFxuICBvbmVBcmd1bWVudFBvb2xlcjogb25lQXJndW1lbnRQb29sZXIsXG4gIHR3b0FyZ3VtZW50UG9vbGVyOiB0d29Bcmd1bWVudFBvb2xlcixcbiAgdGhyZWVBcmd1bWVudFBvb2xlcjogdGhyZWVBcmd1bWVudFBvb2xlcixcbiAgZm91ckFyZ3VtZW50UG9vbGVyOiBmb3VyQXJndW1lbnRQb29sZXJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUG9vbGVkQ2xhc3M7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC9saWIvUG9vbGVkQ2xhc3MuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoJy4vUG9vbGVkQ2xhc3MnKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZSgnLi90cmF2ZXJzZUFsbENoaWxkcmVuJyk7XG5cbnZhciB0d29Bcmd1bWVudFBvb2xlciA9IFBvb2xlZENsYXNzLnR3b0FyZ3VtZW50UG9vbGVyO1xudmFyIGZvdXJBcmd1bWVudFBvb2xlciA9IFBvb2xlZENsYXNzLmZvdXJBcmd1bWVudFBvb2xlcjtcblxudmFyIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4ID0gL1xcLysvZztcbmZ1bmN0aW9uIGVzY2FwZVVzZXJQcm92aWRlZEtleSh0ZXh0KSB7XG4gIHJldHVybiAoJycgKyB0ZXh0KS5yZXBsYWNlKHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4LCAnJCYvJyk7XG59XG5cbi8qKlxuICogUG9vbGVkQ2xhc3MgcmVwcmVzZW50aW5nIHRoZSBib29ra2VlcGluZyBhc3NvY2lhdGVkIHdpdGggcGVyZm9ybWluZyBhIGNoaWxkXG4gKiB0cmF2ZXJzYWwuIEFsbG93cyBhdm9pZGluZyBiaW5kaW5nIGNhbGxiYWNrcy5cbiAqXG4gKiBAY29uc3RydWN0b3IgRm9yRWFjaEJvb2tLZWVwaW5nXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gZm9yRWFjaEZ1bmN0aW9uIEZ1bmN0aW9uIHRvIHBlcmZvcm0gdHJhdmVyc2FsIHdpdGguXG4gKiBAcGFyYW0gez8qfSBmb3JFYWNoQ29udGV4dCBDb250ZXh0IHRvIHBlcmZvcm0gY29udGV4dCB3aXRoLlxuICovXG5mdW5jdGlvbiBGb3JFYWNoQm9va0tlZXBpbmcoZm9yRWFjaEZ1bmN0aW9uLCBmb3JFYWNoQ29udGV4dCkge1xuICB0aGlzLmZ1bmMgPSBmb3JFYWNoRnVuY3Rpb247XG4gIHRoaXMuY29udGV4dCA9IGZvckVhY2hDb250ZXh0O1xuICB0aGlzLmNvdW50ID0gMDtcbn1cbkZvckVhY2hCb29rS2VlcGluZy5wcm90b3R5cGUuZGVzdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5mdW5jID0gbnVsbDtcbiAgdGhpcy5jb250ZXh0ID0gbnVsbDtcbiAgdGhpcy5jb3VudCA9IDA7XG59O1xuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKEZvckVhY2hCb29rS2VlcGluZywgdHdvQXJndW1lbnRQb29sZXIpO1xuXG5mdW5jdGlvbiBmb3JFYWNoU2luZ2xlQ2hpbGQoYm9va0tlZXBpbmcsIGNoaWxkLCBuYW1lKSB7XG4gIHZhciBmdW5jID0gYm9va0tlZXBpbmcuZnVuYyxcbiAgICAgIGNvbnRleHQgPSBib29rS2VlcGluZy5jb250ZXh0O1xuXG4gIGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgYm9va0tlZXBpbmcuY291bnQrKyk7XG59XG5cbi8qKlxuICogSXRlcmF0ZXMgdGhyb3VnaCBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdG9wLWxldmVsLWFwaS5odG1sI3JlYWN0LmNoaWxkcmVuLmZvcmVhY2hcbiAqXG4gKiBUaGUgcHJvdmlkZWQgZm9yRWFjaEZ1bmMoY2hpbGQsIGluZGV4KSB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaFxuICogbGVhZiBjaGlsZC5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKiwgaW50KX0gZm9yRWFjaEZ1bmNcbiAqIEBwYXJhbSB7Kn0gZm9yRWFjaENvbnRleHQgQ29udGV4dCBmb3IgZm9yRWFjaENvbnRleHQuXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2hDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG4gIHZhciB0cmF2ZXJzZUNvbnRleHQgPSBGb3JFYWNoQm9va0tlZXBpbmcuZ2V0UG9vbGVkKGZvckVhY2hGdW5jLCBmb3JFYWNoQ29udGV4dCk7XG4gIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hTaW5nbGVDaGlsZCwgdHJhdmVyc2VDb250ZXh0KTtcbiAgRm9yRWFjaEJvb2tLZWVwaW5nLnJlbGVhc2UodHJhdmVyc2VDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBQb29sZWRDbGFzcyByZXByZXNlbnRpbmcgdGhlIGJvb2trZWVwaW5nIGFzc29jaWF0ZWQgd2l0aCBwZXJmb3JtaW5nIGEgY2hpbGRcbiAqIG1hcHBpbmcuIEFsbG93cyBhdm9pZGluZyBiaW5kaW5nIGNhbGxiYWNrcy5cbiAqXG4gKiBAY29uc3RydWN0b3IgTWFwQm9va0tlZXBpbmdcbiAqIEBwYXJhbSB7ISp9IG1hcFJlc3VsdCBPYmplY3QgY29udGFpbmluZyB0aGUgb3JkZXJlZCBtYXAgb2YgcmVzdWx0cy5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBtYXBGdW5jdGlvbiBGdW5jdGlvbiB0byBwZXJmb3JtIG1hcHBpbmcgd2l0aC5cbiAqIEBwYXJhbSB7Pyp9IG1hcENvbnRleHQgQ29udGV4dCB0byBwZXJmb3JtIG1hcHBpbmcgd2l0aC5cbiAqL1xuZnVuY3Rpb24gTWFwQm9va0tlZXBpbmcobWFwUmVzdWx0LCBrZXlQcmVmaXgsIG1hcEZ1bmN0aW9uLCBtYXBDb250ZXh0KSB7XG4gIHRoaXMucmVzdWx0ID0gbWFwUmVzdWx0O1xuICB0aGlzLmtleVByZWZpeCA9IGtleVByZWZpeDtcbiAgdGhpcy5mdW5jID0gbWFwRnVuY3Rpb247XG4gIHRoaXMuY29udGV4dCA9IG1hcENvbnRleHQ7XG4gIHRoaXMuY291bnQgPSAwO1xufVxuTWFwQm9va0tlZXBpbmcucHJvdG90eXBlLmRlc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVzdWx0ID0gbnVsbDtcbiAgdGhpcy5rZXlQcmVmaXggPSBudWxsO1xuICB0aGlzLmZ1bmMgPSBudWxsO1xuICB0aGlzLmNvbnRleHQgPSBudWxsO1xuICB0aGlzLmNvdW50ID0gMDtcbn07XG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oTWFwQm9va0tlZXBpbmcsIGZvdXJBcmd1bWVudFBvb2xlcik7XG5cbmZ1bmN0aW9uIG1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQoYm9va0tlZXBpbmcsIGNoaWxkLCBjaGlsZEtleSkge1xuICB2YXIgcmVzdWx0ID0gYm9va0tlZXBpbmcucmVzdWx0LFxuICAgICAga2V5UHJlZml4ID0gYm9va0tlZXBpbmcua2V5UHJlZml4LFxuICAgICAgZnVuYyA9IGJvb2tLZWVwaW5nLmZ1bmMsXG4gICAgICBjb250ZXh0ID0gYm9va0tlZXBpbmcuY29udGV4dDtcblxuXG4gIHZhciBtYXBwZWRDaGlsZCA9IGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgYm9va0tlZXBpbmcuY291bnQrKyk7XG4gIGlmIChBcnJheS5pc0FycmF5KG1hcHBlZENoaWxkKSkge1xuICAgIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwobWFwcGVkQ2hpbGQsIHJlc3VsdCwgY2hpbGRLZXksIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCk7XG4gIH0gZWxzZSBpZiAobWFwcGVkQ2hpbGQgIT0gbnVsbCkge1xuICAgIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQobWFwcGVkQ2hpbGQpKSB7XG4gICAgICBtYXBwZWRDaGlsZCA9IFJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VLZXkobWFwcGVkQ2hpbGQsXG4gICAgICAvLyBLZWVwIGJvdGggdGhlIChtYXBwZWQpIGFuZCBvbGQga2V5cyBpZiB0aGV5IGRpZmZlciwganVzdCBhc1xuICAgICAgLy8gdHJhdmVyc2VBbGxDaGlsZHJlbiB1c2VkIHRvIGRvIGZvciBvYmplY3RzIGFzIGNoaWxkcmVuXG4gICAgICBrZXlQcmVmaXggKyAobWFwcGVkQ2hpbGQua2V5ICYmICghY2hpbGQgfHwgY2hpbGQua2V5ICE9PSBtYXBwZWRDaGlsZC5rZXkpID8gZXNjYXBlVXNlclByb3ZpZGVkS2V5KG1hcHBlZENoaWxkLmtleSkgKyAnLycgOiAnJykgKyBjaGlsZEtleSk7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKG1hcHBlZENoaWxkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsKGNoaWxkcmVuLCBhcnJheSwgcHJlZml4LCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBlc2NhcGVkUHJlZml4ID0gJyc7XG4gIGlmIChwcmVmaXggIT0gbnVsbCkge1xuICAgIGVzY2FwZWRQcmVmaXggPSBlc2NhcGVVc2VyUHJvdmlkZWRLZXkocHJlZml4KSArICcvJztcbiAgfVxuICB2YXIgdHJhdmVyc2VDb250ZXh0ID0gTWFwQm9va0tlZXBpbmcuZ2V0UG9vbGVkKGFycmF5LCBlc2NhcGVkUHJlZml4LCBmdW5jLCBjb250ZXh0KTtcbiAgdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCwgdHJhdmVyc2VDb250ZXh0KTtcbiAgTWFwQm9va0tlZXBpbmcucmVsZWFzZSh0cmF2ZXJzZUNvbnRleHQpO1xufVxuXG4vKipcbiAqIE1hcHMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLlxuICpcbiAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdC5jaGlsZHJlbi5tYXBcbiAqXG4gKiBUaGUgcHJvdmlkZWQgbWFwRnVuY3Rpb24oY2hpbGQsIGtleSwgaW5kZXgpIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG4gKiBsZWFmIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHtmdW5jdGlvbigqLCBpbnQpfSBmdW5jIFRoZSBtYXAgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgQ29udGV4dCBmb3IgbWFwRnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCBjb250YWluaW5nIHRoZSBvcmRlcmVkIG1hcCBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBtYXBDaGlsZHJlbihjaGlsZHJlbiwgZnVuYywgY29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwoY2hpbGRyZW4sIHJlc3VsdCwgbnVsbCwgZnVuYywgY29udGV4dCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hTaW5nbGVDaGlsZER1bW15KHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQ291bnQgdGhlIG51bWJlciBvZiBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzXG4gKiBgcHJvcHMuY2hpbGRyZW5gLlxuICpcbiAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdC5jaGlsZHJlbi5jb3VudFxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuLlxuICovXG5mdW5jdGlvbiBjb3VudENoaWxkcmVuKGNoaWxkcmVuLCBjb250ZXh0KSB7XG4gIHJldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSwgbnVsbCk7XG59XG5cbi8qKlxuICogRmxhdHRlbiBhIGNoaWxkcmVuIG9iamVjdCAodHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gKSBhbmRcbiAqIHJldHVybiBhbiBhcnJheSB3aXRoIGFwcHJvcHJpYXRlbHkgcmUta2V5ZWQgY2hpbGRyZW4uXG4gKlxuICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdG9wLWxldmVsLWFwaS5odG1sI3JlYWN0LmNoaWxkcmVuLnRvYXJyYXlcbiAqL1xuZnVuY3Rpb24gdG9BcnJheShjaGlsZHJlbikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwoY2hpbGRyZW4sIHJlc3VsdCwgbnVsbCwgZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIFJlYWN0Q2hpbGRyZW4gPSB7XG4gIGZvckVhY2g6IGZvckVhY2hDaGlsZHJlbixcbiAgbWFwOiBtYXBDaGlsZHJlbixcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbDogbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbCxcbiAgY291bnQ6IGNvdW50Q2hpbGRyZW4sXG4gIHRvQXJyYXk6IHRvQXJyYXlcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDaGlsZHJlbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0L2xpYi9SZWFjdENoaWxkcmVuLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBmYWN0b3J5IHRoYXQgY3JlYXRlcyBIVE1MIHRhZyBlbGVtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgY3JlYXRlRE9NRmFjdG9yeSA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50VmFsaWRhdG9yJyk7XG4gIGNyZWF0ZURPTUZhY3RvcnkgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRmFjdG9yeTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwcGluZyBmcm9tIHN1cHBvcnRlZCBIVE1MIHRhZ3MgdG8gYFJlYWN0RE9NQ29tcG9uZW50YCBjbGFzc2VzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xudmFyIFJlYWN0RE9NRmFjdG9yaWVzID0ge1xuICBhOiBjcmVhdGVET01GYWN0b3J5KCdhJyksXG4gIGFiYnI6IGNyZWF0ZURPTUZhY3RvcnkoJ2FiYnInKSxcbiAgYWRkcmVzczogY3JlYXRlRE9NRmFjdG9yeSgnYWRkcmVzcycpLFxuICBhcmVhOiBjcmVhdGVET01GYWN0b3J5KCdhcmVhJyksXG4gIGFydGljbGU6IGNyZWF0ZURPTUZhY3RvcnkoJ2FydGljbGUnKSxcbiAgYXNpZGU6IGNyZWF0ZURPTUZhY3RvcnkoJ2FzaWRlJyksXG4gIGF1ZGlvOiBjcmVhdGVET01GYWN0b3J5KCdhdWRpbycpLFxuICBiOiBjcmVhdGVET01GYWN0b3J5KCdiJyksXG4gIGJhc2U6IGNyZWF0ZURPTUZhY3RvcnkoJ2Jhc2UnKSxcbiAgYmRpOiBjcmVhdGVET01GYWN0b3J5KCdiZGknKSxcbiAgYmRvOiBjcmVhdGVET01GYWN0b3J5KCdiZG8nKSxcbiAgYmlnOiBjcmVhdGVET01GYWN0b3J5KCdiaWcnKSxcbiAgYmxvY2txdW90ZTogY3JlYXRlRE9NRmFjdG9yeSgnYmxvY2txdW90ZScpLFxuICBib2R5OiBjcmVhdGVET01GYWN0b3J5KCdib2R5JyksXG4gIGJyOiBjcmVhdGVET01GYWN0b3J5KCdicicpLFxuICBidXR0b246IGNyZWF0ZURPTUZhY3RvcnkoJ2J1dHRvbicpLFxuICBjYW52YXM6IGNyZWF0ZURPTUZhY3RvcnkoJ2NhbnZhcycpLFxuICBjYXB0aW9uOiBjcmVhdGVET01GYWN0b3J5KCdjYXB0aW9uJyksXG4gIGNpdGU6IGNyZWF0ZURPTUZhY3RvcnkoJ2NpdGUnKSxcbiAgY29kZTogY3JlYXRlRE9NRmFjdG9yeSgnY29kZScpLFxuICBjb2w6IGNyZWF0ZURPTUZhY3RvcnkoJ2NvbCcpLFxuICBjb2xncm91cDogY3JlYXRlRE9NRmFjdG9yeSgnY29sZ3JvdXAnKSxcbiAgZGF0YTogY3JlYXRlRE9NRmFjdG9yeSgnZGF0YScpLFxuICBkYXRhbGlzdDogY3JlYXRlRE9NRmFjdG9yeSgnZGF0YWxpc3QnKSxcbiAgZGQ6IGNyZWF0ZURPTUZhY3RvcnkoJ2RkJyksXG4gIGRlbDogY3JlYXRlRE9NRmFjdG9yeSgnZGVsJyksXG4gIGRldGFpbHM6IGNyZWF0ZURPTUZhY3RvcnkoJ2RldGFpbHMnKSxcbiAgZGZuOiBjcmVhdGVET01GYWN0b3J5KCdkZm4nKSxcbiAgZGlhbG9nOiBjcmVhdGVET01GYWN0b3J5KCdkaWFsb2cnKSxcbiAgZGl2OiBjcmVhdGVET01GYWN0b3J5KCdkaXYnKSxcbiAgZGw6IGNyZWF0ZURPTUZhY3RvcnkoJ2RsJyksXG4gIGR0OiBjcmVhdGVET01GYWN0b3J5KCdkdCcpLFxuICBlbTogY3JlYXRlRE9NRmFjdG9yeSgnZW0nKSxcbiAgZW1iZWQ6IGNyZWF0ZURPTUZhY3RvcnkoJ2VtYmVkJyksXG4gIGZpZWxkc2V0OiBjcmVhdGVET01GYWN0b3J5KCdmaWVsZHNldCcpLFxuICBmaWdjYXB0aW9uOiBjcmVhdGVET01GYWN0b3J5KCdmaWdjYXB0aW9uJyksXG4gIGZpZ3VyZTogY3JlYXRlRE9NRmFjdG9yeSgnZmlndXJlJyksXG4gIGZvb3RlcjogY3JlYXRlRE9NRmFjdG9yeSgnZm9vdGVyJyksXG4gIGZvcm06IGNyZWF0ZURPTUZhY3RvcnkoJ2Zvcm0nKSxcbiAgaDE6IGNyZWF0ZURPTUZhY3RvcnkoJ2gxJyksXG4gIGgyOiBjcmVhdGVET01GYWN0b3J5KCdoMicpLFxuICBoMzogY3JlYXRlRE9NRmFjdG9yeSgnaDMnKSxcbiAgaDQ6IGNyZWF0ZURPTUZhY3RvcnkoJ2g0JyksXG4gIGg1OiBjcmVhdGVET01GYWN0b3J5KCdoNScpLFxuICBoNjogY3JlYXRlRE9NRmFjdG9yeSgnaDYnKSxcbiAgaGVhZDogY3JlYXRlRE9NRmFjdG9yeSgnaGVhZCcpLFxuICBoZWFkZXI6IGNyZWF0ZURPTUZhY3RvcnkoJ2hlYWRlcicpLFxuICBoZ3JvdXA6IGNyZWF0ZURPTUZhY3RvcnkoJ2hncm91cCcpLFxuICBocjogY3JlYXRlRE9NRmFjdG9yeSgnaHInKSxcbiAgaHRtbDogY3JlYXRlRE9NRmFjdG9yeSgnaHRtbCcpLFxuICBpOiBjcmVhdGVET01GYWN0b3J5KCdpJyksXG4gIGlmcmFtZTogY3JlYXRlRE9NRmFjdG9yeSgnaWZyYW1lJyksXG4gIGltZzogY3JlYXRlRE9NRmFjdG9yeSgnaW1nJyksXG4gIGlucHV0OiBjcmVhdGVET01GYWN0b3J5KCdpbnB1dCcpLFxuICBpbnM6IGNyZWF0ZURPTUZhY3RvcnkoJ2lucycpLFxuICBrYmQ6IGNyZWF0ZURPTUZhY3RvcnkoJ2tiZCcpLFxuICBrZXlnZW46IGNyZWF0ZURPTUZhY3RvcnkoJ2tleWdlbicpLFxuICBsYWJlbDogY3JlYXRlRE9NRmFjdG9yeSgnbGFiZWwnKSxcbiAgbGVnZW5kOiBjcmVhdGVET01GYWN0b3J5KCdsZWdlbmQnKSxcbiAgbGk6IGNyZWF0ZURPTUZhY3RvcnkoJ2xpJyksXG4gIGxpbms6IGNyZWF0ZURPTUZhY3RvcnkoJ2xpbmsnKSxcbiAgbWFpbjogY3JlYXRlRE9NRmFjdG9yeSgnbWFpbicpLFxuICBtYXA6IGNyZWF0ZURPTUZhY3RvcnkoJ21hcCcpLFxuICBtYXJrOiBjcmVhdGVET01GYWN0b3J5KCdtYXJrJyksXG4gIG1lbnU6IGNyZWF0ZURPTUZhY3RvcnkoJ21lbnUnKSxcbiAgbWVudWl0ZW06IGNyZWF0ZURPTUZhY3RvcnkoJ21lbnVpdGVtJyksXG4gIG1ldGE6IGNyZWF0ZURPTUZhY3RvcnkoJ21ldGEnKSxcbiAgbWV0ZXI6IGNyZWF0ZURPTUZhY3RvcnkoJ21ldGVyJyksXG4gIG5hdjogY3JlYXRlRE9NRmFjdG9yeSgnbmF2JyksXG4gIG5vc2NyaXB0OiBjcmVhdGVET01GYWN0b3J5KCdub3NjcmlwdCcpLFxuICBvYmplY3Q6IGNyZWF0ZURPTUZhY3RvcnkoJ29iamVjdCcpLFxuICBvbDogY3JlYXRlRE9NRmFjdG9yeSgnb2wnKSxcbiAgb3B0Z3JvdXA6IGNyZWF0ZURPTUZhY3RvcnkoJ29wdGdyb3VwJyksXG4gIG9wdGlvbjogY3JlYXRlRE9NRmFjdG9yeSgnb3B0aW9uJyksXG4gIG91dHB1dDogY3JlYXRlRE9NRmFjdG9yeSgnb3V0cHV0JyksXG4gIHA6IGNyZWF0ZURPTUZhY3RvcnkoJ3AnKSxcbiAgcGFyYW06IGNyZWF0ZURPTUZhY3RvcnkoJ3BhcmFtJyksXG4gIHBpY3R1cmU6IGNyZWF0ZURPTUZhY3RvcnkoJ3BpY3R1cmUnKSxcbiAgcHJlOiBjcmVhdGVET01GYWN0b3J5KCdwcmUnKSxcbiAgcHJvZ3Jlc3M6IGNyZWF0ZURPTUZhY3RvcnkoJ3Byb2dyZXNzJyksXG4gIHE6IGNyZWF0ZURPTUZhY3RvcnkoJ3EnKSxcbiAgcnA6IGNyZWF0ZURPTUZhY3RvcnkoJ3JwJyksXG4gIHJ0OiBjcmVhdGVET01GYWN0b3J5KCdydCcpLFxuICBydWJ5OiBjcmVhdGVET01GYWN0b3J5KCdydWJ5JyksXG4gIHM6IGNyZWF0ZURPTUZhY3RvcnkoJ3MnKSxcbiAgc2FtcDogY3JlYXRlRE9NRmFjdG9yeSgnc2FtcCcpLFxuICBzY3JpcHQ6IGNyZWF0ZURPTUZhY3RvcnkoJ3NjcmlwdCcpLFxuICBzZWN0aW9uOiBjcmVhdGVET01GYWN0b3J5KCdzZWN0aW9uJyksXG4gIHNlbGVjdDogY3JlYXRlRE9NRmFjdG9yeSgnc2VsZWN0JyksXG4gIHNtYWxsOiBjcmVhdGVET01GYWN0b3J5KCdzbWFsbCcpLFxuICBzb3VyY2U6IGNyZWF0ZURPTUZhY3RvcnkoJ3NvdXJjZScpLFxuICBzcGFuOiBjcmVhdGVET01GYWN0b3J5KCdzcGFuJyksXG4gIHN0cm9uZzogY3JlYXRlRE9NRmFjdG9yeSgnc3Ryb25nJyksXG4gIHN0eWxlOiBjcmVhdGVET01GYWN0b3J5KCdzdHlsZScpLFxuICBzdWI6IGNyZWF0ZURPTUZhY3RvcnkoJ3N1YicpLFxuICBzdW1tYXJ5OiBjcmVhdGVET01GYWN0b3J5KCdzdW1tYXJ5JyksXG4gIHN1cDogY3JlYXRlRE9NRmFjdG9yeSgnc3VwJyksXG4gIHRhYmxlOiBjcmVhdGVET01GYWN0b3J5KCd0YWJsZScpLFxuICB0Ym9keTogY3JlYXRlRE9NRmFjdG9yeSgndGJvZHknKSxcbiAgdGQ6IGNyZWF0ZURPTUZhY3RvcnkoJ3RkJyksXG4gIHRleHRhcmVhOiBjcmVhdGVET01GYWN0b3J5KCd0ZXh0YXJlYScpLFxuICB0Zm9vdDogY3JlYXRlRE9NRmFjdG9yeSgndGZvb3QnKSxcbiAgdGg6IGNyZWF0ZURPTUZhY3RvcnkoJ3RoJyksXG4gIHRoZWFkOiBjcmVhdGVET01GYWN0b3J5KCd0aGVhZCcpLFxuICB0aW1lOiBjcmVhdGVET01GYWN0b3J5KCd0aW1lJyksXG4gIHRpdGxlOiBjcmVhdGVET01GYWN0b3J5KCd0aXRsZScpLFxuICB0cjogY3JlYXRlRE9NRmFjdG9yeSgndHInKSxcbiAgdHJhY2s6IGNyZWF0ZURPTUZhY3RvcnkoJ3RyYWNrJyksXG4gIHU6IGNyZWF0ZURPTUZhY3RvcnkoJ3UnKSxcbiAgdWw6IGNyZWF0ZURPTUZhY3RvcnkoJ3VsJyksXG4gICd2YXInOiBjcmVhdGVET01GYWN0b3J5KCd2YXInKSxcbiAgdmlkZW86IGNyZWF0ZURPTUZhY3RvcnkoJ3ZpZGVvJyksXG4gIHdicjogY3JlYXRlRE9NRmFjdG9yeSgnd2JyJyksXG5cbiAgLy8gU1ZHXG4gIGNpcmNsZTogY3JlYXRlRE9NRmFjdG9yeSgnY2lyY2xlJyksXG4gIGNsaXBQYXRoOiBjcmVhdGVET01GYWN0b3J5KCdjbGlwUGF0aCcpLFxuICBkZWZzOiBjcmVhdGVET01GYWN0b3J5KCdkZWZzJyksXG4gIGVsbGlwc2U6IGNyZWF0ZURPTUZhY3RvcnkoJ2VsbGlwc2UnKSxcbiAgZzogY3JlYXRlRE9NRmFjdG9yeSgnZycpLFxuICBpbWFnZTogY3JlYXRlRE9NRmFjdG9yeSgnaW1hZ2UnKSxcbiAgbGluZTogY3JlYXRlRE9NRmFjdG9yeSgnbGluZScpLFxuICBsaW5lYXJHcmFkaWVudDogY3JlYXRlRE9NRmFjdG9yeSgnbGluZWFyR3JhZGllbnQnKSxcbiAgbWFzazogY3JlYXRlRE9NRmFjdG9yeSgnbWFzaycpLFxuICBwYXRoOiBjcmVhdGVET01GYWN0b3J5KCdwYXRoJyksXG4gIHBhdHRlcm46IGNyZWF0ZURPTUZhY3RvcnkoJ3BhdHRlcm4nKSxcbiAgcG9seWdvbjogY3JlYXRlRE9NRmFjdG9yeSgncG9seWdvbicpLFxuICBwb2x5bGluZTogY3JlYXRlRE9NRmFjdG9yeSgncG9seWxpbmUnKSxcbiAgcmFkaWFsR3JhZGllbnQ6IGNyZWF0ZURPTUZhY3RvcnkoJ3JhZGlhbEdyYWRpZW50JyksXG4gIHJlY3Q6IGNyZWF0ZURPTUZhY3RvcnkoJ3JlY3QnKSxcbiAgc3RvcDogY3JlYXRlRE9NRmFjdG9yeSgnc3RvcCcpLFxuICBzdmc6IGNyZWF0ZURPTUZhY3RvcnkoJ3N2ZycpLFxuICB0ZXh0OiBjcmVhdGVET01GYWN0b3J5KCd0ZXh0JyksXG4gIHRzcGFuOiBjcmVhdGVET01GYWN0b3J5KCd0c3BhbicpXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NRmFjdG9yaWVzO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QvbGliL1JlYWN0RE9NRmFjdG9yaWVzLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHtcbiAgICBwcm9wOiAncHJvcCcsXG4gICAgY29udGV4dDogJ2NvbnRleHQnLFxuICAgIGNoaWxkQ29udGV4dDogJ2NoaWxkIGNvbnRleHQnXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50JyksXG4gICAgaXNWYWxpZEVsZW1lbnQgPSBfcmVxdWlyZS5pc1ZhbGlkRWxlbWVudDtcblxudmFyIGZhY3RvcnkgPSByZXF1aXJlKCdwcm9wLXR5cGVzL2ZhY3RvcnknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KGlzVmFsaWRFbGVtZW50KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0L2xpYi9SZWFjdFByb3BUeXBlcy5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICcxNS42LjInO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QvbGliL1JlYWN0VmVyc2lvbi5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcycpO1xudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIFJlYWN0Q29tcG9uZW50VHJlZUhvb2s7XG5cbmlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAvLyBUZW1wb3JhcnkgaGFjay5cbiAgLy8gSW5saW5lIHJlcXVpcmVzIGRvbid0IHdvcmsgd2VsbCB3aXRoIEplc3Q6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzI0MFxuICAvLyBSZW1vdmUgdGhlIGlubGluZSByZXF1aXJlcyB3aGVuIHdlIGRvbid0IG5lZWQgdGhlbSBhbnltb3JlOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC83MTc4XG4gIFJlYWN0Q29tcG9uZW50VHJlZUhvb2sgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9uZW50VHJlZUhvb2snKTtcbn1cblxudmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xuXG4vKipcbiAqIEFzc2VydCB0aGF0IHRoZSB2YWx1ZXMgbWF0Y2ggd2l0aCB0aGUgdHlwZSBzcGVjcy5cbiAqIEVycm9yIG1lc3NhZ2VzIGFyZSBtZW1vcml6ZWQgYW5kIHdpbGwgb25seSBiZSBzaG93biBvbmNlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSB0eXBlU3BlY3MgTWFwIG9mIG5hbWUgdG8gYSBSZWFjdFByb3BUeXBlXG4gKiBAcGFyYW0ge29iamVjdH0gdmFsdWVzIFJ1bnRpbWUgdmFsdWVzIHRoYXQgbmVlZCB0byBiZSB0eXBlLWNoZWNrZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBlLmcuIFwicHJvcFwiLCBcImNvbnRleHRcIiwgXCJjaGlsZCBjb250ZXh0XCJcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnROYW1lIE5hbWUgb2YgdGhlIGNvbXBvbmVudCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4gKiBAcGFyYW0gez9vYmplY3R9IGVsZW1lbnQgVGhlIFJlYWN0IGVsZW1lbnQgdGhhdCBpcyBiZWluZyB0eXBlLWNoZWNrZWRcbiAqIEBwYXJhbSB7P251bWJlcn0gZGVidWdJRCBUaGUgUmVhY3QgY29tcG9uZW50IGluc3RhbmNlIHRoYXQgaXMgYmVpbmcgdHlwZS1jaGVja2VkXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjaGVja1JlYWN0VHlwZVNwZWModHlwZVNwZWNzLCB2YWx1ZXMsIGxvY2F0aW9uLCBjb21wb25lbnROYW1lLCBlbGVtZW50LCBkZWJ1Z0lEKSB7XG4gIGZvciAodmFyIHR5cGVTcGVjTmFtZSBpbiB0eXBlU3BlY3MpIHtcbiAgICBpZiAodHlwZVNwZWNzLmhhc093blByb3BlcnR5KHR5cGVTcGVjTmFtZSkpIHtcbiAgICAgIHZhciBlcnJvcjtcbiAgICAgIC8vIFByb3AgdHlwZSB2YWxpZGF0aW9uIG1heSB0aHJvdy4gSW4gY2FzZSB0aGV5IGRvLCB3ZSBkb24ndCB3YW50IHRvXG4gICAgICAvLyBmYWlsIHRoZSByZW5kZXIgcGhhc2Ugd2hlcmUgaXQgZGlkbid0IGZhaWwgYmVmb3JlLiBTbyB3ZSBsb2cgaXQuXG4gICAgICAvLyBBZnRlciB0aGVzZSBoYXZlIGJlZW4gY2xlYW5lZCB1cCwgd2UnbGwgbGV0IHRoZW0gdGhyb3cuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYW4gaW52YXJpYW50IHRoYXQgZ2V0cyBjYXVnaHQuIEl0J3MgdGhlIHNhbWVcbiAgICAgICAgLy8gYmVoYXZpb3IgYXMgd2l0aG91dCB0aGlzIHN0YXRlbWVudCBleGNlcHQgd2l0aCBhIGJldHRlciBtZXNzYWdlLlxuICAgICAgICAhKHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSA9PT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSBSZWFjdC5Qcm9wVHlwZXMuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sIHR5cGVTcGVjTmFtZSkgOiBfcHJvZEludmFyaWFudCgnODQnLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSwgdHlwZVNwZWNOYW1lKSA6IHZvaWQgMDtcbiAgICAgICAgZXJyb3IgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGVycm9yID0gZXg7XG4gICAgICB9XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghZXJyb3IgfHwgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciwgJyVzOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJXMgYCVzYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcgKyAnZnVuY3Rpb24gbXVzdCByZXR1cm4gYG51bGxgIG9yIGFuIGBFcnJvcmAgYnV0IHJldHVybmVkIGEgJXMuICcgKyAnWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgJyArICdjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcgKyAnc2hhcGUgYWxsIHJlcXVpcmUgYW4gYXJndW1lbnQpLicsIGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJywgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLCB0eXBlU3BlY05hbWUsIHR5cGVvZiBlcnJvcikgOiB2b2lkIDA7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcbiAgICAgICAgLy8gc2FtZSBlcnJvci5cbiAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcblxuICAgICAgICB2YXIgY29tcG9uZW50U3RhY2tJbmZvID0gJyc7XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoIVJlYWN0Q29tcG9uZW50VHJlZUhvb2spIHtcbiAgICAgICAgICAgIFJlYWN0Q29tcG9uZW50VHJlZUhvb2sgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9uZW50VHJlZUhvb2snKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGRlYnVnSUQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudFN0YWNrSW5mbyA9IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQoZGVidWdJRCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb21wb25lbnRTdGFja0luZm8gPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEN1cnJlbnRTdGFja0FkZGVuZHVtKGVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRmFpbGVkICVzIHR5cGU6ICVzJXMnLCBsb2NhdGlvbiwgZXJyb3IubWVzc2FnZSwgY29tcG9uZW50U3RhY2tJbmZvKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjaGVja1JlYWN0VHlwZVNwZWM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC9saWIvY2hlY2tSZWFjdFR5cGVTcGVjLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL1JlYWN0QmFzZUNsYXNzZXMnKSxcbiAgICBDb21wb25lbnQgPSBfcmVxdWlyZS5Db21wb25lbnQ7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpLFxuICAgIGlzVmFsaWRFbGVtZW50ID0gX3JlcXVpcmUyLmlzVmFsaWRFbGVtZW50O1xuXG52YXIgUmVhY3ROb29wVXBkYXRlUXVldWUgPSByZXF1aXJlKCcuL1JlYWN0Tm9vcFVwZGF0ZVF1ZXVlJyk7XG52YXIgZmFjdG9yeSA9IHJlcXVpcmUoJ2NyZWF0ZS1yZWFjdC1jbGFzcy9mYWN0b3J5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShDb21wb25lbnQsIGlzVmFsaWRFbGVtZW50LCBSZWFjdE5vb3BVcGRhdGVRdWV1ZSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWFjdC9saWIvY3JlYXRlQ2xhc3MuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIG5leHREZWJ1Z0lEID0gMTtcblxuZnVuY3Rpb24gZ2V0TmV4dERlYnVnSUQoKSB7XG4gIHJldHVybiBuZXh0RGVidWdJRCsrO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5leHREZWJ1Z0lEO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QvbGliL2dldE5leHREZWJ1Z0lELmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCBjaGlsZCBpbiBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4gYW5kIHZlcmlmaWVzIHRoYXQgdGhlcmVcbiAqIGlzIG9ubHkgb25lIGNoaWxkIGluIHRoZSBjb2xsZWN0aW9uLlxuICpcbiAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdC5jaGlsZHJlbi5vbmx5XG4gKlxuICogVGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgYSBzaW5nbGUgY2hpbGQgZ2V0c1xuICogcGFzc2VkIHdpdGhvdXQgYSB3cmFwcGVyLCBidXQgdGhlIHB1cnBvc2Ugb2YgdGhpcyBoZWxwZXIgZnVuY3Rpb24gaXMgdG9cbiAqIGFic3RyYWN0IGF3YXkgdGhlIHBhcnRpY3VsYXIgc3RydWN0dXJlIG9mIGNoaWxkcmVuLlxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gY2hpbGRyZW4gQ2hpbGQgY29sbGVjdGlvbiBzdHJ1Y3R1cmUuXG4gKiBAcmV0dXJuIHtSZWFjdEVsZW1lbnR9IFRoZSBmaXJzdCBhbmQgb25seSBgUmVhY3RFbGVtZW50YCBjb250YWluZWQgaW4gdGhlXG4gKiBzdHJ1Y3R1cmUuXG4gKi9cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICAhUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC4nKSA6IF9wcm9kSW52YXJpYW50KCcxNDMnKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9ubHlDaGlsZDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3JlYWN0L2xpYi9vbmx5Q2hpbGQuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudFN5bWJvbCcpO1xuXG52YXIgZ2V0SXRlcmF0b3JGbiA9IHJlcXVpcmUoJy4vZ2V0SXRlcmF0b3JGbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIEtleUVzY2FwZVV0aWxzID0gcmVxdWlyZSgnLi9LZXlFc2NhcGVVdGlscycpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBTRVBBUkFUT1IgPSAnLic7XG52YXIgU1VCU0VQQVJBVE9SID0gJzonO1xuXG4vKipcbiAqIFRoaXMgaXMgaW5saW5lZCBmcm9tIFJlYWN0RWxlbWVudCBzaW5jZSB0aGlzIGZpbGUgaXMgc2hhcmVkIGJldHdlZW5cbiAqIGlzb21vcnBoaWMgYW5kIHJlbmRlcmVycy4gV2UgY291bGQgZXh0cmFjdCB0aGlzIHRvIGFcbiAqXG4gKi9cblxuLyoqXG4gKiBUT0RPOiBUZXN0IHRoYXQgYSBzaW5nbGUgY2hpbGQgYW5kIGFuIGFycmF5IHdpdGggb25lIGl0ZW0gaGF2ZSB0aGUgc2FtZSBrZXlcbiAqIHBhdHRlcm4uXG4gKi9cblxudmFyIGRpZFdhcm5BYm91dE1hcHMgPSBmYWxzZTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGtleSBzdHJpbmcgdGhhdCBpZGVudGlmaWVzIGEgY29tcG9uZW50IHdpdGhpbiBhIHNldC5cbiAqXG4gKiBAcGFyYW0geyp9IGNvbXBvbmVudCBBIGNvbXBvbmVudCB0aGF0IGNvdWxkIGNvbnRhaW4gYSBtYW51YWwga2V5LlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IHRoYXQgaXMgdXNlZCBpZiBhIG1hbnVhbCBrZXkgaXMgbm90IHByb3ZpZGVkLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRDb21wb25lbnRLZXkoY29tcG9uZW50LCBpbmRleCkge1xuICAvLyBEbyBzb21lIHR5cGVjaGVja2luZyBoZXJlIHNpbmNlIHdlIGNhbGwgdGhpcyBibGluZGx5LiBXZSB3YW50IHRvIGVuc3VyZVxuICAvLyB0aGF0IHdlIGRvbid0IGJsb2NrIHBvdGVudGlhbCBmdXR1cmUgRVMgQVBJcy5cbiAgaWYgKGNvbXBvbmVudCAmJiB0eXBlb2YgY29tcG9uZW50ID09PSAnb2JqZWN0JyAmJiBjb21wb25lbnQua2V5ICE9IG51bGwpIHtcbiAgICAvLyBFeHBsaWNpdCBrZXlcbiAgICByZXR1cm4gS2V5RXNjYXBlVXRpbHMuZXNjYXBlKGNvbXBvbmVudC5rZXkpO1xuICB9XG4gIC8vIEltcGxpY2l0IGtleSBkZXRlcm1pbmVkIGJ5IHRoZSBpbmRleCBpbiB0aGUgc2V0XG4gIHJldHVybiBpbmRleC50b1N0cmluZygzNik7XG59XG5cbi8qKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0geyFzdHJpbmd9IG5hbWVTb0ZhciBOYW1lIG9mIHRoZSBrZXkgcGF0aCBzbyBmYXIuXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgdG8gaW52b2tlIHdpdGggZWFjaCBjaGlsZCBmb3VuZC5cbiAqIEBwYXJhbSB7Pyp9IHRyYXZlcnNlQ29udGV4dCBVc2VkIHRvIHBhc3MgaW5mb3JtYXRpb24gdGhyb3VnaG91dCB0aGUgdHJhdmVyc2FsXG4gKiBwcm9jZXNzLlxuICogQHJldHVybiB7IW51bWJlcn0gVGhlIG51bWJlciBvZiBjaGlsZHJlbiBpbiB0aGlzIHN1YnRyZWUuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkcmVuLCBuYW1lU29GYXIsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgY2hpbGRyZW47XG5cbiAgaWYgKHR5cGUgPT09ICd1bmRlZmluZWQnIHx8IHR5cGUgPT09ICdib29sZWFuJykge1xuICAgIC8vIEFsbCBvZiB0aGUgYWJvdmUgYXJlIHBlcmNlaXZlZCBhcyBudWxsLlxuICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgfVxuXG4gIGlmIChjaGlsZHJlbiA9PT0gbnVsbCB8fCB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlID09PSAnbnVtYmVyJyB8fFxuICAvLyBUaGUgZm9sbG93aW5nIGlzIGlubGluZWQgZnJvbSBSZWFjdEVsZW1lbnQuIFRoaXMgbWVhbnMgd2UgY2FuIG9wdGltaXplXG4gIC8vIHNvbWUgY2hlY2tzLiBSZWFjdCBGaWJlciBhbHNvIGlubGluZXMgdGhpcyBsb2dpYyBmb3Igc2ltaWxhciBwdXJwb3Nlcy5cbiAgdHlwZSA9PT0gJ29iamVjdCcgJiYgY2hpbGRyZW4uJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRSkge1xuICAgIGNhbGxiYWNrKHRyYXZlcnNlQ29udGV4dCwgY2hpbGRyZW4sXG4gICAgLy8gSWYgaXQncyB0aGUgb25seSBjaGlsZCwgdHJlYXQgdGhlIG5hbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gYW4gYXJyYXlcbiAgICAvLyBzbyB0aGF0IGl0J3MgY29uc2lzdGVudCBpZiB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIGdyb3dzLlxuICAgIG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGRyZW4sIDApIDogbmFtZVNvRmFyKTtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHZhciBjaGlsZDtcbiAgdmFyIG5leHROYW1lO1xuICB2YXIgc3VidHJlZUNvdW50ID0gMDsgLy8gQ291bnQgb2YgY2hpbGRyZW4gZm91bmQgaW4gdGhlIGN1cnJlbnQgc3VidHJlZS5cbiAgdmFyIG5leHROYW1lUHJlZml4ID0gbmFtZVNvRmFyID09PSAnJyA/IFNFUEFSQVRPUiA6IG5hbWVTb0ZhciArIFNVQlNFUEFSQVRPUjtcblxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIGdldENvbXBvbmVudEtleShjaGlsZCwgaSk7XG4gICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKGNoaWxkcmVuKTtcbiAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKGNoaWxkcmVuKTtcbiAgICAgIHZhciBzdGVwO1xuICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IGNoaWxkcmVuLmVudHJpZXMpIHtcbiAgICAgICAgdmFyIGlpID0gMDtcbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgIGNoaWxkID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkLCBpaSsrKTtcbiAgICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgbWFwc0FzQ2hpbGRyZW5BZGRlbmR1bSA9ICcnO1xuICAgICAgICAgIGlmIChSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgICAgICAgICB2YXIgbWFwc0FzQ2hpbGRyZW5Pd25lck5hbWUgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LmdldE5hbWUoKTtcbiAgICAgICAgICAgIGlmIChtYXBzQXNDaGlsZHJlbk93bmVyTmFtZSkge1xuICAgICAgICAgICAgICBtYXBzQXNDaGlsZHJlbkFkZGVuZHVtID0gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG1hcHNBc0NoaWxkcmVuT3duZXJOYW1lICsgJ2AuJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZGlkV2FybkFib3V0TWFwcywgJ1VzaW5nIE1hcHMgYXMgY2hpbGRyZW4gaXMgbm90IHlldCBmdWxseSBzdXBwb3J0ZWQuIEl0IGlzIGFuICcgKyAnZXhwZXJpbWVudGFsIGZlYXR1cmUgdGhhdCBtaWdodCBiZSByZW1vdmVkLiBDb252ZXJ0IGl0IHRvIGEgJyArICdzZXF1ZW5jZSAvIGl0ZXJhYmxlIG9mIGtleWVkIFJlYWN0RWxlbWVudHMgaW5zdGVhZC4lcycsIG1hcHNBc0NoaWxkcmVuQWRkZW5kdW0pIDogdm9pZCAwO1xuICAgICAgICAgIGRpZFdhcm5BYm91dE1hcHMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEl0ZXJhdG9yIHdpbGwgcHJvdmlkZSBlbnRyeSBbayx2XSB0dXBsZXMgcmF0aGVyIHRoYW4gdmFsdWVzLlxuICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgIGNoaWxkID0gZW50cnlbMV07XG4gICAgICAgICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgS2V5RXNjYXBlVXRpbHMuZXNjYXBlKGVudHJ5WzBdKSArIFNVQlNFUEFSQVRPUiArIGdldENvbXBvbmVudEtleShjaGlsZCwgMCk7XG4gICAgICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgYWRkZW5kdW0gPSAnJztcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGFkZGVuZHVtID0gJyBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5ICcgKyAnaW5zdGVhZCBvciB3cmFwIHRoZSBvYmplY3QgdXNpbmcgY3JlYXRlRnJhZ21lbnQob2JqZWN0KSBmcm9tIHRoZSAnICsgJ1JlYWN0IGFkZC1vbnMuJztcbiAgICAgICAgaWYgKGNoaWxkcmVuLl9pc1JlYWN0RWxlbWVudCkge1xuICAgICAgICAgIGFkZGVuZHVtID0gXCIgSXQgbG9va3MgbGlrZSB5b3UncmUgdXNpbmcgYW4gZWxlbWVudCBjcmVhdGVkIGJ5IGEgZGlmZmVyZW50IFwiICsgJ3ZlcnNpb24gb2YgUmVhY3QuIE1ha2Ugc3VyZSB0byB1c2Ugb25seSBvbmUgY29weSBvZiBSZWFjdC4nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgICAgICAgdmFyIG5hbWUgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LmdldE5hbWUoKTtcbiAgICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgICAgYWRkZW5kdW0gKz0gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGNoaWxkcmVuU3RyaW5nID0gU3RyaW5nKGNoaWxkcmVuKTtcbiAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6ICVzKS4lcycsIGNoaWxkcmVuU3RyaW5nID09PSAnW29iamVjdCBPYmplY3RdJyA/ICdvYmplY3Qgd2l0aCBrZXlzIHsnICsgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmpvaW4oJywgJykgKyAnfScgOiBjaGlsZHJlblN0cmluZywgYWRkZW5kdW0pIDogX3Byb2RJbnZhcmlhbnQoJzMxJywgY2hpbGRyZW5TdHJpbmcgPT09ICdbb2JqZWN0IE9iamVjdF0nID8gJ29iamVjdCB3aXRoIGtleXMgeycgKyBPYmplY3Qua2V5cyhjaGlsZHJlbikuam9pbignLCAnKSArICd9JyA6IGNoaWxkcmVuU3RyaW5nLCBhZGRlbmR1bSkgOiB2b2lkIDA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1YnRyZWVDb3VudDtcbn1cblxuLyoqXG4gKiBUcmF2ZXJzZXMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLCBidXRcbiAqIG1pZ2h0IGFsc28gYmUgc3BlY2lmaWVkIHRocm91Z2ggYXR0cmlidXRlczpcbiAqXG4gKiAtIGB0cmF2ZXJzZUFsbENoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4sIC4uLilgXG4gKiAtIGB0cmF2ZXJzZUFsbENoaWxkcmVuKHRoaXMucHJvcHMubGVmdFBhbmVsQ2hpbGRyZW4sIC4uLilgXG4gKlxuICogVGhlIGB0cmF2ZXJzZUNvbnRleHRgIGlzIGFuIG9wdGlvbmFsIGFyZ3VtZW50IHRoYXQgaXMgcGFzc2VkIHRocm91Z2ggdGhlXG4gKiBlbnRpcmUgdHJhdmVyc2FsLiBJdCBjYW4gYmUgdXNlZCB0byBzdG9yZSBhY2N1bXVsYXRpb25zIG9yIGFueXRoaW5nIGVsc2UgdGhhdFxuICogdGhlIGNhbGxiYWNrIG1pZ2h0IGZpbmQgcmVsZXZhbnQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBvYmplY3QuXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gY2FsbGJhY2sgVG8gaW52b2tlIHVwb24gdHJhdmVyc2luZyBlYWNoIGNoaWxkLlxuICogQHBhcmFtIHs/Kn0gdHJhdmVyc2VDb250ZXh0IENvbnRleHQgZm9yIHRyYXZlcnNhbC5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGRyZW4sICcnLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0cmF2ZXJzZUFsbENoaWxkcmVuO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVhY3QvbGliL3RyYXZlcnNlQWxsQ2hpbGRyZW4uanMiLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvKSB7XG4gIHZhciBmcm9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcblxuICB2YXIgdG9QYXJ0cyA9IHRvICYmIHRvLnNwbGl0KCcvJykgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSBmcm9tICYmIGZyb20uc3BsaXQoJy8nKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gdm9pZCAwO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcbiAgfWlmIChtdXN0RW5kQWJzICYmIGZyb21QYXJ0c1swXSAhPT0gJycgJiYgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSkpIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3Jlc29sdmUtcGF0aG5hbWUvaW5kZXguanMiLCIvKipcbiAqIFNWR0luamVjdG9yIHYxLjEuMyAtIEZhc3QsIGNhY2hpbmcsIGR5bmFtaWMgaW5saW5lIFNWRyBET00gaW5qZWN0aW9uIGxpYnJhcnlcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9pY29uaWMvU1ZHSW5qZWN0b3JcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNSBXYXlidXJ5IDxoZWxsb0B3YXlidXJ5LmNvbT5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbihmdW5jdGlvbiAod2luZG93LCBkb2N1bWVudCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBFbnZpcm9ubWVudFxuICB2YXIgaXNMb2NhbCA9IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2ZpbGU6JztcbiAgdmFyIGhhc1N2Z1N1cHBvcnQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCdodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcxMS9mZWF0dXJlI0Jhc2ljU3RydWN0dXJlJywgJzEuMScpO1xuXG4gIGZ1bmN0aW9uIHVuaXF1ZUNsYXNzZXMobGlzdCkge1xuICAgIGxpc3QgPSBsaXN0LnNwbGl0KCcgJyk7XG5cbiAgICB2YXIgaGFzaCA9IHt9O1xuICAgIHZhciBpID0gbGlzdC5sZW5ndGg7XG4gICAgdmFyIG91dCA9IFtdO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKCFoYXNoLmhhc093blByb3BlcnR5KGxpc3RbaV0pKSB7XG4gICAgICAgIGhhc2hbbGlzdFtpXV0gPSAxO1xuICAgICAgICBvdXQudW5zaGlmdChsaXN0W2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LmpvaW4oJyAnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBjYWNoZSAob3IgcG9seWZpbGwgZm9yIDw9IElFOCkgQXJyYXkuZm9yRWFjaCgpXG4gICAqIHNvdXJjZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZm9yRWFjaFxuICAgKi9cbiAgdmFyIGZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCB8fCBmdW5jdGlvbiAoZm4sIHNjb3BlKSB7XG4gICAgaWYgKHRoaXMgPT09IHZvaWQgMCB8fCB0aGlzID09PSBudWxsIHx8IHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgIH1cblxuICAgIC8qIGpzaGludCBiaXR3aXNlOiBmYWxzZSAqL1xuICAgIHZhciBpLCBsZW4gPSB0aGlzLmxlbmd0aCA+Pj4gMDtcbiAgICAvKiBqc2hpbnQgYml0d2lzZTogdHJ1ZSAqL1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBpZiAoaSBpbiB0aGlzKSB7XG4gICAgICAgIGZuLmNhbGwoc2NvcGUsIHRoaXNbaV0sIGksIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBTVkcgQ2FjaGVcbiAgdmFyIHN2Z0NhY2hlID0ge307XG5cbiAgdmFyIGluamVjdENvdW50ID0gMDtcbiAgdmFyIGluamVjdGVkRWxlbWVudHMgPSBbXTtcblxuICAvLyBSZXF1ZXN0IFF1ZXVlXG4gIHZhciByZXF1ZXN0UXVldWUgPSBbXTtcblxuICAvLyBTY3JpcHQgcnVubmluZyBzdGF0dXNcbiAgdmFyIHJhblNjcmlwdHMgPSB7fTtcblxuICB2YXIgY2xvbmVTdmcgPSBmdW5jdGlvbiAoc291cmNlU3ZnKSB7XG4gICAgcmV0dXJuIHNvdXJjZVN2Zy5jbG9uZU5vZGUodHJ1ZSk7XG4gIH07XG5cbiAgdmFyIHF1ZXVlUmVxdWVzdCA9IGZ1bmN0aW9uICh1cmwsIGNhbGxiYWNrKSB7XG4gICAgcmVxdWVzdFF1ZXVlW3VybF0gPSByZXF1ZXN0UXVldWVbdXJsXSB8fCBbXTtcbiAgICByZXF1ZXN0UXVldWVbdXJsXS5wdXNoKGNhbGxiYWNrKTtcbiAgfTtcblxuICB2YXIgcHJvY2Vzc1JlcXVlc3RRdWV1ZSA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcmVxdWVzdFF1ZXVlW3VybF0ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIC8vIE1ha2UgdGhlc2UgY2FsbHMgYXN5bmMgc28gd2UgYXZvaWQgYmxvY2tpbmcgdGhlIHBhZ2UvcmVuZGVyZXJcbiAgICAgIC8qIGpzaGludCBsb29wZnVuYzogdHJ1ZSAqL1xuICAgICAgKGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXF1ZXN0UXVldWVbdXJsXVtpbmRleF0oY2xvbmVTdmcoc3ZnQ2FjaGVbdXJsXSkpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH0pKGkpO1xuICAgICAgLyoganNoaW50IGxvb3BmdW5jOiBmYWxzZSAqL1xuICAgIH1cbiAgfTtcblxuICB2YXIgbG9hZFN2ZyA9IGZ1bmN0aW9uICh1cmwsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHN2Z0NhY2hlW3VybF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHN2Z0NhY2hlW3VybF0gaW5zdGFuY2VvZiBTVkdTVkdFbGVtZW50KSB7XG4gICAgICAgIC8vIFdlIGFscmVhZHkgaGF2ZSBpdCBpbiBjYWNoZSwgc28gdXNlIGl0XG4gICAgICAgIGNhbGxiYWNrKGNsb25lU3ZnKHN2Z0NhY2hlW3VybF0pKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyBXZSBkb24ndCBoYXZlIGl0IGluIGNhY2hlIHlldCwgYnV0IHdlIGFyZSBsb2FkaW5nIGl0LCBzbyBxdWV1ZSB0aGlzIHJlcXVlc3RcbiAgICAgICAgcXVldWVSZXF1ZXN0KHVybCwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcblxuICAgICAgaWYgKCF3aW5kb3cuWE1MSHR0cFJlcXVlc3QpIHtcbiAgICAgICAgY2FsbGJhY2soJ0Jyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCcpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIFNlZWQgdGhlIGNhY2hlIHRvIGluZGljYXRlIHdlIGFyZSBsb2FkaW5nIHRoaXMgVVJMIGFscmVhZHlcbiAgICAgIHN2Z0NhY2hlW3VybF0gPSB7fTtcbiAgICAgIHF1ZXVlUmVxdWVzdCh1cmwsIGNhbGxiYWNrKTtcblxuICAgICAgdmFyIGh0dHBSZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgIGh0dHBSZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gcmVhZHlTdGF0ZSA0ID0gY29tcGxldGVcbiAgICAgICAgaWYgKGh0dHBSZXF1ZXN0LnJlYWR5U3RhdGUgPT09IDQpIHtcblxuICAgICAgICAgIC8vIEhhbmRsZSBzdGF0dXNcbiAgICAgICAgICBpZiAoaHR0cFJlcXVlc3Quc3RhdHVzID09PSA0MDQgfHwgaHR0cFJlcXVlc3QucmVzcG9uc2VYTUwgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCdVbmFibGUgdG8gbG9hZCBTVkcgZmlsZTogJyArIHVybCk7XG5cbiAgICAgICAgICAgIGlmIChpc0xvY2FsKSBjYWxsYmFjaygnTm90ZTogU1ZHIGluamVjdGlvbiBhamF4IGNhbGxzIGRvIG5vdCB3b3JrIGxvY2FsbHkgd2l0aG91dCBhZGp1c3Rpbmcgc2VjdXJpdHkgc2V0dGluZyBpbiB5b3VyIGJyb3dzZXIuIE9yIGNvbnNpZGVyIHVzaW5nIGEgbG9jYWwgd2Vic2VydmVyLicpO1xuXG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIDIwMCBzdWNjZXNzIGZyb20gc2VydmVyLCBvciAwIHdoZW4gdXNpbmcgZmlsZTovLyBwcm90b2NvbCBsb2NhbGx5XG4gICAgICAgICAgaWYgKGh0dHBSZXF1ZXN0LnN0YXR1cyA9PT0gMjAwIHx8IChpc0xvY2FsICYmIGh0dHBSZXF1ZXN0LnN0YXR1cyA9PT0gMCkpIHtcblxuICAgICAgICAgICAgLyogZ2xvYmFscyBEb2N1bWVudCAqL1xuICAgICAgICAgICAgaWYgKGh0dHBSZXF1ZXN0LnJlc3BvbnNlWE1MIGluc3RhbmNlb2YgRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgLy8gQ2FjaGUgaXRcbiAgICAgICAgICAgICAgc3ZnQ2FjaGVbdXJsXSA9IGh0dHBSZXF1ZXN0LnJlc3BvbnNlWE1MLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIGdsb2JhbHMgLURvY3VtZW50ICovXG5cbiAgICAgICAgICAgIC8vIElFOSBkb2Vzbid0IGNyZWF0ZSBhIHJlc3BvbnNlWE1MIERvY3VtZW50IG9iamVjdCBmcm9tIGxvYWRlZCBTVkcsXG4gICAgICAgICAgICAvLyBhbmQgdGhyb3dzIGEgXCJET00gRXhjZXB0aW9uOiBISUVSQVJDSFlfUkVRVUVTVF9FUlIgKDMpXCIgZXJyb3Igd2hlbiBpbmplY3RlZC5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBTbywgd2UnbGwganVzdCBjcmVhdGUgb3VyIG93biBtYW51YWxseSB2aWEgdGhlIERPTVBhcnNlciB1c2luZ1xuICAgICAgICAgICAgLy8gdGhlIHRoZSByYXcgWE1MIHJlc3BvbnNlVGV4dC5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyA6Tk9URTogSUU4IGFuZCBvbGRlciBkb2Vzbid0IGhhdmUgRE9NUGFyc2VyLCBidXQgdGhleSBjYW4ndCBkbyBTVkcgZWl0aGVyLCBzby4uLlxuICAgICAgICAgICAgZWxzZSBpZiAoRE9NUGFyc2VyICYmIChET01QYXJzZXIgaW5zdGFuY2VvZiBGdW5jdGlvbikpIHtcbiAgICAgICAgICAgICAgdmFyIHhtbERvYztcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgICAgICAgICAgICAgIHhtbERvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoaHR0cFJlcXVlc3QucmVzcG9uc2VUZXh0LCAndGV4dC94bWwnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHhtbERvYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICgheG1sRG9jIHx8IHhtbERvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgncGFyc2VyZXJyb3InKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygnVW5hYmxlIHRvIHBhcnNlIFNWRyBmaWxlOiAnICsgdXJsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQ2FjaGUgaXRcbiAgICAgICAgICAgICAgICBzdmdDYWNoZVt1cmxdID0geG1sRG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXZSd2ZSBsb2FkZWQgYSBuZXcgYXNzZXQsIHNvIHByb2Nlc3MgYW55IHJlcXVlc3RzIHdhaXRpbmcgZm9yIGl0XG4gICAgICAgICAgICBwcm9jZXNzUmVxdWVzdFF1ZXVlKHVybCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2soJ1RoZXJlIHdhcyBhIHByb2JsZW0gaW5qZWN0aW5nIHRoZSBTVkc6ICcgKyBodHRwUmVxdWVzdC5zdGF0dXMgKyAnICcgKyBodHRwUmVxdWVzdC5zdGF0dXNUZXh0KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGh0dHBSZXF1ZXN0Lm9wZW4oJ0dFVCcsIHVybCk7XG5cbiAgICAgIC8vIFRyZWF0IGFuZCBwYXJzZSB0aGUgcmVzcG9uc2UgYXMgWE1MLCBldmVuIGlmIHRoZVxuICAgICAgLy8gc2VydmVyIHNlbmRzIHVzIGEgZGlmZmVyZW50IG1pbWV0eXBlXG4gICAgICBpZiAoaHR0cFJlcXVlc3Qub3ZlcnJpZGVNaW1lVHlwZSkgaHR0cFJlcXVlc3Qub3ZlcnJpZGVNaW1lVHlwZSgndGV4dC94bWwnKTtcblxuICAgICAgaHR0cFJlcXVlc3Quc2VuZCgpO1xuICAgIH1cbiAgfTtcblxuICAvLyBJbmplY3QgYSBzaW5nbGUgZWxlbWVudFxuICB2YXIgaW5qZWN0RWxlbWVudCA9IGZ1bmN0aW9uIChlbCwgZXZhbFNjcmlwdHMsIHBuZ0ZhbGxiYWNrLCBjYWxsYmFjaykge1xuXG4gICAgLy8gR3JhYiB0aGUgc3JjIG9yIGRhdGEtc3JjIGF0dHJpYnV0ZVxuICAgIHZhciBpbWdVcmwgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3JjJykgfHwgZWwuZ2V0QXR0cmlidXRlKCdzcmMnKTtcblxuICAgIC8vIFdlIGNhbiBvbmx5IGluamVjdCBTVkdcbiAgICBpZiAoISgvXFwuc3ZnL2kpLnRlc3QoaW1nVXJsKSkge1xuICAgICAgY2FsbGJhY2soJ0F0dGVtcHRlZCB0byBpbmplY3QgYSBmaWxlIHdpdGggYSBub24tc3ZnIGV4dGVuc2lvbjogJyArIGltZ1VybCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBTVkcgc3VwcG9ydCB0cnkgdG8gZmFsbCBiYWNrIHRvIGEgcG5nLFxuICAgIC8vIGVpdGhlciBkZWZpbmVkIHBlci1lbGVtZW50IHZpYSBkYXRhLWZhbGxiYWNrIG9yIGRhdGEtcG5nLFxuICAgIC8vIG9yIGdsb2JhbGx5IHZpYSB0aGUgcG5nRmFsbGJhY2sgZGlyZWN0b3J5IHNldHRpbmdcbiAgICBpZiAoIWhhc1N2Z1N1cHBvcnQpIHtcbiAgICAgIHZhciBwZXJFbGVtZW50RmFsbGJhY2sgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmFsbGJhY2snKSB8fCBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcG5nJyk7XG5cbiAgICAgIC8vIFBlci1lbGVtZW50IHNwZWNpZmljIFBORyBmYWxsYmFjayBkZWZpbmVkLCBzbyB1c2UgdGhhdFxuICAgICAgaWYgKHBlckVsZW1lbnRGYWxsYmFjaykge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3NyYycsIHBlckVsZW1lbnRGYWxsYmFjayk7XG4gICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgfVxuICAgICAgLy8gR2xvYmFsIFBORyBmYWxsYmFjayBkaXJlY3Rvcml5IGRlZmluZWQsIHVzZSB0aGUgc2FtZS1uYW1lZCBQTkdcbiAgICAgIGVsc2UgaWYgKHBuZ0ZhbGxiYWNrKSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnc3JjJywgcG5nRmFsbGJhY2sgKyAnLycgKyBpbWdVcmwuc3BsaXQoJy8nKS5wb3AoKS5yZXBsYWNlKCcuc3ZnJywgJy5wbmcnKSk7XG4gICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgfVxuICAgICAgLy8gdW0uLi5cbiAgICAgIGVsc2Uge1xuICAgICAgICBjYWxsYmFjaygnVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgU1ZHIGFuZCBubyBQTkcgZmFsbGJhY2sgd2FzIGRlZmluZWQuJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBNYWtlIHN1cmUgd2UgYXJlbid0IGFscmVhZHkgaW4gdGhlIHByb2Nlc3Mgb2YgaW5qZWN0aW5nIHRoaXMgZWxlbWVudCB0b1xuICAgIC8vIGF2b2lkIGEgcmFjZSBjb25kaXRpb24gaWYgbXVsdGlwbGUgaW5qZWN0aW9ucyBmb3IgdGhlIHNhbWUgZWxlbWVudCBhcmUgcnVuLlxuICAgIC8vIDpOT1RFOiBVc2luZyBpbmRleE9mKCkgb25seSBfYWZ0ZXJfIHdlIGNoZWNrIGZvciBTVkcgc3VwcG9ydCBhbmQgYmFpbCxcbiAgICAvLyBzbyBubyBuZWVkIGZvciBJRTggaW5kZXhPZigpIHBvbHlmaWxsXG4gICAgaWYgKGluamVjdGVkRWxlbWVudHMuaW5kZXhPZihlbCkgIT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUmVtZW1iZXIgdGhlIHJlcXVlc3QgdG8gaW5qZWN0IHRoaXMgZWxlbWVudCwgaW4gY2FzZSBvdGhlciBpbmplY3Rpb25cbiAgICAvLyBjYWxscyBhcmUgYWxzbyB0cnlpbmcgdG8gcmVwbGFjZSB0aGlzIGVsZW1lbnQgYmVmb3JlIHdlIGZpbmlzaFxuICAgIGluamVjdGVkRWxlbWVudHMucHVzaChlbCk7XG5cbiAgICAvLyBUcnkgdG8gYXZvaWQgbG9hZGluZyB0aGUgb3JnaW5hbCBpbWFnZSBzcmMgaWYgcG9zc2libGUuXG4gICAgZWwuc2V0QXR0cmlidXRlKCdzcmMnLCAnJyk7XG5cbiAgICAvLyBMb2FkIGl0IHVwXG4gICAgbG9hZFN2ZyhpbWdVcmwsIGZ1bmN0aW9uIChzdmcpIHtcblxuICAgICAgaWYgKHR5cGVvZiBzdmcgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBzdmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNhbGxiYWNrKHN2Zyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGltZ0lkID0gZWwuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgaWYgKGltZ0lkKSB7XG4gICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ2lkJywgaW1nSWQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW1nVGl0bGUgPSBlbC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyk7XG4gICAgICBpZiAoaW1nVGl0bGUpIHtcbiAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZSgndGl0bGUnLCBpbWdUaXRsZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIENvbmNhdCB0aGUgU1ZHIGNsYXNzZXMgKyAnaW5qZWN0ZWQtc3ZnJyArIHRoZSBpbWcgY2xhc3Nlc1xuICAgICAgdmFyIGNsYXNzTWVyZ2UgPSBbXS5jb25jYXQoc3ZnLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCBbXSwgJ2luamVjdGVkLXN2ZycsIGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCBbXSkuam9pbignICcpO1xuICAgICAgc3ZnLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB1bmlxdWVDbGFzc2VzKGNsYXNzTWVyZ2UpKTtcblxuICAgICAgdmFyIGltZ1N0eWxlID0gZWwuZ2V0QXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgaWYgKGltZ1N0eWxlKSB7XG4gICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgaW1nU3R5bGUpO1xuICAgICAgfVxuXG4gICAgICAvLyBDb3B5IGFsbCB0aGUgZGF0YSBlbGVtZW50cyB0byB0aGUgc3ZnXG4gICAgICB2YXIgaW1nRGF0YSA9IFtdLmZpbHRlci5jYWxsKGVsLmF0dHJpYnV0ZXMsIGZ1bmN0aW9uIChhdCkge1xuICAgICAgICByZXR1cm4gKC9eZGF0YS1cXHdbXFx3XFwtXSokLykudGVzdChhdC5uYW1lKTtcbiAgICAgIH0pO1xuICAgICAgZm9yRWFjaC5jYWxsKGltZ0RhdGEsIGZ1bmN0aW9uIChkYXRhQXR0cikge1xuICAgICAgICBpZiAoZGF0YUF0dHIubmFtZSAmJiBkYXRhQXR0ci52YWx1ZSkge1xuICAgICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoZGF0YUF0dHIubmFtZSwgZGF0YUF0dHIudmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gTWFrZSBzdXJlIGFueSBpbnRlcm5hbGx5IHJlZmVyZW5jZWQgY2xpcFBhdGggaWRzIGFuZCB0aGVpclxuICAgICAgLy8gY2xpcC1wYXRoIHJlZmVyZW5jZXMgYXJlIHVuaXF1ZS5cbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGFkZHJlc3NlcyB0aGUgaXNzdWUgb2YgaGF2aW5nIG11bHRpcGxlIGluc3RhbmNlcyBvZiB0aGVcbiAgICAgIC8vIHNhbWUgU1ZHIG9uIGEgcGFnZSBhbmQgb25seSB0aGUgZmlyc3QgY2xpcFBhdGggaWQgaXMgcmVmZXJlbmNlZC5cbiAgICAgIC8vXG4gICAgICAvLyBCcm93c2VycyBvZnRlbiBzaG9ydGN1dCB0aGUgU1ZHIFNwZWMgYW5kIGRvbid0IHVzZSBjbGlwUGF0aHNcbiAgICAgIC8vIGNvbnRhaW5lZCBpbiBwYXJlbnQgZWxlbWVudHMgdGhhdCBhcmUgaGlkZGVuLCBzbyBpZiB5b3UgaGlkZSB0aGUgZmlyc3RcbiAgICAgIC8vIFNWRyBpbnN0YW5jZSBvbiB0aGUgcGFnZSwgdGhlbiBhbGwgb3RoZXIgaW5zdGFuY2VzIGxvc2UgdGhlaXIgY2xpcHBpbmcuXG4gICAgICAvLyBSZWZlcmVuY2U6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTM3NjAyN1xuXG4gICAgICAvLyBIYW5kbGUgYWxsIGRlZnMgZWxlbWVudHMgdGhhdCBoYXZlIGlyaSBjYXBhYmxlIGF0dHJpYnV0ZXMgYXMgZGVmaW5lZCBieSB3M2M6IGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9saW5raW5nLmh0bWwjcHJvY2Vzc2luZ0lSSVxuICAgICAgLy8gTWFwcGluZyBJUkkgYWRkcmVzc2FibGUgZWxlbWVudHMgdG8gdGhlIHByb3BlcnRpZXMgdGhhdCBjYW4gcmVmZXJlbmNlIHRoZW06XG4gICAgICB2YXIgaXJpRWxlbWVudHNBbmRQcm9wZXJ0aWVzID0ge1xuICAgICAgICAnY2xpcFBhdGgnOiBbJ2NsaXAtcGF0aCddLFxuICAgICAgICAnY29sb3ItcHJvZmlsZSc6IFsnY29sb3ItcHJvZmlsZSddLFxuICAgICAgICAnY3Vyc29yJzogWydjdXJzb3InXSxcbiAgICAgICAgJ2ZpbHRlcic6IFsnZmlsdGVyJ10sXG4gICAgICAgICdsaW5lYXJHcmFkaWVudCc6IFsnZmlsbCcsICdzdHJva2UnXSxcbiAgICAgICAgJ21hcmtlcic6IFsnbWFya2VyJywgJ21hcmtlci1zdGFydCcsICdtYXJrZXItbWlkJywgJ21hcmtlci1lbmQnXSxcbiAgICAgICAgJ21hc2snOiBbJ21hc2snXSxcbiAgICAgICAgJ3BhdHRlcm4nOiBbJ2ZpbGwnLCAnc3Ryb2tlJ10sXG4gICAgICAgICdyYWRpYWxHcmFkaWVudCc6IFsnZmlsbCcsICdzdHJva2UnXVxuICAgICAgfTtcblxuICAgICAgdmFyIGVsZW1lbnQsIGVsZW1lbnREZWZzLCBwcm9wZXJ0aWVzLCBjdXJyZW50SWQsIG5ld0lkO1xuICAgICAgT2JqZWN0LmtleXMoaXJpRWxlbWVudHNBbmRQcm9wZXJ0aWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgZWxlbWVudCA9IGtleTtcbiAgICAgICAgcHJvcGVydGllcyA9IGlyaUVsZW1lbnRzQW5kUHJvcGVydGllc1trZXldO1xuXG4gICAgICAgIGVsZW1lbnREZWZzID0gc3ZnLnF1ZXJ5U2VsZWN0b3JBbGwoJ2RlZnMgJyArIGVsZW1lbnQgKyAnW2lkXScpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgZWxlbWVudHNMZW4gPSBlbGVtZW50RGVmcy5sZW5ndGg7IGkgPCBlbGVtZW50c0xlbjsgaSsrKSB7XG4gICAgICAgICAgY3VycmVudElkID0gZWxlbWVudERlZnNbaV0uaWQ7XG4gICAgICAgICAgbmV3SWQgPSBjdXJyZW50SWQgKyAnLScgKyBpbmplY3RDb3VudDtcblxuICAgICAgICAgIC8vIEFsbCBvZiB0aGUgcHJvcGVydGllcyB0aGF0IGNhbiByZWZlcmVuY2UgdGhpcyBlbGVtZW50IHR5cGVcbiAgICAgICAgICB2YXIgcmVmZXJlbmNpbmdFbGVtZW50cztcbiAgICAgICAgICBmb3JFYWNoLmNhbGwocHJvcGVydGllcywgZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAvLyA6Tk9URTogdXNpbmcgYSBzdWJzdHJpbmcgbWF0Y2ggYXR0ciBzZWxlY3RvciBoZXJlIHRvIGRlYWwgd2l0aCBJRSBcImFkZGluZyBleHRyYSBxdW90ZXMgaW4gdXJsKCkgYXR0cnNcIlxuICAgICAgICAgICAgcmVmZXJlbmNpbmdFbGVtZW50cyA9IHN2Zy5xdWVyeVNlbGVjdG9yQWxsKCdbJyArIHByb3BlcnR5ICsgJyo9XCInICsgY3VycmVudElkICsgJ1wiXScpO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIHJlZmVyZW5jaW5nRWxlbWVudExlbiA9IHJlZmVyZW5jaW5nRWxlbWVudHMubGVuZ3RoOyBqIDwgcmVmZXJlbmNpbmdFbGVtZW50TGVuOyBqKyspIHtcbiAgICAgICAgICAgICAgcmVmZXJlbmNpbmdFbGVtZW50c1tqXS5zZXRBdHRyaWJ1dGUocHJvcGVydHksICd1cmwoIycgKyBuZXdJZCArICcpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBlbGVtZW50RGVmc1tpXS5pZCA9IG5ld0lkO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gUmVtb3ZlIGFueSB1bndhbnRlZC9pbnZhbGlkIG5hbWVzcGFjZXMgdGhhdCBtaWdodCBoYXZlIGJlZW4gYWRkZWQgYnkgU1ZHIGVkaXRpbmcgdG9vbHNcbiAgICAgIHN2Zy5yZW1vdmVBdHRyaWJ1dGUoJ3htbG5zOmEnKTtcblxuICAgICAgLy8gUG9zdCBwYWdlIGxvYWQgaW5qZWN0ZWQgU1ZHcyBkb24ndCBhdXRvbWF0aWNhbGx5IGhhdmUgdGhlaXIgc2NyaXB0XG4gICAgICAvLyBlbGVtZW50cyBydW4sIHNvIHdlJ2xsIG5lZWQgdG8gbWFrZSB0aGF0IGhhcHBlbiwgaWYgcmVxdWVzdGVkXG5cbiAgICAgIC8vIEZpbmQgdGhlbiBwcnVuZSB0aGUgc2NyaXB0c1xuICAgICAgdmFyIHNjcmlwdHMgPSBzdmcucXVlcnlTZWxlY3RvckFsbCgnc2NyaXB0Jyk7XG4gICAgICB2YXIgc2NyaXB0c1RvRXZhbCA9IFtdO1xuICAgICAgdmFyIHNjcmlwdCwgc2NyaXB0VHlwZTtcblxuICAgICAgZm9yICh2YXIgayA9IDAsIHNjcmlwdHNMZW4gPSBzY3JpcHRzLmxlbmd0aDsgayA8IHNjcmlwdHNMZW47IGsrKykge1xuICAgICAgICBzY3JpcHRUeXBlID0gc2NyaXB0c1trXS5nZXRBdHRyaWJ1dGUoJ3R5cGUnKTtcblxuICAgICAgICAvLyBPbmx5IHByb2Nlc3MgamF2YXNjcmlwdCB0eXBlcy5cbiAgICAgICAgLy8gU1ZHIGRlZmF1bHRzIHRvICdhcHBsaWNhdGlvbi9lY21hc2NyaXB0JyBmb3IgdW5zZXQgdHlwZXNcbiAgICAgICAgaWYgKCFzY3JpcHRUeXBlIHx8IHNjcmlwdFR5cGUgPT09ICdhcHBsaWNhdGlvbi9lY21hc2NyaXB0JyB8fCBzY3JpcHRUeXBlID09PSAnYXBwbGljYXRpb24vamF2YXNjcmlwdCcpIHtcblxuICAgICAgICAgIC8vIGlubmVyVGV4dCBmb3IgSUUsIHRleHRDb250ZW50IGZvciBvdGhlciBicm93c2Vyc1xuICAgICAgICAgIHNjcmlwdCA9IHNjcmlwdHNba10uaW5uZXJUZXh0IHx8IHNjcmlwdHNba10udGV4dENvbnRlbnQ7XG5cbiAgICAgICAgICAvLyBTdGFzaFxuICAgICAgICAgIHNjcmlwdHNUb0V2YWwucHVzaChzY3JpcHQpO1xuXG4gICAgICAgICAgLy8gVGlkeSB1cCBhbmQgcmVtb3ZlIHRoZSBzY3JpcHQgZWxlbWVudCBzaW5jZSB3ZSBkb24ndCBuZWVkIGl0IGFueW1vcmVcbiAgICAgICAgICBzdmcucmVtb3ZlQ2hpbGQoc2NyaXB0c1trXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUnVuL0V2YWwgdGhlIHNjcmlwdHMgaWYgbmVlZGVkXG4gICAgICBpZiAoc2NyaXB0c1RvRXZhbC5sZW5ndGggPiAwICYmIChldmFsU2NyaXB0cyA9PT0gJ2Fsd2F5cycgfHwgKGV2YWxTY3JpcHRzID09PSAnb25jZScgJiYgIXJhblNjcmlwdHNbaW1nVXJsXSkpKSB7XG4gICAgICAgIGZvciAodmFyIGwgPSAwLCBzY3JpcHRzVG9FdmFsTGVuID0gc2NyaXB0c1RvRXZhbC5sZW5ndGg7IGwgPCBzY3JpcHRzVG9FdmFsTGVuOyBsKyspIHtcblxuICAgICAgICAgIC8vIDpOT1RFOiBZdXAsIHRoaXMgaXMgYSBmb3JtIG9mIGV2YWwsIGJ1dCBpdCBpcyBiZWluZyB1c2VkIHRvIGV2YWwgY29kZVxuICAgICAgICAgIC8vIHRoZSBjYWxsZXIgaGFzIGV4cGxpY3RlbHkgYXNrZWQgdG8gYmUgbG9hZGVkLCBhbmQgdGhlIGNvZGUgaXMgaW4gYSBjYWxsZXJcbiAgICAgICAgICAvLyBkZWZpbmVkIFNWRyBmaWxlLi4uIG5vdCByYXcgdXNlciBpbnB1dC5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIEFsc28sIHRoZSBjb2RlIGlzIGV2YWx1YXRlZCBpbiBhIGNsb3N1cmUgYW5kIG5vdCBpbiB0aGUgZ2xvYmFsIHNjb3BlLlxuICAgICAgICAgIC8vIElmIHlvdSBuZWVkIHRvIHB1dCBzb21ldGhpbmcgaW4gZ2xvYmFsIHNjb3BlLCB1c2UgJ3dpbmRvdydcbiAgICAgICAgICBuZXcgRnVuY3Rpb24oc2NyaXB0c1RvRXZhbFtsXSkod2luZG93KTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1lbWJlciB3ZSBhbHJlYWR5IHJhbiBzY3JpcHRzIGZvciB0aGlzIHN2Z1xuICAgICAgICByYW5TY3JpcHRzW2ltZ1VybF0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyA6V09SS0FST1VORDpcbiAgICAgIC8vIElFIGRvZXNuJ3QgZXZhbHVhdGUgPHN0eWxlPiB0YWdzIGluIFNWR3MgdGhhdCBhcmUgZHluYW1pY2FsbHkgYWRkZWQgdG8gdGhlIHBhZ2UuXG4gICAgICAvLyBUaGlzIHRyaWNrIHdpbGwgdHJpZ2dlciBJRSB0byByZWFkIGFuZCB1c2UgYW55IGV4aXN0aW5nIFNWRyA8c3R5bGU+IHRhZ3MuXG4gICAgICAvL1xuICAgICAgLy8gUmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vaWNvbmljL1NWR0luamVjdG9yL2lzc3Vlcy8yM1xuICAgICAgdmFyIHN0eWxlVGFncyA9IHN2Zy5xdWVyeVNlbGVjdG9yQWxsKCdzdHlsZScpO1xuICAgICAgZm9yRWFjaC5jYWxsKHN0eWxlVGFncywgZnVuY3Rpb24gKHN0eWxlVGFnKSB7XG4gICAgICAgIHN0eWxlVGFnLnRleHRDb250ZW50ICs9ICcnO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFJlcGxhY2UgdGhlIGltYWdlIHdpdGggdGhlIHN2Z1xuICAgICAgZWwucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoc3ZnLCBlbCk7XG5cbiAgICAgIC8vIE5vdyB0aGF0IHdlIG5vIGxvbmdlciBuZWVkIGl0LCBkcm9wIHJlZmVyZW5jZXNcbiAgICAgIC8vIHRvIHRoZSBvcmlnaW5hbCBlbGVtZW50IHNvIGl0IGNhbiBiZSBHQydkXG4gICAgICBkZWxldGUgaW5qZWN0ZWRFbGVtZW50c1tpbmplY3RlZEVsZW1lbnRzLmluZGV4T2YoZWwpXTtcbiAgICAgIGVsID0gbnVsbDtcblxuICAgICAgLy8gSW5jcmVtZW50IHRoZSBpbmplY3RlZCBjb3VudFxuICAgICAgaW5qZWN0Q291bnQrKztcblxuICAgICAgY2FsbGJhY2soc3ZnKTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogU1ZHSW5qZWN0b3JcbiAgICpcbiAgICogUmVwbGFjZSB0aGUgZ2l2ZW4gZWxlbWVudHMgd2l0aCB0aGVpciBmdWxsIGlubGluZSBTVkcgRE9NIGVsZW1lbnRzLlxuICAgKlxuICAgKiA6Tk9URTogV2UgYXJlIHVzaW5nIGdldC9zZXRBdHRyaWJ1dGUgd2l0aCBTVkcgYmVjYXVzZSB0aGUgU1ZHIERPTSBzcGVjIGRpZmZlcnMgZnJvbSBIVE1MIERPTSBhbmRcbiAgICogY2FuIHJldHVybiBvdGhlciB1bmV4cGVjdGVkIG9iamVjdCB0eXBlcyB3aGVuIHRyeWluZyB0byBkaXJlY3RseSBhY2Nlc3Mgc3ZnIHByb3BlcnRpZXMuXG4gICAqIGV4OiBcImNsYXNzTmFtZVwiIHJldHVybnMgYSBTVkdBbmltYXRlZFN0cmluZyB3aXRoIHRoZSBjbGFzcyB2YWx1ZSBmb3VuZCBpbiB0aGUgXCJiYXNlVmFsXCIgcHJvcGVydHksXG4gICAqIGluc3RlYWQgb2Ygc2ltcGxlIHN0cmluZyBsaWtlIHdpdGggSFRNTCBFbGVtZW50cy5cbiAgICpcbiAgICogQHBhcmFtIHttaXhlc30gQXJyYXkgb2Ygb3Igc2luZ2xlIERPTSBlbGVtZW50XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAqIEByZXR1cm4ge29iamVjdH0gSW5zdGFuY2Ugb2YgU1ZHSW5qZWN0b3JcbiAgICovXG4gIHZhciBTVkdJbmplY3RvciA9IGZ1bmN0aW9uIChlbGVtZW50cywgb3B0aW9ucywgZG9uZSkge1xuXG4gICAgLy8gT3B0aW9ucyAmIGRlZmF1bHRzXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAvLyBTaG91bGQgd2UgcnVuIHRoZSBzY3JpcHRzIGJsb2NrcyBmb3VuZCBpbiB0aGUgU1ZHXG4gICAgLy8gJ2Fsd2F5cycgLSBSdW4gdGhlbSBldmVyeSB0aW1lXG4gICAgLy8gJ29uY2UnIC0gT25seSBydW4gc2NyaXB0cyBvbmNlIGZvciBlYWNoIFNWR1xuICAgIC8vIFtmYWxzZXwnbmV2ZXInXSAtIElnbm9yZSBzY3JpcHRzXG4gICAgdmFyIGV2YWxTY3JpcHRzID0gb3B0aW9ucy5ldmFsU2NyaXB0cyB8fCAnYWx3YXlzJztcblxuICAgIC8vIExvY2F0aW9uIG9mIGZhbGxiYWNrIHBuZ3MsIGlmIGRlc2lyZWRcbiAgICB2YXIgcG5nRmFsbGJhY2sgPSBvcHRpb25zLnBuZ0ZhbGxiYWNrIHx8IGZhbHNlO1xuXG4gICAgLy8gQ2FsbGJhY2sgdG8gcnVuIGR1cmluZyBlYWNoIFNWRyBpbmplY3Rpb24sIHJldHVybmluZyB0aGUgU1ZHIGluamVjdGVkXG4gICAgdmFyIGVhY2hDYWxsYmFjayA9IG9wdGlvbnMuZWFjaDtcblxuICAgIC8vIERvIHRoZSBpbmplY3Rpb24uLi5cbiAgICBpZiAoZWxlbWVudHMubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBlbGVtZW50c0xvYWRlZCA9IDA7XG4gICAgICBmb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIGluamVjdEVsZW1lbnQoZWxlbWVudCwgZXZhbFNjcmlwdHMsIHBuZ0ZhbGxiYWNrLCBmdW5jdGlvbiAoc3ZnKSB7XG4gICAgICAgICAgaWYgKGVhY2hDYWxsYmFjayAmJiB0eXBlb2YgZWFjaENhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBlYWNoQ2FsbGJhY2soc3ZnKTtcbiAgICAgICAgICBpZiAoZG9uZSAmJiBlbGVtZW50cy5sZW5ndGggPT09ICsrZWxlbWVudHNMb2FkZWQpIGRvbmUoZWxlbWVudHNMb2FkZWQpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmIChlbGVtZW50cykge1xuICAgICAgICBpbmplY3RFbGVtZW50KGVsZW1lbnRzLCBldmFsU2NyaXB0cywgcG5nRmFsbGJhY2ssIGZ1bmN0aW9uIChzdmcpIHtcbiAgICAgICAgICBpZiAoZWFjaENhbGxiYWNrICYmIHR5cGVvZiBlYWNoQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGVhY2hDYWxsYmFjayhzdmcpO1xuICAgICAgICAgIGlmIChkb25lKSBkb25lKDEpO1xuICAgICAgICAgIGVsZW1lbnRzID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKGRvbmUpIGRvbmUoMCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qIGdsb2JhbCBtb2R1bGUsIGV4cG9ydHM6IHRydWUsIGRlZmluZSAqL1xuICAvLyBOb2RlLmpzIG9yIENvbW1vbkpTXG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gU1ZHSW5qZWN0b3I7XG4gIH1cbiAgLy8gQU1EIHN1cHBvcnRcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBTVkdJbmplY3RvcjtcbiAgICB9KTtcbiAgfVxuICAvLyBPdGhlcndpc2UsIGF0dGFjaCB0byB3aW5kb3cgYXMgZ2xvYmFsXG4gIGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSB7XG4gICAgd2luZG93LlNWR0luamVjdG9yID0gU1ZHSW5qZWN0b3I7XG4gIH1cbiAgLyogZ2xvYmFsIC1tb2R1bGUsIC1leHBvcnRzLCAtZGVmaW5lICovXG5cbn0od2luZG93LCBkb2N1bWVudCkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zdmctaW5qZWN0b3Ivc3ZnLWluamVjdG9yLmpzIiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoY29uZGl0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbmZ1bmN0aW9uIHdhcm5pbmcoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmICghaXNQcm9kdWN0aW9uKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0ZXh0ID0gXCJXYXJuaW5nOiBcIiArIG1lc3NhZ2U7XG5cbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLndhcm4odGV4dCk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHRocm93IEVycm9yKHRleHQpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgd2FybmluZztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vdGlueS13YXJuaW5nL2Rpc3QvdGlueS13YXJuaW5nLmVzbS5qcyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYVR5cGUgPSB0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYSk7XG4gIHZhciBiVHlwZSA9IHR5cGVvZiBiID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihiKTtcblxuICBpZiAoYVR5cGUgIT09IGJUeXBlKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGFUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSBhLnZhbHVlT2YoKTtcbiAgICB2YXIgYlZhbHVlID0gYi52YWx1ZU9mKCk7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG5cbiAgICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBhS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi92YWx1ZS1lcXVhbC9pbmRleC5qcyIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuXHR0aHJvdyBuZXcgRXJyb3IoXCJkZWZpbmUgY2Fubm90IGJlIHVzZWQgaW5kaXJlY3RcIik7XHJcbn07XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2FtZC1kZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDM2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9